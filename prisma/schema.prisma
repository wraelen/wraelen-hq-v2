// prisma/schema.prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb" // Switched from postgresql to match your URI
  url      = env("DATABASE_URL")
}

enum Role {
  NOVICE
  ELITE
  ADMIN
}

// Added: Enum for type-safety on gamified roles (novice -> elite progression); defaults to NOVICE

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  username  String    @unique
  password  String // Hashed; we'll manage via bcrypt in routes
  role      Role      @default(NOVICE) // Updated: Use enum for gamified roles
  email     String?   @unique
  points    Int       @default(0) // XP for quests (e.g., +10 per lead imported)
  badges    String[]  @default([]) // Achievements like "Lead Hunter" unlocked at thresholds
  leads     Lead[] // One-to-many relation: Reps own their scraped leads
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[] // Added: Opposite relation for Account model (required for Prisma validation on relations; links auth accounts to User without impacting existing code)
  sessions  Session[] // Added: Opposite relation for Session model (required for Prisma validation on relations; links sessions to User without impacting existing code)
  Quest     Quest[]
}

model Quest {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  type          String // e.g., "SCRAPE_ZILLOW", "LOG_CALL"
  userId        String   @db.ObjectId
  leadId        String?  @db.ObjectId
  pointsAwarded Int
  completedAt   DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
  lead          Lead?    @relation(fields: [leadId], references: [id])

  @@index([userId, completedAt]) // Added: For rep quest history/leaderboards (sort by time/points)
}

model Lead {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  address      String
  price        String
  beds         String
  baths        String
  sqFt         String
  type         String   @default("Single Family")
  daysOnMarket String
  realtorName  String
  realtorPhone String   @default("Contact for phone")
  photo        String
  url          String   @unique // Added: Prevents dupe scrapes, enables efficient lookups/upserts
  score        Int      @default(0) // Auto-calculated value (e.g., high-price leads = bonus XP)
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now()) // Added: Track when scraped for sorting/aging
  updatedAt    DateTime @updatedAt // Added: For updates (e.g., rescan price changes)
  Quest        Quest[]

  @@index([userId]) // Added: Speed up per-rep queries (dashboard/leads list)
  @@index([score]) // Added: For sorts on high-value leads (leaderboards/bonuses)
}

// Added: Account model for Auth.js Prisma adapter (required for user creation/linking on login/register; handles OAuth/credentials providers)
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Added: Session model for Auth.js Prisma adapter (required for session management; ties to User for extending with points/badges/role; fixed syntax by properly defining fields)
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
