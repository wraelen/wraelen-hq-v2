// prisma/schema.prisma – Supabase handles auth.users; Prisma for custom gamification data (relational for efficient queries like leaderboards)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // References .env var – fixes your error; keeps creds secure
}

model Profile {
  id     String   @id @default(uuid()) @db.Uuid // UUID for direct linking to Supabase user_id (best practice for relations)
  userId String   @unique @db.Uuid // Foreign key to supabase_auth.user_id (enforces 1:1)
  role   String   @default("Novice") // Gamified: Update on point milestones (e.g., >1000 points → "Apprentice")
  points Int      @default(0) // Increment server-side on quest completion (e.g., Zillow scrape validates → +50)
  badges String[] @default([]) // Store as array; queryable for badges leaderboard (e.g., most unique badges)
  // Expand later: e.g., quests Quest[] @relation("AssignedQuests") for user-quest links
  Quest  Quest[]

  @@index([points(desc)]) // Index for fast sorting on leaderboards (no-brainer optimization for your peer challenges)
}

// Optional: Add Quest model now for future-proofing (ties into your scraping/calls vision)
model Quest {
  id          String  @id @default(uuid()) @db.Uuid
  title       String // e.g., "Scrape 50 Zillow Leads"
  description String?
  points      Int // Reward on completion
  criteria    String // JSON or text: e.g., "log 10 CallRail calls"
  profileId   String? @db.Uuid // Optional assignment to user

  profile Profile? @relation(fields: [profileId], references: [id], onDelete: SetNull) // Loose relation for quest tracking
}
