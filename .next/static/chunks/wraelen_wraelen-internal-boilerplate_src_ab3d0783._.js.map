{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/lib/prisma.ts"],"sourcesContent":["// src/lib/prisma.ts – Prisma singleton (best practice: Avoids new instances per request – reduces latency/overhead for quest updates; push back: Raw imports risk exhaustion on Supabase as reps grow)\nimport { PrismaClient } from '@prisma/client';\n\nlet prisma: PrismaClient;\n\nif (process.env.NODE_ENV === 'production') {\n  prisma = new PrismaClient();  // Prod: Single instance (efficient scale for leaderboards/queries)\n} else {\n  if (!globalThis.prisma) {\n    globalThis.prisma = new PrismaClient();  // Dev: Global persists across HMR (hot reload – no reconnections on code changes)\n  }\n  prisma = globalThis.prisma;\n}\n\nexport default prisma;  // Logic: Export for server use (type-safe, e.g., prisma.profile.findUnique autocompletes points/role)"],"names":[],"mappings":"AAAA,uMAAuM;;;;;AAKnM;AAJJ;;AAEA,IAAI;AAEJ;;KAEO;IACL,IAAI,CAAC,WAAW,MAAM,EAAE;QACtB,WAAW,MAAM,GAAG,IAAI,yWAAY,IAAK,kFAAkF;IAC7H;IACA,SAAS,WAAW,MAAM;AAC5B;uCAEe;;;;CAAS,sGAAsG","debugId":null}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/app/auth/signup/page.tsx"],"sourcesContent":["// src/app/auth/signup/page.tsx – Signup form (client-side for interactivity; base Supabase client for browser mutations – best for Next.js 15+ pivot, async-safe without deprecated helpers)\n'use client';  // Logic: Client component (best for form state – no SSR overhead for inputs; push back: Server actions for mutations if scaling auth heavy)\n\nimport { createClient } from '@supabase/supabase-js';  // Base package client (no helpers – lighter, future-proof; uses NEXT_PUBLIC vars for browser)\nimport { revalidatePath } from 'next/cache';  // For cache invalidation (optimizes post-signup dashboard load – fresh data without manual refresh)\nimport { useRouter } from 'next/navigation';\nimport { useState } from 'react';\nimport prisma from '@/lib/prisma';  // Prisma singleton (logic: For server action – relational profile creation for gamification init; best for scale as reps grow)\n\nexport default function SignUp() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const router = useRouter();\n\n  // Logic: Client-side creation (best practice: Use base createClient for browser – env vars available via process.env.NEXT_PUBLIC_*; no cookies needed on client as sessions persist via localStorage/JWT)\n  const supabase = createClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,  // Logic: Required (throws if missing – guard in dev if needed, but Next.js loads .env.local auto)\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  );\n\n  const handleSignUp = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const { data: { user }, error } = await supabase.auth.signUp({ email, password });  // Logic: Supabase native signup (hashing/JWT auto – no custom logic needed; adds user to Supabase auth table)\n    if (error) {\n      setError(error.message);  // UX: Friendly feedback for flow (e.g., \"Email in use\" or \"Password too weak\" – improves onboarding experience for new reps)\n    } else if (user) {\n      await createInitialProfile(user.id);  // Server action call (logic: Creates linked Prisma profile immediately after signup – atomic to ensure gamification data (role/points) is ready for first dashboard load; best for consistency)\n      router.push('/dashboard');  // Logic: Redirect to HQ (smooth, client-side – best for game-like navigation after signup)\n    }\n  };\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-black text-green-400 font-mono\">\n      <form onSubmit={handleSignUp} className=\"p-8 border-2 border-green-500 rounded-lg shadow-[0_0_15px_rgba(0,255,0,0.7)] bg-black/80\">\n        <h2 className=\"text-2xl mb-6 text-center\">Join Wraelen HQ</h2>\n        {error && <p className=\"text-red-500 mb-4\">{error}</p>}  // Logic: Conditional error (best for UX – clear, non-blocking; allows quick retries)\n        <input\n          type=\"email\"\n          placeholder=\"Email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          className=\"w-full mb-4 p-2 bg-black border border-green-500 text-green-400 focus:outline-none focus:border-green-300\"\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          className=\"w-full mb-6 p-2 bg-black border border-green-500 text-green-400 focus:outline-none focus:border-green-300\"\n        />\n        <button type=\"submit\" className=\"w-full p-2 bg-green-500 text-black hover:bg-green-600\">Sign Up</button>\n        <p className=\"mt-4 text-center\">Already have an account? <Link href=\"/auth/signin\" className=\"underline hover:text-green-300\">Login</Link></p>  // Logic: Link to signin (fast nav – improves flow for existing reps)\n      </form>\n    </div>\n  );\n}\n\n// Server action (logic: 'use server' – runs server-side only, secure for DB ops; creates initial profile tied to Supabase user ID – best for relational gamification data like points/badges)\n'use server';\n\nexport async function createInitialProfile(userId: string) {\n  await prisma.profile.create({\n    data: {\n      userId,  // Logic: Links to Supabase user.id (UUID – enables efficient joins for quests/leaderboards, e.g., top points by role)\n      role: 'Novice',  // Logic: Initial role (gamification start – unlock 'Apprentice' at 1000 points via future API threshold check)\n      points: 0,  // Logic: Start at zero (earn via quests like Zillow scrapes or CallRail logs – increment in API routes)\n      badges: [],  // Logic: Empty array (add strings like 'LeadScraper' on quest completion – queryable for badges leaderboard)\n    },\n  });\n  revalidatePath('/dashboard');  // Logic: Invalidates cache (ensures dashboard shows fresh profile data post-signup – best for seamless flow after redirect)\n}"],"names":[],"mappings":"AAAA,6LAA6L;;;;;;;AAiBzL;;AAdJ,khBAAuD,8FAA8F;AACrJ,mpBAA8C,oGAAoG;AAClJ;AACA;AACA,sSAAoC,+HAA+H;;;AANnK,cAAe,4IAA4I;;;;;;AAQ5I,SAAS;;IACtB,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,yaAAQ,EAAC;IACnC,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,yaAAQ,EAAC;IACzC,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,yaAAQ,EAAgB;IAClD,MAAM,SAAS,IAAA,kZAAS;IAExB,0MAA0M;IAC1M,MAAM,WAAW,IAAA,qUAAY;IAK7B,MAAM,eAAe,OAAO;QAC1B,EAAE,cAAc;QAChB,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,MAAM,CAAC;YAAE;YAAO;QAAS,IAAK,8GAA8G;QAClM,IAAI,OAAO;YACT,SAAS,MAAM,OAAO,GAAI,6HAA6H;QACzJ,OAAO,IAAI,MAAM;YACf,MAAM,qBAAqB,KAAK,EAAE,GAAI,gMAAgM;YACtO,OAAO,IAAI,CAAC,eAAgB,2FAA2F;QACzH;IACF;IAEA,qBACE,6bAAC;QAAI,WAAU;kBACb,cAAA,6bAAC;YAAK,UAAU;YAAc,WAAU;;8BACtC,6bAAC;oBAAG,WAAU;8BAA4B;;;;;;gBACzC,uBAAS,6bAAC;oBAAE,WAAU;8BAAqB;;;;;;gBAAW;8BACvD,6bAAC;oBACC,MAAK;oBACL,aAAY;oBACZ,OAAO;oBACP,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;oBACxC,WAAU;;;;;;8BAEZ,6bAAC;oBACC,MAAK;oBACL,aAAY;oBACZ,OAAO;oBACP,UAAU,CAAC,IAAM,YAAY,EAAE,MAAM,CAAC,KAAK;oBAC3C,WAAU;;;;;;8BAEZ,6bAAC;oBAAO,MAAK;oBAAS,WAAU;8BAAwD;;;;;;8BACxF,6bAAC;oBAAE,WAAU;;wBAAmB;sCAAyB,6bAAC;4BAAK,MAAK;4BAAe,WAAU;sCAAiC;;;;;;;;;;;;gBAAgB;;;;;;;;;;;;AAItJ;GA/CwB;;QAIP,kZAAS;;;KAJF;AAiDxB,8LAA8L;AAC9L;AAEO,eAAe,qBAAqB,MAAc;IACvD,MAAM,mLAAM,CAAC,OAAO,CAAC,MAAM,CAAC;QAC1B,MAAM;YACJ;YACA,MAAM;YACN,QAAQ;YACR,QAAQ,EAAE;QACZ;IACF;IACA,IAAA,kZAAc,EAAC,eAAgB,4HAA4H;AAC7J","debugId":null}}]
}