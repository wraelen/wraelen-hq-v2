{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/lib/prisma.ts"],"sourcesContent":["// lib/prisma.ts\nimport { PrismaClient } from '@prisma/client';\n\ntype PrismaClientConstructor = () => PrismaClient;  // Explicit for ReturnType\n\nconst prismaClientSingleton: PrismaClientConstructor = () => {\n  return new PrismaClient();\n};\n\ndeclare global {\n  // eslint-disable-next-line no-var -- Hoisting required for global Prisma singleton\n  var prisma: ReturnType<PrismaClientConstructor> | undefined;\n}\n\nconst prisma = globalThis.prisma ?? prismaClientSingleton();\n\nif (process.env.NODE_ENV !== 'production') globalThis.prisma = prisma!;  // Non-null for dev\n\nexport default prisma;"],"names":[],"mappings":"AAAA,gBAAgB;;;;AAChB;;AAIA,MAAM,wBAAiD;IACrD,OAAO,IAAI,6HAAA,CAAA,eAAY;AACzB;AAOA,MAAM,SAAS,WAAW,MAAM,IAAI;AAEpC,wCAA2C,WAAW,MAAM,GAAG,QAAU,mBAAmB;uCAE7E","debugId":null}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/app/api/register/route.ts"],"sourcesContent":["import bcrypt from 'bcryptjs'; // Added: For password hashing on register (secure storage; never store plain text)\nimport { NextRequest, NextResponse } from 'next/server'; // Kept existing\nimport prisma from '@/lib/prisma'; // Kept existing\n\ninterface RegisterBody {\n  username: string; // Required per schema @unique\n  email: string;\n  password: string;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body: RegisterBody = await request.json();\n\n    // Added: Hash password for secure storage (use bcrypt with salt 10; best practice for auth)\n    const hashedPassword = await bcrypt.hash(body.password, 10);\n\n    // Create user with gamification defaults (role NOVICE from enum, points/badges empty)\n    const user = await prisma.user.create({\n      data: {\n        username: body.username,\n        email: body.email,\n        password: hashedPassword,\n        role: 'NOVICE', // Default to NOVICE enum for gamified start\n        points: 0,\n        badges: [],\n      },\n    });\n\n    // Added: Generate JWT for immediate login after register (optionalâ€”return token for auto-login)\n    const token = jwt.sign({ userId: user.id }, process.env.JWT_SECRET as string, { expiresIn: '1h' });\n\n    return NextResponse.json({ user, token }, { status: 201 });\n  } catch (error: unknown) {\n    console.error(error);\n    const errMessage = error instanceof Error ? error.message : 'Registration failed';\n    return NextResponse.json({ error: errMessage }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;AAAA,+TAA+B,mFAAmF;AAClH,6jBAAyD,gBAAgB;AACzE,8MAAmC,gBAAgB;;;;AAQ5C,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAqB,MAAM,QAAQ,IAAI;QAE7C,4FAA4F;QAC5F,MAAM,iBAAiB,MAAM,wLAAA,CAAA,UAAM,CAAC,IAAI,CAAC,KAAK,QAAQ,EAAE;QAExD,sFAAsF;QACtF,MAAM,OAAO,MAAM,sHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpC,MAAM;gBACJ,UAAU,KAAK,QAAQ;gBACvB,OAAO,KAAK,KAAK;gBACjB,UAAU;gBACV,MAAM;gBACN,QAAQ;gBACR,QAAQ,EAAE;YACZ;QACF;QAEA,gGAAgG;QAChG,MAAM,QAAQ,IAAI,IAAI,CAAC;YAAE,QAAQ,KAAK,EAAE;QAAC,GAAG,QAAQ,GAAG,CAAC,UAAU,EAAY;YAAE,WAAW;QAAK;QAEhG,OAAO,+UAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;YAAM;QAAM,GAAG;YAAE,QAAQ;QAAI;IAC1D,EAAE,OAAO,OAAgB;QACvB,QAAQ,KAAK,CAAC;QACd,MAAM,aAAa,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAC5D,OAAO,+UAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAW,GAAG;YAAE,QAAQ;QAAI;IAChE;AACF","debugId":null}}]
}