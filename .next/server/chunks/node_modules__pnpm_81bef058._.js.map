{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"globalThis.js","sourceRoot":"","sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40opentelemetry%2Bapi-logs%400.46.0/node_modules/%40opentelemetry/api-logs/src/platform/node/globalThis.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins\nexport const _globalThis = typeof globalThis === 'object' ? globalThis : global;\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG,CAEH,8DAAA,EAAgE,CAChE,oEAAoE;;;;AAC7D,IAAM,WAAW,GAAG,OAAO,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"file":"global-utils.js","sourceRoot":"","sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40opentelemetry%2Bapi-logs%400.46.0/node_modules/%40opentelemetry/api-logs/src/internal/global-utils.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerProvider } from '../types/LoggerProvider';\nimport { _globalThis } from '../platform';\n\nexport const GLOBAL_LOGS_API_KEY = Symbol.for('io.opentelemetry.js.api.logs');\n\ntype Get<T> = (version: number) => T;\ntype OtelGlobal = Partial<{\n  [GLOBAL_LOGS_API_KEY]: Get<LoggerProvider>;\n}>;\n\nexport const _global = _globalThis as OtelGlobal;\n\n/**\n * Make a function which accepts a version integer and returns the instance of an API if the version\n * is compatible, or a fallback version (usually NOOP) if it is not.\n *\n * @param requiredVersion Backwards compatibility version which is required to return the instance\n * @param instance Instance which should be returned if the required version is compatible\n * @param fallback Fallback instance, usually NOOP, which will be returned if the required version is not compatible\n */\nexport function makeGetter<T>(\n  requiredVersion: number,\n  instance: T,\n  fallback: T\n): Get<T> {\n  return (version: number): T =>\n    version === requiredVersion ? instance : fallback;\n}\n\n/**\n * A number which should be incremented each time a backwards incompatible\n * change is made to the API. This number is used when an API package\n * attempts to access the global API to ensure it is getting a compatible\n * version. If the global API is not compatible with the API package\n * attempting to get it, a NOOP API implementation will be returned.\n */\nexport const API_BACKWARDS_COMPATIBILITY_VERSION = 1;\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;AAGH,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;;AAEnC,IAAM,mBAAmB,GAAG,MAAM,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;AAOvE,IAAM,OAAO,qRAAG,cAAyB,CAAC;AAU3C,SAAU,UAAU,CACxB,eAAuB,EACvB,QAAW,EACX,QAAW;IAEX,OAAO,SAAC,OAAe;QACrB,OAAA,OAAO,KAAK,eAAe,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ;IAAjD,CAAiD,CAAC;AACtD,CAAC;AASM,IAAM,mCAAmC,GAAG,CAAC,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"file":"NoopLogger.js","sourceRoot":"","sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40opentelemetry%2Bapi-logs%400.46.0/node_modules/%40opentelemetry/api-logs/src/NoopLogger.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from './types/Logger';\nimport { LogRecord } from './types/LogRecord';\n\nexport class NoopLogger implements Logger {\n  emit(_logRecord: LogRecord): void {}\n}\n\nexport const NOOP_LOGGER = new NoopLogger();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;AAKH,IAAA,aAAA;IAAA,SAAA,cAEA,CAAC;IADC,WAAA,SAAA,CAAA,IAAI,GAAJ,SAAK,UAAqB,GAAS,CAAC;IACtC,OAAA,UAAC;AAAD,CAAC,AAFD,IAEC;;AAEM,IAAM,WAAW,GAAG,IAAI,UAAU,EAAE,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 99, "column": 0}, "map": {"version":3,"file":"NoopLoggerProvider.js","sourceRoot":"","sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40opentelemetry%2Bapi-logs%400.46.0/node_modules/%40opentelemetry/api-logs/src/NoopLoggerProvider.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerProvider } from './types/LoggerProvider';\nimport { Logger } from './types/Logger';\nimport { LoggerOptions } from './types/LoggerOptions';\nimport { NoopLogger } from './NoopLogger';\n\nexport class NoopLoggerProvider implements LoggerProvider {\n  getLogger(\n    _name: string,\n    _version?: string | undefined,\n    _options?: LoggerOptions | undefined\n  ): Logger {\n    return new NoopLogger();\n  }\n}\n\nexport const NOOP_LOGGER_PROVIDER = new NoopLoggerProvider();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;AAKH,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;;AAE1C,IAAA,qBAAA;IAAA,SAAA,sBAQA,CAAC;IAPC,mBAAA,SAAA,CAAA,SAAS,GAAT,SACE,KAAa,EACb,QAA6B,EAC7B,QAAoC;QAEpC,OAAO,kQAAI,aAAU,EAAE,CAAC;IAC1B,CAAC;IACH,OAAA,kBAAC;AAAD,CAAC,AARD,IAQC;;AAEM,IAAM,oBAAoB,GAAG,IAAI,kBAAkB,EAAE,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"file":"logs.js","sourceRoot":"","sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40opentelemetry%2Bapi-logs%400.46.0/node_modules/%40opentelemetry/api-logs/src/api/logs.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  API_BACKWARDS_COMPATIBILITY_VERSION,\n  GLOBAL_LOGS_API_KEY,\n  _global,\n  makeGetter,\n} from '../internal/global-utils';\nimport { LoggerProvider } from '../types/LoggerProvider';\nimport { NOOP_LOGGER_PROVIDER } from '../NoopLoggerProvider';\nimport { Logger } from '../types/Logger';\nimport { LoggerOptions } from '../types/LoggerOptions';\n\nexport class LogsAPI {\n  private static _instance?: LogsAPI;\n\n  private constructor() {}\n\n  public static getInstance(): LogsAPI {\n    if (!this._instance) {\n      this._instance = new LogsAPI();\n    }\n\n    return this._instance;\n  }\n\n  public setGlobalLoggerProvider(provider: LoggerProvider): LoggerProvider {\n    if (_global[GLOBAL_LOGS_API_KEY]) {\n      return this.getLoggerProvider();\n    }\n\n    _global[GLOBAL_LOGS_API_KEY] = makeGetter<LoggerProvider>(\n      API_BACKWARDS_COMPATIBILITY_VERSION,\n      provider,\n      NOOP_LOGGER_PROVIDER\n    );\n\n    return provider;\n  }\n\n  /**\n   * Returns the global logger provider.\n   *\n   * @returns LoggerProvider\n   */\n  public getLoggerProvider(): LoggerProvider {\n    return (\n      _global[GLOBAL_LOGS_API_KEY]?.(API_BACKWARDS_COMPATIBILITY_VERSION) ??\n      NOOP_LOGGER_PROVIDER\n    );\n  }\n\n  /**\n   * Returns a logger from the global logger provider.\n   *\n   * @returns Logger\n   */\n  public getLogger(\n    name: string,\n    version?: string,\n    options?: LoggerOptions\n  ): Logger {\n    return this.getLoggerProvider().getLogger(name, version, options);\n  }\n\n  /** Remove the global logger provider */\n  public disable(): void {\n    delete _global[GLOBAL_LOGS_API_KEY];\n  }\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,OAAO,EACL,mCAAmC,EACnC,mBAAmB,EACnB,OAAO,EACP,UAAU,GACX,MAAM,0BAA0B,CAAC;AAElC,OAAO,EAAE,oBAAoB,EAAE,MAAM,uBAAuB,CAAC;;;AAI7D,IAAA,UAAA;IAGE,SAAA,WAAuB,CAAC;IAEV,QAAA,WAAW,GAAzB;QACE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,CAAC,SAAS,GAAG,IAAI,OAAO,EAAE,CAAC;SAChC;QAED,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAEM,QAAA,SAAA,CAAA,uBAAuB,GAA9B,SAA+B,QAAwB;QACrD,mRAAI,UAAO,gRAAC,sBAAmB,CAAC,EAAE;YAChC,OAAO,IAAI,CAAC,iBAAiB,EAAE,CAAC;SACjC;uRAED,UAAO,gRAAC,sBAAmB,CAAC,sRAAG,aAAA,AAAU,gRACvC,uCAAmC,EACnC,QAAQ,wQACR,uBAAoB,CACrB,CAAC;QAEF,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;;OAIG,CACI,QAAA,SAAA,CAAA,iBAAiB,GAAxB;;QACE,OAAO,AACL,CAAA,KAAA,CAAA,oRAAA,UAAO,gRAAC,sBAAmB,CAAC,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAA,IAAA,gRAA5B,UAAO,EAAwB,qTAAmC,CAAC,MAAA,QAAA,OAAA,KAAA,IAAA,2QACnE,uBAAoB,CACrB,CAAC;IACJ,CAAC;IAED;;;;OAIG,CACI,QAAA,SAAA,CAAA,SAAS,GAAhB,SACE,IAAY,EACZ,OAAgB,EAChB,OAAuB;QAEvB,OAAO,IAAI,CAAC,iBAAiB,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACpE,CAAC;IAED,sCAAA,EAAwC,CACjC,QAAA,SAAA,CAAA,OAAO,GAAd;QACE,sRAAO,UAAO,gRAAC,sBAAmB,CAAC,CAAC;IACtC,CAAC;IACH,OAAA,OAAC;AAAD,CAAC,AAxDD,IAwDC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"file":"index.js","sourceRoot":"","sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40opentelemetry%2Bapi-logs%400.46.0/node_modules/%40opentelemetry/api-logs/src/index.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './types/Logger';\nexport * from './types/LoggerProvider';\nexport * from './types/LogRecord';\nexport * from './types/LoggerOptions';\nexport * from './NoopLogger';\nexport * from './NoopLoggerProvider';\n\nimport { LogsAPI } from './api/logs';\nexport const logs = LogsAPI.getInstance();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;AASH,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;;;;;;;;AAC9B,IAAM,IAAI,kQAAG,UAAO,CAAC,WAAW,EAAE,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 238, "column": 0}, "map": {"version":3,"file":"Logger.js","sourceRoot":"","sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40opentelemetry%2Bapi-logs%400.46.0/node_modules/%40opentelemetry/api-logs/src/types/Logger.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LogRecord } from './LogRecord';\n\nexport interface Logger {\n  /**\n   * Emit a log record. This method should only be used by log appenders.\n   *\n   * @param logRecord\n   */\n  emit(logRecord: LogRecord): void;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 261, "column": 0}, "map": {"version":3,"file":"LoggerProvider.js","sourceRoot":"","sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40opentelemetry%2Bapi-logs%400.46.0/node_modules/%40opentelemetry/api-logs/src/types/LoggerProvider.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from './Logger';\nimport { LoggerOptions } from './LoggerOptions';\n\n/**\n * A registry for creating named {@link Logger}s.\n */\nexport interface LoggerProvider {\n  /**\n   * Returns a Logger, creating one if one with the given name, version, and\n   * schemaUrl pair is not already created.\n   *\n   * @param name The name of the logger or instrumentation library.\n   * @param version The version of the logger or instrumentation library.\n   * @param options The options of the logger or instrumentation library.\n   * @returns Logger A Logger with the given name and version\n   */\n  getLogger(name: string, version?: string, options?: LoggerOptions): Logger;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 284, "column": 0}, "map": {"version":3,"file":"LogRecord.js","sourceRoot":"","sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40opentelemetry%2Bapi-logs%400.46.0/node_modules/%40opentelemetry/api-logs/src/types/LogRecord.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AttributeValue, Context, TimeInput } from '@opentelemetry/api';\n\nexport type LogAttributeValue = AttributeValue | LogAttributes;\nexport interface LogAttributes {\n  [attributeKey: string]: LogAttributeValue | undefined;\n}\n\nexport enum SeverityNumber {\n  UNSPECIFIED = 0,\n  TRACE = 1,\n  TRACE2 = 2,\n  TRACE3 = 3,\n  TRACE4 = 4,\n  DEBUG = 5,\n  DEBUG2 = 6,\n  DEBUG3 = 7,\n  DEBUG4 = 8,\n  INFO = 9,\n  INFO2 = 10,\n  INFO3 = 11,\n  INFO4 = 12,\n  WARN = 13,\n  WARN2 = 14,\n  WARN3 = 15,\n  WARN4 = 16,\n  ERROR = 17,\n  ERROR2 = 18,\n  ERROR3 = 19,\n  ERROR4 = 20,\n  FATAL = 21,\n  FATAL2 = 22,\n  FATAL3 = 23,\n  FATAL4 = 24,\n}\n\nexport interface LogRecord {\n  /**\n   * The time when the log record occurred as UNIX Epoch time in nanoseconds.\n   */\n  timestamp?: TimeInput;\n\n  /**\n   * Time when the event was observed by the collection system.\n   */\n  observedTimestamp?: TimeInput;\n\n  /**\n   * Numerical value of the severity.\n   */\n  severityNumber?: SeverityNumber;\n\n  /**\n   * The severity text.\n   */\n  severityText?: string;\n\n  /**\n   * A value containing the body of the log record.\n   */\n  body?: string;\n\n  /**\n   * Attributes that define the log record.\n   */\n  attributes?: LogAttributes;\n\n  /**\n   * The Context associated with the LogRecord.\n   */\n  context?: Context;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;AASH,IAAY,cA0BX;AA1BD,CAAA,SAAY,cAAc;IACxB,cAAA,CAAA,cAAA,CAAA,cAAA,GAAA,EAAA,GAAA,aAAe,CAAA;IACf,cAAA,CAAA,cAAA,CAAA,QAAA,GAAA,EAAA,GAAA,OAAS,CAAA;IACT,cAAA,CAAA,cAAA,CAAA,SAAA,GAAA,EAAA,GAAA,QAAU,CAAA;IACV,cAAA,CAAA,cAAA,CAAA,SAAA,GAAA,EAAA,GAAA,QAAU,CAAA;IACV,cAAA,CAAA,cAAA,CAAA,SAAA,GAAA,EAAA,GAAA,QAAU,CAAA;IACV,cAAA,CAAA,cAAA,CAAA,QAAA,GAAA,EAAA,GAAA,OAAS,CAAA;IACT,cAAA,CAAA,cAAA,CAAA,SAAA,GAAA,EAAA,GAAA,QAAU,CAAA;IACV,cAAA,CAAA,cAAA,CAAA,SAAA,GAAA,EAAA,GAAA,QAAU,CAAA;IACV,cAAA,CAAA,cAAA,CAAA,SAAA,GAAA,EAAA,GAAA,QAAU,CAAA;IACV,cAAA,CAAA,cAAA,CAAA,OAAA,GAAA,EAAA,GAAA,MAAQ,CAAA;IACR,cAAA,CAAA,cAAA,CAAA,QAAA,GAAA,GAAA,GAAA,OAAU,CAAA;IACV,cAAA,CAAA,cAAA,CAAA,QAAA,GAAA,GAAA,GAAA,OAAU,CAAA;IACV,cAAA,CAAA,cAAA,CAAA,QAAA,GAAA,GAAA,GAAA,OAAU,CAAA;IACV,cAAA,CAAA,cAAA,CAAA,OAAA,GAAA,GAAA,GAAA,MAAS,CAAA;IACT,cAAA,CAAA,cAAA,CAAA,QAAA,GAAA,GAAA,GAAA,OAAU,CAAA;IACV,cAAA,CAAA,cAAA,CAAA,QAAA,GAAA,GAAA,GAAA,OAAU,CAAA;IACV,cAAA,CAAA,cAAA,CAAA,QAAA,GAAA,GAAA,GAAA,OAAU,CAAA;IACV,cAAA,CAAA,cAAA,CAAA,QAAA,GAAA,GAAA,GAAA,OAAU,CAAA;IACV,cAAA,CAAA,cAAA,CAAA,SAAA,GAAA,GAAA,GAAA,QAAW,CAAA;IACX,cAAA,CAAA,cAAA,CAAA,SAAA,GAAA,GAAA,GAAA,QAAW,CAAA;IACX,cAAA,CAAA,cAAA,CAAA,SAAA,GAAA,GAAA,GAAA,QAAW,CAAA;IACX,cAAA,CAAA,cAAA,CAAA,QAAA,GAAA,GAAA,GAAA,OAAU,CAAA;IACV,cAAA,CAAA,cAAA,CAAA,SAAA,GAAA,GAAA,GAAA,QAAW,CAAA;IACX,cAAA,CAAA,cAAA,CAAA,SAAA,GAAA,GAAA,GAAA,QAAW,CAAA;IACX,cAAA,CAAA,cAAA,CAAA,SAAA,GAAA,GAAA,GAAA,QAAW,CAAA;AACb,CAAC,EA1BW,cAAc,IAAA,CAAd,cAAc,GAAA,CAAA,CAAA,GA0BzB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 335, "column": 0}, "map": {"version":3,"file":"LoggerOptions.js","sourceRoot":"","sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40opentelemetry%2Bapi-logs%400.46.0/node_modules/%40opentelemetry/api-logs/src/types/LoggerOptions.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Attributes } from '@opentelemetry/api';\nexport interface LoggerOptions {\n  /**\n   * The schemaUrl of the tracer or instrumentation library\n   * @default ''\n   */\n  schemaUrl?: string;\n\n  /**\n   * The instrumentation scope attributes to associate with emitted telemetry\n   */\n  scopeAttributes?: Attributes;\n\n  /**\n   * Specifies whether the Trace Context should automatically be passed on to the LogRecords emitted by the Logger.\n   * @default true\n   */\n  includeTraceContext?: boolean;\n}\n"],"names":[],"mappings":"","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 381, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/%40vercel/otel/dist/node/external%3A%40opentelemetry/api","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/trace/suppress-tracing.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/baggage/constants.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/baggage/utils.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/baggage/propagation/W3CBaggagePropagator.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/common/anchored-clock.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/common/attributes.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/common/logging-error-handler.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/common/global-error-handler.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/utils/sampling.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/platform/browser/globalThis.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/utils/environment.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/platform/node/environment.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/platform/node/globalThis.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/platform/node/hex-to-base64.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/platform/node/RandomIdGenerator.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/platform/node/performance.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/version.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsemantic-conventions%401.19.0/node_modules/%40opentelemetry/semantic-conventions/src/trace/SemanticAttributes.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsemantic-conventions%401.19.0/node_modules/%40opentelemetry/semantic-conventions/src/trace/index.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsemantic-conventions%401.19.0/node_modules/%40opentelemetry/semantic-conventions/src/resource/SemanticResourceAttributes.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsemantic-conventions%401.19.0/node_modules/%40opentelemetry/semantic-conventions/src/resource/index.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsemantic-conventions%401.19.0/node_modules/%40opentelemetry/semantic-conventions/src/index.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/platform/node/sdk-info.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/platform/node/timer-util.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/platform/node/index.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/platform/index.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/common/time.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/ExportResult.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/propagation/composite.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/internal/validators.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/trace/TraceState.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/trace/W3CTraceContextPropagator.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/trace/rpc-metadata.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/trace/sampler/AlwaysOffSampler.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/trace/sampler/AlwaysOnSampler.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/trace/sampler/ParentBasedSampler.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/trace/sampler/TraceIdRatioBasedSampler.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/utils/lodash.merge.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/utils/merge.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/utils/timeout.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/utils/url.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/utils/wrap.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/utils/promise.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/utils/callback.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/internal/exporter.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcore%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/core/src/index.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-trace-base%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-trace-base/src/enums.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-trace-base%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-trace-base/src/Span.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-trace-base%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-trace-base/src/Sampler.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-trace-base%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-trace-base/src/sampler/AlwaysOffSampler.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-trace-base%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-trace-base/src/sampler/AlwaysOnSampler.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-trace-base%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-trace-base/src/sampler/ParentBasedSampler.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-trace-base%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-trace-base/src/sampler/TraceIdRatioBasedSampler.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-trace-base%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-trace-base/src/config.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-trace-base%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-trace-base/src/utility.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-trace-base%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-trace-base/src/export/BatchSpanProcessorBase.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-trace-base%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-trace-base/src/platform/node/export/BatchSpanProcessor.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-trace-base%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-trace-base/src/platform/node/RandomIdGenerator.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-trace-base%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-trace-base/src/platform/node/index.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-trace-base%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-trace-base/src/platform/index.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-trace-base%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-trace-base/src/Tracer.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/platform/node/default-service-name.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/platform/node/utils.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/platform/node/machine-id/execAsync.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/platform/node/machine-id/getMachineId-darwin.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/platform/node/machine-id/getMachineId-linux.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/platform/node/machine-id/getMachineId-bsd.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/platform/node/machine-id/getMachineId-win.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/platform/node/machine-id/getMachineId-unsupported.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/platform/node/machine-id/getMachineId.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/platform/node/HostDetectorSync.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/platform/node/HostDetector.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/platform/node/OSDetectorSync.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/platform/node/OSDetector.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/platform/node/ProcessDetectorSync.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/platform/node/ProcessDetector.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/platform/node/index.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/platform/index.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/Resource.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/detectors/BrowserDetector.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/detectors/EnvDetectorSync.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/detectors/EnvDetector.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/detectors/BrowserDetectorSync.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/detectors/index.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/utils.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/detect-resources.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bresources%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/resources/src/index.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-trace-base%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-trace-base/src/MultiSpanProcessor.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-trace-base%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-trace-base/src/export/NoopSpanProcessor.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-trace-base%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-trace-base/src/BasicTracerProvider.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-trace-base%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-trace-base/src/export/ConsoleSpanExporter.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-trace-base%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-trace-base/src/export/InMemorySpanExporter.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-trace-base%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-trace-base/src/export/SimpleSpanProcessor.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-trace-base%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-trace-base/src/index.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/%40vercel/otel/dist/node/external%3A%40opentelemetry/api-logs","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Binstrumentation%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/instrumentation/src/autoLoaderUtils.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Binstrumentation%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/instrumentation/src/autoLoader.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-logs%400.46.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-logs/src/LogRecord.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-logs%400.46.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-logs/src/Logger.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-logs%400.46.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-logs/src/config.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-logs%400.46.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-logs/src/MultiLogRecordProcessor.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-logs%400.46.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-logs/src/export/NoopLogRecordProcessor.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-logs%400.46.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-logs/src/internal/LoggerProviderSharedState.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-logs%400.46.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-logs/src/LoggerProvider.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-logs%400.46.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-logs/src/export/ConsoleLogRecordExporter.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-logs%400.46.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-logs/src/export/SimpleLogRecordProcessor.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-logs%400.46.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-logs/src/export/InMemoryLogRecordExporter.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-logs%400.46.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-logs/src/export/BatchLogRecordProcessorBase.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-logs%400.46.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-logs/src/platform/node/export/BatchLogRecordProcessor.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-logs%400.46.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-logs/src/platform/node/index.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-logs%400.46.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-logs/src/platform/index.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-logs%400.46.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-logs/src/index.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/export/AggregationTemporality.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/export/MetricData.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/utils.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/aggregator/types.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/aggregator/Drop.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/InstrumentDescriptor.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/aggregator/Histogram.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/Buckets.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/ieee754.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/util.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/types.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/ExponentMapping.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/LogarithmMapping.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/getMapping.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/aggregator/ExponentialHistogram.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/aggregator/LastValue.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/aggregator/Sum.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/aggregator/index.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/view/Aggregation.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/export/AggregationSelector.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/export/MetricReader.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/export/PeriodicExportingMetricReader.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/export/InMemoryMetricExporter.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/export/ConsoleMetricExporter.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/view/ViewRegistry.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/Instruments.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/Meter.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/state/MetricStorage.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/state/HashMap.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/state/DeltaMetricProcessor.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/state/TemporalMetricProcessor.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/state/AsyncMetricStorage.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/view/RegistrationConflicts.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/state/MetricStorageRegistry.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/state/MultiWritableMetricStorage.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/ObservableResult.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/state/ObservableRegistry.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/state/SyncMetricStorage.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/view/AttributesProcessor.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/state/MeterSharedState.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/state/MeterProviderSharedState.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/state/MetricCollector.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/MeterProvider.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/view/Predicate.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/view/InstrumentSelector.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/view/MeterSelector.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/view/View.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bsdk-metrics%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/sdk-metrics/src/index.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcontext-async-hooks%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/context-async-hooks/src/AbstractAsyncHooksContextManager.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Bcontext-async-hooks%401.19.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/context-async-hooks/src/AsyncLocalStorageContextManager.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Botlp-transformer%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/otlp-transformer/src/common/internal.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Botlp-transformer%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/otlp-transformer/src/trace/internal.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Botlp-transformer%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/otlp-transformer/src/common/index.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Botlp-transformer%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/otlp-transformer/src/trace/index.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Botlp-exporter-base%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/otlp-exporter-base/src/util.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Botlp-exporter-base%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/otlp-exporter-base/src/OTLPExporterBase.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40protobufjs%2Baspromise%401.1.2/node_modules/%40protobufjs/aspromise/index.js","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40protobufjs%2Bbase64%401.1.2/node_modules/%40protobufjs/base64/index.js","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40protobufjs%2Beventemitter%401.1.0/node_modules/%40protobufjs/eventemitter/index.js","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40protobufjs%2Bfloat%401.0.2/node_modules/%40protobufjs/float/index.js","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40protobufjs%2Binquire%401.1.0/node_modules/%40protobufjs/inquire/index.js","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40protobufjs%2Butf8%401.1.0/node_modules/%40protobufjs/utf8/index.js","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40protobufjs%2Bpool%401.1.0/node_modules/%40protobufjs/pool/index.js","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/protobufjs%407.2.6/node_modules/protobufjs/src/util/longbits.js","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/protobufjs%407.2.6/node_modules/protobufjs/src/util/minimal.js","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/protobufjs%407.2.6/node_modules/protobufjs/src/writer.js","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/protobufjs%407.2.6/node_modules/protobufjs/src/writer_buffer.js","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/protobufjs%407.2.6/node_modules/protobufjs/src/reader.js","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/protobufjs%407.2.6/node_modules/protobufjs/src/reader_buffer.js","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/protobufjs%407.2.6/node_modules/protobufjs/src/rpc/service.js","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/protobufjs%407.2.6/node_modules/protobufjs/src/rpc.js","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/protobufjs%407.2.6/node_modules/protobufjs/src/roots.js","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/protobufjs%407.2.6/node_modules/protobufjs/src/index-minimal.js","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/protobufjs%407.2.6/node_modules/protobufjs/minimal.js","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Botlp-transformer%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/otlp-transformer/build/src/metrics/types.js","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Botlp-transformer%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/otlp-transformer/src/trace/types.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Botlp-transformer%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/otlp-transformer/src/metrics/internal.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Botlp-transformer%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/otlp-transformer/src/metrics/index.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Botlp-transformer%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/otlp-transformer/src/logs/index.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/node_modules/.pnpm/%40opentelemetry%2Botlp-transformer%400.46.0_%40opentelemetry%2Bapi%401.7.0/node_modules/%40opentelemetry/otlp-transformer/src/index.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/%40vercel/otel/src/sdk.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/%40vercel/otel/src/processor/composite-span-processor.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/%40vercel/otel/src/vercel-request-context/api.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/%40vercel/otel/src/vercel-request-context/attributes.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/%40vercel/otel/src/util/attributes.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/%40vercel/otel/src/util/request-id.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/%40vercel/otel/src/util/sampled.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/%40vercel/otel/src/exporters/exporter-trace-otlp-http-fetch.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/%40vercel/otel/src/exporters/otlp-exporter-base.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/%40vercel/otel/src/exporters/trace-config.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/%40vercel/otel/src/exporters/exporter-trace-otlp-proto-fetch.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/%40vercel/otel/src/exporters/proto.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/%40vercel/otel/src/instrumentations/fetch.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/%40vercel/otel/src/util/template.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/%40vercel/otel/src/propagators/w3c-tracecontext-propagator.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/%40vercel/otel/src/vercel-request-context/propagator.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/%40vercel/otel/src/vercel-request-context/exporter.ts","file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/%40vercel%2Botel%401.12.0_%40opentelemetry%2Bapi-logs%400.46.0_%40opentelemetry%2Bapi%401.7.0_%40openteleme_89cf353be598bbddec090bbff98c3ad6/node_modules/%40vercel/otel/src/index.ts"],"sourcesContent":["export * from \"@opentelemetry/api\"","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, createContextKey } from '@opentelemetry/api';\n\nconst SUPPRESS_TRACING_KEY = createContextKey(\n  'OpenTelemetry SDK Context Key SUPPRESS_TRACING'\n);\n\nexport function suppressTracing(context: Context): Context {\n  return context.setValue(SUPPRESS_TRACING_KEY, true);\n}\n\nexport function unsuppressTracing(context: Context): Context {\n  return context.deleteValue(SUPPRESS_TRACING_KEY);\n}\n\nexport function isTracingSuppressed(context: Context): boolean {\n  return context.getValue(SUPPRESS_TRACING_KEY) === true;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const BAGGAGE_KEY_PAIR_SEPARATOR = '=';\nexport const BAGGAGE_PROPERTIES_SEPARATOR = ';';\nexport const BAGGAGE_ITEMS_SEPARATOR = ',';\n\n// Name of the http header used to propagate the baggage\nexport const BAGGAGE_HEADER = 'baggage';\n// Maximum number of name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;\n// Maximum number of bytes per a single name-value pair allowed by w3c spec\nexport const BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;\n// Maximum total length of all name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_TOTAL_LENGTH = 8192;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Baggage,\n  BaggageEntryMetadata,\n  baggageEntryMetadataFromString,\n} from '@opentelemetry/api';\nimport {\n  BAGGAGE_ITEMS_SEPARATOR,\n  BAGGAGE_PROPERTIES_SEPARATOR,\n  BAGGAGE_KEY_PAIR_SEPARATOR,\n  BAGGAGE_MAX_TOTAL_LENGTH,\n} from './constants';\n\ntype ParsedBaggageKeyValue = {\n  key: string;\n  value: string;\n  metadata: BaggageEntryMetadata | undefined;\n};\n\nexport function serializeKeyPairs(keyPairs: string[]): string {\n  return keyPairs.reduce((hValue: string, current: string) => {\n    const value = `${hValue}${\n      hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : ''\n    }${current}`;\n    return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n  }, '');\n}\n\nexport function getKeyPairs(baggage: Baggage): string[] {\n  return baggage.getAllEntries().map(([key, value]) => {\n    let entry = `${encodeURIComponent(key)}=${encodeURIComponent(value.value)}`;\n\n    // include opaque metadata if provided\n    // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation\n    if (value.metadata !== undefined) {\n      entry += BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();\n    }\n\n    return entry;\n  });\n}\n\nexport function parsePairKeyValue(\n  entry: string\n): ParsedBaggageKeyValue | undefined {\n  const valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n  if (valueProps.length <= 0) return;\n  const keyPairPart = valueProps.shift();\n  if (!keyPairPart) return;\n  const separatorIndex = keyPairPart.indexOf(BAGGAGE_KEY_PAIR_SEPARATOR);\n  if (separatorIndex <= 0) return;\n  const key = decodeURIComponent(\n    keyPairPart.substring(0, separatorIndex).trim()\n  );\n  const value = decodeURIComponent(\n    keyPairPart.substring(separatorIndex + 1).trim()\n  );\n  let metadata;\n  if (valueProps.length > 0) {\n    metadata = baggageEntryMetadataFromString(\n      valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR)\n    );\n  }\n  return { key, value, metadata };\n}\n\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nexport function parseKeyPairsIntoRecord(\n  value?: string\n): Record<string, string> {\n  if (typeof value !== 'string' || value.length === 0) return {};\n  return value\n    .split(BAGGAGE_ITEMS_SEPARATOR)\n    .map(entry => {\n      return parsePairKeyValue(entry);\n    })\n    .filter(keyPair => keyPair !== undefined && keyPair.value.length > 0)\n    .reduce<Record<string, string>>((headers, keyPair) => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      headers[keyPair!.key] = keyPair!.value;\n      return headers;\n    }, {});\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BaggageEntry,\n  Context,\n  propagation,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n} from '@opentelemetry/api';\n\nimport { isTracingSuppressed } from '../../trace/suppress-tracing';\nimport {\n  BAGGAGE_HEADER,\n  BAGGAGE_ITEMS_SEPARATOR,\n  BAGGAGE_MAX_NAME_VALUE_PAIRS,\n  BAGGAGE_MAX_PER_NAME_VALUE_PAIRS,\n} from '../constants';\nimport { getKeyPairs, parsePairKeyValue, serializeKeyPairs } from '../utils';\n\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nexport class W3CBaggagePropagator implements TextMapPropagator {\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const baggage = propagation.getBaggage(context);\n    if (!baggage || isTracingSuppressed(context)) return;\n    const keyPairs = getKeyPairs(baggage)\n      .filter((pair: string) => {\n        return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n      })\n      .slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n    const headerValue = serializeKeyPairs(keyPairs);\n    if (headerValue.length > 0) {\n      setter.set(carrier, BAGGAGE_HEADER, headerValue);\n    }\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const headerValue = getter.get(carrier, BAGGAGE_HEADER);\n    const baggageString = Array.isArray(headerValue)\n      ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR)\n      : headerValue;\n    if (!baggageString) return context;\n    const baggage: Record<string, BaggageEntry> = {};\n    if (baggageString.length === 0) {\n      return context;\n    }\n    const pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);\n    pairs.forEach(entry => {\n      const keyPair = parsePairKeyValue(entry);\n      if (keyPair) {\n        const baggageEntry: BaggageEntry = { value: keyPair.value };\n        if (keyPair.metadata) {\n          baggageEntry.metadata = keyPair.metadata;\n        }\n        baggage[keyPair.key] = baggageEntry;\n      }\n    });\n    if (Object.entries(baggage).length === 0) {\n      return context;\n    }\n    return propagation.setBaggage(context, propagation.createBaggage(baggage));\n  }\n\n  fields(): string[] {\n    return [BAGGAGE_HEADER];\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Clock {\n  /**\n   * Return the current time in milliseconds from some epoch such as the Unix epoch or process start\n   */\n  now(): number;\n}\n\n/**\n * A utility for returning wall times anchored to a given point in time. Wall time measurements will\n * not be taken from the system, but instead are computed by adding a monotonic clock time\n * to the anchor point.\n *\n * This is needed because the system time can change and result in unexpected situations like\n * spans ending before they are started. Creating an anchored clock for each local root span\n * ensures that span timings and durations are accurate while preventing span times from drifting\n * too far from the system clock.\n *\n * Only creating an anchored clock once per local trace ensures span times are correct relative\n * to each other. For example, a child span will never have a start time before its parent even\n * if the system clock is corrected during the local trace.\n *\n * Heavily inspired by the OTel Java anchored clock\n * https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk/trace/src/main/java/io/opentelemetry/sdk/trace/AnchoredClock.java\n */\nexport class AnchoredClock implements Clock {\n  private _monotonicClock: Clock;\n  private _epochMillis: number;\n  private _performanceMillis: number;\n\n  /**\n   * Create a new AnchoredClock anchored to the current time returned by systemClock.\n   *\n   * @param systemClock should be a clock that returns the number of milliseconds since January 1 1970 such as Date\n   * @param monotonicClock should be a clock that counts milliseconds monotonically such as window.performance or perf_hooks.performance\n   */\n  public constructor(systemClock: Clock, monotonicClock: Clock) {\n    this._monotonicClock = monotonicClock;\n    this._epochMillis = systemClock.now();\n    this._performanceMillis = monotonicClock.now();\n  }\n\n  /**\n   * Returns the current time by adding the number of milliseconds since the\n   * AnchoredClock was created to the creation epoch time\n   */\n  public now(): number {\n    const delta = this._monotonicClock.now() - this._performanceMillis;\n    return this._epochMillis + delta;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag, SpanAttributeValue, SpanAttributes } from '@opentelemetry/api';\n\nexport function sanitizeAttributes(attributes: unknown): SpanAttributes {\n  const out: SpanAttributes = {};\n\n  if (typeof attributes !== 'object' || attributes == null) {\n    return out;\n  }\n\n  for (const [key, val] of Object.entries(attributes)) {\n    if (!isAttributeKey(key)) {\n      diag.warn(`Invalid attribute key: ${key}`);\n      continue;\n    }\n    if (!isAttributeValue(val)) {\n      diag.warn(`Invalid attribute value set for key: ${key}`);\n      continue;\n    }\n    if (Array.isArray(val)) {\n      out[key] = val.slice();\n    } else {\n      out[key] = val;\n    }\n  }\n\n  return out;\n}\n\nexport function isAttributeKey(key: unknown): key is string {\n  return typeof key === 'string' && key.length > 0;\n}\n\nexport function isAttributeValue(val: unknown): val is SpanAttributeValue {\n  if (val == null) {\n    return true;\n  }\n\n  if (Array.isArray(val)) {\n    return isHomogeneousAttributeValueArray(val);\n  }\n\n  return isValidPrimitiveAttributeValue(val);\n}\n\nfunction isHomogeneousAttributeValueArray(arr: unknown[]): boolean {\n  let type: string | undefined;\n\n  for (const element of arr) {\n    // null/undefined elements are allowed\n    if (element == null) continue;\n\n    if (!type) {\n      if (isValidPrimitiveAttributeValue(element)) {\n        type = typeof element;\n        continue;\n      }\n      // encountered an invalid primitive\n      return false;\n    }\n\n    if (typeof element === type) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction isValidPrimitiveAttributeValue(val: unknown): boolean {\n  switch (typeof val) {\n    case 'number':\n    case 'boolean':\n    case 'string':\n      return true;\n  }\n\n  return false;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag, Exception } from '@opentelemetry/api';\nimport { ErrorHandler } from './types';\n\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nexport function loggingErrorHandler(): ErrorHandler {\n  return (ex: Exception) => {\n    diag.error(stringifyException(ex));\n  };\n}\n\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex: Exception | string): string {\n  if (typeof ex === 'string') {\n    return ex;\n  } else {\n    return JSON.stringify(flattenException(ex));\n  }\n}\n\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex: Exception): Record<string, string> {\n  const result = {} as Record<string, string>;\n  let current = ex;\n\n  while (current !== null) {\n    Object.getOwnPropertyNames(current).forEach(propertyName => {\n      if (result[propertyName]) return;\n      const value = current[propertyName as keyof typeof current];\n      if (value) {\n        result[propertyName] = String(value);\n      }\n    });\n    current = Object.getPrototypeOf(current);\n  }\n\n  return result;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Exception } from '@opentelemetry/api';\nimport { loggingErrorHandler } from './logging-error-handler';\nimport { ErrorHandler } from './types';\n\n/** The global error handler delegate */\nlet delegateHandler = loggingErrorHandler();\n\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nexport function setGlobalErrorHandler(handler: ErrorHandler): void {\n  delegateHandler = handler;\n}\n\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nexport function globalErrorHandler(ex: Exception): void {\n  try {\n    delegateHandler(ex);\n  } catch {} // eslint-disable-line no-empty\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum TracesSamplerValues {\n  AlwaysOff = 'always_off',\n  AlwaysOn = 'always_on',\n  ParentBasedAlwaysOff = 'parentbased_always_off',\n  ParentBasedAlwaysOn = 'parentbased_always_on',\n  ParentBasedTraceIdRatio = 'parentbased_traceidratio',\n  TraceIdRatio = 'traceidratio',\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Updates to this file should also be replicated to @opentelemetry/api too.\n\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nexport const _globalThis: typeof globalThis =\n  typeof globalThis === 'object'\n    ? globalThis\n    : typeof self === 'object'\n    ? self\n    : typeof window === 'object'\n    ? window\n    : typeof global === 'object'\n    ? global\n    : ({} as typeof globalThis);\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagLogLevel } from '@opentelemetry/api';\nimport { TracesSamplerValues } from './sampling';\nimport { _globalThis } from '../platform/browser/globalThis';\n\nconst DEFAULT_LIST_SEPARATOR = ',';\n\n/**\n * Environment interface to define all names\n */\n\nconst ENVIRONMENT_BOOLEAN_KEYS = ['OTEL_SDK_DISABLED'] as const;\n\ntype ENVIRONMENT_BOOLEANS = {\n  [K in (typeof ENVIRONMENT_BOOLEAN_KEYS)[number]]?: boolean;\n};\n\nfunction isEnvVarABoolean(key: unknown): key is keyof ENVIRONMENT_BOOLEANS {\n  return (\n    ENVIRONMENT_BOOLEAN_KEYS.indexOf(key as keyof ENVIRONMENT_BOOLEANS) > -1\n  );\n}\n\nconst ENVIRONMENT_NUMBERS_KEYS = [\n  'OTEL_BSP_EXPORT_TIMEOUT',\n  'OTEL_BSP_MAX_EXPORT_BATCH_SIZE',\n  'OTEL_BSP_MAX_QUEUE_SIZE',\n  'OTEL_BSP_SCHEDULE_DELAY',\n  'OTEL_BLRP_EXPORT_TIMEOUT',\n  'OTEL_BLRP_MAX_EXPORT_BATCH_SIZE',\n  'OTEL_BLRP_MAX_QUEUE_SIZE',\n  'OTEL_BLRP_SCHEDULE_DELAY',\n  'OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n  'OTEL_ATTRIBUTE_COUNT_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT',\n  'OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n  'OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT',\n  'OTEL_SPAN_EVENT_COUNT_LIMIT',\n  'OTEL_SPAN_LINK_COUNT_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT',\n  'OTEL_EXPORTER_OTLP_TIMEOUT',\n  'OTEL_EXPORTER_OTLP_TRACES_TIMEOUT',\n  'OTEL_EXPORTER_OTLP_METRICS_TIMEOUT',\n  'OTEL_EXPORTER_OTLP_LOGS_TIMEOUT',\n  'OTEL_EXPORTER_JAEGER_AGENT_PORT',\n] as const;\n\ntype ENVIRONMENT_NUMBERS = {\n  [K in (typeof ENVIRONMENT_NUMBERS_KEYS)[number]]?: number;\n};\n\nfunction isEnvVarANumber(key: unknown): key is keyof ENVIRONMENT_NUMBERS {\n  return (\n    ENVIRONMENT_NUMBERS_KEYS.indexOf(key as keyof ENVIRONMENT_NUMBERS) > -1\n  );\n}\n\nconst ENVIRONMENT_LISTS_KEYS = [\n  'OTEL_NO_PATCH_MODULES',\n  'OTEL_PROPAGATORS',\n] as const;\n\ntype ENVIRONMENT_LISTS = {\n  [K in (typeof ENVIRONMENT_LISTS_KEYS)[number]]?: string[];\n};\n\nfunction isEnvVarAList(key: unknown): key is keyof ENVIRONMENT_LISTS {\n  return ENVIRONMENT_LISTS_KEYS.indexOf(key as keyof ENVIRONMENT_LISTS) > -1;\n}\n\nexport type ENVIRONMENT = {\n  CONTAINER_NAME?: string;\n  ECS_CONTAINER_METADATA_URI_V4?: string;\n  ECS_CONTAINER_METADATA_URI?: string;\n  HOSTNAME?: string;\n  KUBERNETES_SERVICE_HOST?: string;\n  NAMESPACE?: string;\n  OTEL_EXPORTER_JAEGER_AGENT_HOST?: string;\n  OTEL_EXPORTER_JAEGER_ENDPOINT?: string;\n  OTEL_EXPORTER_JAEGER_PASSWORD?: string;\n  OTEL_EXPORTER_JAEGER_USER?: string;\n  OTEL_EXPORTER_OTLP_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_LOGS_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_HEADERS?: string;\n  OTEL_EXPORTER_OTLP_TRACES_HEADERS?: string;\n  OTEL_EXPORTER_OTLP_METRICS_HEADERS?: string;\n  OTEL_EXPORTER_OTLP_LOGS_HEADERS?: string;\n  OTEL_EXPORTER_ZIPKIN_ENDPOINT?: string;\n  OTEL_LOG_LEVEL?: DiagLogLevel;\n  OTEL_RESOURCE_ATTRIBUTES?: string;\n  OTEL_SERVICE_NAME?: string;\n  OTEL_TRACES_EXPORTER?: string;\n  OTEL_TRACES_SAMPLER_ARG?: string;\n  OTEL_TRACES_SAMPLER?: string;\n  OTEL_LOGS_EXPORTER?: string;\n  OTEL_EXPORTER_OTLP_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_LOGS_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_TRACES_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_METRICS_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_LOGS_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_TRACES_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_METRICS_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_LOGS_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE?: string;\n} & ENVIRONMENT_BOOLEANS &\n  ENVIRONMENT_NUMBERS &\n  ENVIRONMENT_LISTS;\n\nexport type RAW_ENVIRONMENT = {\n  [key: string]: string | number | undefined | string[];\n};\n\nexport const DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\n\nexport const DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\n\nexport const DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT = 128;\nexport const DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT = 128;\n\n/**\n * Default environment variables\n */\nexport const DEFAULT_ENVIRONMENT: Required<ENVIRONMENT> = {\n  OTEL_SDK_DISABLED: false,\n  CONTAINER_NAME: '',\n  ECS_CONTAINER_METADATA_URI_V4: '',\n  ECS_CONTAINER_METADATA_URI: '',\n  HOSTNAME: '',\n  KUBERNETES_SERVICE_HOST: '',\n  NAMESPACE: '',\n  OTEL_BSP_EXPORT_TIMEOUT: 30000,\n  OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n  OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n  OTEL_BSP_SCHEDULE_DELAY: 5000,\n  OTEL_BLRP_EXPORT_TIMEOUT: 30000,\n  OTEL_BLRP_MAX_EXPORT_BATCH_SIZE: 512,\n  OTEL_BLRP_MAX_QUEUE_SIZE: 2048,\n  OTEL_BLRP_SCHEDULE_DELAY: 5000,\n  OTEL_EXPORTER_JAEGER_AGENT_HOST: '',\n  OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,\n  OTEL_EXPORTER_JAEGER_ENDPOINT: '',\n  OTEL_EXPORTER_JAEGER_PASSWORD: '',\n  OTEL_EXPORTER_JAEGER_USER: '',\n  OTEL_EXPORTER_OTLP_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_HEADERS: '',\n  OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',\n  OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',\n  OTEL_EXPORTER_OTLP_LOGS_HEADERS: '',\n  OTEL_EXPORTER_OTLP_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_LOGS_TIMEOUT: 10000,\n  OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',\n  OTEL_LOG_LEVEL: DiagLogLevel.INFO,\n  OTEL_NO_PATCH_MODULES: [],\n  OTEL_PROPAGATORS: ['tracecontext', 'baggage'],\n  OTEL_RESOURCE_ATTRIBUTES: '',\n  OTEL_SERVICE_NAME: '',\n  OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT:\n    DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n  OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n  OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT:\n    DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT:\n    DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n  OTEL_TRACES_EXPORTER: '',\n  OTEL_TRACES_SAMPLER: TracesSamplerValues.ParentBasedAlwaysOn,\n  OTEL_TRACES_SAMPLER_ARG: '',\n  OTEL_LOGS_EXPORTER: '',\n  OTEL_EXPORTER_OTLP_INSECURE: '',\n  OTEL_EXPORTER_OTLP_TRACES_INSECURE: '',\n  OTEL_EXPORTER_OTLP_METRICS_INSECURE: '',\n  OTEL_EXPORTER_OTLP_LOGS_INSECURE: '',\n  OTEL_EXPORTER_OTLP_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_LOGS_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: 'cumulative',\n};\n\n/**\n * @param key\n * @param environment\n * @param values\n */\nfunction parseBoolean(\n  key: keyof ENVIRONMENT_BOOLEANS,\n  environment: ENVIRONMENT,\n  values: RAW_ENVIRONMENT\n) {\n  if (typeof values[key] === 'undefined') {\n    return;\n  }\n\n  const value = String(values[key]);\n  // support case-insensitive \"true\"\n  environment[key] = value.toLowerCase() === 'true';\n}\n\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\nfunction parseNumber(\n  name: keyof ENVIRONMENT_NUMBERS,\n  environment: ENVIRONMENT,\n  values: RAW_ENVIRONMENT,\n  min = -Infinity,\n  max = Infinity\n) {\n  if (typeof values[name] !== 'undefined') {\n    const value = Number(values[name] as string);\n    if (!isNaN(value)) {\n      if (value < min) {\n        environment[name] = min;\n      } else if (value > max) {\n        environment[name] = max;\n      } else {\n        environment[name] = value;\n      }\n    }\n  }\n}\n\n/**\n * Parses list-like strings from input into output.\n * @param name\n * @param environment\n * @param values\n * @param separator\n */\nfunction parseStringList(\n  name: keyof ENVIRONMENT_LISTS,\n  output: ENVIRONMENT,\n  input: RAW_ENVIRONMENT,\n  separator = DEFAULT_LIST_SEPARATOR\n) {\n  const givenValue = input[name];\n  if (typeof givenValue === 'string') {\n    output[name] = givenValue.split(separator).map(v => v.trim());\n  }\n}\n\n// The support string -> DiagLogLevel mappings\nconst logLevelMap: { [key: string]: DiagLogLevel } = {\n  ALL: DiagLogLevel.ALL,\n  VERBOSE: DiagLogLevel.VERBOSE,\n  DEBUG: DiagLogLevel.DEBUG,\n  INFO: DiagLogLevel.INFO,\n  WARN: DiagLogLevel.WARN,\n  ERROR: DiagLogLevel.ERROR,\n  NONE: DiagLogLevel.NONE,\n};\n\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\nfunction setLogLevelFromEnv(\n  key: keyof ENVIRONMENT,\n  environment: RAW_ENVIRONMENT | ENVIRONMENT,\n  values: RAW_ENVIRONMENT\n) {\n  const value = values[key];\n  if (typeof value === 'string') {\n    const theLevel = logLevelMap[value.toUpperCase()];\n    if (theLevel != null) {\n      environment[key] = theLevel;\n    }\n  }\n}\n\n/**\n * Parses environment values\n * @param values\n */\nexport function parseEnvironment(values: RAW_ENVIRONMENT): ENVIRONMENT {\n  const environment: ENVIRONMENT = {};\n\n  for (const env in DEFAULT_ENVIRONMENT) {\n    const key = env as keyof ENVIRONMENT;\n\n    switch (key) {\n      case 'OTEL_LOG_LEVEL':\n        setLogLevelFromEnv(key, environment, values);\n        break;\n\n      default:\n        if (isEnvVarABoolean(key)) {\n          parseBoolean(key, environment, values);\n        } else if (isEnvVarANumber(key)) {\n          parseNumber(key, environment, values);\n        } else if (isEnvVarAList(key)) {\n          parseStringList(key, environment, values);\n        } else {\n          const value = values[key];\n          if (typeof value !== 'undefined' && value !== null) {\n            environment[key] = String(value);\n          }\n        }\n    }\n  }\n\n  return environment;\n}\n\n/**\n * Get environment in node or browser without\n * populating default values.\n */\nexport function getEnvWithoutDefaults(): ENVIRONMENT {\n  return typeof process !== 'undefined' && process && process.env\n    ? parseEnvironment(process.env as RAW_ENVIRONMENT)\n    : parseEnvironment(_globalThis as typeof globalThis & RAW_ENVIRONMENT);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as os from 'os';\nimport {\n  DEFAULT_ENVIRONMENT,\n  ENVIRONMENT,\n  RAW_ENVIRONMENT,\n  parseEnvironment,\n} from '../../utils/environment';\n\n/**\n * Gets the environment variables\n */\nexport function getEnv(): Required<ENVIRONMENT> {\n  const processEnv = parseEnvironment(process.env as RAW_ENVIRONMENT);\n  return Object.assign(\n    {\n      HOSTNAME: os.hostname(),\n    },\n    DEFAULT_ENVIRONMENT,\n    processEnv\n  );\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins\nexport const _globalThis = typeof globalThis === 'object' ? globalThis : global;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction intValue(charCode: number): number {\n  // 0-9\n  if (charCode >= 48 && charCode <= 57) {\n    return charCode - 48;\n  }\n\n  // a-f\n  if (charCode >= 97 && charCode <= 102) {\n    return charCode - 87;\n  }\n\n  // A-F\n  return charCode - 55;\n}\n\nconst buf8 = Buffer.alloc(8);\nconst buf16 = Buffer.alloc(16);\n\nexport function hexToBase64(hexStr: string): string {\n  let buf;\n  if (hexStr.length === 16) {\n    buf = buf8;\n  } else if (hexStr.length === 32) {\n    buf = buf16;\n  } else {\n    buf = Buffer.alloc(hexStr.length / 2);\n  }\n  let offset = 0;\n\n  for (let i = 0; i < hexStr.length; i += 2) {\n    const hi = intValue(hexStr.charCodeAt(i));\n    const lo = intValue(hexStr.charCodeAt(i + 1));\n    buf.writeUInt8((hi << 4) | lo, offset++);\n  }\n\n  return buf.toString('base64');\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdGenerator } from '../../trace/IdGenerator';\nconst SPAN_ID_BYTES = 8;\nconst TRACE_ID_BYTES = 16;\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n */\nexport class RandomIdGenerator implements IdGenerator {\n  /**\n   * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n   * characters corresponding to 128 bits.\n   */\n  generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n\n  /**\n   * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n   * characters corresponding to 64 bits.\n   */\n  generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n}\n\nconst SHARED_BUFFER = Buffer.allocUnsafe(TRACE_ID_BYTES);\nfunction getIdGenerator(bytes: number): () => string {\n  return function generateId() {\n    for (let i = 0; i < bytes / 4; i++) {\n      // unsigned right shift drops decimal part of the number\n      // it is required because if a number between 2**32 and 2**32 - 1 is generated, an out of range error is thrown by writeUInt32BE\n      SHARED_BUFFER.writeUInt32BE((Math.random() * 2 ** 32) >>> 0, i * 4);\n    }\n\n    // If buffer is all 0, set the last byte to 1 to guarantee a valid w3c id is generated\n    for (let i = 0; i < bytes; i++) {\n      if (SHARED_BUFFER[i] > 0) {\n        break;\n      } else if (i === bytes - 1) {\n        SHARED_BUFFER[bytes - 1] = 1;\n      }\n    }\n\n    return SHARED_BUFFER.toString('hex', 0, bytes);\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { performance } from 'perf_hooks';\n\nexport const otperformance = performance;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '1.19.0';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\nexport const SemanticAttributes = {\n  /**\n   * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n   *\n   * Note: This may be different from `faas.id` if an alias is involved.\n   */\n  AWS_LAMBDA_INVOKED_ARN: 'aws.lambda.invoked_arn',\n\n  /**\n   * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n   */\n  DB_SYSTEM: 'db.system',\n\n  /**\n   * The connection string used to connect to the database. It is recommended to remove embedded credentials.\n   */\n  DB_CONNECTION_STRING: 'db.connection_string',\n\n  /**\n   * Username for accessing the database.\n   */\n  DB_USER: 'db.user',\n\n  /**\n   * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n   */\n  DB_JDBC_DRIVER_CLASSNAME: 'db.jdbc.driver_classname',\n\n  /**\n   * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n   *\n   * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n   */\n  DB_NAME: 'db.name',\n\n  /**\n   * The database statement being executed.\n   *\n   * Note: The value may be sanitized to exclude sensitive information.\n   */\n  DB_STATEMENT: 'db.statement',\n\n  /**\n   * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n   *\n   * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n   */\n  DB_OPERATION: 'db.operation',\n\n  /**\n   * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n   *\n   * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).\n   */\n  DB_MSSQL_INSTANCE_NAME: 'db.mssql.instance_name',\n\n  /**\n   * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n   */\n  DB_CASSANDRA_KEYSPACE: 'db.cassandra.keyspace',\n\n  /**\n   * The fetch size used for paging, i.e. how many rows will be returned at once.\n   */\n  DB_CASSANDRA_PAGE_SIZE: 'db.cassandra.page_size',\n\n  /**\n   * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n   */\n  DB_CASSANDRA_CONSISTENCY_LEVEL: 'db.cassandra.consistency_level',\n\n  /**\n   * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n   *\n   * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n   */\n  DB_CASSANDRA_TABLE: 'db.cassandra.table',\n\n  /**\n   * Whether or not the query is idempotent.\n   */\n  DB_CASSANDRA_IDEMPOTENCE: 'db.cassandra.idempotence',\n\n  /**\n   * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n   */\n  DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT:\n    'db.cassandra.speculative_execution_count',\n\n  /**\n   * The ID of the coordinating node for a query.\n   */\n  DB_CASSANDRA_COORDINATOR_ID: 'db.cassandra.coordinator.id',\n\n  /**\n   * The data center of the coordinating node for a query.\n   */\n  DB_CASSANDRA_COORDINATOR_DC: 'db.cassandra.coordinator.dc',\n\n  /**\n   * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.\n   */\n  DB_HBASE_NAMESPACE: 'db.hbase.namespace',\n\n  /**\n   * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n   */\n  DB_REDIS_DATABASE_INDEX: 'db.redis.database_index',\n\n  /**\n   * The collection being accessed within the database stated in `db.name`.\n   */\n  DB_MONGODB_COLLECTION: 'db.mongodb.collection',\n\n  /**\n   * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n   *\n   * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n   */\n  DB_SQL_TABLE: 'db.sql.table',\n\n  /**\n   * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n   */\n  EXCEPTION_TYPE: 'exception.type',\n\n  /**\n   * The exception message.\n   */\n  EXCEPTION_MESSAGE: 'exception.message',\n\n  /**\n   * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n   */\n  EXCEPTION_STACKTRACE: 'exception.stacktrace',\n\n  /**\n  * SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n  *\n  * Note: An exception is considered to have escaped (or left) the scope of a span,\nif that span is ended while the exception is still logically &#34;in flight&#34;.\nThis may be actually &#34;in flight&#34; in some languages (e.g. if the exception\nis passed to a Context manager&#39;s `__exit__` method in Python) but will\nusually be caught at the point of recording the exception in most languages.\n\nIt is usually not possible to determine at the point where an exception is thrown\nwhether it will escape the scope of a span.\nHowever, it is trivial to know that an exception\nwill escape, if one checks for an active exception just before ending the span,\nas done in the [example above](#exception-end-example).\n\nIt follows that an exception may still escape the scope of the span\neven if the `exception.escaped` attribute was not set or set to false,\nsince the event might have been recorded at a time where it was not\nclear whether the exception will escape.\n  */\n  EXCEPTION_ESCAPED: 'exception.escaped',\n\n  /**\n   * Type of the trigger on which the function is executed.\n   */\n  FAAS_TRIGGER: 'faas.trigger',\n\n  /**\n   * The execution ID of the current function execution.\n   */\n  FAAS_EXECUTION: 'faas.execution',\n\n  /**\n   * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n   */\n  FAAS_DOCUMENT_COLLECTION: 'faas.document.collection',\n\n  /**\n   * Describes the type of the operation that was performed on the data.\n   */\n  FAAS_DOCUMENT_OPERATION: 'faas.document.operation',\n\n  /**\n   * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n   */\n  FAAS_DOCUMENT_TIME: 'faas.document.time',\n\n  /**\n   * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n   */\n  FAAS_DOCUMENT_NAME: 'faas.document.name',\n\n  /**\n   * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n   */\n  FAAS_TIME: 'faas.time',\n\n  /**\n   * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n   */\n  FAAS_CRON: 'faas.cron',\n\n  /**\n   * A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n   */\n  FAAS_COLDSTART: 'faas.coldstart',\n\n  /**\n   * The name of the invoked function.\n   *\n   * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_NAME: 'faas.invoked_name',\n\n  /**\n   * The cloud provider of the invoked function.\n   *\n   * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_PROVIDER: 'faas.invoked_provider',\n\n  /**\n   * The cloud region of the invoked function.\n   *\n   * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_REGION: 'faas.invoked_region',\n\n  /**\n   * Transport protocol used. See note below.\n   */\n  NET_TRANSPORT: 'net.transport',\n\n  /**\n   * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n   */\n  NET_PEER_IP: 'net.peer.ip',\n\n  /**\n   * Remote port number.\n   */\n  NET_PEER_PORT: 'net.peer.port',\n\n  /**\n   * Remote hostname or similar, see note below.\n   */\n  NET_PEER_NAME: 'net.peer.name',\n\n  /**\n   * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.\n   */\n  NET_HOST_IP: 'net.host.ip',\n\n  /**\n   * Like `net.peer.port` but for the host port.\n   */\n  NET_HOST_PORT: 'net.host.port',\n\n  /**\n   * Local hostname or similar, see note below.\n   */\n  NET_HOST_NAME: 'net.host.name',\n\n  /**\n   * The internet connection type currently being used by the host.\n   */\n  NET_HOST_CONNECTION_TYPE: 'net.host.connection.type',\n\n  /**\n   * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n   */\n  NET_HOST_CONNECTION_SUBTYPE: 'net.host.connection.subtype',\n\n  /**\n   * The name of the mobile carrier.\n   */\n  NET_HOST_CARRIER_NAME: 'net.host.carrier.name',\n\n  /**\n   * The mobile carrier country code.\n   */\n  NET_HOST_CARRIER_MCC: 'net.host.carrier.mcc',\n\n  /**\n   * The mobile carrier network code.\n   */\n  NET_HOST_CARRIER_MNC: 'net.host.carrier.mnc',\n\n  /**\n   * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.\n   */\n  NET_HOST_CARRIER_ICC: 'net.host.carrier.icc',\n\n  /**\n   * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n   */\n  PEER_SERVICE: 'peer.service',\n\n  /**\n   * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.\n   */\n  ENDUSER_ID: 'enduser.id',\n\n  /**\n   * Actual/assumed role the client is making the request under extracted from token or application security context.\n   */\n  ENDUSER_ROLE: 'enduser.role',\n\n  /**\n   * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n   */\n  ENDUSER_SCOPE: 'enduser.scope',\n\n  /**\n   * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).\n   */\n  THREAD_ID: 'thread.id',\n\n  /**\n   * Current thread name.\n   */\n  THREAD_NAME: 'thread.name',\n\n  /**\n   * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).\n   */\n  CODE_FUNCTION: 'code.function',\n\n  /**\n   * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n   */\n  CODE_NAMESPACE: 'code.namespace',\n\n  /**\n   * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n   */\n  CODE_FILEPATH: 'code.filepath',\n\n  /**\n   * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n   */\n  CODE_LINENO: 'code.lineno',\n\n  /**\n   * HTTP request method.\n   */\n  HTTP_METHOD: 'http.method',\n\n  /**\n   * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n   *\n   * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n   */\n  HTTP_URL: 'http.url',\n\n  /**\n   * The full request target as passed in a HTTP request line or equivalent.\n   */\n  HTTP_TARGET: 'http.target',\n\n  /**\n   * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note.\n   *\n   * Note: When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set.\n   */\n  HTTP_HOST: 'http.host',\n\n  /**\n   * The URI scheme identifying the used protocol.\n   */\n  HTTP_SCHEME: 'http.scheme',\n\n  /**\n   * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n   */\n  HTTP_STATUS_CODE: 'http.status_code',\n\n  /**\n   * Kind of HTTP protocol used.\n   *\n   * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n   */\n  HTTP_FLAVOR: 'http.flavor',\n\n  /**\n   * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.\n   */\n  HTTP_USER_AGENT: 'http.user_agent',\n\n  /**\n   * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n   */\n  HTTP_REQUEST_CONTENT_LENGTH: 'http.request_content_length',\n\n  /**\n   * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.\n   */\n  HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED:\n    'http.request_content_length_uncompressed',\n\n  /**\n   * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n   */\n  HTTP_RESPONSE_CONTENT_LENGTH: 'http.response_content_length',\n\n  /**\n   * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.\n   */\n  HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED:\n    'http.response_content_length_uncompressed',\n\n  /**\n   * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).\n   *\n   * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.\n   */\n  HTTP_SERVER_NAME: 'http.server_name',\n\n  /**\n   * The matched route (path template).\n   */\n  HTTP_ROUTE: 'http.route',\n\n  /**\n  * The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n  *\n  * Note: This is not necessarily the same as `net.peer.ip`, which would\nidentify the network-level peer, which may be a proxy.\n\nThis attribute should be set when a source of information different\nfrom the one used for `net.peer.ip`, is available even if that other\nsource just confirms the same value as `net.peer.ip`.\nRationale: For `net.peer.ip`, one typically does not know if it\ncomes from a proxy, reverse proxy, or the actual client. Setting\n`http.client_ip` when it&#39;s the same as `net.peer.ip` means that\none is at least somewhat confident that the address is not that of\nthe closest proxy.\n  */\n  HTTP_CLIENT_IP: 'http.client_ip',\n\n  /**\n   * The keys in the `RequestItems` object field.\n   */\n  AWS_DYNAMODB_TABLE_NAMES: 'aws.dynamodb.table_names',\n\n  /**\n   * The JSON-serialized value of each item in the `ConsumedCapacity` response field.\n   */\n  AWS_DYNAMODB_CONSUMED_CAPACITY: 'aws.dynamodb.consumed_capacity',\n\n  /**\n   * The JSON-serialized value of the `ItemCollectionMetrics` response field.\n   */\n  AWS_DYNAMODB_ITEM_COLLECTION_METRICS: 'aws.dynamodb.item_collection_metrics',\n\n  /**\n   * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.\n   */\n  AWS_DYNAMODB_PROVISIONED_READ_CAPACITY:\n    'aws.dynamodb.provisioned_read_capacity',\n\n  /**\n   * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.\n   */\n  AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY:\n    'aws.dynamodb.provisioned_write_capacity',\n\n  /**\n   * The value of the `ConsistentRead` request parameter.\n   */\n  AWS_DYNAMODB_CONSISTENT_READ: 'aws.dynamodb.consistent_read',\n\n  /**\n   * The value of the `ProjectionExpression` request parameter.\n   */\n  AWS_DYNAMODB_PROJECTION: 'aws.dynamodb.projection',\n\n  /**\n   * The value of the `Limit` request parameter.\n   */\n  AWS_DYNAMODB_LIMIT: 'aws.dynamodb.limit',\n\n  /**\n   * The value of the `AttributesToGet` request parameter.\n   */\n  AWS_DYNAMODB_ATTRIBUTES_TO_GET: 'aws.dynamodb.attributes_to_get',\n\n  /**\n   * The value of the `IndexName` request parameter.\n   */\n  AWS_DYNAMODB_INDEX_NAME: 'aws.dynamodb.index_name',\n\n  /**\n   * The value of the `Select` request parameter.\n   */\n  AWS_DYNAMODB_SELECT: 'aws.dynamodb.select',\n\n  /**\n   * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.\n   */\n  AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES:\n    'aws.dynamodb.global_secondary_indexes',\n\n  /**\n   * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.\n   */\n  AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES: 'aws.dynamodb.local_secondary_indexes',\n\n  /**\n   * The value of the `ExclusiveStartTableName` request parameter.\n   */\n  AWS_DYNAMODB_EXCLUSIVE_START_TABLE: 'aws.dynamodb.exclusive_start_table',\n\n  /**\n   * The the number of items in the `TableNames` response parameter.\n   */\n  AWS_DYNAMODB_TABLE_COUNT: 'aws.dynamodb.table_count',\n\n  /**\n   * The value of the `ScanIndexForward` request parameter.\n   */\n  AWS_DYNAMODB_SCAN_FORWARD: 'aws.dynamodb.scan_forward',\n\n  /**\n   * The value of the `Segment` request parameter.\n   */\n  AWS_DYNAMODB_SEGMENT: 'aws.dynamodb.segment',\n\n  /**\n   * The value of the `TotalSegments` request parameter.\n   */\n  AWS_DYNAMODB_TOTAL_SEGMENTS: 'aws.dynamodb.total_segments',\n\n  /**\n   * The value of the `Count` response parameter.\n   */\n  AWS_DYNAMODB_COUNT: 'aws.dynamodb.count',\n\n  /**\n   * The value of the `ScannedCount` response parameter.\n   */\n  AWS_DYNAMODB_SCANNED_COUNT: 'aws.dynamodb.scanned_count',\n\n  /**\n   * The JSON-serialized value of each item in the `AttributeDefinitions` request field.\n   */\n  AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS: 'aws.dynamodb.attribute_definitions',\n\n  /**\n   * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.\n   */\n  AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES:\n    'aws.dynamodb.global_secondary_index_updates',\n\n  /**\n   * A string identifying the messaging system.\n   */\n  MESSAGING_SYSTEM: 'messaging.system',\n\n  /**\n   * The message destination name. This might be equal to the span name but is required nevertheless.\n   */\n  MESSAGING_DESTINATION: 'messaging.destination',\n\n  /**\n   * The kind of message destination.\n   */\n  MESSAGING_DESTINATION_KIND: 'messaging.destination_kind',\n\n  /**\n   * A boolean that is true if the message destination is temporary.\n   */\n  MESSAGING_TEMP_DESTINATION: 'messaging.temp_destination',\n\n  /**\n   * The name of the transport protocol.\n   */\n  MESSAGING_PROTOCOL: 'messaging.protocol',\n\n  /**\n   * The version of the transport protocol.\n   */\n  MESSAGING_PROTOCOL_VERSION: 'messaging.protocol_version',\n\n  /**\n   * Connection string.\n   */\n  MESSAGING_URL: 'messaging.url',\n\n  /**\n   * A value used by the messaging system as an identifier for the message, represented as a string.\n   */\n  MESSAGING_MESSAGE_ID: 'messaging.message_id',\n\n  /**\n   * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n   */\n  MESSAGING_CONVERSATION_ID: 'messaging.conversation_id',\n\n  /**\n   * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.\n   */\n  MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES: 'messaging.message_payload_size_bytes',\n\n  /**\n   * The compressed size of the message payload in bytes.\n   */\n  MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES:\n    'messaging.message_payload_compressed_size_bytes',\n\n  /**\n   * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n   */\n  MESSAGING_OPERATION: 'messaging.operation',\n\n  /**\n   * The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.\n   */\n  MESSAGING_CONSUMER_ID: 'messaging.consumer_id',\n\n  /**\n   * RabbitMQ message routing key.\n   */\n  MESSAGING_RABBITMQ_ROUTING_KEY: 'messaging.rabbitmq.routing_key',\n\n  /**\n   * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.\n   *\n   * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.\n   */\n  MESSAGING_KAFKA_MESSAGE_KEY: 'messaging.kafka.message_key',\n\n  /**\n   * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.\n   */\n  MESSAGING_KAFKA_CONSUMER_GROUP: 'messaging.kafka.consumer_group',\n\n  /**\n   * Client Id for the Consumer or Producer that is handling the message.\n   */\n  MESSAGING_KAFKA_CLIENT_ID: 'messaging.kafka.client_id',\n\n  /**\n   * Partition the message is sent to.\n   */\n  MESSAGING_KAFKA_PARTITION: 'messaging.kafka.partition',\n\n  /**\n   * A boolean that is true if the message is a tombstone.\n   */\n  MESSAGING_KAFKA_TOMBSTONE: 'messaging.kafka.tombstone',\n\n  /**\n   * A string identifying the remoting system.\n   */\n  RPC_SYSTEM: 'rpc.system',\n\n  /**\n   * The full (logical) name of the service being called, including its package name, if applicable.\n   *\n   * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n   */\n  RPC_SERVICE: 'rpc.service',\n\n  /**\n   * The name of the (logical) method being called, must be equal to the $method part in the span name.\n   *\n   * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n   */\n  RPC_METHOD: 'rpc.method',\n\n  /**\n   * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n   */\n  RPC_GRPC_STATUS_CODE: 'rpc.grpc.status_code',\n\n  /**\n   * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.\n   */\n  RPC_JSONRPC_VERSION: 'rpc.jsonrpc.version',\n\n  /**\n   * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n   */\n  RPC_JSONRPC_REQUEST_ID: 'rpc.jsonrpc.request_id',\n\n  /**\n   * `error.code` property of response if it is an error response.\n   */\n  RPC_JSONRPC_ERROR_CODE: 'rpc.jsonrpc.error_code',\n\n  /**\n   * `error.message` property of response if it is an error response.\n   */\n  RPC_JSONRPC_ERROR_MESSAGE: 'rpc.jsonrpc.error_message',\n\n  /**\n   * Whether this is a received or sent message.\n   */\n  MESSAGE_TYPE: 'message.type',\n\n  /**\n   * MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.\n   *\n   * Note: This way we guarantee that the values will be consistent between different implementations.\n   */\n  MESSAGE_ID: 'message.id',\n\n  /**\n   * Compressed size of the message in bytes.\n   */\n  MESSAGE_COMPRESSED_SIZE: 'message.compressed_size',\n\n  /**\n   * Uncompressed size of the message in bytes.\n   */\n  MESSAGE_UNCOMPRESSED_SIZE: 'message.uncompressed_size',\n};\n\nexport const DbSystemValues = {\n  /** Some other SQL database. Fallback only. See notes. */\n  OTHER_SQL: 'other_sql',\n  /** Microsoft SQL Server. */\n  MSSQL: 'mssql',\n  /** MySQL. */\n  MYSQL: 'mysql',\n  /** Oracle Database. */\n  ORACLE: 'oracle',\n  /** IBM Db2. */\n  DB2: 'db2',\n  /** PostgreSQL. */\n  POSTGRESQL: 'postgresql',\n  /** Amazon Redshift. */\n  REDSHIFT: 'redshift',\n  /** Apache Hive. */\n  HIVE: 'hive',\n  /** Cloudscape. */\n  CLOUDSCAPE: 'cloudscape',\n  /** HyperSQL DataBase. */\n  HSQLDB: 'hsqldb',\n  /** Progress Database. */\n  PROGRESS: 'progress',\n  /** SAP MaxDB. */\n  MAXDB: 'maxdb',\n  /** SAP HANA. */\n  HANADB: 'hanadb',\n  /** Ingres. */\n  INGRES: 'ingres',\n  /** FirstSQL. */\n  FIRSTSQL: 'firstsql',\n  /** EnterpriseDB. */\n  EDB: 'edb',\n  /** InterSystems Caché. */\n  CACHE: 'cache',\n  /** Adabas (Adaptable Database System). */\n  ADABAS: 'adabas',\n  /** Firebird. */\n  FIREBIRD: 'firebird',\n  /** Apache Derby. */\n  DERBY: 'derby',\n  /** FileMaker. */\n  FILEMAKER: 'filemaker',\n  /** Informix. */\n  INFORMIX: 'informix',\n  /** InstantDB. */\n  INSTANTDB: 'instantdb',\n  /** InterBase. */\n  INTERBASE: 'interbase',\n  /** MariaDB. */\n  MARIADB: 'mariadb',\n  /** Netezza. */\n  NETEZZA: 'netezza',\n  /** Pervasive PSQL. */\n  PERVASIVE: 'pervasive',\n  /** PointBase. */\n  POINTBASE: 'pointbase',\n  /** SQLite. */\n  SQLITE: 'sqlite',\n  /** Sybase. */\n  SYBASE: 'sybase',\n  /** Teradata. */\n  TERADATA: 'teradata',\n  /** Vertica. */\n  VERTICA: 'vertica',\n  /** H2. */\n  H2: 'h2',\n  /** ColdFusion IMQ. */\n  COLDFUSION: 'coldfusion',\n  /** Apache Cassandra. */\n  CASSANDRA: 'cassandra',\n  /** Apache HBase. */\n  HBASE: 'hbase',\n  /** MongoDB. */\n  MONGODB: 'mongodb',\n  /** Redis. */\n  REDIS: 'redis',\n  /** Couchbase. */\n  COUCHBASE: 'couchbase',\n  /** CouchDB. */\n  COUCHDB: 'couchdb',\n  /** Microsoft Azure Cosmos DB. */\n  COSMOSDB: 'cosmosdb',\n  /** Amazon DynamoDB. */\n  DYNAMODB: 'dynamodb',\n  /** Neo4j. */\n  NEO4J: 'neo4j',\n  /** Apache Geode. */\n  GEODE: 'geode',\n  /** Elasticsearch. */\n  ELASTICSEARCH: 'elasticsearch',\n  /** Memcached. */\n  MEMCACHED: 'memcached',\n  /** CockroachDB. */\n  COCKROACHDB: 'cockroachdb',\n} as const;\nexport type DbSystemValues =\n  (typeof DbSystemValues)[keyof typeof DbSystemValues];\n\nexport const DbCassandraConsistencyLevelValues = {\n  /** all. */\n  ALL: 'all',\n  /** each_quorum. */\n  EACH_QUORUM: 'each_quorum',\n  /** quorum. */\n  QUORUM: 'quorum',\n  /** local_quorum. */\n  LOCAL_QUORUM: 'local_quorum',\n  /** one. */\n  ONE: 'one',\n  /** two. */\n  TWO: 'two',\n  /** three. */\n  THREE: 'three',\n  /** local_one. */\n  LOCAL_ONE: 'local_one',\n  /** any. */\n  ANY: 'any',\n  /** serial. */\n  SERIAL: 'serial',\n  /** local_serial. */\n  LOCAL_SERIAL: 'local_serial',\n} as const;\nexport type DbCassandraConsistencyLevelValues =\n  (typeof DbCassandraConsistencyLevelValues)[keyof typeof DbCassandraConsistencyLevelValues];\n\nexport const FaasTriggerValues = {\n  /** A response to some data source operation such as a database or filesystem read/write. */\n  DATASOURCE: 'datasource',\n  /** To provide an answer to an inbound HTTP request. */\n  HTTP: 'http',\n  /** A function is set to be executed when messages are sent to a messaging system. */\n  PUBSUB: 'pubsub',\n  /** A function is scheduled to be executed regularly. */\n  TIMER: 'timer',\n  /** If none of the others apply. */\n  OTHER: 'other',\n} as const;\nexport type FaasTriggerValues =\n  (typeof FaasTriggerValues)[keyof typeof FaasTriggerValues];\n\nexport const FaasDocumentOperationValues = {\n  /** When a new object is created. */\n  INSERT: 'insert',\n  /** When an object is modified. */\n  EDIT: 'edit',\n  /** When an object is deleted. */\n  DELETE: 'delete',\n} as const;\nexport type FaasDocumentOperationValues =\n  (typeof FaasDocumentOperationValues)[keyof typeof FaasDocumentOperationValues];\n\nexport const FaasInvokedProviderValues = {\n  /** Alibaba Cloud. */\n  ALIBABA_CLOUD: 'alibaba_cloud',\n  /** Amazon Web Services. */\n  AWS: 'aws',\n  /** Microsoft Azure. */\n  AZURE: 'azure',\n  /** Google Cloud Platform. */\n  GCP: 'gcp',\n} as const;\nexport type FaasInvokedProviderValues =\n  (typeof FaasInvokedProviderValues)[keyof typeof FaasInvokedProviderValues];\n\nexport const NetTransportValues = {\n  /** ip_tcp. */\n  IP_TCP: 'ip_tcp',\n  /** ip_udp. */\n  IP_UDP: 'ip_udp',\n  /** Another IP-based protocol. */\n  IP: 'ip',\n  /** Unix Domain socket. See below. */\n  UNIX: 'unix',\n  /** Named or anonymous pipe. See note below. */\n  PIPE: 'pipe',\n  /** In-process communication. */\n  INPROC: 'inproc',\n  /** Something else (non IP-based). */\n  OTHER: 'other',\n} as const;\nexport type NetTransportValues =\n  (typeof NetTransportValues)[keyof typeof NetTransportValues];\n\nexport const NetHostConnectionTypeValues = {\n  /** wifi. */\n  WIFI: 'wifi',\n  /** wired. */\n  WIRED: 'wired',\n  /** cell. */\n  CELL: 'cell',\n  /** unavailable. */\n  UNAVAILABLE: 'unavailable',\n  /** unknown. */\n  UNKNOWN: 'unknown',\n} as const;\nexport type NetHostConnectionTypeValues =\n  (typeof NetHostConnectionTypeValues)[keyof typeof NetHostConnectionTypeValues];\n\nexport const NetHostConnectionSubtypeValues = {\n  /** GPRS. */\n  GPRS: 'gprs',\n  /** EDGE. */\n  EDGE: 'edge',\n  /** UMTS. */\n  UMTS: 'umts',\n  /** CDMA. */\n  CDMA: 'cdma',\n  /** EVDO Rel. 0. */\n  EVDO_0: 'evdo_0',\n  /** EVDO Rev. A. */\n  EVDO_A: 'evdo_a',\n  /** CDMA2000 1XRTT. */\n  CDMA2000_1XRTT: 'cdma2000_1xrtt',\n  /** HSDPA. */\n  HSDPA: 'hsdpa',\n  /** HSUPA. */\n  HSUPA: 'hsupa',\n  /** HSPA. */\n  HSPA: 'hspa',\n  /** IDEN. */\n  IDEN: 'iden',\n  /** EVDO Rev. B. */\n  EVDO_B: 'evdo_b',\n  /** LTE. */\n  LTE: 'lte',\n  /** EHRPD. */\n  EHRPD: 'ehrpd',\n  /** HSPAP. */\n  HSPAP: 'hspap',\n  /** GSM. */\n  GSM: 'gsm',\n  /** TD-SCDMA. */\n  TD_SCDMA: 'td_scdma',\n  /** IWLAN. */\n  IWLAN: 'iwlan',\n  /** 5G NR (New Radio). */\n  NR: 'nr',\n  /** 5G NRNSA (New Radio Non-Standalone). */\n  NRNSA: 'nrnsa',\n  /** LTE CA. */\n  LTE_CA: 'lte_ca',\n} as const;\nexport type NetHostConnectionSubtypeValues =\n  (typeof NetHostConnectionSubtypeValues)[keyof typeof NetHostConnectionSubtypeValues];\n\nexport const HttpFlavorValues = {\n  /** HTTP 1.0. */\n  HTTP_1_0: '1.0',\n  /** HTTP 1.1. */\n  HTTP_1_1: '1.1',\n  /** HTTP 2. */\n  HTTP_2_0: '2.0',\n  /** SPDY protocol. */\n  SPDY: 'SPDY',\n  /** QUIC protocol. */\n  QUIC: 'QUIC',\n} as const;\nexport type HttpFlavorValues =\n  (typeof HttpFlavorValues)[keyof typeof HttpFlavorValues];\n\nexport const MessagingDestinationKindValues = {\n  /** A message sent to a queue. */\n  QUEUE: 'queue',\n  /** A message sent to a topic. */\n  TOPIC: 'topic',\n} as const;\nexport type MessagingDestinationKindValues =\n  (typeof MessagingDestinationKindValues)[keyof typeof MessagingDestinationKindValues];\n\nexport const MessagingOperationValues = {\n  /** receive. */\n  RECEIVE: 'receive',\n  /** process. */\n  PROCESS: 'process',\n} as const;\nexport type MessagingOperationValues =\n  (typeof MessagingOperationValues)[keyof typeof MessagingOperationValues];\n\nexport const RpcGrpcStatusCodeValues = {\n  /** OK. */\n  OK: 0,\n  /** CANCELLED. */\n  CANCELLED: 1,\n  /** UNKNOWN. */\n  UNKNOWN: 2,\n  /** INVALID_ARGUMENT. */\n  INVALID_ARGUMENT: 3,\n  /** DEADLINE_EXCEEDED. */\n  DEADLINE_EXCEEDED: 4,\n  /** NOT_FOUND. */\n  NOT_FOUND: 5,\n  /** ALREADY_EXISTS. */\n  ALREADY_EXISTS: 6,\n  /** PERMISSION_DENIED. */\n  PERMISSION_DENIED: 7,\n  /** RESOURCE_EXHAUSTED. */\n  RESOURCE_EXHAUSTED: 8,\n  /** FAILED_PRECONDITION. */\n  FAILED_PRECONDITION: 9,\n  /** ABORTED. */\n  ABORTED: 10,\n  /** OUT_OF_RANGE. */\n  OUT_OF_RANGE: 11,\n  /** UNIMPLEMENTED. */\n  UNIMPLEMENTED: 12,\n  /** INTERNAL. */\n  INTERNAL: 13,\n  /** UNAVAILABLE. */\n  UNAVAILABLE: 14,\n  /** DATA_LOSS. */\n  DATA_LOSS: 15,\n  /** UNAUTHENTICATED. */\n  UNAUTHENTICATED: 16,\n} as const;\nexport type RpcGrpcStatusCodeValues =\n  (typeof RpcGrpcStatusCodeValues)[keyof typeof RpcGrpcStatusCodeValues];\n\nexport const MessageTypeValues = {\n  /** sent. */\n  SENT: 'SENT',\n  /** received. */\n  RECEIVED: 'RECEIVED',\n} as const;\nexport type MessageTypeValues =\n  (typeof MessageTypeValues)[keyof typeof MessageTypeValues];\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './SemanticAttributes';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\nexport const SemanticResourceAttributes = {\n  /**\n   * Name of the cloud provider.\n   */\n  CLOUD_PROVIDER: 'cloud.provider',\n\n  /**\n   * The cloud account ID the resource is assigned to.\n   */\n  CLOUD_ACCOUNT_ID: 'cloud.account.id',\n\n  /**\n   * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n   */\n  CLOUD_REGION: 'cloud.region',\n\n  /**\n   * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n   *\n   * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n   */\n  CLOUD_AVAILABILITY_ZONE: 'cloud.availability_zone',\n\n  /**\n   * The cloud platform in use.\n   *\n   * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n   */\n  CLOUD_PLATFORM: 'cloud.platform',\n\n  /**\n   * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n   */\n  AWS_ECS_CONTAINER_ARN: 'aws.ecs.container.arn',\n\n  /**\n   * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n   */\n  AWS_ECS_CLUSTER_ARN: 'aws.ecs.cluster.arn',\n\n  /**\n   * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n   */\n  AWS_ECS_LAUNCHTYPE: 'aws.ecs.launchtype',\n\n  /**\n   * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n   */\n  AWS_ECS_TASK_ARN: 'aws.ecs.task.arn',\n\n  /**\n   * The task definition family this task definition is a member of.\n   */\n  AWS_ECS_TASK_FAMILY: 'aws.ecs.task.family',\n\n  /**\n   * The revision for this task definition.\n   */\n  AWS_ECS_TASK_REVISION: 'aws.ecs.task.revision',\n\n  /**\n   * The ARN of an EKS cluster.\n   */\n  AWS_EKS_CLUSTER_ARN: 'aws.eks.cluster.arn',\n\n  /**\n   * The name(s) of the AWS log group(s) an application is writing to.\n   *\n   * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n   */\n  AWS_LOG_GROUP_NAMES: 'aws.log.group.names',\n\n  /**\n   * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n   *\n   * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n   */\n  AWS_LOG_GROUP_ARNS: 'aws.log.group.arns',\n\n  /**\n   * The name(s) of the AWS log stream(s) an application is writing to.\n   */\n  AWS_LOG_STREAM_NAMES: 'aws.log.stream.names',\n\n  /**\n   * The ARN(s) of the AWS log stream(s).\n   *\n   * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n   */\n  AWS_LOG_STREAM_ARNS: 'aws.log.stream.arns',\n\n  /**\n   * Container name.\n   */\n  CONTAINER_NAME: 'container.name',\n\n  /**\n   * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n   */\n  CONTAINER_ID: 'container.id',\n\n  /**\n   * The container runtime managing this container.\n   */\n  CONTAINER_RUNTIME: 'container.runtime',\n\n  /**\n   * Name of the image the container was built on.\n   */\n  CONTAINER_IMAGE_NAME: 'container.image.name',\n\n  /**\n   * Container image tag.\n   */\n  CONTAINER_IMAGE_TAG: 'container.image.tag',\n\n  /**\n   * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n   */\n  DEPLOYMENT_ENVIRONMENT: 'deployment.environment',\n\n  /**\n   * A unique identifier representing the device.\n   *\n   * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n   */\n  DEVICE_ID: 'device.id',\n\n  /**\n   * The model identifier for the device.\n   *\n   * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n   */\n  DEVICE_MODEL_IDENTIFIER: 'device.model.identifier',\n\n  /**\n   * The marketing name for the device model.\n   *\n   * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n   */\n  DEVICE_MODEL_NAME: 'device.model.name',\n\n  /**\n   * The name of the single function that this runtime instance executes.\n   *\n   * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n   */\n  FAAS_NAME: 'faas.name',\n\n  /**\n  * The unique ID of the single function that this runtime instance executes.\n  *\n  * Note: Depending on the cloud provider, use:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\nTake care not to use the &#34;invoked ARN&#34; directly but replace any\n[alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\ndifferent aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n\nOn some providers, it may not be possible to determine the full ID at startup,\nwhich is why this field cannot be made required. For example, on AWS the account ID\npart of the ARN is not available without calling another AWS API\nwhich may be deemed too slow for a short-running lambda function.\nAs an alternative, consider setting `faas.id` as a span attribute instead.\n  */\n  FAAS_ID: 'faas.id',\n\n  /**\n  * The immutable version of the function being executed.\n  *\n  * Note: Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n  */\n  FAAS_VERSION: 'faas.version',\n\n  /**\n   * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n   *\n   * Note: * **AWS Lambda:** Use the (full) log stream name.\n   */\n  FAAS_INSTANCE: 'faas.instance',\n\n  /**\n   * The amount of memory available to the serverless function in MiB.\n   *\n   * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n   */\n  FAAS_MAX_MEMORY: 'faas.max_memory',\n\n  /**\n   * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n   */\n  HOST_ID: 'host.id',\n\n  /**\n   * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n   */\n  HOST_NAME: 'host.name',\n\n  /**\n   * Type of host. For Cloud, this must be the machine type.\n   */\n  HOST_TYPE: 'host.type',\n\n  /**\n   * The CPU architecture the host system is running on.\n   */\n  HOST_ARCH: 'host.arch',\n\n  /**\n   * Name of the VM image or OS install the host was instantiated from.\n   */\n  HOST_IMAGE_NAME: 'host.image.name',\n\n  /**\n   * VM image ID. For Cloud, this value is from the provider.\n   */\n  HOST_IMAGE_ID: 'host.image.id',\n\n  /**\n   * The version string of the VM image as defined in [Version SpanAttributes](README.md#version-attributes).\n   */\n  HOST_IMAGE_VERSION: 'host.image.version',\n\n  /**\n   * The name of the cluster.\n   */\n  K8S_CLUSTER_NAME: 'k8s.cluster.name',\n\n  /**\n   * The name of the Node.\n   */\n  K8S_NODE_NAME: 'k8s.node.name',\n\n  /**\n   * The UID of the Node.\n   */\n  K8S_NODE_UID: 'k8s.node.uid',\n\n  /**\n   * The name of the namespace that the pod is running in.\n   */\n  K8S_NAMESPACE_NAME: 'k8s.namespace.name',\n\n  /**\n   * The UID of the Pod.\n   */\n  K8S_POD_UID: 'k8s.pod.uid',\n\n  /**\n   * The name of the Pod.\n   */\n  K8S_POD_NAME: 'k8s.pod.name',\n\n  /**\n   * The name of the Container in a Pod template.\n   */\n  K8S_CONTAINER_NAME: 'k8s.container.name',\n\n  /**\n   * The UID of the ReplicaSet.\n   */\n  K8S_REPLICASET_UID: 'k8s.replicaset.uid',\n\n  /**\n   * The name of the ReplicaSet.\n   */\n  K8S_REPLICASET_NAME: 'k8s.replicaset.name',\n\n  /**\n   * The UID of the Deployment.\n   */\n  K8S_DEPLOYMENT_UID: 'k8s.deployment.uid',\n\n  /**\n   * The name of the Deployment.\n   */\n  K8S_DEPLOYMENT_NAME: 'k8s.deployment.name',\n\n  /**\n   * The UID of the StatefulSet.\n   */\n  K8S_STATEFULSET_UID: 'k8s.statefulset.uid',\n\n  /**\n   * The name of the StatefulSet.\n   */\n  K8S_STATEFULSET_NAME: 'k8s.statefulset.name',\n\n  /**\n   * The UID of the DaemonSet.\n   */\n  K8S_DAEMONSET_UID: 'k8s.daemonset.uid',\n\n  /**\n   * The name of the DaemonSet.\n   */\n  K8S_DAEMONSET_NAME: 'k8s.daemonset.name',\n\n  /**\n   * The UID of the Job.\n   */\n  K8S_JOB_UID: 'k8s.job.uid',\n\n  /**\n   * The name of the Job.\n   */\n  K8S_JOB_NAME: 'k8s.job.name',\n\n  /**\n   * The UID of the CronJob.\n   */\n  K8S_CRONJOB_UID: 'k8s.cronjob.uid',\n\n  /**\n   * The name of the CronJob.\n   */\n  K8S_CRONJOB_NAME: 'k8s.cronjob.name',\n\n  /**\n   * The operating system type.\n   */\n  OS_TYPE: 'os.type',\n\n  /**\n   * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n   */\n  OS_DESCRIPTION: 'os.description',\n\n  /**\n   * Human readable operating system name.\n   */\n  OS_NAME: 'os.name',\n\n  /**\n   * The version string of the operating system as defined in [Version SpanAttributes](../../resource/semantic_conventions/README.md#version-attributes).\n   */\n  OS_VERSION: 'os.version',\n\n  /**\n   * Process identifier (PID).\n   */\n  PROCESS_PID: 'process.pid',\n\n  /**\n   * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n   */\n  PROCESS_EXECUTABLE_NAME: 'process.executable.name',\n\n  /**\n   * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n   */\n  PROCESS_EXECUTABLE_PATH: 'process.executable.path',\n\n  /**\n   * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n   */\n  PROCESS_COMMAND: 'process.command',\n\n  /**\n   * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n   */\n  PROCESS_COMMAND_LINE: 'process.command_line',\n\n  /**\n   * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n   */\n  PROCESS_COMMAND_ARGS: 'process.command_args',\n\n  /**\n   * The username of the user that owns the process.\n   */\n  PROCESS_OWNER: 'process.owner',\n\n  /**\n   * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n   */\n  PROCESS_RUNTIME_NAME: 'process.runtime.name',\n\n  /**\n   * The version of the runtime of this process, as returned by the runtime without modification.\n   */\n  PROCESS_RUNTIME_VERSION: 'process.runtime.version',\n\n  /**\n   * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n   */\n  PROCESS_RUNTIME_DESCRIPTION: 'process.runtime.description',\n\n  /**\n   * Logical name of the service.\n   *\n   * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n   */\n  SERVICE_NAME: 'service.name',\n\n  /**\n   * A namespace for `service.name`.\n   *\n   * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n   */\n  SERVICE_NAMESPACE: 'service.namespace',\n\n  /**\n   * The string ID of the service instance.\n   *\n   * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n   */\n  SERVICE_INSTANCE_ID: 'service.instance.id',\n\n  /**\n   * The version string of the service API or implementation.\n   */\n  SERVICE_VERSION: 'service.version',\n\n  /**\n   * The name of the telemetry SDK as defined above.\n   */\n  TELEMETRY_SDK_NAME: 'telemetry.sdk.name',\n\n  /**\n   * The language of the telemetry SDK.\n   */\n  TELEMETRY_SDK_LANGUAGE: 'telemetry.sdk.language',\n\n  /**\n   * The version string of the telemetry SDK.\n   */\n  TELEMETRY_SDK_VERSION: 'telemetry.sdk.version',\n\n  /**\n   * The version string of the auto instrumentation agent, if used.\n   */\n  TELEMETRY_AUTO_VERSION: 'telemetry.auto.version',\n\n  /**\n   * The name of the web engine.\n   */\n  WEBENGINE_NAME: 'webengine.name',\n\n  /**\n   * The version of the web engine.\n   */\n  WEBENGINE_VERSION: 'webengine.version',\n\n  /**\n   * Additional description of the web engine (e.g. detailed version and edition information).\n   */\n  WEBENGINE_DESCRIPTION: 'webengine.description',\n};\n\nexport const CloudProviderValues = {\n  /** Alibaba Cloud. */\n  ALIBABA_CLOUD: 'alibaba_cloud',\n  /** Amazon Web Services. */\n  AWS: 'aws',\n  /** Microsoft Azure. */\n  AZURE: 'azure',\n  /** Google Cloud Platform. */\n  GCP: 'gcp',\n} as const;\nexport type CloudProviderValues =\n  (typeof CloudProviderValues)[keyof typeof CloudProviderValues];\n\nexport const CloudPlatformValues = {\n  /** Alibaba Cloud Elastic Compute Service. */\n  ALIBABA_CLOUD_ECS: 'alibaba_cloud_ecs',\n  /** Alibaba Cloud Function Compute. */\n  ALIBABA_CLOUD_FC: 'alibaba_cloud_fc',\n  /** AWS Elastic Compute Cloud. */\n  AWS_EC2: 'aws_ec2',\n  /** AWS Elastic Container Service. */\n  AWS_ECS: 'aws_ecs',\n  /** AWS Elastic Kubernetes Service. */\n  AWS_EKS: 'aws_eks',\n  /** AWS Lambda. */\n  AWS_LAMBDA: 'aws_lambda',\n  /** AWS Elastic Beanstalk. */\n  AWS_ELASTIC_BEANSTALK: 'aws_elastic_beanstalk',\n  /** Azure Virtual Machines. */\n  AZURE_VM: 'azure_vm',\n  /** Azure Container Instances. */\n  AZURE_CONTAINER_INSTANCES: 'azure_container_instances',\n  /** Azure Kubernetes Service. */\n  AZURE_AKS: 'azure_aks',\n  /** Azure Functions. */\n  AZURE_FUNCTIONS: 'azure_functions',\n  /** Azure App Service. */\n  AZURE_APP_SERVICE: 'azure_app_service',\n  /** Google Cloud Compute Engine (GCE). */\n  GCP_COMPUTE_ENGINE: 'gcp_compute_engine',\n  /** Google Cloud Run. */\n  GCP_CLOUD_RUN: 'gcp_cloud_run',\n  /** Google Cloud Kubernetes Engine (GKE). */\n  GCP_KUBERNETES_ENGINE: 'gcp_kubernetes_engine',\n  /** Google Cloud Functions (GCF). */\n  GCP_CLOUD_FUNCTIONS: 'gcp_cloud_functions',\n  /** Google Cloud App Engine (GAE). */\n  GCP_APP_ENGINE: 'gcp_app_engine',\n} as const;\nexport type CloudPlatformValues =\n  (typeof CloudPlatformValues)[keyof typeof CloudPlatformValues];\n\nexport const AwsEcsLaunchtypeValues = {\n  /** ec2. */\n  EC2: 'ec2',\n  /** fargate. */\n  FARGATE: 'fargate',\n} as const;\nexport type AwsEcsLaunchtypeValues =\n  (typeof AwsEcsLaunchtypeValues)[keyof typeof AwsEcsLaunchtypeValues];\n\nexport const HostArchValues = {\n  /** AMD64. */\n  AMD64: 'amd64',\n  /** ARM32. */\n  ARM32: 'arm32',\n  /** ARM64. */\n  ARM64: 'arm64',\n  /** Itanium. */\n  IA64: 'ia64',\n  /** 32-bit PowerPC. */\n  PPC32: 'ppc32',\n  /** 64-bit PowerPC. */\n  PPC64: 'ppc64',\n  /** 32-bit x86. */\n  X86: 'x86',\n} as const;\nexport type HostArchValues =\n  (typeof HostArchValues)[keyof typeof HostArchValues];\n\nexport const OsTypeValues = {\n  /** Microsoft Windows. */\n  WINDOWS: 'windows',\n  /** Linux. */\n  LINUX: 'linux',\n  /** Apple Darwin. */\n  DARWIN: 'darwin',\n  /** FreeBSD. */\n  FREEBSD: 'freebsd',\n  /** NetBSD. */\n  NETBSD: 'netbsd',\n  /** OpenBSD. */\n  OPENBSD: 'openbsd',\n  /** DragonFly BSD. */\n  DRAGONFLYBSD: 'dragonflybsd',\n  /** HP-UX (Hewlett Packard Unix). */\n  HPUX: 'hpux',\n  /** AIX (Advanced Interactive eXecutive). */\n  AIX: 'aix',\n  /** Oracle Solaris. */\n  SOLARIS: 'solaris',\n  /** IBM z/OS. */\n  Z_OS: 'z_os',\n} as const;\nexport type OsTypeValues = (typeof OsTypeValues)[keyof typeof OsTypeValues];\n\nexport const TelemetrySdkLanguageValues = {\n  /** cpp. */\n  CPP: 'cpp',\n  /** dotnet. */\n  DOTNET: 'dotnet',\n  /** erlang. */\n  ERLANG: 'erlang',\n  /** go. */\n  GO: 'go',\n  /** java. */\n  JAVA: 'java',\n  /** nodejs. */\n  NODEJS: 'nodejs',\n  /** php. */\n  PHP: 'php',\n  /** python. */\n  PYTHON: 'python',\n  /** ruby. */\n  RUBY: 'ruby',\n  /** webjs. */\n  WEBJS: 'webjs',\n} as const;\nexport type TelemetrySdkLanguageValues =\n  (typeof TelemetrySdkLanguageValues)[keyof typeof TelemetrySdkLanguageValues];\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './SemanticResourceAttributes';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './trace';\nexport * from './resource';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { VERSION } from '../../version';\nimport {\n  TelemetrySdkLanguageValues,\n  SemanticResourceAttributes,\n} from '@opentelemetry/semantic-conventions';\n\n/** Constants describing the SDK in use */\nexport const SDK_INFO = {\n  [SemanticResourceAttributes.TELEMETRY_SDK_NAME]: 'opentelemetry',\n  [SemanticResourceAttributes.PROCESS_RUNTIME_NAME]: 'node',\n  [SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE]:\n    TelemetrySdkLanguageValues.NODEJS,\n  [SemanticResourceAttributes.TELEMETRY_SDK_VERSION]: VERSION,\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function unrefTimer(timer: NodeJS.Timer): void {\n  timer.unref();\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './environment';\nexport * from './globalThis';\nexport * from './hex-to-base64';\nexport * from './RandomIdGenerator';\nexport * from './performance';\nexport * from './sdk-info';\nexport * from './timer-util';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './node';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { otperformance as performance } from '../platform';\nimport { TimeOriginLegacy } from './types';\n\nconst NANOSECOND_DIGITS = 9;\nconst NANOSECOND_DIGITS_IN_MILLIS = 6;\nconst MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);\nconst SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n\n/**\n * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).\n * @param epochMillis\n */\nexport function millisToHrTime(epochMillis: number): api.HrTime {\n  const epochSeconds = epochMillis / 1000;\n  // Decimals only.\n  const seconds = Math.trunc(epochSeconds);\n  // Round sub-nanosecond accuracy to nanosecond.\n  const nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);\n  return [seconds, nanos];\n}\n\nexport function getTimeOrigin(): number {\n  let timeOrigin = performance.timeOrigin;\n  if (typeof timeOrigin !== 'number') {\n    const perf: TimeOriginLegacy = performance as unknown as TimeOriginLegacy;\n    timeOrigin = perf.timing && perf.timing.fetchStart;\n  }\n  return timeOrigin;\n}\n\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nexport function hrTime(performanceNow?: number): api.HrTime {\n  const timeOrigin = millisToHrTime(getTimeOrigin());\n  const now = millisToHrTime(\n    typeof performanceNow === 'number' ? performanceNow : performance.now()\n  );\n\n  return addHrTimes(timeOrigin, now);\n}\n\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nexport function timeInputToHrTime(time: api.TimeInput): api.HrTime {\n  // process.hrtime\n  if (isTimeInputHrTime(time)) {\n    return time as api.HrTime;\n  } else if (typeof time === 'number') {\n    // Must be a performance.now() if it's smaller than process start time.\n    if (time < getTimeOrigin()) {\n      return hrTime(time);\n    } else {\n      // epoch milliseconds or performance.timeOrigin\n      return millisToHrTime(time);\n    }\n  } else if (time instanceof Date) {\n    return millisToHrTime(time.getTime());\n  } else {\n    throw TypeError('Invalid input type');\n  }\n}\n\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nexport function hrTimeDuration(\n  startTime: api.HrTime,\n  endTime: api.HrTime\n): api.HrTime {\n  let seconds = endTime[0] - startTime[0];\n  let nanos = endTime[1] - startTime[1];\n\n  // overflow\n  if (nanos < 0) {\n    seconds -= 1;\n    // negate\n    nanos += SECOND_TO_NANOSECONDS;\n  }\n\n  return [seconds, nanos];\n}\n\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param time\n */\nexport function hrTimeToTimeStamp(time: api.HrTime): string {\n  const precision = NANOSECOND_DIGITS;\n  const tmp = `${'0'.repeat(precision)}${time[1]}Z`;\n  const nanoString = tmp.substr(tmp.length - precision - 1);\n  const date = new Date(time[0] * 1000).toISOString();\n  return date.replace('000Z', nanoString);\n}\n\n/**\n * Convert hrTime to nanoseconds.\n * @param time\n */\nexport function hrTimeToNanoseconds(time: api.HrTime): number {\n  return time[0] * SECOND_TO_NANOSECONDS + time[1];\n}\n\n/**\n * Convert hrTime to milliseconds.\n * @param time\n */\nexport function hrTimeToMilliseconds(time: api.HrTime): number {\n  return time[0] * 1e3 + time[1] / 1e6;\n}\n\n/**\n * Convert hrTime to microseconds.\n * @param time\n */\nexport function hrTimeToMicroseconds(time: api.HrTime): number {\n  return time[0] * 1e6 + time[1] / 1e3;\n}\n\n/**\n * check if time is HrTime\n * @param value\n */\nexport function isTimeInputHrTime(value: unknown): value is api.HrTime {\n  return (\n    Array.isArray(value) &&\n    value.length === 2 &&\n    typeof value[0] === 'number' &&\n    typeof value[1] === 'number'\n  );\n}\n\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nexport function isTimeInput(\n  value: unknown\n): value is api.HrTime | number | Date {\n  return (\n    isTimeInputHrTime(value) ||\n    typeof value === 'number' ||\n    value instanceof Date\n  );\n}\n\n/**\n * Given 2 HrTime formatted times, return their sum as an HrTime.\n */\nexport function addHrTimes(time1: api.HrTime, time2: api.HrTime): api.HrTime {\n  const out = [time1[0] + time2[0], time1[1] + time2[1]] as api.HrTime;\n\n  // Nanoseconds\n  if (out[1] >= SECOND_TO_NANOSECONDS) {\n    out[1] -= SECOND_TO_NANOSECONDS;\n    out[0] += 1;\n  }\n\n  return out;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface ExportResult {\n  code: ExportResultCode;\n  error?: Error;\n}\n\nexport enum ExportResultCode {\n  SUCCESS,\n  FAILED,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  TextMapGetter,\n  TextMapPropagator,\n  diag,\n  TextMapSetter,\n} from '@opentelemetry/api';\n\n/** Configuration object for composite propagator */\nexport interface CompositePropagatorConfig {\n  /**\n   * List of propagators to run. Propagators run in the\n   * list order. If a propagator later in the list writes the same context\n   * key as a propagator earlier in the list, the later on will \"win\".\n   */\n  propagators?: TextMapPropagator[];\n}\n\n/** Combines multiple propagators into a single propagator. */\nexport class CompositePropagator implements TextMapPropagator {\n  private readonly _propagators: TextMapPropagator[];\n  private readonly _fields: string[];\n\n  /**\n   * Construct a composite propagator from a list of propagators.\n   *\n   * @param [config] Configuration object for composite propagator\n   */\n  constructor(config: CompositePropagatorConfig = {}) {\n    this._propagators = config.propagators ?? [];\n\n    this._fields = Array.from(\n      new Set(\n        this._propagators\n          // older propagators may not have fields function, null check to be sure\n          .map(p => (typeof p.fields === 'function' ? p.fields() : []))\n          .reduce((x, y) => x.concat(y), [])\n      )\n    );\n  }\n\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same carrier key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to inject\n   * @param carrier Carrier into which context will be injected\n   */\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    for (const propagator of this._propagators) {\n      try {\n        propagator.inject(context, carrier, setter);\n      } catch (err) {\n        diag.warn(\n          `Failed to inject with ${propagator.constructor.name}. Err: ${err.message}`\n        );\n      }\n    }\n  }\n\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same context key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to add values to\n   * @param carrier Carrier from which to extract context\n   */\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    return this._propagators.reduce((ctx, propagator) => {\n      try {\n        return propagator.extract(ctx, carrier, getter);\n      } catch (err) {\n        diag.warn(\n          `Failed to inject with ${propagator.constructor.name}. Err: ${err.message}`\n        );\n      }\n      return ctx;\n    }, context);\n  }\n\n  fields(): string[] {\n    // return a new array so our fields cannot be modified\n    return this._fields.slice();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nconst VALID_KEY = `[a-z]${VALID_KEY_CHAR_RANGE}{0,255}`;\nconst VALID_VENDOR_KEY = `[a-z0-9]${VALID_KEY_CHAR_RANGE}{0,240}@[a-z]${VALID_KEY_CHAR_RANGE}{0,13}`;\nconst VALID_KEY_REGEX = new RegExp(`^(?:${VALID_KEY}|${VALID_VENDOR_KEY})$`);\nconst VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nconst INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nexport function validateKey(key: string): boolean {\n  return VALID_KEY_REGEX.test(key);\n}\n\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nexport function validateValue(value: string): boolean {\n  return (\n    VALID_VALUE_BASE_REGEX.test(value) &&\n    !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value)\n  );\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { validateKey, validateValue } from '../internal/validators';\n\nconst MAX_TRACE_STATE_ITEMS = 32;\nconst MAX_TRACE_STATE_LEN = 512;\nconst LIST_MEMBERS_SEPARATOR = ',';\nconst LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nexport class TraceState implements api.TraceState {\n  private _internalState: Map<string, string> = new Map();\n\n  constructor(rawTraceState?: string) {\n    if (rawTraceState) this._parse(rawTraceState);\n  }\n\n  set(key: string, value: string): TraceState {\n    // TODO: Benchmark the different approaches(map vs list) and\n    // use the faster one.\n    const traceState = this._clone();\n    if (traceState._internalState.has(key)) {\n      traceState._internalState.delete(key);\n    }\n    traceState._internalState.set(key, value);\n    return traceState;\n  }\n\n  unset(key: string): TraceState {\n    const traceState = this._clone();\n    traceState._internalState.delete(key);\n    return traceState;\n  }\n\n  get(key: string): string | undefined {\n    return this._internalState.get(key);\n  }\n\n  serialize(): string {\n    return this._keys()\n      .reduce((agg: string[], key) => {\n        agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + this.get(key));\n        return agg;\n      }, [])\n      .join(LIST_MEMBERS_SEPARATOR);\n  }\n\n  private _parse(rawTraceState: string) {\n    if (rawTraceState.length > MAX_TRACE_STATE_LEN) return;\n    this._internalState = rawTraceState\n      .split(LIST_MEMBERS_SEPARATOR)\n      .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n      .reduce((agg: Map<string, string>, part: string) => {\n        const listMember = part.trim(); // Optional Whitespace (OWS) handling\n        const i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n        if (i !== -1) {\n          const key = listMember.slice(0, i);\n          const value = listMember.slice(i + 1, part.length);\n          if (validateKey(key) && validateValue(value)) {\n            agg.set(key, value);\n          } else {\n            // TODO: Consider to add warning log\n          }\n        }\n        return agg;\n      }, new Map());\n\n    // Because of the reverse() requirement, trunc must be done after map is created\n    if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n      this._internalState = new Map(\n        Array.from(this._internalState.entries())\n          .reverse() // Use reverse same as original tracestate parse chain\n          .slice(0, MAX_TRACE_STATE_ITEMS)\n      );\n    }\n  }\n\n  private _keys(): string[] {\n    return Array.from(this._internalState.keys()).reverse();\n  }\n\n  private _clone(): TraceState {\n    const traceState = new TraceState();\n    traceState._internalState = new Map(this._internalState);\n    return traceState;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  SpanContext,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n  trace,\n  TraceFlags,\n} from '@opentelemetry/api';\nimport { isTracingSuppressed } from './suppress-tracing';\nimport { TraceState } from './TraceState';\n\nexport const TRACE_PARENT_HEADER = 'traceparent';\nexport const TRACE_STATE_HEADER = 'tracestate';\n\nconst VERSION = '00';\nconst VERSION_PART = '(?!ff)[\\\\da-f]{2}';\nconst TRACE_ID_PART = '(?![0]{32})[\\\\da-f]{32}';\nconst PARENT_ID_PART = '(?![0]{16})[\\\\da-f]{16}';\nconst FLAGS_PART = '[\\\\da-f]{2}';\nconst TRACE_PARENT_REGEX = new RegExp(\n  `^\\\\s?(${VERSION_PART})-(${TRACE_ID_PART})-(${PARENT_ID_PART})-(${FLAGS_PART})(-.*)?\\\\s?$`\n);\n\n/**\n * Parses information from the [traceparent] span tag and converts it into {@link SpanContext}\n * @param traceParent - A meta property that comes from server.\n *     It should be dynamically generated server side to have the server's request trace Id,\n *     a parent span Id that was set on the server's request span,\n *     and the trace flags to indicate the server's sampling decision\n *     (01 = sampled, 00 = not sampled).\n *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'\n *     For more information see {@link https://www.w3.org/TR/trace-context/}\n */\nexport function parseTraceParent(traceParent: string): SpanContext | null {\n  const match = TRACE_PARENT_REGEX.exec(traceParent);\n  if (!match) return null;\n\n  // According to the specification the implementation should be compatible\n  // with future versions. If there are more parts, we only reject it if it's using version 00\n  // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent\n  if (match[1] === '00' && match[5]) return null;\n\n  return {\n    traceId: match[2],\n    spanId: match[3],\n    traceFlags: parseInt(match[4], 16),\n  };\n}\n\n/**\n * Propagates {@link SpanContext} through Trace Context format propagation.\n *\n * Based on the Trace Context specification:\n * https://www.w3.org/TR/trace-context/\n */\nexport class W3CTraceContextPropagator implements TextMapPropagator {\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const spanContext = trace.getSpanContext(context);\n    if (\n      !spanContext ||\n      isTracingSuppressed(context) ||\n      !isSpanContextValid(spanContext)\n    )\n      return;\n\n    const traceParent = `${VERSION}-${spanContext.traceId}-${\n      spanContext.spanId\n    }-0${Number(spanContext.traceFlags || TraceFlags.NONE).toString(16)}`;\n\n    setter.set(carrier, TRACE_PARENT_HEADER, traceParent);\n    if (spanContext.traceState) {\n      setter.set(\n        carrier,\n        TRACE_STATE_HEADER,\n        spanContext.traceState.serialize()\n      );\n    }\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);\n    if (!traceParentHeader) return context;\n    const traceParent = Array.isArray(traceParentHeader)\n      ? traceParentHeader[0]\n      : traceParentHeader;\n    if (typeof traceParent !== 'string') return context;\n    const spanContext = parseTraceParent(traceParent);\n    if (!spanContext) return context;\n\n    spanContext.isRemote = true;\n\n    const traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);\n    if (traceStateHeader) {\n      // If more than one `tracestate` header is found, we merge them into a\n      // single header.\n      const state = Array.isArray(traceStateHeader)\n        ? traceStateHeader.join(',')\n        : traceStateHeader;\n      spanContext.traceState = new TraceState(\n        typeof state === 'string' ? state : undefined\n      );\n    }\n    return trace.setSpanContext(context, spanContext);\n  }\n\n  fields(): string[] {\n    return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, createContextKey, Span } from '@opentelemetry/api';\n\nconst RPC_METADATA_KEY = createContextKey(\n  'OpenTelemetry SDK Context Key RPC_METADATA'\n);\n\nexport enum RPCType {\n  HTTP = 'http',\n}\n\ntype HTTPMetadata = {\n  type: RPCType.HTTP;\n  route?: string;\n  span: Span;\n};\n\n/**\n * Allows for future rpc metadata to be used with this mechanism\n */\nexport type RPCMetadata = HTTPMetadata;\n\nexport function setRPCMetadata(context: Context, meta: RPCMetadata): Context {\n  return context.setValue(RPC_METADATA_KEY, meta);\n}\n\nexport function deleteRPCMetadata(context: Context): Context {\n  return context.deleteValue(RPC_METADATA_KEY);\n}\n\nexport function getRPCMetadata(context: Context): RPCMetadata | undefined {\n  return context.getValue(RPC_METADATA_KEY) as RPCMetadata | undefined;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '@opentelemetry/api';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * Sampler that samples no traces.\n */\nexport class AlwaysOffSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOffSampler';\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '@opentelemetry/api';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * Sampler that samples all traces.\n */\nexport class AlwaysOnSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.RECORD_AND_SAMPLED,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOnSampler';\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  Link,\n  Sampler,\n  SamplingResult,\n  SpanAttributes,\n  SpanKind,\n  TraceFlags,\n  trace,\n} from '@opentelemetry/api';\nimport { globalErrorHandler } from '../../common/global-error-handler';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nexport class ParentBasedSampler implements Sampler {\n  private _root: Sampler;\n  private _remoteParentSampled: Sampler;\n  private _remoteParentNotSampled: Sampler;\n  private _localParentSampled: Sampler;\n  private _localParentNotSampled: Sampler;\n\n  constructor(config: ParentBasedSamplerConfig) {\n    this._root = config.root;\n\n    if (!this._root) {\n      globalErrorHandler(\n        new Error('ParentBasedSampler must have a root sampler configured')\n      );\n      this._root = new AlwaysOnSampler();\n    }\n\n    this._remoteParentSampled =\n      config.remoteParentSampled ?? new AlwaysOnSampler();\n    this._remoteParentNotSampled =\n      config.remoteParentNotSampled ?? new AlwaysOffSampler();\n    this._localParentSampled =\n      config.localParentSampled ?? new AlwaysOnSampler();\n    this._localParentNotSampled =\n      config.localParentNotSampled ?? new AlwaysOffSampler();\n  }\n\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: SpanAttributes,\n    links: Link[]\n  ): SamplingResult {\n    const parentContext = trace.getSpanContext(context);\n\n    if (!parentContext || !isSpanContextValid(parentContext)) {\n      return this._root.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.isRemote) {\n      if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n        return this._remoteParentSampled.shouldSample(\n          context,\n          traceId,\n          spanName,\n          spanKind,\n          attributes,\n          links\n        );\n      }\n      return this._remoteParentNotSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n      return this._localParentSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    return this._localParentNotSampled.shouldSample(\n      context,\n      traceId,\n      spanName,\n      spanKind,\n      attributes,\n      links\n    );\n  }\n\n  toString(): string {\n    return `ParentBased{root=${this._root.toString()}, remoteParentSampled=${this._remoteParentSampled.toString()}, remoteParentNotSampled=${this._remoteParentNotSampled.toString()}, localParentSampled=${this._localParentSampled.toString()}, localParentNotSampled=${this._localParentNotSampled.toString()}}`;\n  }\n}\n\ninterface ParentBasedSamplerConfig {\n  /** Sampler called for spans with no parent */\n  root: Sampler;\n  /** Sampler called for spans with a remote parent which was sampled. Default AlwaysOn */\n  remoteParentSampled?: Sampler;\n  /** Sampler called for spans with a remote parent which was not sampled. Default AlwaysOff */\n  remoteParentNotSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was sampled. Default AlwaysOn */\n  localParentSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was not sampled. Default AlwaysOff */\n  localParentNotSampled?: Sampler;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Sampler,\n  SamplingDecision,\n  SamplingResult,\n  isValidTraceId,\n} from '@opentelemetry/api';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * Sampler that samples a given fraction of traces based of trace id deterministically.\n */\nexport class TraceIdRatioBasedSampler implements Sampler {\n  private _upperBound: number;\n\n  constructor(private readonly _ratio: number = 0) {\n    this._ratio = this._normalize(_ratio);\n    this._upperBound = Math.floor(this._ratio * 0xffffffff);\n  }\n\n  shouldSample(context: unknown, traceId: string): SamplingResult {\n    return {\n      decision:\n        isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound\n          ? SamplingDecision.RECORD_AND_SAMPLED\n          : SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return `TraceIdRatioBased{${this._ratio}}`;\n  }\n\n  private _normalize(ratio: number): number {\n    if (typeof ratio !== 'number' || isNaN(ratio)) return 0;\n    return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n  }\n\n  private _accumulate(traceId: string): number {\n    let accumulation = 0;\n    for (let i = 0; i < traceId.length / 8; i++) {\n      const pos = i * 8;\n      const part = parseInt(traceId.slice(pos, pos + 8), 16);\n      accumulation = (accumulation ^ part) >>> 0;\n    }\n    return accumulation;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * based on lodash in order to support esm builds without esModuleInterop.\n * lodash is using MIT License.\n **/\n\nconst objectTag = '[object Object]';\nconst nullTag = '[object Null]';\nconst undefinedTag = '[object Undefined]';\nconst funcProto = Function.prototype;\nconst funcToString = funcProto.toString;\nconst objectCtorString = funcToString.call(Object);\nconst getPrototype = overArg(Object.getPrototypeOf, Object);\nconst objectProto = Object.prototype;\nconst hasOwnProperty = objectProto.hasOwnProperty;\nconst symToStringTag = Symbol ? Symbol.toStringTag : undefined;\nconst nativeObjectToString = objectProto.toString;\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func: Function, transform: any): any {\n  return function (arg: any) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nexport function isPlainObject(value: any) {\n  if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {\n    return false;\n  }\n  const proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  const Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return (\n    typeof Ctor == 'function' &&\n    Ctor instanceof Ctor &&\n    funcToString.call(Ctor) === objectCtorString\n  );\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value: any) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value: any) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return symToStringTag && symToStringTag in Object(value)\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value: any) {\n  const isOwn = hasOwnProperty.call(value, symToStringTag as any),\n    tag = value[symToStringTag as any];\n  let unmasked = false;\n\n  try {\n    value[symToStringTag as any] = undefined;\n    unmasked = true;\n  } catch (e) {\n    // silence\n  }\n\n  const result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag as any] = tag;\n    } else {\n      delete value[symToStringTag as any];\n    }\n  }\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value: any) {\n  return nativeObjectToString.call(value);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { isPlainObject } from './lodash.merge';\n\nconst MAX_LEVEL = 20;\n\ninterface ObjectInto {\n  obj: any;\n  key: string;\n}\n\n/**\n * Merges objects together\n * @param args - objects / values to be merged\n */\nexport function merge(...args: any[]): any {\n  let result: any = args.shift();\n  const objects: WeakMap<any, ObjectInto[]> | undefined = new WeakMap<\n    any,\n    ObjectInto[]\n  >();\n  while (args.length > 0) {\n    result = mergeTwoObjects(result, args.shift(), 0, objects);\n  }\n\n  return result;\n}\n\nfunction takeValue(value: any): any {\n  if (isArray(value)) {\n    return value.slice();\n  }\n  return value;\n}\n\n/**\n * Merges two objects\n * @param one - first object\n * @param two - second object\n * @param level - current deep level\n * @param objects - objects holder that has been already referenced - to prevent\n * cyclic dependency\n */\nfunction mergeTwoObjects(\n  one: any,\n  two: any,\n  level = 0,\n  objects: WeakMap<any, ObjectInto[]>\n): any {\n  let result: any;\n  if (level > MAX_LEVEL) {\n    return undefined;\n  }\n  level++;\n  if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {\n    result = takeValue(two);\n  } else if (isArray(one)) {\n    result = one.slice();\n    if (isArray(two)) {\n      for (let i = 0, j = two.length; i < j; i++) {\n        result.push(takeValue(two[i]));\n      }\n    } else if (isObject(two)) {\n      const keys = Object.keys(two);\n      for (let i = 0, j = keys.length; i < j; i++) {\n        const key = keys[i];\n        result[key] = takeValue(two[key]);\n      }\n    }\n  } else if (isObject(one)) {\n    if (isObject(two)) {\n      if (!shouldMerge(one, two)) {\n        return two;\n      }\n      result = Object.assign({}, one);\n      const keys = Object.keys(two);\n\n      for (let i = 0, j = keys.length; i < j; i++) {\n        const key = keys[i];\n        const twoValue = two[key];\n\n        if (isPrimitive(twoValue)) {\n          if (typeof twoValue === 'undefined') {\n            delete result[key];\n          } else {\n            // result[key] = takeValue(twoValue);\n            result[key] = twoValue;\n          }\n        } else {\n          const obj1 = result[key];\n          const obj2 = twoValue;\n\n          if (\n            wasObjectReferenced(one, key, objects) ||\n            wasObjectReferenced(two, key, objects)\n          ) {\n            delete result[key];\n          } else {\n            if (isObject(obj1) && isObject(obj2)) {\n              const arr1 = objects.get(obj1) || [];\n              const arr2 = objects.get(obj2) || [];\n              arr1.push({ obj: one, key });\n              arr2.push({ obj: two, key });\n              objects.set(obj1, arr1);\n              objects.set(obj2, arr2);\n            }\n\n            result[key] = mergeTwoObjects(\n              result[key],\n              twoValue,\n              level,\n              objects\n            );\n          }\n        }\n      }\n    } else {\n      result = two;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Function to check if object has been already reference\n * @param obj\n * @param key\n * @param objects\n */\nfunction wasObjectReferenced(\n  obj: any,\n  key: string,\n  objects: WeakMap<any, ObjectInto[]>\n): boolean {\n  const arr = objects.get(obj[key]) || [];\n  for (let i = 0, j = arr.length; i < j; i++) {\n    const info = arr[i];\n    if (info.key === key && info.obj === obj) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isArray(value: any): boolean {\n  return Array.isArray(value);\n}\n\nfunction isFunction(value: any): boolean {\n  return typeof value === 'function';\n}\n\nfunction isObject(value: any): boolean {\n  return (\n    !isPrimitive(value) &&\n    !isArray(value) &&\n    !isFunction(value) &&\n    typeof value === 'object'\n  );\n}\n\nfunction isPrimitive(value: any): boolean {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    typeof value === 'boolean' ||\n    typeof value === 'undefined' ||\n    value instanceof Date ||\n    value instanceof RegExp ||\n    value === null\n  );\n}\n\nfunction shouldMerge(one: any, two: any): boolean {\n  if (!isPlainObject(one) || !isPlainObject(two)) {\n    return false;\n  }\n\n  return true;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Error that is thrown on timeouts.\n */\nexport class TimeoutError extends Error {\n  constructor(message?: string) {\n    super(message);\n\n    // manually adjust prototype to retain `instanceof` functionality when targeting ES5, see:\n    // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, TimeoutError.prototype);\n  }\n}\n\n/**\n * Adds a timeout to a promise and rejects if the specified timeout has elapsed. Also rejects if the specified promise\n * rejects, and resolves if the specified promise resolves.\n *\n * <p> NOTE: this operation will continue even after it throws a {@link TimeoutError}.\n *\n * @param promise promise to use with timeout.\n * @param timeout the timeout in milliseconds until the returned promise is rejected.\n */\nexport function callWithTimeout<T>(\n  promise: Promise<T>,\n  timeout: number\n): Promise<T> {\n  let timeoutHandle: ReturnType<typeof setTimeout>;\n\n  const timeoutPromise = new Promise<never>(function timeoutFunction(\n    _resolve,\n    reject\n  ) {\n    timeoutHandle = setTimeout(function timeoutHandler() {\n      reject(new TimeoutError('Operation timed out.'));\n    }, timeout);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then(\n    result => {\n      clearTimeout(timeoutHandle);\n      return result;\n    },\n    reason => {\n      clearTimeout(timeoutHandle);\n      throw reason;\n    }\n  );\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function urlMatches(url: string, urlToMatch: string | RegExp): boolean {\n  if (typeof urlToMatch === 'string') {\n    return url === urlToMatch;\n  } else {\n    return !!url.match(urlToMatch);\n  }\n}\n/**\n * Check if {@param url} should be ignored when comparing against {@param ignoredUrls}\n * @param url\n * @param ignoredUrls\n */\nexport function isUrlIgnored(\n  url: string,\n  ignoredUrls?: Array<string | RegExp>\n): boolean {\n  if (!ignoredUrls) {\n    return false;\n  }\n\n  for (const ignoreUrl of ignoredUrls) {\n    if (urlMatches(url, ignoreUrl)) {\n      return true;\n    }\n  }\n  return false;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ShimWrapped } from '../common/types';\n\n/**\n * Checks if certain function has been already wrapped\n * @param func\n */\nexport function isWrapped(func: unknown): func is ShimWrapped {\n  return (\n    typeof func === 'function' &&\n    typeof (func as ShimWrapped).__original === 'function' &&\n    typeof (func as ShimWrapped).__unwrap === 'function' &&\n    (func as ShimWrapped).__wrapped === true\n  );\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<T> {\n  private _promise: Promise<T>;\n  private _resolve!: (val: T) => void;\n  private _reject!: (error: unknown) => void;\n  constructor() {\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  get promise() {\n    return this._promise;\n  }\n\n  resolve(val: T) {\n    this._resolve(val);\n  }\n\n  reject(err: unknown) {\n    this._reject(err);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from './promise';\n\n/**\n * Bind the callback and only invoke the callback once regardless how many times `BindOnceFuture.call` is invoked.\n */\nexport class BindOnceFuture<\n  R,\n  This = unknown,\n  T extends (this: This, ...args: unknown[]) => R = () => R,\n> {\n  private _isCalled = false;\n  private _deferred = new Deferred<R>();\n  constructor(\n    private _callback: T,\n    private _that: This\n  ) {}\n\n  get isCalled() {\n    return this._isCalled;\n  }\n\n  get promise() {\n    return this._deferred.promise;\n  }\n\n  call(...args: Parameters<T>): Promise<R> {\n    if (!this._isCalled) {\n      this._isCalled = true;\n      try {\n        Promise.resolve(this._callback.call(this._that, ...args)).then(\n          val => this._deferred.resolve(val),\n          err => this._deferred.reject(err)\n        );\n      } catch (err) {\n        this._deferred.reject(err);\n      }\n    }\n    return this._deferred.promise;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { context } from '@opentelemetry/api';\nimport { ExportResult } from '../ExportResult';\nimport { suppressTracing } from '../trace/suppress-tracing';\n\nexport interface Exporter<T> {\n  export(arg: T, resultCallback: (result: ExportResult) => void): void;\n}\n\n/**\n * @internal\n * Shared functionality used by Exporters while exporting data, including suppresion of Traces.\n */\nexport function _export<T>(\n  exporter: Exporter<T>,\n  arg: T\n): Promise<ExportResult> {\n  return new Promise(resolve => {\n    // prevent downstream exporter calls from generating spans\n    context.with(suppressTracing(context.active()), () => {\n      exporter.export(arg, (result: ExportResult) => {\n        resolve(result);\n      });\n    });\n  });\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './baggage/propagation/W3CBaggagePropagator';\nexport * from './common/anchored-clock';\nexport * from './common/attributes';\nexport * from './common/global-error-handler';\nexport * from './common/logging-error-handler';\nexport * from './common/time';\nexport * from './common/types';\nexport * from './ExportResult';\nexport * as baggageUtils from './baggage/utils';\nexport * from './platform';\nexport * from './propagation/composite';\nexport * from './trace/W3CTraceContextPropagator';\nexport * from './trace/IdGenerator';\nexport * from './trace/rpc-metadata';\nexport * from './trace/sampler/AlwaysOffSampler';\nexport * from './trace/sampler/AlwaysOnSampler';\nexport * from './trace/sampler/ParentBasedSampler';\nexport * from './trace/sampler/TraceIdRatioBasedSampler';\nexport * from './trace/suppress-tracing';\nexport * from './trace/TraceState';\nexport * from './utils/environment';\nexport * from './utils/merge';\nexport * from './utils/sampling';\nexport * from './utils/timeout';\nexport * from './utils/url';\nexport * from './utils/wrap';\nexport * from './utils/callback';\nexport * from './version';\nimport { _export } from './internal/exporter';\nexport const internal = {\n  _export,\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Event name definitions\nexport const ExceptionEventName = 'exception';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  diag,\n  Exception,\n  HrTime,\n  Link,\n  Span as APISpan,\n  SpanAttributes,\n  SpanAttributeValue,\n  SpanContext,\n  SpanKind,\n  SpanStatus,\n  SpanStatusCode,\n  TimeInput,\n} from '@opentelemetry/api';\nimport {\n  addHrTimes,\n  millisToHrTime,\n  getTimeOrigin,\n  hrTime,\n  hrTimeDuration,\n  InstrumentationLibrary,\n  isAttributeValue,\n  isTimeInput,\n  isTimeInputHrTime,\n  otperformance,\n  sanitizeAttributes,\n} from '@opentelemetry/core';\nimport { IResource } from '@opentelemetry/resources';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport { ExceptionEventName } from './enums';\nimport { ReadableSpan } from './export/ReadableSpan';\nimport { SpanProcessor } from './SpanProcessor';\nimport { TimedEvent } from './TimedEvent';\nimport { Tracer } from './Tracer';\nimport { SpanLimits } from './types';\n\n/**\n * This class represents a span.\n */\nexport class Span implements APISpan, ReadableSpan {\n  // Below properties are included to implement ReadableSpan for export\n  // purposes but are not intended to be written-to directly.\n  private readonly _spanContext: SpanContext;\n  readonly kind: SpanKind;\n  readonly parentSpanId?: string;\n  readonly attributes: SpanAttributes = {};\n  readonly links: Link[] = [];\n  readonly events: TimedEvent[] = [];\n  readonly startTime: HrTime;\n  readonly resource: IResource;\n  readonly instrumentationLibrary: InstrumentationLibrary;\n\n  private _droppedAttributesCount = 0;\n  private _droppedEventsCount: number = 0;\n  private _droppedLinksCount: number = 0;\n\n  name: string;\n  status: SpanStatus = {\n    code: SpanStatusCode.UNSET,\n  };\n  endTime: HrTime = [0, 0];\n  private _ended = false;\n  private _duration: HrTime = [-1, -1];\n  private readonly _spanProcessor: SpanProcessor;\n  private readonly _spanLimits: SpanLimits;\n  private readonly _attributeValueLengthLimit: number;\n\n  private readonly _performanceStartTime: number;\n  private readonly _performanceOffset: number;\n  private readonly _startTimeProvided: boolean;\n\n  /**\n   * Constructs a new Span instance.\n   *\n   * @deprecated calling Span constructor directly is not supported. Please use tracer.startSpan.\n   * */\n  constructor(\n    parentTracer: Tracer,\n    context: Context,\n    spanName: string,\n    spanContext: SpanContext,\n    kind: SpanKind,\n    parentSpanId?: string,\n    links: Link[] = [],\n    startTime?: TimeInput,\n    _deprecatedClock?: unknown, // keeping this argument even though it is unused to ensure backwards compatibility\n    attributes?: SpanAttributes\n  ) {\n    this.name = spanName;\n    this._spanContext = spanContext;\n    this.parentSpanId = parentSpanId;\n    this.kind = kind;\n    this.links = links;\n\n    const now = Date.now();\n    this._performanceStartTime = otperformance.now();\n    this._performanceOffset =\n      now - (this._performanceStartTime + getTimeOrigin());\n    this._startTimeProvided = startTime != null;\n\n    this.startTime = this._getTime(startTime ?? now);\n\n    this.resource = parentTracer.resource;\n    this.instrumentationLibrary = parentTracer.instrumentationLibrary;\n    this._spanLimits = parentTracer.getSpanLimits();\n\n    if (attributes != null) {\n      this.setAttributes(attributes);\n    }\n\n    this._spanProcessor = parentTracer.getActiveSpanProcessor();\n    this._spanProcessor.onStart(this, context);\n    this._attributeValueLengthLimit =\n      this._spanLimits.attributeValueLengthLimit || 0;\n  }\n\n  spanContext(): SpanContext {\n    return this._spanContext;\n  }\n\n  setAttribute(key: string, value?: SpanAttributeValue): this;\n  setAttribute(key: string, value: unknown): this {\n    if (value == null || this._isSpanEnded()) return this;\n    if (key.length === 0) {\n      diag.warn(`Invalid attribute key: ${key}`);\n      return this;\n    }\n    if (!isAttributeValue(value)) {\n      diag.warn(`Invalid attribute value set for key: ${key}`);\n      return this;\n    }\n\n    if (\n      Object.keys(this.attributes).length >=\n        this._spanLimits.attributeCountLimit! &&\n      !Object.prototype.hasOwnProperty.call(this.attributes, key)\n    ) {\n      this._droppedAttributesCount++;\n      return this;\n    }\n    this.attributes[key] = this._truncateToSize(value);\n    return this;\n  }\n\n  setAttributes(attributes: SpanAttributes): this {\n    for (const [k, v] of Object.entries(attributes)) {\n      this.setAttribute(k, v);\n    }\n    return this;\n  }\n\n  /**\n   *\n   * @param name Span Name\n   * @param [attributesOrStartTime] Span attributes or start time\n   *     if type is {@type TimeInput} and 3rd param is undefined\n   * @param [timeStamp] Specified time stamp for the event\n   */\n  addEvent(\n    name: string,\n    attributesOrStartTime?: SpanAttributes | TimeInput,\n    timeStamp?: TimeInput\n  ): this {\n    if (this._isSpanEnded()) return this;\n    if (this._spanLimits.eventCountLimit === 0) {\n      diag.warn('No events allowed.');\n      this._droppedEventsCount++;\n      return this;\n    }\n    if (this.events.length >= this._spanLimits.eventCountLimit!) {\n      diag.warn('Dropping extra events.');\n      this.events.shift();\n      this._droppedEventsCount++;\n    }\n\n    if (isTimeInput(attributesOrStartTime)) {\n      if (!isTimeInput(timeStamp)) {\n        timeStamp = attributesOrStartTime;\n      }\n      attributesOrStartTime = undefined;\n    }\n\n    const attributes = sanitizeAttributes(attributesOrStartTime);\n\n    this.events.push({\n      name,\n      attributes,\n      time: this._getTime(timeStamp),\n      droppedAttributesCount: 0,\n    });\n    return this;\n  }\n\n  setStatus(status: SpanStatus): this {\n    if (this._isSpanEnded()) return this;\n    this.status = status;\n    return this;\n  }\n\n  updateName(name: string): this {\n    if (this._isSpanEnded()) return this;\n    this.name = name;\n    return this;\n  }\n\n  end(endTime?: TimeInput): void {\n    if (this._isSpanEnded()) {\n      diag.error(\n        `${this.name} ${this._spanContext.traceId}-${this._spanContext.spanId} - You can only call end() on a span once.`\n      );\n      return;\n    }\n    this._ended = true;\n\n    this.endTime = this._getTime(endTime);\n    this._duration = hrTimeDuration(this.startTime, this.endTime);\n\n    if (this._duration[0] < 0) {\n      diag.warn(\n        'Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.',\n        this.startTime,\n        this.endTime\n      );\n      this.endTime = this.startTime.slice() as HrTime;\n      this._duration = [0, 0];\n    }\n\n    this._spanProcessor.onEnd(this);\n  }\n\n  private _getTime(inp?: TimeInput): HrTime {\n    if (typeof inp === 'number' && inp < otperformance.now()) {\n      // must be a performance timestamp\n      // apply correction and convert to hrtime\n      return hrTime(inp + this._performanceOffset);\n    }\n\n    if (typeof inp === 'number') {\n      return millisToHrTime(inp);\n    }\n\n    if (inp instanceof Date) {\n      return millisToHrTime(inp.getTime());\n    }\n\n    if (isTimeInputHrTime(inp)) {\n      return inp;\n    }\n\n    if (this._startTimeProvided) {\n      // if user provided a time for the start manually\n      // we can't use duration to calculate event/end times\n      return millisToHrTime(Date.now());\n    }\n\n    const msDuration = otperformance.now() - this._performanceStartTime;\n    return addHrTimes(this.startTime, millisToHrTime(msDuration));\n  }\n\n  isRecording(): boolean {\n    return this._ended === false;\n  }\n\n  recordException(exception: Exception, time?: TimeInput): void {\n    const attributes: SpanAttributes = {};\n    if (typeof exception === 'string') {\n      attributes[SemanticAttributes.EXCEPTION_MESSAGE] = exception;\n    } else if (exception) {\n      if (exception.code) {\n        attributes[SemanticAttributes.EXCEPTION_TYPE] =\n          exception.code.toString();\n      } else if (exception.name) {\n        attributes[SemanticAttributes.EXCEPTION_TYPE] = exception.name;\n      }\n      if (exception.message) {\n        attributes[SemanticAttributes.EXCEPTION_MESSAGE] = exception.message;\n      }\n      if (exception.stack) {\n        attributes[SemanticAttributes.EXCEPTION_STACKTRACE] = exception.stack;\n      }\n    }\n\n    // these are minimum requirements from spec\n    if (\n      attributes[SemanticAttributes.EXCEPTION_TYPE] ||\n      attributes[SemanticAttributes.EXCEPTION_MESSAGE]\n    ) {\n      this.addEvent(ExceptionEventName, attributes, time);\n    } else {\n      diag.warn(`Failed to record an exception ${exception}`);\n    }\n  }\n\n  get duration(): HrTime {\n    return this._duration;\n  }\n\n  get ended(): boolean {\n    return this._ended;\n  }\n\n  get droppedAttributesCount(): number {\n    return this._droppedAttributesCount;\n  }\n\n  get droppedEventsCount(): number {\n    return this._droppedEventsCount;\n  }\n\n  get droppedLinksCount(): number {\n    return this._droppedLinksCount;\n  }\n\n  private _isSpanEnded(): boolean {\n    if (this._ended) {\n      diag.warn(\n        `Can not execute the operation on ended Span {traceId: ${this._spanContext.traceId}, spanId: ${this._spanContext.spanId}}`\n      );\n    }\n    return this._ended;\n  }\n\n  // Utility function to truncate given value within size\n  // for value type of string, will truncate to given limit\n  // for type of non-string, will return same value\n  private _truncateToLimitUtil(value: string, limit: number): string {\n    if (value.length <= limit) {\n      return value;\n    }\n    return value.substr(0, limit);\n  }\n\n  /**\n   * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then\n   * return string with trucated to {@code attributeValueLengthLimit} characters\n   *\n   * If the given attribute value is array of strings then\n   * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters\n   *\n   * Otherwise return same Attribute {@code value}\n   *\n   * @param value Attribute value\n   * @returns truncated attribute value if required, otherwise same value\n   */\n  private _truncateToSize(value: SpanAttributeValue): SpanAttributeValue {\n    const limit = this._attributeValueLengthLimit;\n    // Check limit\n    if (limit <= 0) {\n      // Negative values are invalid, so do not truncate\n      diag.warn(`Attribute value limit must be positive, got ${limit}`);\n      return value;\n    }\n\n    // String\n    if (typeof value === 'string') {\n      return this._truncateToLimitUtil(value, limit);\n    }\n\n    // Array of strings\n    if (Array.isArray(value)) {\n      return (value as []).map(val =>\n        typeof val === 'string' ? this._truncateToLimitUtil(val, limit) : val\n      );\n    }\n\n    // Other types, no need to apply value length limit\n    return value;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  Link,\n  SpanAttributes,\n  SpanKind,\n  TraceState,\n} from '@opentelemetry/api';\n\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport enum SamplingDecision {\n  /**\n   * `Span.isRecording() === false`, span will not be recorded and all events\n   * and attributes will be dropped.\n   */\n  NOT_RECORD,\n  /**\n   * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n   * MUST NOT be set.\n   */\n  RECORD,\n  /**\n   * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n   * MUST be set.\n   */\n  RECORD_AND_SAMPLED,\n}\n\n/**\n * A sampling result contains a decision for a {@link Span} and additional\n * attributes the sampler would like to added to the Span.\n */\nexport interface SamplingResult {\n  /**\n   * A sampling decision, refer to {@link SamplingDecision} for details.\n   */\n  decision: SamplingDecision;\n  /**\n   * The list of attributes returned by SamplingResult MUST be immutable.\n   * Caller may call {@link Sampler}.shouldSample any number of times and\n   * can safely cache the returned value.\n   */\n  attributes?: Readonly<SpanAttributes>;\n  /**\n   * A {@link TraceState} that will be associated with the {@link Span} through\n   * the new {@link SpanContext}. Samplers SHOULD return the TraceState from\n   * the passed-in {@link Context} if they do not intend to change it. Leaving\n   * the value undefined will also leave the TraceState unchanged.\n   */\n  traceState?: TraceState;\n}\n\n/**\n * This interface represent a sampler. Sampling is a mechanism to control the\n * noise and overhead introduced by OpenTelemetry by reducing the number of\n * samples of traces collected and sent to the backend.\n */\nexport interface Sampler {\n  /**\n   * Checks whether span needs to be created and tracked.\n   *\n   * @param context Parent Context which may contain a span.\n   * @param traceId of the span to be created. It can be different from the\n   *     traceId in the {@link SpanContext}. Typically in situations when the\n   *     span to be created starts a new trace.\n   * @param spanName of the span to be created.\n   * @param spanKind of the span to be created.\n   * @param attributes Initial set of SpanAttributes for the Span being constructed.\n   * @param links Collection of links that will be associated with the Span to\n   *     be created. Typically useful for batch operations.\n   * @returns a {@link SamplingResult}.\n   */\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: SpanAttributes,\n    links: Link[]\n  ): SamplingResult;\n\n  /** Returns the sampler name or short description with the configuration. */\n  toString(): string;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '../Sampler';\n\n/** Sampler that samples no traces. */\nexport class AlwaysOffSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOffSampler';\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '../Sampler';\n\n/** Sampler that samples all traces. */\nexport class AlwaysOnSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.RECORD_AND_SAMPLED,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOnSampler';\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  Link,\n  SpanAttributes,\n  SpanKind,\n  TraceFlags,\n  trace,\n} from '@opentelemetry/api';\nimport { globalErrorHandler } from '@opentelemetry/core';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\nimport { Sampler, SamplingResult } from '../Sampler';\n\n/**\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nexport class ParentBasedSampler implements Sampler {\n  private _root: Sampler;\n  private _remoteParentSampled: Sampler;\n  private _remoteParentNotSampled: Sampler;\n  private _localParentSampled: Sampler;\n  private _localParentNotSampled: Sampler;\n\n  constructor(config: ParentBasedSamplerConfig) {\n    this._root = config.root;\n\n    if (!this._root) {\n      globalErrorHandler(\n        new Error('ParentBasedSampler must have a root sampler configured')\n      );\n      this._root = new AlwaysOnSampler();\n    }\n\n    this._remoteParentSampled =\n      config.remoteParentSampled ?? new AlwaysOnSampler();\n    this._remoteParentNotSampled =\n      config.remoteParentNotSampled ?? new AlwaysOffSampler();\n    this._localParentSampled =\n      config.localParentSampled ?? new AlwaysOnSampler();\n    this._localParentNotSampled =\n      config.localParentNotSampled ?? new AlwaysOffSampler();\n  }\n\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: SpanAttributes,\n    links: Link[]\n  ): SamplingResult {\n    const parentContext = trace.getSpanContext(context);\n\n    if (!parentContext || !isSpanContextValid(parentContext)) {\n      return this._root.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.isRemote) {\n      if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n        return this._remoteParentSampled.shouldSample(\n          context,\n          traceId,\n          spanName,\n          spanKind,\n          attributes,\n          links\n        );\n      }\n      return this._remoteParentNotSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n      return this._localParentSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    return this._localParentNotSampled.shouldSample(\n      context,\n      traceId,\n      spanName,\n      spanKind,\n      attributes,\n      links\n    );\n  }\n\n  toString(): string {\n    return `ParentBased{root=${this._root.toString()}, remoteParentSampled=${this._remoteParentSampled.toString()}, remoteParentNotSampled=${this._remoteParentNotSampled.toString()}, localParentSampled=${this._localParentSampled.toString()}, localParentNotSampled=${this._localParentNotSampled.toString()}}`;\n  }\n}\n\ninterface ParentBasedSamplerConfig {\n  /** Sampler called for spans with no parent */\n  root: Sampler;\n  /** Sampler called for spans with a remote parent which was sampled. Default AlwaysOn */\n  remoteParentSampled?: Sampler;\n  /** Sampler called for spans with a remote parent which was not sampled. Default AlwaysOff */\n  remoteParentNotSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was sampled. Default AlwaysOn */\n  localParentSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was not sampled. Default AlwaysOff */\n  localParentNotSampled?: Sampler;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isValidTraceId } from '@opentelemetry/api';\nimport { Sampler, SamplingDecision, SamplingResult } from '../Sampler';\n\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\nexport class TraceIdRatioBasedSampler implements Sampler {\n  private _upperBound: number;\n\n  constructor(private readonly _ratio: number = 0) {\n    this._ratio = this._normalize(_ratio);\n    this._upperBound = Math.floor(this._ratio * 0xffffffff);\n  }\n\n  shouldSample(context: unknown, traceId: string): SamplingResult {\n    return {\n      decision:\n        isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound\n          ? SamplingDecision.RECORD_AND_SAMPLED\n          : SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return `TraceIdRatioBased{${this._ratio}}`;\n  }\n\n  private _normalize(ratio: number): number {\n    if (typeof ratio !== 'number' || isNaN(ratio)) return 0;\n    return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n  }\n\n  private _accumulate(traceId: string): number {\n    let accumulation = 0;\n    for (let i = 0; i < traceId.length / 8; i++) {\n      const pos = i * 8;\n      const part = parseInt(traceId.slice(pos, pos + 8), 16);\n      accumulation = (accumulation ^ part) >>> 0;\n    }\n    return accumulation;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, TracesSamplerValues, ENVIRONMENT } from '@opentelemetry/core';\nimport { Sampler } from './Sampler';\nimport { AlwaysOffSampler } from './sampler/AlwaysOffSampler';\nimport { AlwaysOnSampler } from './sampler/AlwaysOnSampler';\nimport { ParentBasedSampler } from './sampler/ParentBasedSampler';\nimport { TraceIdRatioBasedSampler } from './sampler/TraceIdRatioBasedSampler';\n\nconst env = getEnv();\nconst FALLBACK_OTEL_TRACES_SAMPLER = TracesSamplerValues.AlwaysOn;\nconst DEFAULT_RATIO = 1;\n\n/**\n * Load default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n\n// object needs to be wrapped in this function and called when needed otherwise\n// envs are parsed before tests are ran - causes tests using these envs to fail\nexport function loadDefaultConfig() {\n  return {\n    sampler: buildSamplerFromEnv(env),\n    forceFlushTimeoutMillis: 30000,\n    generalLimits: {\n      attributeValueLengthLimit: getEnv().OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: getEnv().OTEL_ATTRIBUTE_COUNT_LIMIT,\n    },\n    spanLimits: {\n      attributeValueLengthLimit:\n        getEnv().OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n      linkCountLimit: getEnv().OTEL_SPAN_LINK_COUNT_LIMIT,\n      eventCountLimit: getEnv().OTEL_SPAN_EVENT_COUNT_LIMIT,\n      attributePerEventCountLimit:\n        getEnv().OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n      attributePerLinkCountLimit:\n        getEnv().OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n    },\n  };\n}\n\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param environment optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\nexport function buildSamplerFromEnv(\n  environment: Required<ENVIRONMENT> = getEnv()\n): Sampler {\n  switch (environment.OTEL_TRACES_SAMPLER) {\n    case TracesSamplerValues.AlwaysOn:\n      return new AlwaysOnSampler();\n    case TracesSamplerValues.AlwaysOff:\n      return new AlwaysOffSampler();\n    case TracesSamplerValues.ParentBasedAlwaysOn:\n      return new ParentBasedSampler({\n        root: new AlwaysOnSampler(),\n      });\n    case TracesSamplerValues.ParentBasedAlwaysOff:\n      return new ParentBasedSampler({\n        root: new AlwaysOffSampler(),\n      });\n    case TracesSamplerValues.TraceIdRatio:\n      return new TraceIdRatioBasedSampler(\n        getSamplerProbabilityFromEnv(environment)\n      );\n    case TracesSamplerValues.ParentBasedTraceIdRatio:\n      return new ParentBasedSampler({\n        root: new TraceIdRatioBasedSampler(\n          getSamplerProbabilityFromEnv(environment)\n        ),\n      });\n    default:\n      diag.error(\n        `OTEL_TRACES_SAMPLER value \"${environment.OTEL_TRACES_SAMPLER} invalid, defaulting to ${FALLBACK_OTEL_TRACES_SAMPLER}\".`\n      );\n      return new AlwaysOnSampler();\n  }\n}\n\nfunction getSamplerProbabilityFromEnv(\n  environment: Required<ENVIRONMENT>\n): number | undefined {\n  if (\n    environment.OTEL_TRACES_SAMPLER_ARG === undefined ||\n    environment.OTEL_TRACES_SAMPLER_ARG === ''\n  ) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG is blank, defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  const probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);\n\n  if (isNaN(probability)) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG=${environment.OTEL_TRACES_SAMPLER_ARG} was given, but it is invalid, defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  if (probability < 0 || probability > 1) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG=${environment.OTEL_TRACES_SAMPLER_ARG} was given, but it is out of range ([0..1]), defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  return probability;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { buildSamplerFromEnv, loadDefaultConfig } from './config';\nimport { Sampler } from './Sampler';\nimport { SpanLimits, TracerConfig, GeneralLimits } from './types';\nimport {\n  DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  getEnvWithoutDefaults,\n} from '@opentelemetry/core';\n\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nexport function mergeConfig(userConfig: TracerConfig): TracerConfig & {\n  sampler: Sampler;\n  spanLimits: SpanLimits;\n  generalLimits: GeneralLimits;\n} {\n  const perInstanceDefaults: Partial<TracerConfig> = {\n    sampler: buildSamplerFromEnv(),\n  };\n\n  const DEFAULT_CONFIG = loadDefaultConfig();\n\n  const target = Object.assign(\n    {},\n    DEFAULT_CONFIG,\n    perInstanceDefaults,\n    userConfig\n  );\n\n  target.generalLimits = Object.assign(\n    {},\n    DEFAULT_CONFIG.generalLimits,\n    userConfig.generalLimits || {}\n  );\n\n  target.spanLimits = Object.assign(\n    {},\n    DEFAULT_CONFIG.spanLimits,\n    userConfig.spanLimits || {}\n  );\n\n  return target;\n}\n\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nexport function reconfigureLimits(userConfig: TracerConfig): TracerConfig {\n  const spanLimits = Object.assign({}, userConfig.spanLimits);\n\n  const parsedEnvConfig = getEnvWithoutDefaults();\n\n  /**\n   * Reassign span attribute count limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeCountLimit =\n    userConfig.spanLimits?.attributeCountLimit ??\n    userConfig.generalLimits?.attributeCountLimit ??\n    parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT ??\n    parsedEnvConfig.OTEL_ATTRIBUTE_COUNT_LIMIT ??\n    DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n\n  /**\n   * Reassign span attribute value length limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeValueLengthLimit =\n    userConfig.spanLimits?.attributeValueLengthLimit ??\n    userConfig.generalLimits?.attributeValueLengthLimit ??\n    parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT ??\n    parsedEnvConfig.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT ??\n    DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n\n  return Object.assign({}, userConfig, { spanLimits });\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { context, Context, diag, TraceFlags } from '@opentelemetry/api';\nimport {\n  BindOnceFuture,\n  ExportResultCode,\n  getEnv,\n  globalErrorHandler,\n  suppressTracing,\n  unrefTimer,\n} from '@opentelemetry/core';\nimport { Span } from '../Span';\nimport { SpanProcessor } from '../SpanProcessor';\nimport { BufferConfig } from '../types';\nimport { ReadableSpan } from './ReadableSpan';\nimport { SpanExporter } from './SpanExporter';\n\n/**\n * Implementation of the {@link SpanProcessor} that batches spans exported by\n * the SDK then pushes them to the exporter pipeline.\n */\nexport abstract class BatchSpanProcessorBase<T extends BufferConfig>\n  implements SpanProcessor\n{\n  private readonly _maxExportBatchSize: number;\n  private readonly _maxQueueSize: number;\n  private readonly _scheduledDelayMillis: number;\n  private readonly _exportTimeoutMillis: number;\n\n  private _isExporting = false;\n  private _finishedSpans: ReadableSpan[] = [];\n  private _timer: NodeJS.Timeout | undefined;\n  private _shutdownOnce: BindOnceFuture<void>;\n  private _droppedSpansCount: number = 0;\n\n  constructor(\n    private readonly _exporter: SpanExporter,\n    config?: T\n  ) {\n    const env = getEnv();\n    this._maxExportBatchSize =\n      typeof config?.maxExportBatchSize === 'number'\n        ? config.maxExportBatchSize\n        : env.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;\n    this._maxQueueSize =\n      typeof config?.maxQueueSize === 'number'\n        ? config.maxQueueSize\n        : env.OTEL_BSP_MAX_QUEUE_SIZE;\n    this._scheduledDelayMillis =\n      typeof config?.scheduledDelayMillis === 'number'\n        ? config.scheduledDelayMillis\n        : env.OTEL_BSP_SCHEDULE_DELAY;\n    this._exportTimeoutMillis =\n      typeof config?.exportTimeoutMillis === 'number'\n        ? config.exportTimeoutMillis\n        : env.OTEL_BSP_EXPORT_TIMEOUT;\n\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n\n    if (this._maxExportBatchSize > this._maxQueueSize) {\n      diag.warn(\n        'BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize'\n      );\n      this._maxExportBatchSize = this._maxQueueSize;\n    }\n  }\n\n  forceFlush(): Promise<void> {\n    if (this._shutdownOnce.isCalled) {\n      return this._shutdownOnce.promise;\n    }\n    return this._flushAll();\n  }\n\n  // does nothing.\n  onStart(_span: Span, _parentContext: Context): void {}\n\n  onEnd(span: ReadableSpan): void {\n    if (this._shutdownOnce.isCalled) {\n      return;\n    }\n\n    if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n      return;\n    }\n\n    this._addToBuffer(span);\n  }\n\n  shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  private _shutdown() {\n    return Promise.resolve()\n      .then(() => {\n        return this.onShutdown();\n      })\n      .then(() => {\n        return this._flushAll();\n      })\n      .then(() => {\n        return this._exporter.shutdown();\n      });\n  }\n\n  /** Add a span in the buffer. */\n  private _addToBuffer(span: ReadableSpan) {\n    if (this._finishedSpans.length >= this._maxQueueSize) {\n      // limit reached, drop span\n\n      if (this._droppedSpansCount === 0) {\n        diag.debug('maxQueueSize reached, dropping spans');\n      }\n      this._droppedSpansCount++;\n\n      return;\n    }\n\n    if (this._droppedSpansCount > 0) {\n      // some spans were dropped, log once with count of spans dropped\n      diag.warn(\n        `Dropped ${this._droppedSpansCount} spans because maxQueueSize reached`\n      );\n      this._droppedSpansCount = 0;\n    }\n\n    this._finishedSpans.push(span);\n    this._maybeStartTimer();\n  }\n\n  /**\n   * Send all spans to the exporter respecting the batch size limit\n   * This function is used only on forceFlush or shutdown,\n   * for all other cases _flush should be used\n   * */\n  private _flushAll(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const promises = [];\n      // calculate number of batches\n      const count = Math.ceil(\n        this._finishedSpans.length / this._maxExportBatchSize\n      );\n      for (let i = 0, j = count; i < j; i++) {\n        promises.push(this._flushOneBatch());\n      }\n      Promise.all(promises)\n        .then(() => {\n          resolve();\n        })\n        .catch(reject);\n    });\n  }\n\n  private _flushOneBatch(): Promise<void> {\n    this._clearTimer();\n    if (this._finishedSpans.length === 0) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        // don't wait anymore for export, this way the next batch can start\n        reject(new Error('Timeout'));\n      }, this._exportTimeoutMillis);\n      // prevent downstream exporter calls from generating spans\n      context.with(suppressTracing(context.active()), () => {\n        // Reset the finished spans buffer here because the next invocations of the _flush method\n        // could pass the same finished spans to the exporter if the buffer is cleared\n        // outside the execution of this callback.\n        const spans = this._finishedSpans.splice(0, this._maxExportBatchSize);\n\n        const doExport = () =>\n          this._exporter.export(spans, result => {\n            clearTimeout(timer);\n            if (result.code === ExportResultCode.SUCCESS) {\n              resolve();\n            } else {\n              reject(\n                result.error ??\n                  new Error('BatchSpanProcessor: span export failed')\n              );\n            }\n          });\n        const pendingResources = spans\n          .map(span => span.resource)\n          .filter(resource => resource.asyncAttributesPending);\n\n        // Avoid scheduling a promise to make the behavior more predictable and easier to test\n        if (pendingResources.length === 0) {\n          doExport();\n        } else {\n          Promise.all(\n            pendingResources.map(\n              resource => resource.waitForAsyncAttributes?.()\n            )\n          ).then(doExport, err => {\n            globalErrorHandler(err);\n            reject(err);\n          });\n        }\n      });\n    });\n  }\n\n  private _maybeStartTimer() {\n    if (this._isExporting) return;\n    const flush = () => {\n      this._isExporting = true;\n      this._flushOneBatch()\n        .then(() => {\n          this._isExporting = false;\n          if (this._finishedSpans.length > 0) {\n            this._clearTimer();\n            this._maybeStartTimer();\n          }\n        })\n        .catch(e => {\n          this._isExporting = false;\n          globalErrorHandler(e);\n        });\n    };\n    // we only wait if the queue doesn't have enough elements yet\n    if (this._finishedSpans.length >= this._maxExportBatchSize) {\n      return flush();\n    }\n    if (this._timer !== undefined) return;\n    this._timer = setTimeout(() => flush(), this._scheduledDelayMillis);\n    unrefTimer(this._timer);\n  }\n\n  private _clearTimer() {\n    if (this._timer !== undefined) {\n      clearTimeout(this._timer);\n      this._timer = undefined;\n    }\n  }\n\n  protected abstract onShutdown(): void;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BatchSpanProcessorBase } from '../../../export/BatchSpanProcessorBase';\nimport { BufferConfig } from '../../../types';\n\nexport class BatchSpanProcessor extends BatchSpanProcessorBase<BufferConfig> {\n  protected onShutdown(): void {}\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdGenerator } from '../../IdGenerator';\n\nconst SPAN_ID_BYTES = 8;\nconst TRACE_ID_BYTES = 16;\n\nexport class RandomIdGenerator implements IdGenerator {\n  /**\n   * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n   * characters corresponding to 128 bits.\n   */\n  generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n\n  /**\n   * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n   * characters corresponding to 64 bits.\n   */\n  generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n}\n\nconst SHARED_BUFFER = Buffer.allocUnsafe(TRACE_ID_BYTES);\nfunction getIdGenerator(bytes: number): () => string {\n  return function generateId() {\n    for (let i = 0; i < bytes / 4; i++) {\n      // unsigned right shift drops decimal part of the number\n      // it is required because if a number between 2**32 and 2**32 - 1 is generated, an out of range error is thrown by writeUInt32BE\n      SHARED_BUFFER.writeUInt32BE((Math.random() * 2 ** 32) >>> 0, i * 4);\n    }\n\n    // If buffer is all 0, set the last byte to 1 to guarantee a valid w3c id is generated\n    for (let i = 0; i < bytes; i++) {\n      if (SHARED_BUFFER[i] > 0) {\n        break;\n      } else if (i === bytes - 1) {\n        SHARED_BUFFER[bytes - 1] = 1;\n      }\n    }\n\n    return SHARED_BUFFER.toString('hex', 0, bytes);\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './export/BatchSpanProcessor';\nexport * from './RandomIdGenerator';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './node';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  InstrumentationLibrary,\n  sanitizeAttributes,\n  isTracingSuppressed,\n} from '@opentelemetry/core';\nimport { IResource } from '@opentelemetry/resources';\nimport { BasicTracerProvider } from './BasicTracerProvider';\nimport { Span } from './Span';\nimport { GeneralLimits, SpanLimits, TracerConfig } from './types';\nimport { mergeConfig } from './utility';\nimport { SpanProcessor } from './SpanProcessor';\nimport { Sampler } from './Sampler';\nimport { IdGenerator } from './IdGenerator';\nimport { RandomIdGenerator } from './platform';\n\n/**\n * This class represents a basic tracer.\n */\nexport class Tracer implements api.Tracer {\n  private readonly _sampler: Sampler;\n  private readonly _generalLimits: GeneralLimits;\n  private readonly _spanLimits: SpanLimits;\n  private readonly _idGenerator: IdGenerator;\n  readonly resource: IResource;\n  readonly instrumentationLibrary: InstrumentationLibrary;\n\n  /**\n   * Constructs a new Tracer instance.\n   */\n  constructor(\n    instrumentationLibrary: InstrumentationLibrary,\n    config: TracerConfig,\n    private _tracerProvider: BasicTracerProvider\n  ) {\n    const localConfig = mergeConfig(config);\n    this._sampler = localConfig.sampler;\n    this._generalLimits = localConfig.generalLimits;\n    this._spanLimits = localConfig.spanLimits;\n    this._idGenerator = config.idGenerator || new RandomIdGenerator();\n    this.resource = _tracerProvider.resource;\n    this.instrumentationLibrary = instrumentationLibrary;\n  }\n\n  /**\n   * Starts a new Span or returns the default NoopSpan based on the sampling\n   * decision.\n   */\n  startSpan(\n    name: string,\n    options: api.SpanOptions = {},\n    context = api.context.active()\n  ): api.Span {\n    // remove span from context in case a root span is requested via options\n    if (options.root) {\n      context = api.trace.deleteSpan(context);\n    }\n    const parentSpan = api.trace.getSpan(context);\n\n    if (isTracingSuppressed(context)) {\n      api.diag.debug('Instrumentation suppressed, returning Noop Span');\n      const nonRecordingSpan = api.trace.wrapSpanContext(\n        api.INVALID_SPAN_CONTEXT\n      );\n      return nonRecordingSpan;\n    }\n\n    const parentSpanContext = parentSpan?.spanContext();\n    const spanId = this._idGenerator.generateSpanId();\n    let traceId;\n    let traceState;\n    let parentSpanId;\n    if (\n      !parentSpanContext ||\n      !api.trace.isSpanContextValid(parentSpanContext)\n    ) {\n      // New root span.\n      traceId = this._idGenerator.generateTraceId();\n    } else {\n      // New child span.\n      traceId = parentSpanContext.traceId;\n      traceState = parentSpanContext.traceState;\n      parentSpanId = parentSpanContext.spanId;\n    }\n\n    const spanKind = options.kind ?? api.SpanKind.INTERNAL;\n    const links = (options.links ?? []).map(link => {\n      return {\n        context: link.context,\n        attributes: sanitizeAttributes(link.attributes),\n      };\n    });\n    const attributes = sanitizeAttributes(options.attributes);\n    // make sampling decision\n    const samplingResult = this._sampler.shouldSample(\n      context,\n      traceId,\n      name,\n      spanKind,\n      attributes,\n      links\n    );\n\n    traceState = samplingResult.traceState ?? traceState;\n\n    const traceFlags =\n      samplingResult.decision === api.SamplingDecision.RECORD_AND_SAMPLED\n        ? api.TraceFlags.SAMPLED\n        : api.TraceFlags.NONE;\n    const spanContext = { traceId, spanId, traceFlags, traceState };\n    if (samplingResult.decision === api.SamplingDecision.NOT_RECORD) {\n      api.diag.debug(\n        'Recording is off, propagating context in a non-recording span'\n      );\n      const nonRecordingSpan = api.trace.wrapSpanContext(spanContext);\n      return nonRecordingSpan;\n    }\n\n    // Set initial span attributes. The attributes object may have been mutated\n    // by the sampler, so we sanitize the merged attributes before setting them.\n    const initAttributes = sanitizeAttributes(\n      Object.assign(attributes, samplingResult.attributes)\n    );\n\n    const span = new Span(\n      this,\n      context,\n      name,\n      spanContext,\n      spanKind,\n      parentSpanId,\n      links,\n      options.startTime,\n      undefined,\n      initAttributes\n    );\n    return span;\n  }\n\n  /**\n   * Starts a new {@link Span} and calls the given function passing it the\n   * created span as first argument.\n   * Additionally the new span gets set in context and this context is activated\n   * for the duration of the function call.\n   *\n   * @param name The name of the span\n   * @param [options] SpanOptions used for span creation\n   * @param [context] Context to use to extract parent\n   * @param fn function called in the context of the span and receives the newly created span as an argument\n   * @returns return value of fn\n   * @example\n   *   const something = tracer.startActiveSpan('op', span => {\n   *     try {\n   *       do some work\n   *       span.setStatus({code: SpanStatusCode.OK});\n   *       return something;\n   *     } catch (err) {\n   *       span.setStatus({\n   *         code: SpanStatusCode.ERROR,\n   *         message: err.message,\n   *       });\n   *       throw err;\n   *     } finally {\n   *       span.end();\n   *     }\n   *   });\n   * @example\n   *   const span = tracer.startActiveSpan('op', span => {\n   *     try {\n   *       do some work\n   *       return span;\n   *     } catch (err) {\n   *       span.setStatus({\n   *         code: SpanStatusCode.ERROR,\n   *         message: err.message,\n   *       });\n   *       throw err;\n   *     }\n   *   });\n   *   do some more work\n   *   span.end();\n   */\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    opts: api.SpanOptions,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    opts: api.SpanOptions,\n    ctx: api.Context,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    arg2?: F | api.SpanOptions,\n    arg3?: F | api.Context,\n    arg4?: F\n  ): ReturnType<F> | undefined {\n    let opts: api.SpanOptions | undefined;\n    let ctx: api.Context | undefined;\n    let fn: F;\n\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2 as F;\n    } else if (arguments.length === 3) {\n      opts = arg2 as api.SpanOptions | undefined;\n      fn = arg3 as F;\n    } else {\n      opts = arg2 as api.SpanOptions | undefined;\n      ctx = arg3 as api.Context | undefined;\n      fn = arg4 as F;\n    }\n\n    const parentContext = ctx ?? api.context.active();\n    const span = this.startSpan(name, opts, parentContext);\n    const contextWithSpanSet = api.trace.setSpan(parentContext, span);\n\n    return api.context.with(contextWithSpanSet, fn, undefined, span);\n  }\n\n  /** Returns the active {@link GeneralLimits}. */\n  getGeneralLimits(): GeneralLimits {\n    return this._generalLimits;\n  }\n\n  /** Returns the active {@link SpanLimits}. */\n  getSpanLimits(): SpanLimits {\n    return this._spanLimits;\n  }\n\n  getActiveSpanProcessor(): SpanProcessor {\n    return this._tracerProvider.getActiveSpanProcessor();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function defaultServiceName(): string {\n  return `unknown_service:${process.argv0}`;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const normalizeArch = (nodeArchString: string): string => {\n  // Maps from https://nodejs.org/api/os.html#osarch to arch values in spec:\n  // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/host.md\n  switch (nodeArchString) {\n    case 'arm':\n      return 'arm32';\n    case 'ppc':\n      return 'ppc32';\n    case 'x64':\n      return 'amd64';\n    default:\n      return nodeArchString;\n  }\n};\n\nexport const normalizeType = (nodePlatform: string): string => {\n  // Maps from https://nodejs.org/api/os.html#osplatform to arch values in spec:\n  // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/os.md\n  switch (nodePlatform) {\n    case 'sunos':\n      return 'solaris';\n    case 'win32':\n      return 'windows';\n    default:\n      return nodePlatform;\n  }\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as child_process from 'child_process';\nimport * as util from 'util';\n\nexport const execAsync = util.promisify(child_process.exec);\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { execAsync } from './execAsync';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  try {\n    const result = await execAsync('ioreg -rd1 -c \"IOPlatformExpertDevice\"');\n\n    const idLine = result.stdout\n      .split('\\n')\n      .find(line => line.includes('IOPlatformUUID'));\n\n    if (!idLine) {\n      return '';\n    }\n\n    const parts = idLine.split('\" = \"');\n    if (parts.length === 2) {\n      return parts[1].slice(0, -1);\n    }\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  return '';\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { promises as fs } from 'fs';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  const paths = ['/etc/machine-id', '/var/lib/dbus/machine-id'];\n\n  for (const path of paths) {\n    try {\n      const result = await fs.readFile(path, { encoding: 'utf8' });\n      return result.trim();\n    } catch (e) {\n      diag.debug(`error reading machine id: ${e}`);\n    }\n  }\n\n  return '';\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { promises as fs } from 'fs';\nimport { execAsync } from './execAsync';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  try {\n    const result = await fs.readFile('/etc/hostid', { encoding: 'utf8' });\n    return result.trim();\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  try {\n    const result = await execAsync('kenv -q smbios.system.uuid');\n    return result.stdout.trim();\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  return '';\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as process from 'process';\nimport { execAsync } from './execAsync';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  const args =\n    'QUERY HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Cryptography /v MachineGuid';\n  let command = '%windir%\\\\System32\\\\REG.exe';\n  if (process.arch === 'ia32' && 'PROCESSOR_ARCHITEW6432' in process.env) {\n    command = '%windir%\\\\sysnative\\\\cmd.exe /c ' + command;\n  }\n\n  try {\n    const result = await execAsync(`${command} ${args}`);\n    const parts = result.stdout.split('REG_SZ');\n    if (parts.length === 2) {\n      return parts[1].trim();\n    }\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  return '';\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string> {\n  diag.debug('could not read machine-id: unsupported platform');\n  return '';\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as process from 'process';\n\nlet getMachineId: () => Promise<string>;\n\nswitch (process.platform) {\n  case 'darwin':\n    ({ getMachineId } = require('./getMachineId-darwin'));\n    break;\n  case 'linux':\n    ({ getMachineId } = require('./getMachineId-linux'));\n    break;\n  case 'freebsd':\n    ({ getMachineId } = require('./getMachineId-bsd'));\n    break;\n  case 'win32':\n    ({ getMachineId } = require('./getMachineId-win'));\n    break;\n  default:\n    ({ getMachineId } = require('./getMachineId-unsupported'));\n}\n\nexport { getMachineId };\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../../Resource';\nimport { DetectorSync, ResourceAttributes } from '../../types';\nimport { ResourceDetectionConfig } from '../../config';\nimport { arch, hostname } from 'os';\nimport { normalizeArch } from './utils';\nimport { getMachineId } from './machine-id/getMachineId';\n\n/**\n * HostDetectorSync detects the resources related to the host current process is\n * running on. Currently only non-cloud-based attributes are included.\n */\nclass HostDetectorSync implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): Resource {\n    const attributes: ResourceAttributes = {\n      [SemanticResourceAttributes.HOST_NAME]: hostname(),\n      [SemanticResourceAttributes.HOST_ARCH]: normalizeArch(arch()),\n    };\n\n    return new Resource(attributes, this._getAsyncAttributes());\n  }\n\n  private _getAsyncAttributes(): Promise<ResourceAttributes> {\n    return getMachineId().then(machineId => {\n      const attributes: ResourceAttributes = {};\n      if (machineId) {\n        attributes[SemanticResourceAttributes.HOST_ID] = machineId;\n      }\n      return attributes;\n    });\n  }\n}\n\nexport const hostDetectorSync = new HostDetectorSync();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../../types';\nimport { ResourceDetectionConfig } from '../../config';\nimport { IResource } from '../../IResource';\nimport { hostDetectorSync } from './HostDetectorSync';\n\n/**\n * HostDetector detects the resources related to the host current process is\n * running on. Currently only non-cloud-based attributes are included.\n */\nclass HostDetector implements Detector {\n  detect(_config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(hostDetectorSync.detect(_config));\n  }\n}\n\nexport const hostDetector = new HostDetector();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../../Resource';\nimport { DetectorSync, ResourceAttributes } from '../../types';\nimport { ResourceDetectionConfig } from '../../config';\nimport { platform, release } from 'os';\nimport { normalizeType } from './utils';\n\n/**\n * OSDetectorSync detects the resources related to the operating system (OS) on\n * which the process represented by this resource is running.\n */\nclass OSDetectorSync implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): Resource {\n    const attributes: ResourceAttributes = {\n      [SemanticResourceAttributes.OS_TYPE]: normalizeType(platform()),\n      [SemanticResourceAttributes.OS_VERSION]: release(),\n    };\n    return new Resource(attributes);\n  }\n}\n\nexport const osDetectorSync = new OSDetectorSync();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../../types';\nimport { ResourceDetectionConfig } from '../../config';\nimport { IResource } from '../../IResource';\nimport { osDetectorSync } from './OSDetectorSync';\n\n/**\n * OSDetector detects the resources related to the operating system (OS) on\n * which the process represented by this resource is running.\n */\nclass OSDetector implements Detector {\n  detect(_config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(osDetectorSync.detect(_config));\n  }\n}\n\nexport const osDetector = new OSDetector();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../../Resource';\nimport { DetectorSync, ResourceAttributes } from '../../types';\nimport { ResourceDetectionConfig } from '../../config';\nimport { IResource } from '../../IResource';\nimport * as os from 'os';\n\n/**\n * ProcessDetectorSync will be used to detect the resources related current process running\n * and being instrumented from the NodeJS Process module.\n */\nclass ProcessDetectorSync implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): IResource {\n    const attributes: ResourceAttributes = {\n      [SemanticResourceAttributes.PROCESS_PID]: process.pid,\n      [SemanticResourceAttributes.PROCESS_EXECUTABLE_NAME]: process.title,\n      [SemanticResourceAttributes.PROCESS_EXECUTABLE_PATH]: process.execPath,\n      [SemanticResourceAttributes.PROCESS_COMMAND_ARGS]: [\n        process.argv[0],\n        ...process.execArgv,\n        ...process.argv.slice(1),\n      ],\n      [SemanticResourceAttributes.PROCESS_RUNTIME_VERSION]:\n        process.versions.node,\n      [SemanticResourceAttributes.PROCESS_RUNTIME_NAME]: 'nodejs',\n      [SemanticResourceAttributes.PROCESS_RUNTIME_DESCRIPTION]: 'Node.js',\n    };\n\n    if (process.argv.length > 1) {\n      attributes[SemanticResourceAttributes.PROCESS_COMMAND] = process.argv[1];\n    }\n\n    try {\n      const userInfo = os.userInfo();\n      attributes[SemanticResourceAttributes.PROCESS_OWNER] = userInfo.username;\n    } catch (e) {\n      diag.debug(`error obtaining process owner: ${e}`);\n    }\n\n    return new Resource(attributes);\n  }\n}\n\nexport const processDetectorSync = new ProcessDetectorSync();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../../types';\nimport { ResourceDetectionConfig } from '../../config';\nimport { IResource } from '../../IResource';\nimport { processDetectorSync } from './ProcessDetectorSync';\n\n/**\n * ProcessDetector will be used to detect the resources related current process running\n * and being instrumented from the NodeJS Process module.\n */\nclass ProcessDetector implements Detector {\n  detect(config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(processDetectorSync.detect(config));\n  }\n}\n\nexport const processDetector = new ProcessDetector();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './default-service-name';\nexport * from './HostDetector';\nexport * from './OSDetector';\nexport * from './HostDetectorSync';\nexport * from './OSDetectorSync';\nexport * from './ProcessDetector';\nexport * from './ProcessDetectorSync';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './node';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { ResourceAttributes } from './types';\nimport { defaultServiceName } from './platform';\nimport { IResource } from './IResource';\n\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nexport class Resource implements IResource {\n  static readonly EMPTY = new Resource({});\n  private _syncAttributes?: ResourceAttributes;\n  private _asyncAttributesPromise?: Promise<ResourceAttributes>;\n  private _attributes?: ResourceAttributes;\n\n  /**\n   * Check if async attributes have resolved. This is useful to avoid awaiting\n   * waitForAsyncAttributes (which will introduce asynchronous behavior) when not necessary.\n   *\n   * @returns true if the resource \"attributes\" property is not yet settled to its final value\n   */\n  public asyncAttributesPending?: boolean;\n\n  /**\n   * Returns an empty Resource\n   */\n  static empty(): IResource {\n    return Resource.EMPTY;\n  }\n\n  /**\n   * Returns a Resource that identifies the SDK in use.\n   */\n  static default(): IResource {\n    return new Resource({\n      [SemanticResourceAttributes.SERVICE_NAME]: defaultServiceName(),\n      [SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE]:\n        SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE],\n      [SemanticResourceAttributes.TELEMETRY_SDK_NAME]:\n        SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_NAME],\n      [SemanticResourceAttributes.TELEMETRY_SDK_VERSION]:\n        SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_VERSION],\n    });\n  }\n\n  constructor(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    attributes: ResourceAttributes,\n    asyncAttributesPromise?: Promise<ResourceAttributes>\n  ) {\n    this._attributes = attributes;\n    this.asyncAttributesPending = asyncAttributesPromise != null;\n    this._syncAttributes = this._attributes ?? {};\n    this._asyncAttributesPromise = asyncAttributesPromise?.then(\n      asyncAttributes => {\n        this._attributes = Object.assign({}, this._attributes, asyncAttributes);\n        this.asyncAttributesPending = false;\n        return asyncAttributes;\n      },\n      err => {\n        diag.debug(\"a resource's async attributes promise rejected: %s\", err);\n        this.asyncAttributesPending = false;\n        return {};\n      }\n    );\n  }\n\n  get attributes(): ResourceAttributes {\n    if (this.asyncAttributesPending) {\n      diag.error(\n        'Accessing resource attributes before async attributes settled'\n      );\n    }\n\n    return this._attributes ?? {};\n  }\n\n  /**\n   * Returns a promise that will never be rejected. Resolves when all async attributes have finished being added to\n   * this Resource's attributes. This is useful in exporters to block until resource detection\n   * has finished.\n   */\n  async waitForAsyncAttributes?(): Promise<void> {\n    if (this.asyncAttributesPending) {\n      await this._asyncAttributesPromise;\n    }\n  }\n\n  /**\n   * Returns a new, merged {@link Resource} by merging the current Resource\n   * with the other Resource. In case of a collision, other Resource takes\n   * precedence.\n   *\n   * @param other the Resource that will be merged with this.\n   * @returns the newly merged Resource.\n   */\n  merge(other: IResource | null): IResource {\n    if (!other) return this;\n\n    // SpanAttributes from other resource overwrite attributes from this resource.\n    const mergedSyncAttributes = {\n      ...this._syncAttributes,\n      //Support for old resource implementation where _syncAttributes is not defined\n      ...((other as Resource)._syncAttributes ?? other.attributes),\n    };\n\n    if (\n      !this._asyncAttributesPromise &&\n      !(other as Resource)._asyncAttributesPromise\n    ) {\n      return new Resource(mergedSyncAttributes);\n    }\n\n    const mergedAttributesPromise = Promise.all([\n      this._asyncAttributesPromise,\n      (other as Resource)._asyncAttributesPromise,\n    ]).then(([thisAsyncAttributes, otherAsyncAttributes]) => {\n      return {\n        ...this._syncAttributes,\n        ...thisAsyncAttributes,\n        //Support for old resource implementation where _syncAttributes is not defined\n        ...((other as Resource)._syncAttributes ?? other.attributes),\n        ...otherAsyncAttributes,\n      };\n    });\n\n    return new Resource(mergedSyncAttributes, mergedAttributesPromise);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  browserDetectorSync,\n  Detector,\n  IResource,\n  ResourceDetectionConfig,\n} from '..';\n\n/**\n * BrowserDetector will be used to detect the resources related to browser.\n */\nclass BrowserDetector implements Detector {\n  detect(config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(browserDetectorSync.detect(config));\n  }\n}\n\nexport const browserDetector = new BrowserDetector();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../Resource';\nimport { DetectorSync, ResourceAttributes } from '../types';\nimport { ResourceDetectionConfig } from '../config';\nimport { IResource } from '../IResource';\n\n/**\n * EnvDetectorSync can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nclass EnvDetectorSync implements DetectorSync {\n  // Type, attribute keys, and attribute values should not exceed 256 characters.\n  private readonly _MAX_LENGTH = 255;\n\n  // OTEL_RESOURCE_ATTRIBUTES is a comma-separated list of attributes.\n  private readonly _COMMA_SEPARATOR = ',';\n\n  // OTEL_RESOURCE_ATTRIBUTES contains key value pair separated by '='.\n  private readonly _LABEL_KEY_VALUE_SPLITTER = '=';\n\n  private readonly _ERROR_MESSAGE_INVALID_CHARS =\n    'should be a ASCII string with a length greater than 0 and not exceed ' +\n    this._MAX_LENGTH +\n    ' characters.';\n\n  private readonly _ERROR_MESSAGE_INVALID_VALUE =\n    'should be a ASCII string with a length not exceed ' +\n    this._MAX_LENGTH +\n    ' characters.';\n\n  /**\n   * Returns a {@link Resource} populated with attributes from the\n   * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n   * function to conform to the Detector interface.\n   *\n   * @param config The resource detection config\n   */\n  detect(_config?: ResourceDetectionConfig): IResource {\n    const attributes: ResourceAttributes = {};\n    const env = getEnv();\n\n    const rawAttributes = env.OTEL_RESOURCE_ATTRIBUTES;\n    const serviceName = env.OTEL_SERVICE_NAME;\n\n    if (rawAttributes) {\n      try {\n        const parsedAttributes = this._parseResourceAttributes(rawAttributes);\n        Object.assign(attributes, parsedAttributes);\n      } catch (e) {\n        diag.debug(`EnvDetector failed: ${e.message}`);\n      }\n    }\n\n    if (serviceName) {\n      attributes[SemanticResourceAttributes.SERVICE_NAME] = serviceName;\n    }\n\n    return new Resource(attributes);\n  }\n\n  /**\n   * Creates an attribute map from the OTEL_RESOURCE_ATTRIBUTES environment\n   * variable.\n   *\n   * OTEL_RESOURCE_ATTRIBUTES: A comma-separated list of attributes describing\n   * the source in more detail, e.g. “key1=val1,key2=val2”. Domain names and\n   * paths are accepted as attribute keys. Values may be quoted or unquoted in\n   * general. If a value contains whitespaces, =, or \" characters, it must\n   * always be quoted.\n   *\n   * @param rawEnvAttributes The resource attributes as a comma-seperated list\n   * of key/value pairs.\n   * @returns The sanitized resource attributes.\n   */\n  private _parseResourceAttributes(\n    rawEnvAttributes?: string\n  ): ResourceAttributes {\n    if (!rawEnvAttributes) return {};\n\n    const attributes: ResourceAttributes = {};\n    const rawAttributes: string[] = rawEnvAttributes.split(\n      this._COMMA_SEPARATOR,\n      -1\n    );\n    for (const rawAttribute of rawAttributes) {\n      const keyValuePair: string[] = rawAttribute.split(\n        this._LABEL_KEY_VALUE_SPLITTER,\n        -1\n      );\n      if (keyValuePair.length !== 2) {\n        continue;\n      }\n      let [key, value] = keyValuePair;\n      // Leading and trailing whitespaces are trimmed.\n      key = key.trim();\n      value = value.trim().split(/^\"|\"$/).join('');\n      if (!this._isValidAndNotEmpty(key)) {\n        throw new Error(`Attribute key ${this._ERROR_MESSAGE_INVALID_CHARS}`);\n      }\n      if (!this._isValid(value)) {\n        throw new Error(`Attribute value ${this._ERROR_MESSAGE_INVALID_VALUE}`);\n      }\n      attributes[key] = decodeURIComponent(value);\n    }\n    return attributes;\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid.\n   */\n  private _isValid(name: string): boolean {\n    return name.length <= this._MAX_LENGTH && this._isBaggageOctetString(name);\n  }\n\n  // https://www.w3.org/TR/baggage/#definition\n  private _isBaggageOctetString(str: string): boolean {\n    for (let i = 0; i < str.length; i++) {\n      const ch = str.charCodeAt(i);\n      if (ch < 0x21 || ch === 0x2c || ch === 0x3b || ch === 0x5c || ch > 0x7e) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length greater than 0 and not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid and not empty.\n   */\n  private _isValidAndNotEmpty(str: string): boolean {\n    return str.length > 0 && this._isValid(str);\n  }\n}\n\nexport const envDetectorSync = new EnvDetectorSync();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../types';\nimport { ResourceDetectionConfig } from '../config';\nimport { IResource } from '../IResource';\nimport { envDetectorSync } from './EnvDetectorSync';\n\n/**\n * EnvDetector can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nclass EnvDetector implements Detector {\n  /**\n   * Returns a {@link Resource} populated with attributes from the\n   * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n   * function to conform to the Detector interface.\n   *\n   * @param config The resource detection config\n   */\n  detect(config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(envDetectorSync.detect(config));\n  }\n}\n\nexport const envDetector = new EnvDetector();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { DetectorSync, IResource, Resource, ResourceDetectionConfig } from '..';\nimport { ResourceAttributes } from '../types';\nimport { diag } from '@opentelemetry/api';\n\n/**\n * BrowserDetectorSync will be used to detect the resources related to browser.\n */\nclass BrowserDetectorSync implements DetectorSync {\n  detect(config?: ResourceDetectionConfig): IResource {\n    const isBrowser = typeof navigator !== 'undefined';\n    if (!isBrowser) {\n      return Resource.empty();\n    }\n    const browserResource: ResourceAttributes = {\n      [SemanticResourceAttributes.PROCESS_RUNTIME_NAME]: 'browser',\n      [SemanticResourceAttributes.PROCESS_RUNTIME_DESCRIPTION]: 'Web Browser',\n      [SemanticResourceAttributes.PROCESS_RUNTIME_VERSION]: navigator.userAgent,\n    };\n    return this._getResourceAttributes(browserResource, config);\n  }\n  /**\n   * Validates process resource attribute map from process variables\n   *\n   * @param browserResource The un-sanitized resource attributes from process as key/value pairs.\n   * @param config: Config\n   * @returns The sanitized resource attributes.\n   */\n  private _getResourceAttributes(\n    browserResource: ResourceAttributes,\n    _config?: ResourceDetectionConfig\n  ) {\n    if (\n      browserResource[SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] === ''\n    ) {\n      diag.debug(\n        'BrowserDetector failed: Unable to find required browser resources. '\n      );\n      return Resource.empty();\n    } else {\n      return new Resource({\n        ...browserResource,\n      });\n    }\n  }\n}\n\nexport const browserDetectorSync = new BrowserDetectorSync();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './BrowserDetector';\nexport * from './EnvDetector';\nexport * from './BrowserDetectorSync';\nexport * from './EnvDetectorSync';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const isPromiseLike = <R>(val: any): val is PromiseLike<R> => {\n  return (\n    val !== null && typeof val === 'object' && typeof val.then === 'function'\n  );\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Resource } from './Resource';\nimport { ResourceDetectionConfig } from './config';\nimport { diag } from '@opentelemetry/api';\nimport { isPromiseLike } from './utils';\nimport { Detector, DetectorSync } from './types';\nimport { IResource } from './IResource';\n\n/**\n * Runs all resource detectors and returns the results merged into a single Resource. Promise\n * does not resolve until all the underlying detectors have resolved, unlike\n * detectResourcesSync.\n *\n * @deprecated use detectResourcesSync() instead.\n * @param config Configuration for resource detection\n */\nexport const detectResources = async (\n  config: ResourceDetectionConfig = {}\n): Promise<IResource> => {\n  const resources: IResource[] = await Promise.all(\n    (config.detectors || []).map(async d => {\n      try {\n        const resource = await d.detect(config);\n        diag.debug(`${d.constructor.name} found resource.`, resource);\n        return resource;\n      } catch (e) {\n        diag.debug(`${d.constructor.name} failed: ${e.message}`);\n        return Resource.empty();\n      }\n    })\n  );\n\n  // Future check if verbose logging is enabled issue #1903\n  logResources(resources);\n\n  return resources.reduce(\n    (acc, resource) => acc.merge(resource),\n    Resource.empty()\n  );\n};\n\n/**\n * Runs all resource detectors synchronously, merging their results. In case of attribute collision later resources will take precedence.\n *\n * @param config Configuration for resource detection\n */\nexport const detectResourcesSync = (\n  config: ResourceDetectionConfig = {}\n): IResource => {\n  const resources: IResource[] = (config.detectors ?? []).map(\n    (d: Detector | DetectorSync) => {\n      try {\n        const resourceOrPromise = d.detect(config);\n        let resource: IResource;\n        if (isPromiseLike<Resource>(resourceOrPromise)) {\n          const createPromise = async () => {\n            const resolvedResource = await resourceOrPromise;\n            return resolvedResource.attributes;\n          };\n          resource = new Resource({}, createPromise());\n        } else {\n          resource = resourceOrPromise as IResource;\n        }\n\n        if (resource.waitForAsyncAttributes) {\n          void resource\n            .waitForAsyncAttributes()\n            .then(() =>\n              diag.debug(`${d.constructor.name} found resource.`, resource)\n            );\n        } else {\n          diag.debug(`${d.constructor.name} found resource.`, resource);\n        }\n\n        return resource;\n      } catch (e) {\n        diag.error(`${d.constructor.name} failed: ${e.message}`);\n        return Resource.empty();\n      }\n    }\n  );\n\n  const mergedResources = resources.reduce(\n    (acc, resource) => acc.merge(resource),\n    Resource.empty()\n  );\n\n  if (mergedResources.waitForAsyncAttributes) {\n    void mergedResources.waitForAsyncAttributes().then(() => {\n      // Future check if verbose logging is enabled issue #1903\n      logResources(resources);\n    });\n  }\n\n  return mergedResources;\n};\n\n/**\n * Writes debug information about the detected resources to the logger defined in the resource detection config, if one is provided.\n *\n * @param resources The array of {@link Resource} that should be logged. Empty entries will be ignored.\n */\nconst logResources = (resources: Array<IResource>) => {\n  resources.forEach(resource => {\n    // Print only populated resources\n    if (Object.keys(resource.attributes).length > 0) {\n      const resourceDebugString = JSON.stringify(resource.attributes, null, 4);\n      diag.verbose(resourceDebugString);\n    }\n  });\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './Resource';\nexport * from './IResource';\nexport * from './platform';\nexport * from './types';\nexport * from './config';\nexport * from './detectors';\nexport * from './detect-resources';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '@opentelemetry/api';\nimport { globalErrorHandler } from '@opentelemetry/core';\nimport { ReadableSpan } from './export/ReadableSpan';\nimport { Span } from './Span';\nimport { SpanProcessor } from './SpanProcessor';\n\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nexport class MultiSpanProcessor implements SpanProcessor {\n  constructor(private readonly _spanProcessors: SpanProcessor[]) {}\n\n  forceFlush(): Promise<void> {\n    const promises: Promise<void>[] = [];\n\n    for (const spanProcessor of this._spanProcessors) {\n      promises.push(spanProcessor.forceFlush());\n    }\n    return new Promise(resolve => {\n      Promise.all(promises)\n        .then(() => {\n          resolve();\n        })\n        .catch(error => {\n          globalErrorHandler(\n            error || new Error('MultiSpanProcessor: forceFlush failed')\n          );\n          resolve();\n        });\n    });\n  }\n\n  onStart(span: Span, context: Context): void {\n    for (const spanProcessor of this._spanProcessors) {\n      spanProcessor.onStart(span, context);\n    }\n  }\n\n  onEnd(span: ReadableSpan): void {\n    for (const spanProcessor of this._spanProcessors) {\n      spanProcessor.onEnd(span);\n    }\n  }\n\n  shutdown(): Promise<void> {\n    const promises: Promise<void>[] = [];\n\n    for (const spanProcessor of this._spanProcessors) {\n      promises.push(spanProcessor.shutdown());\n    }\n    return new Promise((resolve, reject) => {\n      Promise.all(promises).then(() => {\n        resolve();\n      }, reject);\n    });\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '@opentelemetry/api';\nimport { ReadableSpan } from './ReadableSpan';\nimport { Span } from '../Span';\nimport { SpanProcessor } from '../SpanProcessor';\n\n/** No-op implementation of SpanProcessor */\nexport class NoopSpanProcessor implements SpanProcessor {\n  onStart(_span: Span, _context: Context): void {}\n  onEnd(_span: ReadableSpan): void {}\n  shutdown(): Promise<void> {\n    return Promise.resolve();\n  }\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  context,\n  diag,\n  propagation,\n  TextMapPropagator,\n  trace,\n  TracerProvider,\n} from '@opentelemetry/api';\nimport {\n  CompositePropagator,\n  W3CBaggagePropagator,\n  W3CTraceContextPropagator,\n  getEnv,\n  merge,\n} from '@opentelemetry/core';\nimport { IResource, Resource } from '@opentelemetry/resources';\nimport { SpanProcessor, Tracer } from '.';\nimport { loadDefaultConfig } from './config';\nimport { MultiSpanProcessor } from './MultiSpanProcessor';\nimport { NoopSpanProcessor } from './export/NoopSpanProcessor';\nimport { SDKRegistrationConfig, TracerConfig } from './types';\nimport { SpanExporter } from './export/SpanExporter';\nimport { BatchSpanProcessor } from './platform';\nimport { reconfigureLimits } from './utility';\n\nexport type PROPAGATOR_FACTORY = () => TextMapPropagator;\nexport type EXPORTER_FACTORY = () => SpanExporter;\n\nexport enum ForceFlushState {\n  'resolved',\n  'timeout',\n  'error',\n  'unresolved',\n}\n\n/**\n * This class represents a basic tracer provider which platform libraries can extend\n */\nexport class BasicTracerProvider implements TracerProvider {\n  protected static readonly _registeredPropagators = new Map<\n    string,\n    PROPAGATOR_FACTORY\n  >([\n    ['tracecontext', () => new W3CTraceContextPropagator()],\n    ['baggage', () => new W3CBaggagePropagator()],\n  ]);\n\n  protected static readonly _registeredExporters = new Map<\n    string,\n    EXPORTER_FACTORY\n  >();\n\n  private readonly _config: TracerConfig;\n  private readonly _registeredSpanProcessors: SpanProcessor[] = [];\n  private readonly _tracers: Map<string, Tracer> = new Map();\n\n  activeSpanProcessor: SpanProcessor;\n  readonly resource: IResource;\n\n  constructor(config: TracerConfig = {}) {\n    const mergedConfig = merge(\n      {},\n      loadDefaultConfig(),\n      reconfigureLimits(config)\n    );\n    this.resource = mergedConfig.resource ?? Resource.empty();\n    this.resource = Resource.default().merge(this.resource);\n    this._config = Object.assign({}, mergedConfig, {\n      resource: this.resource,\n    });\n\n    const defaultExporter = this._buildExporterFromEnv();\n    if (defaultExporter !== undefined) {\n      const batchProcessor = new BatchSpanProcessor(defaultExporter);\n      this.activeSpanProcessor = batchProcessor;\n    } else {\n      this.activeSpanProcessor = new NoopSpanProcessor();\n    }\n  }\n\n  getTracer(\n    name: string,\n    version?: string,\n    options?: { schemaUrl?: string }\n  ): Tracer {\n    const key = `${name}@${version || ''}:${options?.schemaUrl || ''}`;\n    if (!this._tracers.has(key)) {\n      this._tracers.set(\n        key,\n        new Tracer(\n          { name, version, schemaUrl: options?.schemaUrl },\n          this._config,\n          this\n        )\n      );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this._tracers.get(key)!;\n  }\n\n  /**\n   * Adds a new {@link SpanProcessor} to this tracer.\n   * @param spanProcessor the new SpanProcessor to be added.\n   */\n  addSpanProcessor(spanProcessor: SpanProcessor): void {\n    if (this._registeredSpanProcessors.length === 0) {\n      // since we might have enabled by default a batchProcessor, we disable it\n      // before adding the new one\n      this.activeSpanProcessor\n        .shutdown()\n        .catch(err =>\n          diag.error(\n            'Error while trying to shutdown current span processor',\n            err\n          )\n        );\n    }\n    this._registeredSpanProcessors.push(spanProcessor);\n    this.activeSpanProcessor = new MultiSpanProcessor(\n      this._registeredSpanProcessors\n    );\n  }\n\n  getActiveSpanProcessor(): SpanProcessor {\n    return this.activeSpanProcessor;\n  }\n\n  /**\n   * Register this TracerProvider for use with the OpenTelemetry API.\n   * Undefined values may be replaced with defaults, and\n   * null values will be skipped.\n   *\n   * @param config Configuration object for SDK registration\n   */\n  register(config: SDKRegistrationConfig = {}): void {\n    trace.setGlobalTracerProvider(this);\n    if (config.propagator === undefined) {\n      config.propagator = this._buildPropagatorFromEnv();\n    }\n\n    if (config.contextManager) {\n      context.setGlobalContextManager(config.contextManager);\n    }\n\n    if (config.propagator) {\n      propagation.setGlobalPropagator(config.propagator);\n    }\n  }\n\n  forceFlush(): Promise<void> {\n    const timeout = this._config.forceFlushTimeoutMillis;\n    const promises = this._registeredSpanProcessors.map(\n      (spanProcessor: SpanProcessor) => {\n        return new Promise(resolve => {\n          let state: ForceFlushState;\n          const timeoutInterval = setTimeout(() => {\n            resolve(\n              new Error(\n                `Span processor did not completed within timeout period of ${timeout} ms`\n              )\n            );\n            state = ForceFlushState.timeout;\n          }, timeout);\n\n          spanProcessor\n            .forceFlush()\n            .then(() => {\n              clearTimeout(timeoutInterval);\n              if (state !== ForceFlushState.timeout) {\n                state = ForceFlushState.resolved;\n                resolve(state);\n              }\n            })\n            .catch(error => {\n              clearTimeout(timeoutInterval);\n              state = ForceFlushState.error;\n              resolve(error);\n            });\n        });\n      }\n    );\n\n    return new Promise<void>((resolve, reject) => {\n      Promise.all(promises)\n        .then(results => {\n          const errors = results.filter(\n            result => result !== ForceFlushState.resolved\n          );\n          if (errors.length > 0) {\n            reject(errors);\n          } else {\n            resolve();\n          }\n        })\n        .catch(error => reject([error]));\n    });\n  }\n\n  shutdown(): Promise<void> {\n    return this.activeSpanProcessor.shutdown();\n  }\n\n  /**\n   * TS cannot yet infer the type of this.constructor:\n   * https://github.com/Microsoft/TypeScript/issues/3841#issuecomment-337560146\n   * There is no need to override either of the getters in your child class.\n   * The type of the registered component maps should be the same across all\n   * classes in the inheritance tree.\n   */\n  protected _getPropagator(name: string): TextMapPropagator | undefined {\n    return (\n      this.constructor as typeof BasicTracerProvider\n    )._registeredPropagators.get(name)?.();\n  }\n\n  protected _getSpanExporter(name: string): SpanExporter | undefined {\n    return (\n      this.constructor as typeof BasicTracerProvider\n    )._registeredExporters.get(name)?.();\n  }\n\n  protected _buildPropagatorFromEnv(): TextMapPropagator | undefined {\n    // per spec, propagators from env must be deduplicated\n    const uniquePropagatorNames = Array.from(\n      new Set(getEnv().OTEL_PROPAGATORS)\n    );\n\n    const propagators = uniquePropagatorNames.map(name => {\n      const propagator = this._getPropagator(name);\n      if (!propagator) {\n        diag.warn(\n          `Propagator \"${name}\" requested through environment variable is unavailable.`\n        );\n      }\n\n      return propagator;\n    });\n    const validPropagators = propagators.reduce<TextMapPropagator[]>(\n      (list, item) => {\n        if (item) {\n          list.push(item);\n        }\n        return list;\n      },\n      []\n    );\n\n    if (validPropagators.length === 0) {\n      return;\n    } else if (uniquePropagatorNames.length === 1) {\n      return validPropagators[0];\n    } else {\n      return new CompositePropagator({\n        propagators: validPropagators,\n      });\n    }\n  }\n\n  protected _buildExporterFromEnv(): SpanExporter | undefined {\n    const exporterName = getEnv().OTEL_TRACES_EXPORTER;\n    if (exporterName === 'none' || exporterName === '') return;\n    const exporter = this._getSpanExporter(exporterName);\n    if (!exporter) {\n      diag.error(\n        `Exporter \"${exporterName}\" requested through environment variable is unavailable.`\n      );\n    }\n    return exporter;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanExporter } from './SpanExporter';\nimport { ReadableSpan } from './ReadableSpan';\nimport {\n  ExportResult,\n  ExportResultCode,\n  hrTimeToMicroseconds,\n} from '@opentelemetry/core';\n\n/**\n * This is implementation of {@link SpanExporter} that prints spans to the\n * console. This class can be used for diagnostic purposes.\n */\n\n/* eslint-disable no-console */\nexport class ConsoleSpanExporter implements SpanExporter {\n  /**\n   * Export spans.\n   * @param spans\n   * @param resultCallback\n   */\n  export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    return this._sendSpans(spans, resultCallback);\n  }\n\n  /**\n   * Shutdown the exporter.\n   */\n  shutdown(): Promise<void> {\n    this._sendSpans([]);\n    return this.forceFlush();\n  }\n\n  /**\n   * Exports any pending spans in exporter\n   */\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  /**\n   * converts span info into more readable format\n   * @param span\n   */\n  private _exportInfo(span: ReadableSpan) {\n    return {\n      traceId: span.spanContext().traceId,\n      parentId: span.parentSpanId,\n      traceState: span.spanContext().traceState?.serialize(),\n      name: span.name,\n      id: span.spanContext().spanId,\n      kind: span.kind,\n      timestamp: hrTimeToMicroseconds(span.startTime),\n      duration: hrTimeToMicroseconds(span.duration),\n      attributes: span.attributes,\n      status: span.status,\n      events: span.events,\n      links: span.links,\n    };\n  }\n\n  /**\n   * Showing spans in console\n   * @param spans\n   * @param done\n   */\n  private _sendSpans(\n    spans: ReadableSpan[],\n    done?: (result: ExportResult) => void\n  ): void {\n    for (const span of spans) {\n      console.dir(this._exportInfo(span), { depth: 3 });\n    }\n    if (done) {\n      return done({ code: ExportResultCode.SUCCESS });\n    }\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanExporter } from './SpanExporter';\nimport { ReadableSpan } from './ReadableSpan';\nimport { ExportResult, ExportResultCode } from '@opentelemetry/core';\n\n/**\n * This class can be used for testing purposes. It stores the exported spans\n * in a list in memory that can be retrieved using the `getFinishedSpans()`\n * method.\n */\nexport class InMemorySpanExporter implements SpanExporter {\n  private _finishedSpans: ReadableSpan[] = [];\n  /**\n   * Indicates if the exporter has been \"shutdown.\"\n   * When false, exported spans will not be stored in-memory.\n   */\n  protected _stopped = false;\n\n  export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    if (this._stopped)\n      return resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Exporter has been stopped'),\n      });\n    this._finishedSpans.push(...spans);\n\n    setTimeout(() => resultCallback({ code: ExportResultCode.SUCCESS }), 0);\n  }\n\n  shutdown(): Promise<void> {\n    this._stopped = true;\n    this._finishedSpans = [];\n    return this.forceFlush();\n  }\n\n  /**\n   * Exports any pending spans in the exporter\n   */\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  reset(): void {\n    this._finishedSpans = [];\n  }\n\n  getFinishedSpans(): ReadableSpan[] {\n    return this._finishedSpans;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, TraceFlags } from '@opentelemetry/api';\nimport {\n  internal,\n  ExportResultCode,\n  globalErrorHandler,\n  BindOnceFuture,\n  ExportResult,\n} from '@opentelemetry/core';\nimport { Span } from '../Span';\nimport { SpanProcessor } from '../SpanProcessor';\nimport { ReadableSpan } from './ReadableSpan';\nimport { SpanExporter } from './SpanExporter';\nimport { Resource } from '@opentelemetry/resources';\n\n/**\n * An implementation of the {@link SpanProcessor} that converts the {@link Span}\n * to {@link ReadableSpan} and passes it to the configured exporter.\n *\n * Only spans that are sampled are converted.\n */\nexport class SimpleSpanProcessor implements SpanProcessor {\n  private _shutdownOnce: BindOnceFuture<void>;\n  private _unresolvedExports: Set<Promise<void>>;\n\n  constructor(private readonly _exporter: SpanExporter) {\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n    this._unresolvedExports = new Set<Promise<void>>();\n  }\n\n  async forceFlush(): Promise<void> {\n    // await unresolved resources before resolving\n    await Promise.all(Array.from(this._unresolvedExports));\n    if (this._exporter.forceFlush) {\n      await this._exporter.forceFlush();\n    }\n  }\n\n  onStart(_span: Span, _parentContext: Context): void {}\n\n  onEnd(span: ReadableSpan): void {\n    if (this._shutdownOnce.isCalled) {\n      return;\n    }\n\n    if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n      return;\n    }\n\n    const doExport = () =>\n      internal\n        ._export(this._exporter, [span])\n        .then((result: ExportResult) => {\n          if (result.code !== ExportResultCode.SUCCESS) {\n            globalErrorHandler(\n              result.error ??\n                new Error(\n                  `SimpleSpanProcessor: span export failed (status ${result})`\n                )\n            );\n          }\n        })\n        .catch(error => {\n          globalErrorHandler(error);\n        });\n\n    // Avoid scheduling a promise to make the behavior more predictable and easier to test\n    if (span.resource.asyncAttributesPending) {\n      const exportPromise = (span.resource as Resource)\n        .waitForAsyncAttributes?.()\n        .then(\n          () => {\n            if (exportPromise != null) {\n              this._unresolvedExports.delete(exportPromise);\n            }\n            return doExport();\n          },\n          err => globalErrorHandler(err)\n        );\n\n      // store the unresolved exports\n      if (exportPromise != null) {\n        this._unresolvedExports.add(exportPromise);\n      }\n    } else {\n      void doExport();\n    }\n  }\n\n  shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  private _shutdown(): Promise<void> {\n    return this._exporter.shutdown();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './Tracer';\nexport * from './BasicTracerProvider';\nexport * from './platform';\nexport * from './export/ConsoleSpanExporter';\nexport * from './export/InMemorySpanExporter';\nexport * from './export/ReadableSpan';\nexport * from './export/SimpleSpanProcessor';\nexport * from './export/SpanExporter';\nexport * from './export/NoopSpanProcessor';\nexport * from './sampler/AlwaysOffSampler';\nexport * from './sampler/AlwaysOnSampler';\nexport * from './sampler/ParentBasedSampler';\nexport * from './sampler/TraceIdRatioBasedSampler';\nexport * from './Sampler';\nexport * from './Span';\nexport * from './SpanProcessor';\nexport * from './TimedEvent';\nexport * from './types';\nexport * from './IdGenerator';\n","export * from \"@opentelemetry/api-logs\"","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TracerProvider, MeterProvider } from '@opentelemetry/api';\nimport { Instrumentation } from './types';\nimport { AutoLoaderResult, InstrumentationOption } from './types_internal';\n\n/**\n * Parses the options and returns instrumentations, node plugins and\n *   web plugins\n * @param options\n */\nexport function parseInstrumentationOptions(\n  options: InstrumentationOption[] = []\n): AutoLoaderResult {\n  let instrumentations: Instrumentation[] = [];\n  for (let i = 0, j = options.length; i < j; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const option = options[i] as any;\n    if (Array.isArray(option)) {\n      const results = parseInstrumentationOptions(option);\n      instrumentations = instrumentations.concat(results.instrumentations);\n    } else if (typeof option === 'function') {\n      instrumentations.push(new option());\n    } else if ((option as Instrumentation).instrumentationName) {\n      instrumentations.push(option);\n    }\n  }\n\n  return { instrumentations };\n}\n\n/**\n * Enable instrumentations\n * @param instrumentations\n * @param tracerProvider\n * @param meterProvider\n */\nexport function enableInstrumentations(\n  instrumentations: Instrumentation[],\n  tracerProvider?: TracerProvider,\n  meterProvider?: MeterProvider\n): void {\n  for (let i = 0, j = instrumentations.length; i < j; i++) {\n    const instrumentation = instrumentations[i];\n    if (tracerProvider) {\n      instrumentation.setTracerProvider(tracerProvider);\n    }\n    if (meterProvider) {\n      instrumentation.setMeterProvider(meterProvider);\n    }\n    // instrumentations have been already enabled during creation\n    // so enable only if user prevented that by setting enabled to false\n    // this is to prevent double enabling but when calling register all\n    // instrumentations should be now enabled\n    if (!instrumentation.getConfig().enabled) {\n      instrumentation.enable();\n    }\n  }\n}\n\n/**\n * Disable instrumentations\n * @param instrumentations\n */\nexport function disableInstrumentations(\n  instrumentations: Instrumentation[]\n): void {\n  instrumentations.forEach(instrumentation => instrumentation.disable());\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { trace, metrics } from '@opentelemetry/api';\nimport {\n  disableInstrumentations,\n  enableInstrumentations,\n  parseInstrumentationOptions,\n} from './autoLoaderUtils';\nimport { AutoLoaderOptions } from './types_internal';\n\n/**\n * It will register instrumentations and plugins\n * @param options\n * @return returns function to unload instrumentation and plugins that were\n *   registered\n */\nexport function registerInstrumentations(\n  options: AutoLoaderOptions\n): () => void {\n  const { instrumentations } = parseInstrumentationOptions(\n    options.instrumentations\n  );\n  const tracerProvider = options.tracerProvider || trace.getTracerProvider();\n  const meterProvider = options.meterProvider || metrics.getMeterProvider();\n\n  enableInstrumentations(instrumentations, tracerProvider, meterProvider);\n\n  return () => {\n    disableInstrumentations(instrumentations);\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AttributeValue, diag } from '@opentelemetry/api';\nimport type * as logsAPI from '@opentelemetry/api-logs';\nimport * as api from '@opentelemetry/api';\nimport {\n  timeInputToHrTime,\n  isAttributeValue,\n  InstrumentationScope,\n} from '@opentelemetry/core';\nimport type { IResource } from '@opentelemetry/resources';\n\nimport type { ReadableLogRecord } from './export/ReadableLogRecord';\nimport type { LogRecordLimits } from './types';\nimport { LogAttributes } from '@opentelemetry/api-logs';\nimport { LoggerProviderSharedState } from './internal/LoggerProviderSharedState';\n\nexport class LogRecord implements ReadableLogRecord {\n  readonly hrTime: api.HrTime;\n  readonly hrTimeObserved: api.HrTime;\n  readonly spanContext?: api.SpanContext;\n  readonly resource: IResource;\n  readonly instrumentationScope: InstrumentationScope;\n  readonly attributes: logsAPI.LogAttributes = {};\n  private _severityText?: string;\n  private _severityNumber?: logsAPI.SeverityNumber;\n  private _body?: string;\n  private totalAttributesCount: number = 0;\n\n  private _isReadonly: boolean = false;\n  private readonly _logRecordLimits: Required<LogRecordLimits>;\n\n  set severityText(severityText: string | undefined) {\n    if (this._isLogRecordReadonly()) {\n      return;\n    }\n    this._severityText = severityText;\n  }\n  get severityText(): string | undefined {\n    return this._severityText;\n  }\n\n  set severityNumber(severityNumber: logsAPI.SeverityNumber | undefined) {\n    if (this._isLogRecordReadonly()) {\n      return;\n    }\n    this._severityNumber = severityNumber;\n  }\n  get severityNumber(): logsAPI.SeverityNumber | undefined {\n    return this._severityNumber;\n  }\n\n  set body(body: string | undefined) {\n    if (this._isLogRecordReadonly()) {\n      return;\n    }\n    this._body = body;\n  }\n  get body(): string | undefined {\n    return this._body;\n  }\n\n  get droppedAttributesCount(): number {\n    return this.totalAttributesCount - Object.keys(this.attributes).length;\n  }\n\n  constructor(\n    _sharedState: LoggerProviderSharedState,\n    instrumentationScope: InstrumentationScope,\n    logRecord: logsAPI.LogRecord\n  ) {\n    const {\n      timestamp,\n      observedTimestamp,\n      severityNumber,\n      severityText,\n      body,\n      attributes = {},\n      context,\n    } = logRecord;\n\n    const now = Date.now();\n    this.hrTime = timeInputToHrTime(timestamp ?? now);\n    this.hrTimeObserved = timeInputToHrTime(observedTimestamp ?? now);\n\n    if (context) {\n      const spanContext = api.trace.getSpanContext(context);\n      if (spanContext && api.isSpanContextValid(spanContext)) {\n        this.spanContext = spanContext;\n      }\n    }\n    this.severityNumber = severityNumber;\n    this.severityText = severityText;\n    this.body = body;\n    this.resource = _sharedState.resource;\n    this.instrumentationScope = instrumentationScope;\n    this._logRecordLimits = _sharedState.logRecordLimits;\n    this.setAttributes(attributes);\n  }\n\n  public setAttribute(key: string, value?: LogAttributes | AttributeValue) {\n    if (this._isLogRecordReadonly()) {\n      return this;\n    }\n    if (value === null) {\n      return this;\n    }\n    if (key.length === 0) {\n      api.diag.warn(`Invalid attribute key: ${key}`);\n      return this;\n    }\n    if (\n      !isAttributeValue(value) &&\n      !(\n        typeof value === 'object' &&\n        !Array.isArray(value) &&\n        Object.keys(value).length > 0\n      )\n    ) {\n      api.diag.warn(`Invalid attribute value set for key: ${key}`);\n      return this;\n    }\n    this.totalAttributesCount += 1;\n    if (\n      Object.keys(this.attributes).length >=\n        this._logRecordLimits.attributeCountLimit &&\n      !Object.prototype.hasOwnProperty.call(this.attributes, key)\n    ) {\n      return this;\n    }\n    if (isAttributeValue(value)) {\n      this.attributes[key] = this._truncateToSize(value);\n    } else {\n      this.attributes[key] = value;\n    }\n    return this;\n  }\n\n  public setAttributes(attributes: LogAttributes) {\n    for (const [k, v] of Object.entries(attributes)) {\n      this.setAttribute(k, v);\n    }\n    return this;\n  }\n\n  public setBody(body: string) {\n    this.body = body;\n    return this;\n  }\n\n  public setSeverityNumber(severityNumber: logsAPI.SeverityNumber) {\n    this.severityNumber = severityNumber;\n    return this;\n  }\n\n  public setSeverityText(severityText: string) {\n    this.severityText = severityText;\n    return this;\n  }\n\n  /**\n   * @internal\n   * A LogRecordProcessor may freely modify logRecord for the duration of the OnEmit call.\n   * If logRecord is needed after OnEmit returns (i.e. for asynchronous processing) only reads are permitted.\n   */\n  _makeReadonly() {\n    this._isReadonly = true;\n  }\n\n  private _truncateToSize(value: AttributeValue): AttributeValue {\n    const limit = this._logRecordLimits.attributeValueLengthLimit;\n    // Check limit\n    if (limit <= 0) {\n      // Negative values are invalid, so do not truncate\n      api.diag.warn(`Attribute value limit must be positive, got ${limit}`);\n      return value;\n    }\n\n    // String\n    if (typeof value === 'string') {\n      return this._truncateToLimitUtil(value, limit);\n    }\n\n    // Array of strings\n    if (Array.isArray(value)) {\n      return (value as []).map(val =>\n        typeof val === 'string' ? this._truncateToLimitUtil(val, limit) : val\n      );\n    }\n\n    // Other types, no need to apply value length limit\n    return value;\n  }\n\n  private _truncateToLimitUtil(value: string, limit: number): string {\n    if (value.length <= limit) {\n      return value;\n    }\n    return value.substring(0, limit);\n  }\n\n  private _isLogRecordReadonly(): boolean {\n    if (this._isReadonly) {\n      diag.warn('Can not execute the operation on emitted log record');\n    }\n    return this._isReadonly;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type * as logsAPI from '@opentelemetry/api-logs';\nimport type { InstrumentationScope } from '@opentelemetry/core';\nimport { context } from '@opentelemetry/api';\n\nimport { LogRecord } from './LogRecord';\nimport { LoggerProviderSharedState } from './internal/LoggerProviderSharedState';\n\nexport class Logger implements logsAPI.Logger {\n  constructor(\n    public readonly instrumentationScope: InstrumentationScope,\n    private _sharedState: LoggerProviderSharedState\n  ) {}\n\n  public emit(logRecord: logsAPI.LogRecord): void {\n    const currentContext = logRecord.context || context.active();\n    /**\n     * If a Logger was obtained with include_trace_context=true,\n     * the LogRecords it emits MUST automatically include the Trace Context from the active Context,\n     * if Context has not been explicitly set.\n     */\n    const logRecordInstance = new LogRecord(\n      this._sharedState,\n      this.instrumentationScope,\n      {\n        context: currentContext,\n        ...logRecord,\n      }\n    );\n    /**\n     * the explicitly passed Context,\n     * the current Context, or an empty Context if the Logger was obtained with include_trace_context=false\n     */\n    this._sharedState.activeProcessor.onEmit(logRecordInstance, currentContext);\n    /**\n     * A LogRecordProcessor may freely modify logRecord for the duration of the OnEmit call.\n     * If logRecord is needed after OnEmit returns (i.e. for asynchronous processing) only reads are permitted.\n     */\n    logRecordInstance._makeReadonly();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  getEnv,\n  getEnvWithoutDefaults,\n} from '@opentelemetry/core';\nimport { LogRecordLimits } from './types';\n\nexport function loadDefaultConfig() {\n  return {\n    forceFlushTimeoutMillis: 30000,\n    logRecordLimits: {\n      attributeValueLengthLimit:\n        getEnv().OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: getEnv().OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT,\n    },\n    includeTraceContext: true,\n  };\n}\n\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param logRecordLimits User provided limits configuration\n */\nexport function reconfigureLimits(\n  logRecordLimits: LogRecordLimits\n): Required<LogRecordLimits> {\n  const parsedEnvConfig = getEnvWithoutDefaults();\n\n  return {\n    /**\n     * Reassign log record attribute count limit to use first non null value defined by user or use default value\n     */\n    attributeCountLimit:\n      logRecordLimits.attributeCountLimit ??\n      parsedEnvConfig.OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT ??\n      parsedEnvConfig.OTEL_ATTRIBUTE_COUNT_LIMIT ??\n      DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    /**\n     * Reassign log record attribute value length limit to use first non null value defined by user or use default value\n     */\n    attributeValueLengthLimit:\n      logRecordLimits.attributeValueLengthLimit ??\n      parsedEnvConfig.OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT ??\n      parsedEnvConfig.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT ??\n      DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { callWithTimeout } from '@opentelemetry/core';\nimport type { Context } from '@opentelemetry/api';\nimport type { LogRecordProcessor } from './LogRecordProcessor';\nimport type { LogRecord } from './LogRecord';\n\n/**\n * Implementation of the {@link LogRecordProcessor} that simply forwards all\n * received events to a list of {@link LogRecordProcessor}s.\n */\nexport class MultiLogRecordProcessor implements LogRecordProcessor {\n  constructor(\n    public readonly processors: LogRecordProcessor[],\n    public readonly forceFlushTimeoutMillis: number\n  ) {}\n\n  public async forceFlush(): Promise<void> {\n    const timeout = this.forceFlushTimeoutMillis;\n    await Promise.all(\n      this.processors.map(processor =>\n        callWithTimeout(processor.forceFlush(), timeout)\n      )\n    );\n  }\n\n  public onEmit(logRecord: LogRecord, context?: Context): void {\n    this.processors.forEach(processors =>\n      processors.onEmit(logRecord, context)\n    );\n  }\n\n  public async shutdown(): Promise<void> {\n    await Promise.all(this.processors.map(processor => processor.shutdown()));\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '@opentelemetry/api';\nimport { LogRecordProcessor } from '../LogRecordProcessor';\nimport { ReadableLogRecord } from './ReadableLogRecord';\n\nexport class NoopLogRecordProcessor implements LogRecordProcessor {\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  onEmit(_logRecord: ReadableLogRecord, _context: Context): void {}\n\n  shutdown(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@opentelemetry/api-logs';\nimport { IResource } from '@opentelemetry/resources';\nimport { LogRecordProcessor } from '../LogRecordProcessor';\nimport { LogRecordLimits } from '../types';\nimport { NoopLogRecordProcessor } from '../export/NoopLogRecordProcessor';\n\nexport class LoggerProviderSharedState {\n  readonly loggers: Map<string, Logger> = new Map();\n  activeProcessor: LogRecordProcessor;\n  readonly registeredLogRecordProcessors: LogRecordProcessor[] = [];\n\n  constructor(\n    readonly resource: IResource,\n    readonly forceFlushTimeoutMillis: number,\n    readonly logRecordLimits: Required<LogRecordLimits>\n  ) {\n    this.activeProcessor = new NoopLogRecordProcessor();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport type * as logsAPI from '@opentelemetry/api-logs';\nimport { NOOP_LOGGER } from '@opentelemetry/api-logs';\nimport { Resource } from '@opentelemetry/resources';\nimport { BindOnceFuture, merge } from '@opentelemetry/core';\n\nimport type { LoggerProviderConfig } from './types';\nimport type { LogRecordProcessor } from './LogRecordProcessor';\nimport { Logger } from './Logger';\nimport { loadDefaultConfig, reconfigureLimits } from './config';\nimport { MultiLogRecordProcessor } from './MultiLogRecordProcessor';\nimport { LoggerProviderSharedState } from './internal/LoggerProviderSharedState';\n\nexport const DEFAULT_LOGGER_NAME = 'unknown';\n\nexport class LoggerProvider implements logsAPI.LoggerProvider {\n  private _shutdownOnce: BindOnceFuture<void>;\n  private readonly _sharedState: LoggerProviderSharedState;\n\n  constructor(config: LoggerProviderConfig = {}) {\n    const {\n      resource = Resource.default(),\n      logRecordLimits,\n      forceFlushTimeoutMillis,\n    } = merge({}, loadDefaultConfig(), config);\n    this._sharedState = new LoggerProviderSharedState(\n      resource,\n      forceFlushTimeoutMillis,\n      reconfigureLimits(logRecordLimits)\n    );\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n  }\n\n  /**\n   * Get a logger with the configuration of the LoggerProvider.\n   */\n  public getLogger(\n    name: string,\n    version?: string,\n    options?: logsAPI.LoggerOptions\n  ): logsAPI.Logger {\n    if (this._shutdownOnce.isCalled) {\n      diag.warn('A shutdown LoggerProvider cannot provide a Logger');\n      return NOOP_LOGGER;\n    }\n\n    if (!name) {\n      diag.warn('Logger requested without instrumentation scope name.');\n    }\n    const loggerName = name || DEFAULT_LOGGER_NAME;\n    const key = `${loggerName}@${version || ''}:${options?.schemaUrl || ''}`;\n    if (!this._sharedState.loggers.has(key)) {\n      this._sharedState.loggers.set(\n        key,\n        new Logger(\n          { name: loggerName, version, schemaUrl: options?.schemaUrl },\n          this._sharedState\n        )\n      );\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this._sharedState.loggers.get(key)!;\n  }\n\n  /**\n   * Adds a new {@link LogRecordProcessor} to this logger.\n   * @param processor the new LogRecordProcessor to be added.\n   */\n  public addLogRecordProcessor(processor: LogRecordProcessor) {\n    if (this._sharedState.registeredLogRecordProcessors.length === 0) {\n      // since we might have enabled by default a batchProcessor, we disable it\n      // before adding the new one\n      this._sharedState.activeProcessor\n        .shutdown()\n        .catch(err =>\n          diag.error(\n            'Error while trying to shutdown current log record processor',\n            err\n          )\n        );\n    }\n    this._sharedState.registeredLogRecordProcessors.push(processor);\n    this._sharedState.activeProcessor = new MultiLogRecordProcessor(\n      this._sharedState.registeredLogRecordProcessors,\n      this._sharedState.forceFlushTimeoutMillis\n    );\n  }\n\n  /**\n   * Notifies all registered LogRecordProcessor to flush any buffered data.\n   *\n   * Returns a promise which is resolved when all flushes are complete.\n   */\n  public forceFlush(): Promise<void> {\n    // do not flush after shutdown\n    if (this._shutdownOnce.isCalled) {\n      diag.warn('invalid attempt to force flush after LoggerProvider shutdown');\n      return this._shutdownOnce.promise;\n    }\n    return this._sharedState.activeProcessor.forceFlush();\n  }\n\n  /**\n   * Flush all buffered data and shut down the LoggerProvider and all registered\n   * LogRecordProcessor.\n   *\n   * Returns a promise which is resolved when all flushes are complete.\n   */\n  public shutdown(): Promise<void> {\n    if (this._shutdownOnce.isCalled) {\n      diag.warn('shutdown may only be called once per LoggerProvider');\n      return this._shutdownOnce.promise;\n    }\n    return this._shutdownOnce.call();\n  }\n\n  private _shutdown(): Promise<void> {\n    return this._sharedState.activeProcessor.shutdown();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ExportResult, hrTimeToMicroseconds } from '@opentelemetry/core';\nimport { ExportResultCode } from '@opentelemetry/core';\n\nimport type { ReadableLogRecord } from './ReadableLogRecord';\nimport type { LogRecordExporter } from './LogRecordExporter';\n\n/**\n * This is implementation of {@link LogRecordExporter} that prints LogRecords to the\n * console. This class can be used for diagnostic purposes.\n */\n\n/* eslint-disable no-console */\nexport class ConsoleLogRecordExporter implements LogRecordExporter {\n  /**\n   * Export logs.\n   * @param logs\n   * @param resultCallback\n   */\n  public export(\n    logs: ReadableLogRecord[],\n    resultCallback: (result: ExportResult) => void\n  ) {\n    this._sendLogRecords(logs, resultCallback);\n  }\n\n  /**\n   * Shutdown the exporter.\n   */\n  public shutdown(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  /**\n   * converts logRecord info into more readable format\n   * @param logRecord\n   */\n  private _exportInfo(logRecord: ReadableLogRecord) {\n    return {\n      timestamp: hrTimeToMicroseconds(logRecord.hrTime),\n      traceId: logRecord.spanContext?.traceId,\n      spanId: logRecord.spanContext?.spanId,\n      traceFlags: logRecord.spanContext?.traceFlags,\n      severityText: logRecord.severityText,\n      severityNumber: logRecord.severityNumber,\n      body: logRecord.body,\n      attributes: logRecord.attributes,\n    };\n  }\n\n  /**\n   * Showing logs  in console\n   * @param logRecords\n   * @param done\n   */\n  private _sendLogRecords(\n    logRecords: ReadableLogRecord[],\n    done?: (result: ExportResult) => void\n  ): void {\n    for (const logRecord of logRecords) {\n      console.dir(this._exportInfo(logRecord), { depth: 3 });\n    }\n    done?.({ code: ExportResultCode.SUCCESS });\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ExportResult } from '@opentelemetry/core';\nimport {\n  BindOnceFuture,\n  ExportResultCode,\n  globalErrorHandler,\n} from '@opentelemetry/core';\n\nimport type { LogRecordExporter } from './LogRecordExporter';\nimport type { LogRecordProcessor } from '../LogRecordProcessor';\nimport type { LogRecord } from './../LogRecord';\n\nexport class SimpleLogRecordProcessor implements LogRecordProcessor {\n  private _shutdownOnce: BindOnceFuture<void>;\n\n  constructor(private readonly _exporter: LogRecordExporter) {\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n  }\n\n  public onEmit(logRecord: LogRecord): void {\n    if (this._shutdownOnce.isCalled) {\n      return;\n    }\n\n    this._exporter.export([logRecord], (res: ExportResult) => {\n      if (res.code !== ExportResultCode.SUCCESS) {\n        globalErrorHandler(\n          res.error ??\n            new Error(\n              `SimpleLogRecordProcessor: log record export failed (status ${res})`\n            )\n        );\n        return;\n      }\n    });\n  }\n\n  public forceFlush(): Promise<void> {\n    // do nothing as all log records are being exported without waiting\n    return Promise.resolve();\n  }\n\n  public shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  private _shutdown(): Promise<void> {\n    return this._exporter.shutdown();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ExportResult } from '@opentelemetry/core';\nimport { ExportResultCode } from '@opentelemetry/core';\n\nimport type { ReadableLogRecord } from './ReadableLogRecord';\nimport type { LogRecordExporter } from './LogRecordExporter';\n\n/**\n * This class can be used for testing purposes. It stores the exported LogRecords\n * in a list in memory that can be retrieved using the `getFinishedLogRecords()`\n * method.\n */\nexport class InMemoryLogRecordExporter implements LogRecordExporter {\n  private _finishedLogRecords: ReadableLogRecord[] = [];\n\n  /**\n   * Indicates if the exporter has been \"shutdown.\"\n   * When false, exported log records will not be stored in-memory.\n   */\n  protected _stopped = false;\n\n  public export(\n    logs: ReadableLogRecord[],\n    resultCallback: (result: ExportResult) => void\n  ) {\n    if (this._stopped) {\n      return resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Exporter has been stopped'),\n      });\n    }\n\n    this._finishedLogRecords.push(...logs);\n    resultCallback({ code: ExportResultCode.SUCCESS });\n  }\n\n  public shutdown(): Promise<void> {\n    this._stopped = true;\n    this.reset();\n    return Promise.resolve();\n  }\n\n  public getFinishedLogRecords(): ReadableLogRecord[] {\n    return this._finishedLogRecords;\n  }\n\n  public reset(): void {\n    this._finishedLogRecords = [];\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ExportResult } from '@opentelemetry/core';\nimport { diag } from '@opentelemetry/api';\nimport {\n  ExportResultCode,\n  getEnv,\n  globalErrorHandler,\n  unrefTimer,\n  callWithTimeout,\n  BindOnceFuture,\n} from '@opentelemetry/core';\n\nimport type { BufferConfig } from '../types';\nimport type { LogRecord } from '../LogRecord';\nimport type { LogRecordExporter } from './LogRecordExporter';\nimport type { LogRecordProcessor } from '../LogRecordProcessor';\n\nexport abstract class BatchLogRecordProcessorBase<T extends BufferConfig>\n  implements LogRecordProcessor\n{\n  private readonly _maxExportBatchSize: number;\n  private readonly _maxQueueSize: number;\n  private readonly _scheduledDelayMillis: number;\n  private readonly _exportTimeoutMillis: number;\n\n  private _finishedLogRecords: LogRecord[] = [];\n  private _timer: NodeJS.Timeout | undefined;\n  private _shutdownOnce: BindOnceFuture<void>;\n\n  constructor(\n    private readonly _exporter: LogRecordExporter,\n    config?: T\n  ) {\n    const env = getEnv();\n    this._maxExportBatchSize =\n      config?.maxExportBatchSize ?? env.OTEL_BLRP_MAX_EXPORT_BATCH_SIZE;\n    this._maxQueueSize = config?.maxQueueSize ?? env.OTEL_BLRP_MAX_QUEUE_SIZE;\n    this._scheduledDelayMillis =\n      config?.scheduledDelayMillis ?? env.OTEL_BLRP_SCHEDULE_DELAY;\n    this._exportTimeoutMillis =\n      config?.exportTimeoutMillis ?? env.OTEL_BLRP_EXPORT_TIMEOUT;\n\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n\n    if (this._maxExportBatchSize > this._maxQueueSize) {\n      diag.warn(\n        'BatchLogRecordProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize'\n      );\n      this._maxExportBatchSize = this._maxQueueSize;\n    }\n  }\n\n  public onEmit(logRecord: LogRecord): void {\n    if (this._shutdownOnce.isCalled) {\n      return;\n    }\n    this._addToBuffer(logRecord);\n  }\n\n  public forceFlush(): Promise<void> {\n    if (this._shutdownOnce.isCalled) {\n      return this._shutdownOnce.promise;\n    }\n    return this._flushAll();\n  }\n\n  public shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  private async _shutdown(): Promise<void> {\n    this.onShutdown();\n    await this._flushAll();\n    await this._exporter.shutdown();\n  }\n\n  /** Add a LogRecord in the buffer. */\n  private _addToBuffer(logRecord: LogRecord) {\n    if (this._finishedLogRecords.length >= this._maxQueueSize) {\n      return;\n    }\n    this._finishedLogRecords.push(logRecord);\n    this._maybeStartTimer();\n  }\n\n  /**\n   * Send all LogRecords to the exporter respecting the batch size limit\n   * This function is used only on forceFlush or shutdown,\n   * for all other cases _flush should be used\n   * */\n  private _flushAll(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const promises = [];\n      const batchCount = Math.ceil(\n        this._finishedLogRecords.length / this._maxExportBatchSize\n      );\n      for (let i = 0; i < batchCount; i++) {\n        promises.push(this._flushOneBatch());\n      }\n      Promise.all(promises)\n        .then(() => {\n          resolve();\n        })\n        .catch(reject);\n    });\n  }\n\n  private _flushOneBatch(): Promise<void> {\n    this._clearTimer();\n    if (this._finishedLogRecords.length === 0) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      callWithTimeout(\n        this._export(\n          this._finishedLogRecords.splice(0, this._maxExportBatchSize)\n        ),\n        this._exportTimeoutMillis\n      )\n        .then(() => resolve())\n        .catch(reject);\n    });\n  }\n\n  private _maybeStartTimer() {\n    if (this._timer !== undefined) {\n      return;\n    }\n    this._timer = setTimeout(() => {\n      this._flushOneBatch()\n        .then(() => {\n          if (this._finishedLogRecords.length > 0) {\n            this._clearTimer();\n            this._maybeStartTimer();\n          }\n        })\n        .catch(e => {\n          globalErrorHandler(e);\n        });\n    }, this._scheduledDelayMillis);\n    unrefTimer(this._timer);\n  }\n\n  private _clearTimer() {\n    if (this._timer !== undefined) {\n      clearTimeout(this._timer);\n      this._timer = undefined;\n    }\n  }\n\n  private _export(logRecords: LogRecord[]): Promise<ExportResult> {\n    return new Promise((resolve, reject) => {\n      this._exporter.export(logRecords, (res: ExportResult) => {\n        if (res.code !== ExportResultCode.SUCCESS) {\n          reject(\n            res.error ??\n              new Error(\n                `BatchLogRecordProcessorBase: log record export failed (status ${res})`\n              )\n          );\n          return;\n        }\n        resolve(res);\n      });\n    });\n  }\n\n  protected abstract onShutdown(): void;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { BufferConfig } from '../../../types';\nimport { BatchLogRecordProcessorBase } from '../../../export/BatchLogRecordProcessorBase';\n\nexport class BatchLogRecordProcessor extends BatchLogRecordProcessorBase<BufferConfig> {\n  protected onShutdown(): void {}\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { BatchLogRecordProcessor } from './export/BatchLogRecordProcessor';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { BatchLogRecordProcessor } from './node';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport {\n  LoggerProviderConfig,\n  LogRecordLimits,\n  BufferConfig,\n  BatchLogRecordProcessorBrowserConfig,\n} from './types';\nexport { LoggerProvider } from './LoggerProvider';\nexport { LogRecord } from './LogRecord';\nexport { LogRecordProcessor } from './LogRecordProcessor';\nexport { ReadableLogRecord } from './export/ReadableLogRecord';\nexport { NoopLogRecordProcessor } from './export/NoopLogRecordProcessor';\nexport { ConsoleLogRecordExporter } from './export/ConsoleLogRecordExporter';\nexport { LogRecordExporter } from './export/LogRecordExporter';\nexport { SimpleLogRecordProcessor } from './export/SimpleLogRecordProcessor';\nexport { InMemoryLogRecordExporter } from './export/InMemoryLogRecordExporter';\nexport { BatchLogRecordProcessor } from './platform';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * AggregationTemporality indicates the way additive quantities are expressed.\n */\nexport enum AggregationTemporality {\n  DELTA,\n  CUMULATIVE,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime, MetricAttributes, ValueType } from '@opentelemetry/api';\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { IResource } from '@opentelemetry/resources';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { Histogram, ExponentialHistogram } from '../aggregator/types';\n\nexport interface MetricDescriptor {\n  readonly name: string;\n  readonly description: string;\n  readonly unit: string;\n  /**\n   * @deprecated exporter should avoid depending on the type of the instrument\n   * as their resulting aggregator can be re-mapped with views.\n   */\n  readonly type: InstrumentType;\n  readonly valueType: ValueType;\n}\n\n/**\n * Basic metric data fields.\n */\ninterface BaseMetricData {\n  readonly descriptor: MetricDescriptor;\n  readonly aggregationTemporality: AggregationTemporality;\n  /**\n   * DataPointType of the metric instrument.\n   */\n  readonly dataPointType: DataPointType;\n}\n\n/**\n * Represents a metric data aggregated by either a LastValueAggregation or\n * SumAggregation.\n */\nexport interface SumMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.SUM;\n  readonly dataPoints: DataPoint<number>[];\n  readonly isMonotonic: boolean;\n}\n\nexport interface GaugeMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.GAUGE;\n  readonly dataPoints: DataPoint<number>[];\n}\n\n/**\n * Represents a metric data aggregated by a HistogramAggregation.\n */\nexport interface HistogramMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.HISTOGRAM;\n  readonly dataPoints: DataPoint<Histogram>[];\n}\n\n/**\n * Represents a metric data aggregated by a ExponentialHistogramAggregation.\n */\nexport interface ExponentialHistogramMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.EXPONENTIAL_HISTOGRAM;\n  readonly dataPoints: DataPoint<ExponentialHistogram>[];\n}\n\n/**\n * Represents an aggregated metric data.\n */\nexport type MetricData =\n  | SumMetricData\n  | GaugeMetricData\n  | HistogramMetricData\n  | ExponentialHistogramMetricData;\n\nexport interface ScopeMetrics {\n  scope: InstrumentationScope;\n  metrics: MetricData[];\n}\n\nexport interface ResourceMetrics {\n  resource: IResource;\n  scopeMetrics: ScopeMetrics[];\n}\n\n/**\n * Represents the collection result of the metrics. If there are any\n * non-critical errors in the collection, like throwing in a single observable\n * callback, these errors are aggregated in the {@link CollectionResult.errors}\n * array and other successfully collected metrics are returned.\n */\nexport interface CollectionResult {\n  /**\n   * Collected metrics.\n   */\n  resourceMetrics: ResourceMetrics;\n  /**\n   * Arbitrary JavaScript exception values.\n   */\n  errors: unknown[];\n}\n\n/**\n * The aggregated point data type.\n */\nexport enum DataPointType {\n  /**\n   * A histogram data point contains a histogram statistics of collected\n   * values with a list of explicit bucket boundaries and statistics such\n   * as min, max, count, and sum of all collected values.\n   */\n  HISTOGRAM,\n  /**\n   * An exponential histogram data point contains a histogram statistics of\n   * collected values where bucket boundaries are automatically calculated\n   * using an exponential function, and statistics such as min, max, count,\n   * and sum of all collected values.\n   */\n  EXPONENTIAL_HISTOGRAM,\n  /**\n   * A gauge metric data point has only a single numeric value.\n   */\n  GAUGE,\n  /**\n   * A sum metric data point has a single numeric value and a\n   * monotonicity-indicator.\n   */\n  SUM,\n}\n\n/**\n * Represents an aggregated point data with start time, end time and their\n * associated attributes and points.\n */\nexport interface DataPoint<T> {\n  /**\n   * The start epoch timestamp of the DataPoint, usually the time when\n   * the metric was created when the preferred AggregationTemporality is\n   * CUMULATIVE, or last collection time otherwise.\n   */\n  readonly startTime: HrTime;\n  /**\n   * The end epoch timestamp when data were collected, usually it represents\n   * the moment when `MetricReader.collect` was called.\n   */\n  readonly endTime: HrTime;\n  /**\n   * The attributes associated with this DataPoint.\n   */\n  readonly attributes: MetricAttributes;\n  /**\n   * The value for this DataPoint. The type of the value is indicated by the\n   * {@link DataPointType}.\n   */\n  readonly value: T;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricAttributes } from '@opentelemetry/api';\nimport { InstrumentationScope } from '@opentelemetry/core';\n\nexport type Maybe<T> = T | undefined;\n\nexport function isNotNullish<T>(item: Maybe<T>): item is T {\n  return item !== undefined && item !== null;\n}\n\n/**\n * Converting the unordered attributes into unique identifier string.\n * @param attributes user provided unordered MetricAttributes.\n */\nexport function hashAttributes(attributes: MetricAttributes): string {\n  let keys = Object.keys(attributes);\n  if (keys.length === 0) return '';\n\n  // Return a string that is stable on key orders.\n  keys = keys.sort();\n  return JSON.stringify(keys.map(key => [key, attributes[key]]));\n}\n\n/**\n * Converting the instrumentation scope object to a unique identifier string.\n * @param instrumentationScope\n */\nexport function instrumentationScopeId(\n  instrumentationScope: InstrumentationScope\n): string {\n  return `${instrumentationScope.name}:${instrumentationScope.version ?? ''}:${\n    instrumentationScope.schemaUrl ?? ''\n  }`;\n}\n\n/**\n * Error that is thrown on timeouts.\n */\nexport class TimeoutError extends Error {\n  constructor(message?: string) {\n    super(message);\n\n    // manually adjust prototype to retain `instanceof` functionality when targeting ES5, see:\n    // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, TimeoutError.prototype);\n  }\n}\n\n/**\n * Adds a timeout to a promise and rejects if the specified timeout has elapsed. Also rejects if the specified promise\n * rejects, and resolves if the specified promise resolves.\n *\n * <p> NOTE: this operation will continue even after it throws a {@link TimeoutError}.\n *\n * @param promise promise to use with timeout.\n * @param timeout the timeout in milliseconds until the returned promise is rejected.\n */\nexport function callWithTimeout<T>(\n  promise: Promise<T>,\n  timeout: number\n): Promise<T> {\n  let timeoutHandle: ReturnType<typeof setTimeout>;\n\n  const timeoutPromise = new Promise<never>(function timeoutFunction(\n    _resolve,\n    reject\n  ) {\n    timeoutHandle = setTimeout(function timeoutHandler() {\n      reject(new TimeoutError('Operation timed out.'));\n    }, timeout);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then(\n    result => {\n      clearTimeout(timeoutHandle);\n      return result;\n    },\n    reason => {\n      clearTimeout(timeoutHandle);\n      throw reason;\n    }\n  );\n}\n\nexport interface PromiseAllSettledFulfillResult<T> {\n  status: 'fulfilled';\n  value: T;\n}\n\nexport interface PromiseAllSettledRejectionResult {\n  status: 'rejected';\n  reason: unknown;\n}\n\nexport type PromiseAllSettledResult<T> =\n  | PromiseAllSettledFulfillResult<T>\n  | PromiseAllSettledRejectionResult;\n\n/**\n * Node.js v12.9 lower and browser compatible `Promise.allSettled`.\n */\nexport async function PromiseAllSettled<T>(\n  promises: Promise<T>[]\n): Promise<PromiseAllSettledResult<T>[]> {\n  return Promise.all(\n    promises.map<Promise<PromiseAllSettledResult<T>>>(async p => {\n      try {\n        const ret = await p;\n        return {\n          status: 'fulfilled',\n          value: ret,\n        };\n      } catch (e) {\n        return {\n          status: 'rejected',\n          reason: e,\n        };\n      }\n    })\n  );\n}\n\nexport function isPromiseAllSettledRejectionResult(\n  it: PromiseAllSettledResult<unknown>\n): it is PromiseAllSettledRejectionResult {\n  return it.status === 'rejected';\n}\n\n/**\n * Node.js v11.0 lower and browser compatible `Array.prototype.flatMap`.\n */\nexport function FlatMap<T, R>(arr: T[], fn: (it: T) => R[]): R[] {\n  const result: R[] = [];\n  arr.forEach(it => {\n    result.push(...fn(it));\n  });\n  return result;\n}\n\nexport function setEquals(lhs: Set<unknown>, rhs: Set<unknown>): boolean {\n  if (lhs.size !== rhs.size) {\n    return false;\n  }\n  for (const item of lhs) {\n    if (!rhs.has(item)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Binary search the sorted array to the find lower bound for the value.\n * @param arr\n * @param value\n * @returns\n */\nexport function binarySearchLB(arr: number[], value: number): number {\n  let lo = 0;\n  let hi = arr.length - 1;\n\n  while (hi - lo > 1) {\n    const mid = Math.trunc((hi + lo) / 2);\n    if (arr[mid] <= value) {\n      lo = mid;\n    } else {\n      hi = mid - 1;\n    }\n  }\n\n  if (arr[hi] <= value) {\n    return hi;\n  } else if (arr[lo] <= value) {\n    return lo;\n  }\n  return -1;\n}\n\nexport function equalsCaseInsensitive(lhs: string, rhs: string): boolean {\n  return lhs.toLowerCase() === rhs.toLowerCase();\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\nimport { MetricData, MetricDescriptor } from '../export/MetricData';\nimport { Maybe } from '../utils';\n\n/** The kind of aggregator. */\nexport enum AggregatorKind {\n  DROP,\n  SUM,\n  LAST_VALUE,\n  HISTOGRAM,\n  EXPONENTIAL_HISTOGRAM,\n}\n\n/** DataPoint value type for SumAggregation. */\nexport type Sum = number;\n\n/** DataPoint value type for LastValueAggregation. */\nexport type LastValue = number;\n\n/** DataPoint value type for HistogramAggregation. */\nexport interface Histogram {\n  /**\n   * Buckets are implemented using two different arrays:\n   *  - boundaries: contains every finite bucket boundary, which are inclusive lower bounds\n   *  - counts: contains event counts for each bucket\n   *\n   * Note that we'll always have n+1 buckets, where n is the number of boundaries.\n   * This is because we need to count events that are below the lowest boundary.\n   *\n   * Example: if we measure the values: [5, 30, 5, 40, 5, 15, 15, 15, 25]\n   *  with the boundaries [ 10, 20, 30 ], we will have the following state:\n   *\n   * buckets: {\n   *\tboundaries: [10, 20, 30],\n   *\tcounts: [3, 3, 1, 2],\n   * }\n   */\n  buckets: {\n    boundaries: number[];\n    counts: number[];\n  };\n  sum?: number;\n  count: number;\n  min?: number;\n  max?: number;\n}\n\n/** DataPoint value type for ExponentialHistogramAggregation. */\nexport interface ExponentialHistogram {\n  count: number;\n  sum?: number;\n  scale: number;\n  zeroCount: number;\n  positive: {\n    offset: number;\n    bucketCounts: number[];\n  };\n  negative: {\n    offset: number;\n    bucketCounts: number[];\n  };\n  min?: number;\n  max?: number;\n}\n\n/**\n * An Aggregator accumulation state.\n */\nexport interface Accumulation {\n  setStartTime(startTime: HrTime): void;\n  record(value: number): void;\n}\n\nexport type AccumulationRecord<T> = [MetricAttributes, T];\n\n/**\n * Base interface for aggregators. Aggregators are responsible for holding\n * aggregated values and taking a snapshot of these values upon export.\n */\nexport interface Aggregator<T> {\n  /** The kind of the aggregator. */\n  kind: AggregatorKind;\n\n  /**\n   * Create a clean state of accumulation.\n   */\n  createAccumulation(startTime: HrTime): T;\n\n  /**\n   * Returns the result of the merge of the given accumulations.\n   *\n   * This should always assume that the accumulations do not overlap and merge together for a new\n   * cumulative report.\n   *\n   * @param previous the previously captured accumulation\n   * @param delta the newly captured (delta) accumulation\n   * @returns the result of the merge of the given accumulations\n   */\n  merge(previous: T, delta: T): T;\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   *\n   * @param previous the previously captured accumulation\n   * @param current the newly captured (cumulative) accumulation\n   * @returns The resulting delta accumulation\n   */\n  diff(previous: T, current: T): T;\n\n  /**\n   * Returns the {@link MetricData} that this {@link Aggregator} will produce.\n   *\n   * @param descriptor the metric descriptor.\n   * @param aggregationTemporality the temporality of the resulting {@link MetricData}\n   * @param accumulationByAttributes the array of attributes and accumulation pairs.\n   * @param endTime the end time of the metric data.\n   * @return the {@link MetricData} that this {@link Aggregator} will produce.\n   */\n  toMetricData(\n    descriptor: MetricDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<T>[],\n    endTime: HrTime\n  ): Maybe<MetricData>;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\nimport { MetricData, MetricDescriptor } from '../export/MetricData';\nimport { Maybe } from '../utils';\nimport { AggregatorKind, Aggregator, AccumulationRecord } from './types';\n\n/** Basic aggregator for None which keeps no recorded value. */\nexport class DropAggregator implements Aggregator<undefined> {\n  kind: AggregatorKind.DROP = AggregatorKind.DROP;\n\n  createAccumulation() {\n    return undefined;\n  }\n\n  merge(_previous: undefined, _delta: undefined) {\n    return undefined;\n  }\n\n  diff(_previous: undefined, _current: undefined) {\n    return undefined;\n  }\n\n  toMetricData(\n    _descriptor: MetricDescriptor,\n    _aggregationTemporality: AggregationTemporality,\n    _accumulationByAttributes: AccumulationRecord<undefined>[],\n    _endTime: HrTime\n  ): Maybe<MetricData> {\n    return undefined;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricOptions, ValueType, diag } from '@opentelemetry/api';\nimport { View } from './view/View';\nimport { equalsCaseInsensitive } from './utils';\n\n/**\n * Supported types of metric instruments.\n */\nexport enum InstrumentType {\n  COUNTER = 'COUNTER',\n  HISTOGRAM = 'HISTOGRAM',\n  UP_DOWN_COUNTER = 'UP_DOWN_COUNTER',\n  OBSERVABLE_COUNTER = 'OBSERVABLE_COUNTER',\n  OBSERVABLE_GAUGE = 'OBSERVABLE_GAUGE',\n  OBSERVABLE_UP_DOWN_COUNTER = 'OBSERVABLE_UP_DOWN_COUNTER',\n}\n\n/**\n * An internal interface describing the instrument.\n *\n * This is intentionally distinguished from the public MetricDescriptor (a.k.a. InstrumentDescriptor)\n * which may not contains internal fields like metric advice.\n */\nexport interface InstrumentDescriptor {\n  readonly name: string;\n  readonly description: string;\n  readonly unit: string;\n  readonly type: InstrumentType;\n  readonly valueType: ValueType;\n  /**\n   * @experimental\n   *\n   * This is intentionally not using the API's type as it's only available from @opentelemetry/api 1.7.0 and up.\n   * In SDK 2.0 we'll be able to bump the minimum API version and remove this workaround.\n   */\n  readonly advice: {\n    /**\n     * Hint the explicit bucket boundaries for SDK if the metric has been\n     * aggregated with a HistogramAggregator.\n     */\n    explicitBucketBoundaries?: number[];\n  };\n}\n\nexport function createInstrumentDescriptor(\n  name: string,\n  type: InstrumentType,\n  options?: MetricOptions\n): InstrumentDescriptor {\n  if (!isValidName(name)) {\n    diag.warn(\n      `Invalid metric name: \"${name}\". The metric name should be a ASCII string with a length no greater than 255 characters.`\n    );\n  }\n  return {\n    name,\n    type,\n    description: options?.description ?? '',\n    unit: options?.unit ?? '',\n    valueType: options?.valueType ?? ValueType.DOUBLE,\n    advice: options?.advice ?? {},\n  };\n}\n\nexport function createInstrumentDescriptorWithView(\n  view: View,\n  instrument: InstrumentDescriptor\n): InstrumentDescriptor {\n  return {\n    name: view.name ?? instrument.name,\n    description: view.description ?? instrument.description,\n    type: instrument.type,\n    unit: instrument.unit,\n    valueType: instrument.valueType,\n    advice: instrument.advice,\n  };\n}\n\nexport function isDescriptorCompatibleWith(\n  descriptor: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  // Names are case-insensitive strings.\n  return (\n    equalsCaseInsensitive(descriptor.name, otherDescriptor.name) &&\n    descriptor.unit === otherDescriptor.unit &&\n    descriptor.type === otherDescriptor.type &&\n    descriptor.valueType === otherDescriptor.valueType\n  );\n}\n\n// ASCII string with a length no greater than 255 characters.\n// NB: the first character counted separately from the rest.\nconst NAME_REGEXP = /^[a-z][a-z0-9_.\\-/]{0,254}$/i;\nexport function isValidName(name: string): boolean {\n  return name.match(NAME_REGEXP) != null;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Accumulation,\n  AccumulationRecord,\n  Aggregator,\n  AggregatorKind,\n} from './types';\nimport {\n  DataPointType,\n  HistogramMetricData,\n  MetricDescriptor,\n} from '../export/MetricData';\nimport { HrTime } from '@opentelemetry/api';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { binarySearchLB, Maybe } from '../utils';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\n\n/**\n * Internal value type for HistogramAggregation.\n * Differs from the exported type as undefined sum/min/max complicate arithmetic\n * performed by this aggregation, but are required to be undefined in the exported types.\n */\ninterface InternalHistogram {\n  buckets: {\n    boundaries: number[];\n    counts: number[];\n  };\n  sum: number;\n  count: number;\n  hasMinMax: boolean;\n  min: number;\n  max: number;\n}\n\nfunction createNewEmptyCheckpoint(boundaries: number[]): InternalHistogram {\n  const counts = boundaries.map(() => 0);\n  counts.push(0);\n  return {\n    buckets: {\n      boundaries,\n      counts,\n    },\n    sum: 0,\n    count: 0,\n    hasMinMax: false,\n    min: Infinity,\n    max: -Infinity,\n  };\n}\n\nexport class HistogramAccumulation implements Accumulation {\n  constructor(\n    public startTime: HrTime,\n    private readonly _boundaries: number[],\n    private _recordMinMax = true,\n    private _current: InternalHistogram = createNewEmptyCheckpoint(_boundaries)\n  ) {}\n\n  record(value: number): void {\n    this._current.count += 1;\n    this._current.sum += value;\n\n    if (this._recordMinMax) {\n      this._current.min = Math.min(value, this._current.min);\n      this._current.max = Math.max(value, this._current.max);\n      this._current.hasMinMax = true;\n    }\n\n    const idx = binarySearchLB(this._boundaries, value);\n    this._current.buckets.counts[idx + 1] += 1;\n  }\n\n  setStartTime(startTime: HrTime): void {\n    this.startTime = startTime;\n  }\n\n  toPointValue(): InternalHistogram {\n    return this._current;\n  }\n}\n\n/**\n * Basic aggregator which observes events and counts them in pre-defined buckets\n * and provides the total sum and count of all observations.\n */\nexport class HistogramAggregator implements Aggregator<HistogramAccumulation> {\n  public kind: AggregatorKind.HISTOGRAM = AggregatorKind.HISTOGRAM;\n\n  /**\n   * @param _boundaries sorted upper bounds of recorded values.\n   * @param _recordMinMax If set to true, min and max will be recorded. Otherwise, min and max will not be recorded.\n   */\n  constructor(\n    private readonly _boundaries: number[],\n    private readonly _recordMinMax: boolean\n  ) {}\n\n  createAccumulation(startTime: HrTime) {\n    return new HistogramAccumulation(\n      startTime,\n      this._boundaries,\n      this._recordMinMax\n    );\n  }\n\n  /**\n   * Return the result of the merge of two histogram accumulations. As long as one Aggregator\n   * instance produces all Accumulations with constant boundaries we don't need to worry about\n   * merging accumulations with different boundaries.\n   */\n  merge(\n    previous: HistogramAccumulation,\n    delta: HistogramAccumulation\n  ): HistogramAccumulation {\n    const previousValue = previous.toPointValue();\n    const deltaValue = delta.toPointValue();\n\n    const previousCounts = previousValue.buckets.counts;\n    const deltaCounts = deltaValue.buckets.counts;\n\n    const mergedCounts = new Array(previousCounts.length);\n    for (let idx = 0; idx < previousCounts.length; idx++) {\n      mergedCounts[idx] = previousCounts[idx] + deltaCounts[idx];\n    }\n\n    let min = Infinity;\n    let max = -Infinity;\n\n    if (this._recordMinMax) {\n      if (previousValue.hasMinMax && deltaValue.hasMinMax) {\n        min = Math.min(previousValue.min, deltaValue.min);\n        max = Math.max(previousValue.max, deltaValue.max);\n      } else if (previousValue.hasMinMax) {\n        min = previousValue.min;\n        max = previousValue.max;\n      } else if (deltaValue.hasMinMax) {\n        min = deltaValue.min;\n        max = deltaValue.max;\n      }\n    }\n\n    return new HistogramAccumulation(\n      previous.startTime,\n      previousValue.buckets.boundaries,\n      this._recordMinMax,\n      {\n        buckets: {\n          boundaries: previousValue.buckets.boundaries,\n          counts: mergedCounts,\n        },\n        count: previousValue.count + deltaValue.count,\n        sum: previousValue.sum + deltaValue.sum,\n        hasMinMax:\n          this._recordMinMax &&\n          (previousValue.hasMinMax || deltaValue.hasMinMax),\n        min: min,\n        max: max,\n      }\n    );\n  }\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   */\n  diff(\n    previous: HistogramAccumulation,\n    current: HistogramAccumulation\n  ): HistogramAccumulation {\n    const previousValue = previous.toPointValue();\n    const currentValue = current.toPointValue();\n\n    const previousCounts = previousValue.buckets.counts;\n    const currentCounts = currentValue.buckets.counts;\n\n    const diffedCounts = new Array(previousCounts.length);\n    for (let idx = 0; idx < previousCounts.length; idx++) {\n      diffedCounts[idx] = currentCounts[idx] - previousCounts[idx];\n    }\n\n    return new HistogramAccumulation(\n      current.startTime,\n      previousValue.buckets.boundaries,\n      this._recordMinMax,\n      {\n        buckets: {\n          boundaries: previousValue.buckets.boundaries,\n          counts: diffedCounts,\n        },\n        count: currentValue.count - previousValue.count,\n        sum: currentValue.sum - previousValue.sum,\n        hasMinMax: false,\n        min: Infinity,\n        max: -Infinity,\n      }\n    );\n  }\n\n  toMetricData(\n    descriptor: MetricDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<HistogramAccumulation>[],\n    endTime: HrTime\n  ): Maybe<HistogramMetricData> {\n    return {\n      descriptor,\n      aggregationTemporality,\n      dataPointType: DataPointType.HISTOGRAM,\n      dataPoints: accumulationByAttributes.map(([attributes, accumulation]) => {\n        const pointValue = accumulation.toPointValue();\n\n        // determine if instrument allows negative values.\n        const allowsNegativeValues =\n          descriptor.type === InstrumentType.UP_DOWN_COUNTER ||\n          descriptor.type === InstrumentType.OBSERVABLE_GAUGE ||\n          descriptor.type === InstrumentType.OBSERVABLE_UP_DOWN_COUNTER;\n\n        return {\n          attributes,\n          startTime: accumulation.startTime,\n          endTime,\n          value: {\n            min: pointValue.hasMinMax ? pointValue.min : undefined,\n            max: pointValue.hasMinMax ? pointValue.max : undefined,\n            sum: !allowsNegativeValues ? pointValue.sum : undefined,\n            buckets: pointValue.buckets,\n            count: pointValue.count,\n          },\n        };\n      }),\n    };\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class Buckets {\n  /**\n   * The term index refers to the number of the exponential histogram bucket\n   * used to determine its boundaries. The lower boundary of a bucket is\n   * determined by base ** index and the upper boundary of a bucket is\n   * determined by base ** (index + 1). index values are signed to account\n   * for values less than or equal to 1.\n   *\n   * indexBase is the index of the 0th position in the\n   * backing array, i.e., backing[0] is the count\n   * in the bucket with index `indexBase`.\n   *\n   * indexStart is the smallest index value represented\n   * in the backing array.\n   *\n   * indexEnd is the largest index value represented in\n   * the backing array.\n   */\n  constructor(\n    public backing = new BucketsBacking(),\n    public indexBase = 0,\n    public indexStart = 0,\n    public indexEnd = 0\n  ) {}\n\n  /**\n   * Offset is the bucket index of the smallest entry in the counts array\n   * @returns {number}\n   */\n  get offset(): number {\n    return this.indexStart;\n  }\n\n  /**\n   * Buckets is a view into the backing array.\n   * @returns {number}\n   */\n  get length(): number {\n    if (this.backing.length === 0) {\n      return 0;\n    }\n\n    if (this.indexEnd === this.indexStart && this.at(0) === 0) {\n      return 0;\n    }\n\n    return this.indexEnd - this.indexStart + 1;\n  }\n\n  /**\n   * An array of counts, where count[i] carries the count\n   * of the bucket at index (offset+i).  count[i] is the count of\n   * values greater than base^(offset+i) and less than or equal to\n   * base^(offset+i+1).\n   * @returns {number} The logical counts based on the backing array\n   */\n  counts(): number[] {\n    return Array.from({ length: this.length }, (_, i) => this.at(i));\n  }\n\n  /**\n   * At returns the count of the bucket at a position in the logical\n   * array of counts.\n   * @param position\n   * @returns {number}\n   */\n  at(position: number): number {\n    const bias = this.indexBase - this.indexStart;\n    if (position < bias) {\n      position += this.backing.length;\n    }\n\n    position -= bias;\n    return this.backing.countAt(position);\n  }\n\n  /**\n   * incrementBucket increments the backing array index by `increment`\n   * @param bucketIndex\n   * @param increment\n   */\n  incrementBucket(bucketIndex: number, increment: number) {\n    this.backing.increment(bucketIndex, increment);\n  }\n\n  /**\n   * decrementBucket decrements the backing array index by `decrement`\n   * if decrement is greater than the current value, it's set to 0.\n   * @param bucketIndex\n   * @param decrement\n   */\n  decrementBucket(bucketIndex: number, decrement: number) {\n    this.backing.decrement(bucketIndex, decrement);\n  }\n\n  /**\n   * trim removes leading and / or trailing zero buckets (which can occur\n   * after diffing two histos) and rotates the backing array so that the\n   * smallest non-zero index is in the 0th position of the backing array\n   */\n  trim() {\n    for (let i = 0; i < this.length; i++) {\n      if (this.at(i) !== 0) {\n        this.indexStart += i;\n        break;\n      } else if (i === this.length - 1) {\n        //the entire array is zeroed out\n        this.indexStart = this.indexEnd = this.indexBase = 0;\n        return;\n      }\n    }\n\n    for (let i = this.length - 1; i >= 0; i--) {\n      if (this.at(i) !== 0) {\n        this.indexEnd -= this.length - i - 1;\n        break;\n      }\n    }\n\n    this._rotate();\n  }\n\n  /**\n   * downscale first rotates, then collapses 2**`by`-to-1 buckets.\n   * @param by\n   */\n  downscale(by: number) {\n    this._rotate();\n\n    const size = 1 + this.indexEnd - this.indexStart;\n    const each = 1 << by;\n    let inpos = 0;\n    let outpos = 0;\n\n    for (let pos = this.indexStart; pos <= this.indexEnd; ) {\n      let mod = pos % each;\n      if (mod < 0) {\n        mod += each;\n      }\n      for (let i = mod; i < each && inpos < size; i++) {\n        this._relocateBucket(outpos, inpos);\n        inpos++;\n        pos++;\n      }\n      outpos++;\n    }\n\n    this.indexStart >>= by;\n    this.indexEnd >>= by;\n    this.indexBase = this.indexStart;\n  }\n\n  /**\n   * Clone returns a deep copy of Buckets\n   * @returns {Buckets}\n   */\n  clone(): Buckets {\n    return new Buckets(\n      this.backing.clone(),\n      this.indexBase,\n      this.indexStart,\n      this.indexEnd\n    );\n  }\n\n  /**\n   * _rotate shifts the backing array contents so that indexStart ==\n   * indexBase to simplify the downscale logic.\n   */\n  private _rotate() {\n    const bias = this.indexBase - this.indexStart;\n\n    if (bias === 0) {\n      return;\n    } else if (bias > 0) {\n      this.backing.reverse(0, this.backing.length);\n      this.backing.reverse(0, bias);\n      this.backing.reverse(bias, this.backing.length);\n    } else {\n      // negative bias, this can happen when diffing two histograms\n      this.backing.reverse(0, this.backing.length);\n      this.backing.reverse(0, this.backing.length + bias);\n    }\n    this.indexBase = this.indexStart;\n  }\n\n  /**\n   * _relocateBucket adds the count in counts[src] to counts[dest] and\n   * resets count[src] to zero.\n   */\n  private _relocateBucket(dest: number, src: number) {\n    if (dest === src) {\n      return;\n    }\n    this.incrementBucket(dest, this.backing.emptyBucket(src));\n  }\n}\n\n/**\n * BucketsBacking holds the raw buckets and some utility methods to\n * manage them.\n */\nclass BucketsBacking {\n  constructor(private _counts = [0]) {}\n\n  /**\n   * length returns the physical size of the backing array, which\n   * is >= buckets.length()\n   */\n  get length(): number {\n    return this._counts.length;\n  }\n\n  /**\n   * countAt returns the count in a specific bucket\n   */\n  countAt(pos: number): number {\n    return this._counts[pos];\n  }\n\n  /**\n   * growTo grows a backing array and copies old entries\n   * into their correct new positions.\n   */\n  growTo(newSize: number, oldPositiveLimit: number, newPositiveLimit: number) {\n    const tmp = new Array<number>(newSize).fill(0);\n    tmp.splice(\n      newPositiveLimit,\n      this._counts.length - oldPositiveLimit,\n      ...this._counts.slice(oldPositiveLimit)\n    );\n    tmp.splice(0, oldPositiveLimit, ...this._counts.slice(0, oldPositiveLimit));\n    this._counts = tmp;\n  }\n\n  /**\n   * reverse the items in the backing array in the range [from, limit).\n   */\n  reverse(from: number, limit: number) {\n    const num = Math.floor((from + limit) / 2) - from;\n    for (let i = 0; i < num; i++) {\n      const tmp = this._counts[from + i];\n      this._counts[from + i] = this._counts[limit - i - 1];\n      this._counts[limit - i - 1] = tmp;\n    }\n  }\n\n  /**\n   * emptyBucket empties the count from a bucket, for\n   * moving into another.\n   */\n  emptyBucket(src: number): number {\n    const tmp = this._counts[src];\n    this._counts[src] = 0;\n    return tmp;\n  }\n\n  /**\n   * increments a bucket by `increment`\n   */\n  increment(bucketIndex: number, increment: number) {\n    this._counts[bucketIndex] += increment;\n  }\n\n  /**\n   * decrements a bucket by `decrement`\n   */\n  decrement(bucketIndex: number, decrement: number) {\n    if (this._counts[bucketIndex] >= decrement) {\n      this._counts[bucketIndex] -= decrement;\n    } else {\n      // this should not happen, but we're being defensive against\n      // negative counts.\n      this._counts[bucketIndex] = 0;\n    }\n  }\n\n  /**\n   * clone returns a deep copy of BucketsBacking\n   */\n  clone(): BucketsBacking {\n    return new BucketsBacking([...this._counts]);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The functions and constants in this file allow us to interact\n * with the internal representation of an IEEE 64-bit floating point\n * number. We need to work with all 64-bits, thus, care needs to be\n * taken when working with Javascript's bitwise operators (<<, >>, &,\n * |, etc) as they truncate operands to 32-bits. In order to work around\n * this we work with the 64-bits as two 32-bit halves, perform bitwise\n * operations on them independently, and combine the results (if needed).\n */\n\nexport const SIGNIFICAND_WIDTH = 52;\n\n/**\n * EXPONENT_MASK is set to 1 for the hi 32-bits of an IEEE 754\n * floating point exponent: 0x7ff00000.\n */\nconst EXPONENT_MASK = 0x7ff00000;\n\n/**\n * SIGNIFICAND_MASK is the mask for the significand portion of the hi 32-bits\n * of an IEEE 754 double-precision floating-point value: 0xfffff\n */\nconst SIGNIFICAND_MASK = 0xfffff;\n\n/**\n * EXPONENT_BIAS is the exponent bias specified for encoding\n * the IEEE 754 double-precision floating point exponent: 1023\n */\nconst EXPONENT_BIAS = 1023;\n\n/**\n * MIN_NORMAL_EXPONENT is the minimum exponent of a normalized\n * floating point: -1022.\n */\nexport const MIN_NORMAL_EXPONENT = -EXPONENT_BIAS + 1;\n\n/**\n * MAX_NORMAL_EXPONENT is the maximum exponent of a normalized\n * floating point: 1023.\n */\nexport const MAX_NORMAL_EXPONENT = EXPONENT_BIAS;\n\n/**\n * MIN_VALUE is the smallest normal number\n */\nexport const MIN_VALUE = Math.pow(2, -1022);\n\n/**\n * getNormalBase2 extracts the normalized base-2 fractional exponent.\n * This returns k for the equation f x 2**k where f is\n * in the range [1, 2).  Note that this function is not called for\n * subnormal numbers.\n * @param {number} value - the value to determine normalized base-2 fractional\n *    exponent for\n * @returns {number} the normalized base-2 exponent\n */\nexport function getNormalBase2(value: number): number {\n  const dv = new DataView(new ArrayBuffer(8));\n  dv.setFloat64(0, value);\n  // access the raw 64-bit float as 32-bit uints\n  const hiBits = dv.getUint32(0);\n  const expBits = (hiBits & EXPONENT_MASK) >> 20;\n  return expBits - EXPONENT_BIAS;\n}\n\n/**\n * GetSignificand returns the 52 bit (unsigned) significand as a signed value.\n * @param {number} value - the floating point number to extract the significand from\n * @returns {number} The 52-bit significand\n */\nexport function getSignificand(value: number): number {\n  const dv = new DataView(new ArrayBuffer(8));\n  dv.setFloat64(0, value);\n  // access the raw 64-bit float as two 32-bit uints\n  const hiBits = dv.getUint32(0);\n  const loBits = dv.getUint32(4);\n  // extract the significand bits from the hi bits and left shift 32 places note:\n  // we can't use the native << operator as it will truncate the result to 32-bits\n  const significandHiBits = (hiBits & SIGNIFICAND_MASK) * Math.pow(2, 32);\n  // combine the hi and lo bits and return\n  return significandHiBits + loBits;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Note: other languages provide this as a built in function. This is\n * a naive, but functionally correct implementation. This is used sparingly,\n * when creating a new mapping in a running application.\n *\n * ldexp returns frac × 2**exp. With the following special cases:\n *   ldexp(±0, exp) = ±0\n *   ldexp(±Inf, exp) = ±Inf\n *   ldexp(NaN, exp) = NaN\n * @param frac\n * @param exp\n * @returns {number}\n */\nexport function ldexp(frac: number, exp: number): number {\n  if (\n    frac === 0 ||\n    frac === Number.POSITIVE_INFINITY ||\n    frac === Number.NEGATIVE_INFINITY ||\n    Number.isNaN(frac)\n  ) {\n    return frac;\n  }\n  return frac * Math.pow(2, exp);\n}\n\n/**\n * Computes the next power of two that is greater than or equal to v.\n * This implementation more efficient than, but functionally equivalent\n * to Math.pow(2, Math.ceil(Math.log(x)/Math.log(2))).\n * @param v\n * @returns {number}\n */\nexport function nextGreaterSquare(v: number): number {\n  // The following expression computes the least power-of-two\n  // that is >= v.  There are a number of tricky ways to\n  // do this, see https://stackoverflow.com/questions/466204/rounding-up-to-next-power-of-2\n  v--;\n  v |= v >> 1;\n  v |= v >> 2;\n  v |= v >> 4;\n  v |= v >> 8;\n  v |= v >> 16;\n  v++;\n  return v;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class MappingError extends Error {}\n\n/**\n * The mapping interface is used by the exponential histogram to determine\n * where to bucket values. The interface is implemented by ExponentMapping,\n * used for scales [-10, 0] and LogarithmMapping, used for scales [1, 20].\n */\nexport interface Mapping {\n  mapToIndex(value: number): number;\n  lowerBoundary(index: number): number;\n  get scale(): number;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as ieee754 from './ieee754';\nimport * as util from '../util';\nimport { Mapping, MappingError } from './types';\n\n/**\n * ExponentMapping implements exponential mapping functions for\n * scales <=0. For scales > 0 LogarithmMapping should be used.\n */\nexport class ExponentMapping implements Mapping {\n  private readonly _shift: number;\n\n  constructor(scale: number) {\n    this._shift = -scale;\n  }\n\n  /**\n   * Maps positive floating point values to indexes corresponding to scale\n   * @param value\n   * @returns {number} index for provided value at the current scale\n   */\n  mapToIndex(value: number): number {\n    if (value < ieee754.MIN_VALUE) {\n      return this._minNormalLowerBoundaryIndex();\n    }\n\n    const exp = ieee754.getNormalBase2(value);\n\n    // In case the value is an exact power of two, compute a\n    // correction of -1. Note, we are using a custom _rightShift\n    // to accommodate a 52-bit argument, which the native bitwise\n    // operators do not support\n    const correction = this._rightShift(\n      ieee754.getSignificand(value) - 1,\n      ieee754.SIGNIFICAND_WIDTH\n    );\n\n    return (exp + correction) >> this._shift;\n  }\n\n  /**\n   * Returns the lower bucket boundary for the given index for scale\n   *\n   * @param index\n   * @returns {number}\n   */\n  lowerBoundary(index: number): number {\n    const minIndex = this._minNormalLowerBoundaryIndex();\n    if (index < minIndex) {\n      throw new MappingError(\n        `underflow: ${index} is < minimum lower boundary: ${minIndex}`\n      );\n    }\n    const maxIndex = this._maxNormalLowerBoundaryIndex();\n    if (index > maxIndex) {\n      throw new MappingError(\n        `overflow: ${index} is > maximum lower boundary: ${maxIndex}`\n      );\n    }\n\n    return util.ldexp(1, index << this._shift);\n  }\n\n  /**\n   * The scale used by this mapping\n   * @returns {number}\n   */\n  get scale(): number {\n    if (this._shift === 0) {\n      return 0;\n    }\n    return -this._shift;\n  }\n\n  private _minNormalLowerBoundaryIndex(): number {\n    let index = ieee754.MIN_NORMAL_EXPONENT >> this._shift;\n    if (this._shift < 2) {\n      index--;\n    }\n\n    return index;\n  }\n\n  private _maxNormalLowerBoundaryIndex(): number {\n    return ieee754.MAX_NORMAL_EXPONENT >> this._shift;\n  }\n\n  private _rightShift(value: number, shift: number): number {\n    return Math.floor(value * Math.pow(2, -shift));\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as ieee754 from './ieee754';\nimport * as util from '../util';\nimport { Mapping, MappingError } from './types';\n\n/**\n * LogarithmMapping implements exponential mapping functions for scale > 0.\n * For scales <= 0 the exponent mapping should be used.\n */\nexport class LogarithmMapping implements Mapping {\n  private readonly _scale: number;\n  private readonly _scaleFactor: number;\n  private readonly _inverseFactor: number;\n\n  constructor(scale: number) {\n    this._scale = scale;\n    this._scaleFactor = util.ldexp(Math.LOG2E, scale);\n    this._inverseFactor = util.ldexp(Math.LN2, -scale);\n  }\n\n  /**\n   * Maps positive floating point values to indexes corresponding to scale\n   * @param value\n   * @returns {number} index for provided value at the current scale\n   */\n  mapToIndex(value: number): number {\n    if (value <= ieee754.MIN_VALUE) {\n      return this._minNormalLowerBoundaryIndex() - 1;\n    }\n\n    // exact power of two special case\n    if (ieee754.getSignificand(value) === 0) {\n      const exp = ieee754.getNormalBase2(value);\n      return (exp << this._scale) - 1;\n    }\n\n    // non-power of two cases. use Math.floor to round the scaled logarithm\n    const index = Math.floor(Math.log(value) * this._scaleFactor);\n    const maxIndex = this._maxNormalLowerBoundaryIndex();\n    if (index >= maxIndex) {\n      return maxIndex;\n    }\n\n    return index;\n  }\n\n  /**\n   * Returns the lower bucket boundary for the given index for scale\n   *\n   * @param index\n   * @returns {number}\n   */\n  lowerBoundary(index: number): number {\n    const maxIndex = this._maxNormalLowerBoundaryIndex();\n    if (index >= maxIndex) {\n      if (index === maxIndex) {\n        return 2 * Math.exp((index - (1 << this._scale)) / this._scaleFactor);\n      }\n      throw new MappingError(\n        `overflow: ${index} is > maximum lower boundary: ${maxIndex}`\n      );\n    }\n\n    const minIndex = this._minNormalLowerBoundaryIndex();\n    if (index <= minIndex) {\n      if (index === minIndex) {\n        return ieee754.MIN_VALUE;\n      } else if (index === minIndex - 1) {\n        return Math.exp((index + (1 << this._scale)) / this._scaleFactor) / 2;\n      }\n      throw new MappingError(\n        `overflow: ${index} is < minimum lower boundary: ${minIndex}`\n      );\n    }\n\n    return Math.exp(index * this._inverseFactor);\n  }\n\n  /**\n   * The scale used by this mapping\n   * @returns {number}\n   */\n  get scale(): number {\n    return this._scale;\n  }\n\n  private _minNormalLowerBoundaryIndex(): number {\n    return ieee754.MIN_NORMAL_EXPONENT << this._scale;\n  }\n\n  private _maxNormalLowerBoundaryIndex(): number {\n    return ((ieee754.MAX_NORMAL_EXPONENT + 1) << this._scale) - 1;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExponentMapping } from './ExponentMapping';\nimport { LogarithmMapping } from './LogarithmMapping';\nimport { MappingError, Mapping } from './types';\n\nconst MIN_SCALE = -10;\nconst MAX_SCALE = 20;\nconst PREBUILT_MAPPINGS = Array.from({ length: 31 }, (_, i) => {\n  if (i > 10) {\n    return new LogarithmMapping(i - 10);\n  }\n  return new ExponentMapping(i - 10);\n});\n\n/**\n * getMapping returns an appropriate mapping for the given scale. For scales -10\n * to 0 the underlying type will be ExponentMapping. For scales 1 to 20 the\n * underlying type will be LogarithmMapping.\n * @param scale a number in the range [-10, 20]\n * @returns {Mapping}\n */\nexport function getMapping(scale: number): Mapping {\n  if (scale > MAX_SCALE || scale < MIN_SCALE) {\n    throw new MappingError(\n      `expected scale >= ${MIN_SCALE} && <= ${MAX_SCALE}, got: ${scale}`\n    );\n  }\n  // mappings are offset by 10. scale -10 is at position 0 and scale 20 is at 30\n  return PREBUILT_MAPPINGS[scale + 10];\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Accumulation,\n  AccumulationRecord,\n  Aggregator,\n  AggregatorKind,\n  ExponentialHistogram,\n} from './types';\nimport {\n  DataPointType,\n  ExponentialHistogramMetricData,\n  MetricDescriptor,\n} from '../export/MetricData';\nimport { diag, HrTime } from '@opentelemetry/api';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { Maybe } from '../utils';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\nimport { Buckets } from './exponential-histogram/Buckets';\nimport { getMapping } from './exponential-histogram/mapping/getMapping';\nimport { Mapping } from './exponential-histogram/mapping/types';\nimport { nextGreaterSquare } from './exponential-histogram/util';\n\n/**\n * Internal value type for ExponentialHistogramAggregation.\n * Differs from the exported type as undefined sum/min/max complicate arithmetic\n * performed by this aggregation, but are required to be undefined in the exported types.\n */\ninterface InternalHistogram extends ExponentialHistogram {\n  hasMinMax: boolean;\n  min: number;\n  max: number;\n  sum: number;\n}\n\n// HighLow is a utility class used for computing a common scale for\n// two exponential histogram accumulations\nclass HighLow {\n  static combine(h1: HighLow, h2: HighLow): HighLow {\n    return new HighLow(Math.min(h1.low, h2.low), Math.max(h1.high, h2.high));\n  }\n  constructor(\n    public low: number,\n    public high: number\n  ) {}\n}\n\nconst MAX_SCALE = 20;\nconst DEFAULT_MAX_SIZE = 160;\nconst MIN_MAX_SIZE = 2;\n\nexport class ExponentialHistogramAccumulation implements Accumulation {\n  constructor(\n    public startTime: HrTime = startTime,\n    private _maxSize = DEFAULT_MAX_SIZE,\n    private _recordMinMax = true,\n    private _sum = 0,\n    private _count = 0,\n    private _zeroCount = 0,\n    private _min = Number.POSITIVE_INFINITY,\n    private _max = Number.NEGATIVE_INFINITY,\n    private _positive = new Buckets(),\n    private _negative = new Buckets(),\n    private _mapping: Mapping = getMapping(MAX_SCALE)\n  ) {\n    if (this._maxSize < MIN_MAX_SIZE) {\n      diag.warn(`Exponential Histogram Max Size set to ${this._maxSize}, \\\n                changing to the minimum size of: ${MIN_MAX_SIZE}`);\n      this._maxSize = MIN_MAX_SIZE;\n    }\n  }\n\n  /**\n   * record updates a histogram with a single count\n   * @param {Number} value\n   */\n  record(value: number) {\n    this.updateByIncrement(value, 1);\n  }\n\n  /**\n   * Sets the start time for this accumulation\n   * @param {HrTime} startTime\n   */\n  setStartTime(startTime: HrTime): void {\n    this.startTime = startTime;\n  }\n\n  /**\n   * Returns the datapoint representation of this accumulation\n   * @param {HrTime} startTime\n   */\n  toPointValue(): InternalHistogram {\n    return {\n      hasMinMax: this._recordMinMax,\n      min: this.min,\n      max: this.max,\n      sum: this.sum,\n      positive: {\n        offset: this.positive.offset,\n        bucketCounts: this.positive.counts(),\n      },\n      negative: {\n        offset: this.negative.offset,\n        bucketCounts: this.negative.counts(),\n      },\n      count: this.count,\n      scale: this.scale,\n      zeroCount: this.zeroCount,\n    };\n  }\n\n  /**\n   * @returns {Number} The sum of values recorded by this accumulation\n   */\n  get sum(): number {\n    return this._sum;\n  }\n\n  /**\n   * @returns {Number} The minimum value recorded by this accumulation\n   */\n  get min(): number {\n    return this._min;\n  }\n\n  /**\n   * @returns {Number} The maximum value recorded by this accumulation\n   */\n  get max(): number {\n    return this._max;\n  }\n\n  /**\n   * @returns {Number} The count of values recorded by this accumulation\n   */\n  get count(): number {\n    return this._count;\n  }\n\n  /**\n   * @returns {Number} The number of 0 values recorded by this accumulation\n   */\n  get zeroCount(): number {\n    return this._zeroCount;\n  }\n\n  /**\n   * @returns {Number} The scale used by thie accumulation\n   */\n  get scale(): number {\n    if (this._count === this._zeroCount) {\n      // all zeros! scale doesn't matter, use zero\n      return 0;\n    }\n    return this._mapping.scale;\n  }\n\n  /**\n   * positive holds the postive values\n   * @returns {Buckets}\n   */\n  get positive(): Buckets {\n    return this._positive;\n  }\n\n  /**\n   * negative holds the negative values by their absolute value\n   * @returns {Buckets}\n   */\n  get negative(): Buckets {\n    return this._negative;\n  }\n\n  /**\n   * uppdateByIncr supports updating a histogram with a non-negative\n   * increment.\n   * @param value\n   * @param increment\n   */\n  updateByIncrement(value: number, increment: number) {\n    if (value > this._max) {\n      this._max = value;\n    }\n    if (value < this._min) {\n      this._min = value;\n    }\n\n    this._count += increment;\n\n    if (value === 0) {\n      this._zeroCount += increment;\n      return;\n    }\n\n    this._sum += value * increment;\n\n    if (value > 0) {\n      this._updateBuckets(this._positive, value, increment);\n    } else {\n      this._updateBuckets(this._negative, -value, increment);\n    }\n  }\n\n  /**\n   * merge combines data from previous value into self\n   * @param {ExponentialHistogramAccumulation} previous\n   */\n  merge(previous: ExponentialHistogramAccumulation) {\n    if (this._count === 0) {\n      this._min = previous.min;\n      this._max = previous.max;\n    } else if (previous.count !== 0) {\n      if (previous.min < this.min) {\n        this._min = previous.min;\n      }\n      if (previous.max > this.max) {\n        this._max = previous.max;\n      }\n    }\n\n    this.startTime = previous.startTime;\n    this._sum += previous.sum;\n    this._count += previous.count;\n    this._zeroCount += previous.zeroCount;\n\n    const minScale = this._minScale(previous);\n\n    this._downscale(this.scale - minScale);\n\n    this._mergeBuckets(this.positive, previous, previous.positive, minScale);\n    this._mergeBuckets(this.negative, previous, previous.negative, minScale);\n  }\n\n  /**\n   * diff substracts other from self\n   * @param {ExponentialHistogramAccumulation} other\n   */\n  diff(other: ExponentialHistogramAccumulation) {\n    this._min = Infinity;\n    this._max = -Infinity;\n    this._sum -= other.sum;\n    this._count -= other.count;\n    this._zeroCount -= other.zeroCount;\n\n    const minScale = this._minScale(other);\n\n    this._downscale(this.scale - minScale);\n\n    this._diffBuckets(this.positive, other, other.positive, minScale);\n    this._diffBuckets(this.negative, other, other.negative, minScale);\n  }\n\n  /**\n   * clone returns a deep copy of self\n   * @returns {ExponentialHistogramAccumulation}\n   */\n  clone(): ExponentialHistogramAccumulation {\n    return new ExponentialHistogramAccumulation(\n      this.startTime,\n      this._maxSize,\n      this._recordMinMax,\n      this._sum,\n      this._count,\n      this._zeroCount,\n      this._min,\n      this._max,\n      this.positive.clone(),\n      this.negative.clone(),\n      this._mapping\n    );\n  }\n\n  /**\n   * _updateBuckets maps the incoming value to a bucket index for the current\n   * scale. If the bucket index is outside of the range of the backing array,\n   * it will rescale the backing array and update the mapping for the new scale.\n   */\n  private _updateBuckets(buckets: Buckets, value: number, increment: number) {\n    let index = this._mapping.mapToIndex(value);\n\n    // rescale the mapping if needed\n    let rescalingNeeded = false;\n    let high = 0;\n    let low = 0;\n\n    if (buckets.length === 0) {\n      buckets.indexStart = index;\n      buckets.indexEnd = buckets.indexStart;\n      buckets.indexBase = buckets.indexStart;\n    } else if (\n      index < buckets.indexStart &&\n      buckets.indexEnd - index >= this._maxSize\n    ) {\n      rescalingNeeded = true;\n      low = index;\n      high = buckets.indexEnd;\n    } else if (\n      index > buckets.indexEnd &&\n      index - buckets.indexStart >= this._maxSize\n    ) {\n      rescalingNeeded = true;\n      low = buckets.indexStart;\n      high = index;\n    }\n\n    // rescale and compute index at new scale\n    if (rescalingNeeded) {\n      const change = this._changeScale(high, low);\n      this._downscale(change);\n      index = this._mapping.mapToIndex(value);\n    }\n\n    this._incrementIndexBy(buckets, index, increment);\n  }\n\n  /**\n   * _incrementIndexBy increments the count of the bucket specified by `index`.\n   * If the index is outside of the range [buckets.indexStart, buckets.indexEnd]\n   * the boundaries of the backing array will be adjusted and more buckets will\n   * be added if needed.\n   */\n  private _incrementIndexBy(\n    buckets: Buckets,\n    index: number,\n    increment: number\n  ) {\n    if (increment === 0) {\n      // nothing to do for a zero increment, can happen during a merge operation\n      return;\n    }\n\n    if (index < buckets.indexStart) {\n      const span = buckets.indexEnd - index;\n      if (span >= buckets.backing.length) {\n        this._grow(buckets, span + 1);\n      }\n      buckets.indexStart = index;\n    } else if (index > buckets.indexEnd) {\n      const span = index - buckets.indexStart;\n      if (span >= buckets.backing.length) {\n        this._grow(buckets, span + 1);\n      }\n      buckets.indexEnd = index;\n    }\n\n    let bucketIndex = index - buckets.indexBase;\n    if (bucketIndex < 0) {\n      bucketIndex += buckets.backing.length;\n    }\n    buckets.incrementBucket(bucketIndex, increment);\n  }\n\n  /**\n   * grow resizes the backing array by doubling in size up to maxSize.\n   * This extends the array with a bunch of zeros and copies the\n   * existing counts to the same position.\n   */\n  private _grow(buckets: Buckets, needed: number) {\n    const size = buckets.backing.length;\n    const bias = buckets.indexBase - buckets.indexStart;\n    const oldPositiveLimit = size - bias;\n    let newSize = nextGreaterSquare(needed);\n    if (newSize > this._maxSize) {\n      newSize = this._maxSize;\n    }\n    const newPositiveLimit = newSize - bias;\n    buckets.backing.growTo(newSize, oldPositiveLimit, newPositiveLimit);\n  }\n\n  /**\n   * _changeScale computes how much downscaling is needed by shifting the\n   * high and low values until they are separated by no more than size.\n   */\n  private _changeScale(high: number, low: number): number {\n    let change = 0;\n    while (high - low >= this._maxSize) {\n      high >>= 1;\n      low >>= 1;\n      change++;\n    }\n    return change;\n  }\n\n  /**\n   * _downscale subtracts `change` from the current mapping scale.\n   */\n  private _downscale(change: number) {\n    if (change === 0) {\n      return;\n    }\n    if (change < 0) {\n      // Note: this should be impossible. If we get here it's because\n      // there is a bug in the implementation.\n      throw new Error(`impossible change of scale: ${this.scale}`);\n    }\n    const newScale = this._mapping.scale - change;\n\n    this._positive.downscale(change);\n    this._negative.downscale(change);\n\n    this._mapping = getMapping(newScale);\n  }\n\n  /**\n   * _minScale is used by diff and merge to compute an ideal combined scale\n   */\n  private _minScale(other: ExponentialHistogramAccumulation): number {\n    const minScale = Math.min(this.scale, other.scale);\n\n    const highLowPos = HighLow.combine(\n      this._highLowAtScale(this.positive, this.scale, minScale),\n      this._highLowAtScale(other.positive, other.scale, minScale)\n    );\n\n    const highLowNeg = HighLow.combine(\n      this._highLowAtScale(this.negative, this.scale, minScale),\n      this._highLowAtScale(other.negative, other.scale, minScale)\n    );\n\n    return Math.min(\n      minScale - this._changeScale(highLowPos.high, highLowPos.low),\n      minScale - this._changeScale(highLowNeg.high, highLowNeg.low)\n    );\n  }\n\n  /**\n   * _highLowAtScale is used by diff and merge to compute an ideal combined scale.\n   */\n  private _highLowAtScale(\n    buckets: Buckets,\n    currentScale: number,\n    newScale: number\n  ): HighLow {\n    if (buckets.length === 0) {\n      return new HighLow(0, -1);\n    }\n    const shift = currentScale - newScale;\n    return new HighLow(buckets.indexStart >> shift, buckets.indexEnd >> shift);\n  }\n\n  /**\n   * _mergeBuckets translates index values from another histogram and\n   * adds the values into the corresponding buckets of this histogram.\n   */\n  private _mergeBuckets(\n    ours: Buckets,\n    other: ExponentialHistogramAccumulation,\n    theirs: Buckets,\n    scale: number\n  ) {\n    const theirOffset = theirs.offset;\n    const theirChange = other.scale - scale;\n\n    for (let i = 0; i < theirs.length; i++) {\n      this._incrementIndexBy(\n        ours,\n        (theirOffset + i) >> theirChange,\n        theirs.at(i)\n      );\n    }\n  }\n\n  /**\n   * _diffBuckets translates index values from another histogram and\n   * subtracts the values in the corresponding buckets of this histogram.\n   */\n  private _diffBuckets(\n    ours: Buckets,\n    other: ExponentialHistogramAccumulation,\n    theirs: Buckets,\n    scale: number\n  ) {\n    const theirOffset = theirs.offset;\n    const theirChange = other.scale - scale;\n\n    for (let i = 0; i < theirs.length; i++) {\n      const ourIndex = (theirOffset + i) >> theirChange;\n      let bucketIndex = ourIndex - ours.indexBase;\n      if (bucketIndex < 0) {\n        bucketIndex += ours.backing.length;\n      }\n      ours.decrementBucket(bucketIndex, theirs.at(i));\n    }\n\n    ours.trim();\n  }\n}\n\n/**\n * Aggregator for ExponentialHistogramAccumlations\n */\nexport class ExponentialHistogramAggregator\n  implements Aggregator<ExponentialHistogramAccumulation>\n{\n  public kind: AggregatorKind.EXPONENTIAL_HISTOGRAM =\n    AggregatorKind.EXPONENTIAL_HISTOGRAM;\n\n  /**\n   * @param _maxSize Maximum number of buckets for each of the positive\n   *    and negative ranges, exclusive of the zero-bucket.\n   * @param _recordMinMax If set to true, min and max will be recorded.\n   *    Otherwise, min and max will not be recorded.\n   */\n  constructor(\n    readonly _maxSize: number,\n    private readonly _recordMinMax: boolean\n  ) {}\n\n  createAccumulation(startTime: HrTime) {\n    return new ExponentialHistogramAccumulation(\n      startTime,\n      this._maxSize,\n      this._recordMinMax\n    );\n  }\n\n  /**\n   * Return the result of the merge of two exponential histogram accumulations.\n   */\n  merge(\n    previous: ExponentialHistogramAccumulation,\n    delta: ExponentialHistogramAccumulation\n  ): ExponentialHistogramAccumulation {\n    const result = delta.clone();\n    result.merge(previous);\n\n    return result;\n  }\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   */\n  diff(\n    previous: ExponentialHistogramAccumulation,\n    current: ExponentialHistogramAccumulation\n  ): ExponentialHistogramAccumulation {\n    const result = current.clone();\n    result.diff(previous);\n\n    return result;\n  }\n\n  toMetricData(\n    descriptor: MetricDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<ExponentialHistogramAccumulation>[],\n    endTime: HrTime\n  ): Maybe<ExponentialHistogramMetricData> {\n    return {\n      descriptor,\n      aggregationTemporality,\n      dataPointType: DataPointType.EXPONENTIAL_HISTOGRAM,\n      dataPoints: accumulationByAttributes.map(([attributes, accumulation]) => {\n        const pointValue = accumulation.toPointValue();\n\n        // determine if instrument allows negative values.\n        const allowsNegativeValues =\n          descriptor.type === InstrumentType.UP_DOWN_COUNTER ||\n          descriptor.type === InstrumentType.OBSERVABLE_GAUGE ||\n          descriptor.type === InstrumentType.OBSERVABLE_UP_DOWN_COUNTER;\n\n        return {\n          attributes,\n          startTime: accumulation.startTime,\n          endTime,\n          value: {\n            min: pointValue.hasMinMax ? pointValue.min : undefined,\n            max: pointValue.hasMinMax ? pointValue.max : undefined,\n            sum: !allowsNegativeValues ? pointValue.sum : undefined,\n            positive: {\n              offset: pointValue.positive.offset,\n              bucketCounts: pointValue.positive.bucketCounts,\n            },\n            negative: {\n              offset: pointValue.negative.offset,\n              bucketCounts: pointValue.negative.bucketCounts,\n            },\n            count: pointValue.count,\n            scale: pointValue.scale,\n            zeroCount: pointValue.zeroCount,\n          },\n        };\n      }),\n    };\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Accumulation,\n  AccumulationRecord,\n  Aggregator,\n  AggregatorKind,\n  LastValue,\n} from './types';\nimport { HrTime } from '@opentelemetry/api';\nimport { millisToHrTime, hrTimeToMicroseconds } from '@opentelemetry/core';\nimport {\n  DataPointType,\n  GaugeMetricData,\n  MetricDescriptor,\n} from '../export/MetricData';\nimport { Maybe } from '../utils';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\n\nexport class LastValueAccumulation implements Accumulation {\n  constructor(\n    public startTime: HrTime,\n    private _current: number = 0,\n    public sampleTime: HrTime = [0, 0]\n  ) {}\n\n  record(value: number): void {\n    this._current = value;\n    this.sampleTime = millisToHrTime(Date.now());\n  }\n\n  setStartTime(startTime: HrTime): void {\n    this.startTime = startTime;\n  }\n\n  toPointValue(): LastValue {\n    return this._current;\n  }\n}\n\n/** Basic aggregator which calculates a LastValue from individual measurements. */\nexport class LastValueAggregator implements Aggregator<LastValueAccumulation> {\n  public kind: AggregatorKind.LAST_VALUE = AggregatorKind.LAST_VALUE;\n\n  createAccumulation(startTime: HrTime) {\n    return new LastValueAccumulation(startTime);\n  }\n\n  /**\n   * Returns the result of the merge of the given accumulations.\n   *\n   * Return the newly captured (delta) accumulation for LastValueAggregator.\n   */\n  merge(\n    previous: LastValueAccumulation,\n    delta: LastValueAccumulation\n  ): LastValueAccumulation {\n    // nanoseconds may lose precisions.\n    const latestAccumulation =\n      hrTimeToMicroseconds(delta.sampleTime) >=\n      hrTimeToMicroseconds(previous.sampleTime)\n        ? delta\n        : previous;\n    return new LastValueAccumulation(\n      previous.startTime,\n      latestAccumulation.toPointValue(),\n      latestAccumulation.sampleTime\n    );\n  }\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   *\n   * A delta aggregation is not meaningful to LastValueAggregator, just return\n   * the newly captured (delta) accumulation for LastValueAggregator.\n   */\n  diff(\n    previous: LastValueAccumulation,\n    current: LastValueAccumulation\n  ): LastValueAccumulation {\n    // nanoseconds may lose precisions.\n    const latestAccumulation =\n      hrTimeToMicroseconds(current.sampleTime) >=\n      hrTimeToMicroseconds(previous.sampleTime)\n        ? current\n        : previous;\n    return new LastValueAccumulation(\n      current.startTime,\n      latestAccumulation.toPointValue(),\n      latestAccumulation.sampleTime\n    );\n  }\n\n  toMetricData(\n    descriptor: MetricDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<LastValueAccumulation>[],\n    endTime: HrTime\n  ): Maybe<GaugeMetricData> {\n    return {\n      descriptor,\n      aggregationTemporality,\n      dataPointType: DataPointType.GAUGE,\n      dataPoints: accumulationByAttributes.map(([attributes, accumulation]) => {\n        return {\n          attributes,\n          startTime: accumulation.startTime,\n          endTime,\n          value: accumulation.toPointValue(),\n        };\n      }),\n    };\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Sum,\n  AggregatorKind,\n  Aggregator,\n  Accumulation,\n  AccumulationRecord,\n} from './types';\nimport { HrTime } from '@opentelemetry/api';\nimport {\n  DataPointType,\n  MetricDescriptor,\n  SumMetricData,\n} from '../export/MetricData';\nimport { Maybe } from '../utils';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\n\nexport class SumAccumulation implements Accumulation {\n  constructor(\n    public startTime: HrTime,\n    public monotonic: boolean,\n    private _current: number = 0,\n    public reset = false\n  ) {}\n\n  record(value: number): void {\n    if (this.monotonic && value < 0) {\n      return;\n    }\n    this._current += value;\n  }\n\n  setStartTime(startTime: HrTime): void {\n    this.startTime = startTime;\n  }\n\n  toPointValue(): Sum {\n    return this._current;\n  }\n}\n\n/** Basic aggregator which calculates a Sum from individual measurements. */\nexport class SumAggregator implements Aggregator<SumAccumulation> {\n  public kind: AggregatorKind.SUM = AggregatorKind.SUM;\n\n  constructor(public monotonic: boolean) {}\n\n  createAccumulation(startTime: HrTime) {\n    return new SumAccumulation(startTime, this.monotonic);\n  }\n\n  /**\n   * Returns the result of the merge of the given accumulations.\n   */\n  merge(previous: SumAccumulation, delta: SumAccumulation): SumAccumulation {\n    const prevPv = previous.toPointValue();\n    const deltaPv = delta.toPointValue();\n    if (delta.reset) {\n      return new SumAccumulation(\n        delta.startTime,\n        this.monotonic,\n        deltaPv,\n        delta.reset\n      );\n    }\n    return new SumAccumulation(\n      previous.startTime,\n      this.monotonic,\n      prevPv + deltaPv\n    );\n  }\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   */\n  diff(previous: SumAccumulation, current: SumAccumulation): SumAccumulation {\n    const prevPv = previous.toPointValue();\n    const currPv = current.toPointValue();\n    /**\n     * If the SumAggregator is a monotonic one and the previous point value is\n     * greater than the current one, a reset is deemed to be happened.\n     * Return the current point value to prevent the value from been reset.\n     */\n    if (this.monotonic && prevPv > currPv) {\n      return new SumAccumulation(\n        current.startTime,\n        this.monotonic,\n        currPv,\n        true\n      );\n    }\n    return new SumAccumulation(\n      current.startTime,\n      this.monotonic,\n      currPv - prevPv\n    );\n  }\n\n  toMetricData(\n    descriptor: MetricDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<SumAccumulation>[],\n    endTime: HrTime\n  ): Maybe<SumMetricData> {\n    return {\n      descriptor,\n      aggregationTemporality,\n      dataPointType: DataPointType.SUM,\n      dataPoints: accumulationByAttributes.map(([attributes, accumulation]) => {\n        return {\n          attributes,\n          startTime: accumulation.startTime,\n          endTime,\n          value: accumulation.toPointValue(),\n        };\n      }),\n      isMonotonic: this.monotonic,\n    };\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './Drop';\nexport * from './Histogram';\nexport * from './ExponentialHistogram';\nexport * from './LastValue';\nexport * from './Sum';\nexport { Aggregator } from './types';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  Aggregator,\n  SumAggregator,\n  DropAggregator,\n  LastValueAggregator,\n  HistogramAggregator,\n  ExponentialHistogramAggregator,\n} from '../aggregator';\nimport { Accumulation } from '../aggregator/types';\nimport { InstrumentDescriptor, InstrumentType } from '../InstrumentDescriptor';\nimport { Maybe } from '../utils';\n\n/**\n * Configures how measurements are combined into metrics for views.\n *\n * Aggregation provides a set of built-in aggregations via static methods.\n */\nexport abstract class Aggregation {\n  abstract createAggregator(\n    instrument: InstrumentDescriptor\n  ): Aggregator<Maybe<Accumulation>>;\n\n  static Drop(): Aggregation {\n    return DROP_AGGREGATION;\n  }\n\n  static Sum(): Aggregation {\n    return SUM_AGGREGATION;\n  }\n\n  static LastValue(): Aggregation {\n    return LAST_VALUE_AGGREGATION;\n  }\n\n  static Histogram(): Aggregation {\n    return HISTOGRAM_AGGREGATION;\n  }\n\n  static ExponentialHistogram(): Aggregation {\n    return EXPONENTIAL_HISTOGRAM_AGGREGATION;\n  }\n\n  static Default(): Aggregation {\n    return DEFAULT_AGGREGATION;\n  }\n}\n\n/**\n * The default drop aggregation.\n */\nexport class DropAggregation extends Aggregation {\n  private static DEFAULT_INSTANCE = new DropAggregator();\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return DropAggregation.DEFAULT_INSTANCE;\n  }\n}\n\n/**\n * The default sum aggregation.\n */\nexport class SumAggregation extends Aggregation {\n  private static MONOTONIC_INSTANCE = new SumAggregator(true);\n  private static NON_MONOTONIC_INSTANCE = new SumAggregator(false);\n  createAggregator(instrument: InstrumentDescriptor) {\n    switch (instrument.type) {\n      case InstrumentType.COUNTER:\n      case InstrumentType.OBSERVABLE_COUNTER:\n      case InstrumentType.HISTOGRAM: {\n        return SumAggregation.MONOTONIC_INSTANCE;\n      }\n      default: {\n        return SumAggregation.NON_MONOTONIC_INSTANCE;\n      }\n    }\n  }\n}\n\n/**\n * The default last value aggregation.\n */\nexport class LastValueAggregation extends Aggregation {\n  private static DEFAULT_INSTANCE = new LastValueAggregator();\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return LastValueAggregation.DEFAULT_INSTANCE;\n  }\n}\n\n/**\n * The default histogram aggregation.\n */\nexport class HistogramAggregation extends Aggregation {\n  private static DEFAULT_INSTANCE = new HistogramAggregator(\n    [0, 5, 10, 25, 50, 75, 100, 250, 500, 750, 1000, 2500, 5000, 7500, 10000],\n    true\n  );\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return HistogramAggregation.DEFAULT_INSTANCE;\n  }\n}\n\n/**\n * The explicit bucket histogram aggregation.\n */\nexport class ExplicitBucketHistogramAggregation extends Aggregation {\n  private _boundaries: number[];\n\n  /**\n   * @param boundaries the bucket boundaries of the histogram aggregation\n   * @param _recordMinMax If set to true, min and max will be recorded. Otherwise, min and max will not be recorded.\n   */\n  constructor(\n    boundaries: number[],\n    private readonly _recordMinMax = true\n  ) {\n    super();\n    if (boundaries === undefined || boundaries.length === 0) {\n      throw new Error('HistogramAggregator should be created with boundaries.');\n    }\n    // Copy the boundaries array for modification.\n    boundaries = boundaries.concat();\n    // We need to an ordered set to be able to correctly compute count for each\n    // boundary since we'll iterate on each in order.\n    boundaries = boundaries.sort((a, b) => a - b);\n    // Remove all Infinity from the boundaries.\n    const minusInfinityIndex = boundaries.lastIndexOf(-Infinity);\n    let infinityIndex: number | undefined = boundaries.indexOf(Infinity);\n    if (infinityIndex === -1) {\n      infinityIndex = undefined;\n    }\n    this._boundaries = boundaries.slice(minusInfinityIndex + 1, infinityIndex);\n  }\n\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return new HistogramAggregator(this._boundaries, this._recordMinMax);\n  }\n}\n\nexport class ExponentialHistogramAggregation extends Aggregation {\n  constructor(\n    private readonly _maxSize: number = 160,\n    private readonly _recordMinMax = true\n  ) {\n    super();\n  }\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return new ExponentialHistogramAggregator(\n      this._maxSize,\n      this._recordMinMax\n    );\n  }\n}\n\n/**\n * The default aggregation.\n */\nexport class DefaultAggregation extends Aggregation {\n  private _resolve(instrument: InstrumentDescriptor): Aggregation {\n    // cast to unknown to disable complaints on the (unreachable) fallback.\n    switch (instrument.type as unknown) {\n      case InstrumentType.COUNTER:\n      case InstrumentType.UP_DOWN_COUNTER:\n      case InstrumentType.OBSERVABLE_COUNTER:\n      case InstrumentType.OBSERVABLE_UP_DOWN_COUNTER: {\n        return SUM_AGGREGATION;\n      }\n      case InstrumentType.OBSERVABLE_GAUGE: {\n        return LAST_VALUE_AGGREGATION;\n      }\n      case InstrumentType.HISTOGRAM: {\n        if (instrument.advice.explicitBucketBoundaries) {\n          return new ExplicitBucketHistogramAggregation(\n            instrument.advice.explicitBucketBoundaries\n          );\n        }\n        return HISTOGRAM_AGGREGATION;\n      }\n    }\n    api.diag.warn(`Unable to recognize instrument type: ${instrument.type}`);\n    return DROP_AGGREGATION;\n  }\n\n  createAggregator(\n    instrument: InstrumentDescriptor\n  ): Aggregator<Maybe<Accumulation>> {\n    return this._resolve(instrument).createAggregator(instrument);\n  }\n}\n\nconst DROP_AGGREGATION = new DropAggregation();\nconst SUM_AGGREGATION = new SumAggregation();\nconst LAST_VALUE_AGGREGATION = new LastValueAggregation();\nconst HISTOGRAM_AGGREGATION = new HistogramAggregation();\nconst EXPONENTIAL_HISTOGRAM_AGGREGATION = new ExponentialHistogramAggregation();\nconst DEFAULT_AGGREGATION = new DefaultAggregation();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { Aggregation } from '../view/Aggregation';\nimport { AggregationTemporality } from './AggregationTemporality';\n\n/**\n * Aggregation selector based on metric instrument types.\n */\nexport type AggregationSelector = (\n  instrumentType: InstrumentType\n) => Aggregation;\n\n/**\n * Aggregation temporality selector based on metric instrument types.\n */\nexport type AggregationTemporalitySelector = (\n  instrumentType: InstrumentType\n) => AggregationTemporality;\n\nexport const DEFAULT_AGGREGATION_SELECTOR: AggregationSelector =\n  _instrumentType => Aggregation.Default();\nexport const DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR: AggregationTemporalitySelector =\n  _instrumentType => AggregationTemporality.CUMULATIVE;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { MetricProducer } from './MetricProducer';\nimport { CollectionResult } from './MetricData';\nimport { FlatMap, callWithTimeout } from '../utils';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport {\n  CollectionOptions,\n  ForceFlushOptions,\n  ShutdownOptions,\n} from '../types';\nimport { Aggregation } from '../view/Aggregation';\nimport {\n  AggregationSelector,\n  AggregationTemporalitySelector,\n  DEFAULT_AGGREGATION_SELECTOR,\n  DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR,\n} from './AggregationSelector';\n\nexport interface MetricReaderOptions {\n  /**\n   * Aggregation selector based on metric instrument types. If no views are\n   * configured for a metric instrument, a per-metric-reader aggregation is\n   * selected with this selector.\n   */\n  aggregationSelector?: AggregationSelector;\n  /**\n   * Aggregation temporality selector based on metric instrument types. If\n   * not configured, cumulative is used for all instruments.\n   */\n  aggregationTemporalitySelector?: AggregationTemporalitySelector;\n  /**\n   * **Note, this option is experimental**. Additional MetricProducers to use as a source of\n   * aggregated metric data in addition to the SDK's metric data. The resource returned by\n   * these MetricProducers is ignored; the SDK's resource will be used instead.\n   * @experimental\n   */\n  metricProducers?: MetricProducer[];\n}\n\n/**\n * A registered reader of metrics that, when linked to a {@link MetricProducer}, offers global\n * control over metrics.\n */\nexport abstract class MetricReader {\n  // Tracks the shutdown state.\n  // TODO: use BindOncePromise here once a new version of @opentelemetry/core is available.\n  private _shutdown = false;\n  // Additional MetricProducers which will be combined with the SDK's output\n  private _metricProducers: MetricProducer[];\n  // MetricProducer used by this instance which produces metrics from the SDK\n  private _sdkMetricProducer?: MetricProducer;\n  private readonly _aggregationTemporalitySelector: AggregationTemporalitySelector;\n  private readonly _aggregationSelector: AggregationSelector;\n\n  constructor(options?: MetricReaderOptions) {\n    this._aggregationSelector =\n      options?.aggregationSelector ?? DEFAULT_AGGREGATION_SELECTOR;\n    this._aggregationTemporalitySelector =\n      options?.aggregationTemporalitySelector ??\n      DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR;\n    this._metricProducers = options?.metricProducers ?? [];\n  }\n\n  /**\n   * Set the {@link MetricProducer} used by this instance. **This should only be called by the\n   * SDK and should be considered internal.**\n   *\n   * To add additional {@link MetricProducer}s to a {@link MetricReader}, pass them to the\n   * constructor as {@link MetricReaderOptions.metricProducers}.\n   *\n   * @internal\n   * @param metricProducer\n   */\n  setMetricProducer(metricProducer: MetricProducer) {\n    if (this._sdkMetricProducer) {\n      throw new Error(\n        'MetricReader can not be bound to a MeterProvider again.'\n      );\n    }\n    this._sdkMetricProducer = metricProducer;\n    this.onInitialized();\n  }\n\n  /**\n   * Select the {@link Aggregation} for the given {@link InstrumentType} for this\n   * reader.\n   */\n  selectAggregation(instrumentType: InstrumentType): Aggregation {\n    return this._aggregationSelector(instrumentType);\n  }\n\n  /**\n   * Select the {@link AggregationTemporality} for the given\n   * {@link InstrumentType} for this reader.\n   */\n  selectAggregationTemporality(\n    instrumentType: InstrumentType\n  ): AggregationTemporality {\n    return this._aggregationTemporalitySelector(instrumentType);\n  }\n\n  /**\n   * Handle once the SDK has initialized this {@link MetricReader}\n   * Overriding this method is optional.\n   */\n  protected onInitialized(): void {\n    // Default implementation is empty.\n  }\n\n  /**\n   * Handle a shutdown signal by the SDK.\n   *\n   * <p> For push exporters, this should shut down any intervals and close any open connections.\n   * @protected\n   */\n  protected abstract onShutdown(): Promise<void>;\n\n  /**\n   * Handle a force flush signal by the SDK.\n   *\n   * <p> In all scenarios metrics should be collected via {@link collect()}.\n   * <p> For push exporters, this should collect and report metrics.\n   * @protected\n   */\n  protected abstract onForceFlush(): Promise<void>;\n\n  /**\n   * Collect all metrics from the associated {@link MetricProducer}\n   */\n  async collect(options?: CollectionOptions): Promise<CollectionResult> {\n    if (this._sdkMetricProducer === undefined) {\n      throw new Error('MetricReader is not bound to a MetricProducer');\n    }\n\n    // Subsequent invocations to collect are not allowed. SDKs SHOULD return some failure for these calls.\n    if (this._shutdown) {\n      throw new Error('MetricReader is shutdown');\n    }\n\n    const [sdkCollectionResults, ...additionalCollectionResults] =\n      await Promise.all([\n        this._sdkMetricProducer.collect({\n          timeoutMillis: options?.timeoutMillis,\n        }),\n        ...this._metricProducers.map(producer =>\n          producer.collect({\n            timeoutMillis: options?.timeoutMillis,\n          })\n        ),\n      ]);\n\n    // Merge the results, keeping the SDK's Resource\n    const errors = sdkCollectionResults.errors.concat(\n      FlatMap(additionalCollectionResults, result => result.errors)\n    );\n    const resource = sdkCollectionResults.resourceMetrics.resource;\n    const scopeMetrics =\n      sdkCollectionResults.resourceMetrics.scopeMetrics.concat(\n        FlatMap(\n          additionalCollectionResults,\n          result => result.resourceMetrics.scopeMetrics\n        )\n      );\n    return {\n      resourceMetrics: {\n        resource,\n        scopeMetrics,\n      },\n      errors,\n    };\n  }\n\n  /**\n   * Shuts down the metric reader, the promise will reject after the optional timeout or resolve after completion.\n   *\n   * <p> NOTE: this operation will continue even after the promise rejects due to a timeout.\n   * @param options options with timeout.\n   */\n  async shutdown(options?: ShutdownOptions): Promise<void> {\n    // Do not call shutdown again if it has already been called.\n    if (this._shutdown) {\n      api.diag.error('Cannot call shutdown twice.');\n      return;\n    }\n\n    // No timeout if timeoutMillis is undefined or null.\n    if (options?.timeoutMillis == null) {\n      await this.onShutdown();\n    } else {\n      await callWithTimeout(this.onShutdown(), options.timeoutMillis);\n    }\n\n    this._shutdown = true;\n  }\n\n  /**\n   * Flushes metrics read by this reader, the promise will reject after the optional timeout or resolve after completion.\n   *\n   * <p> NOTE: this operation will continue even after the promise rejects due to a timeout.\n   * @param options options with timeout.\n   */\n  async forceFlush(options?: ForceFlushOptions): Promise<void> {\n    if (this._shutdown) {\n      api.diag.warn('Cannot forceFlush on already shutdown MetricReader.');\n      return;\n    }\n\n    // No timeout if timeoutMillis is undefined or null.\n    if (options?.timeoutMillis == null) {\n      await this.onForceFlush();\n      return;\n    }\n\n    await callWithTimeout(this.onForceFlush(), options.timeoutMillis);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  internal,\n  ExportResultCode,\n  globalErrorHandler,\n  unrefTimer,\n} from '@opentelemetry/core';\nimport { MetricReader } from './MetricReader';\nimport { PushMetricExporter } from './MetricExporter';\nimport { callWithTimeout, TimeoutError } from '../utils';\nimport { diag } from '@opentelemetry/api';\nimport { MetricProducer } from './MetricProducer';\n\nexport type PeriodicExportingMetricReaderOptions = {\n  /**\n   * The backing exporter for the metric reader.\n   */\n  exporter: PushMetricExporter;\n  /**\n   * An internal milliseconds for the metric reader to initiate metric\n   * collection.\n   */\n  exportIntervalMillis?: number;\n  /**\n   * Milliseconds for the async observable callback to timeout.\n   */\n  exportTimeoutMillis?: number;\n  /**\n   * **Note, this option is experimental**. Additional MetricProducers to use as a source of\n   * aggregated metric data in addition to the SDK's metric data. The resource returned by\n   * these MetricProducers is ignored; the SDK's resource will be used instead.\n   * @experimental\n   */\n  metricProducers?: MetricProducer[];\n};\n\n/**\n * {@link MetricReader} which collects metrics based on a user-configurable time interval, and passes the metrics to\n * the configured {@link PushMetricExporter}\n */\nexport class PeriodicExportingMetricReader extends MetricReader {\n  private _interval?: ReturnType<typeof setInterval>;\n  private _exporter: PushMetricExporter;\n  private readonly _exportInterval: number;\n  private readonly _exportTimeout: number;\n\n  constructor(options: PeriodicExportingMetricReaderOptions) {\n    super({\n      aggregationSelector: options.exporter.selectAggregation?.bind(\n        options.exporter\n      ),\n      aggregationTemporalitySelector:\n        options.exporter.selectAggregationTemporality?.bind(options.exporter),\n      metricProducers: options.metricProducers,\n    });\n\n    if (\n      options.exportIntervalMillis !== undefined &&\n      options.exportIntervalMillis <= 0\n    ) {\n      throw Error('exportIntervalMillis must be greater than 0');\n    }\n\n    if (\n      options.exportTimeoutMillis !== undefined &&\n      options.exportTimeoutMillis <= 0\n    ) {\n      throw Error('exportTimeoutMillis must be greater than 0');\n    }\n\n    if (\n      options.exportTimeoutMillis !== undefined &&\n      options.exportIntervalMillis !== undefined &&\n      options.exportIntervalMillis < options.exportTimeoutMillis\n    ) {\n      throw Error(\n        'exportIntervalMillis must be greater than or equal to exportTimeoutMillis'\n      );\n    }\n\n    this._exportInterval = options.exportIntervalMillis ?? 60000;\n    this._exportTimeout = options.exportTimeoutMillis ?? 30000;\n    this._exporter = options.exporter;\n  }\n\n  private async _runOnce(): Promise<void> {\n    try {\n      await callWithTimeout(this._doRun(), this._exportTimeout);\n    } catch (err) {\n      if (err instanceof TimeoutError) {\n        api.diag.error(\n          'Export took longer than %s milliseconds and timed out.',\n          this._exportTimeout\n        );\n        return;\n      }\n\n      globalErrorHandler(err);\n    }\n  }\n\n  private async _doRun(): Promise<void> {\n    const { resourceMetrics, errors } = await this.collect({\n      timeoutMillis: this._exportTimeout,\n    });\n\n    if (errors.length > 0) {\n      api.diag.error(\n        'PeriodicExportingMetricReader: metrics collection errors',\n        ...errors\n      );\n    }\n\n    const doExport = async () => {\n      const result = await internal._export(this._exporter, resourceMetrics);\n      if (result.code !== ExportResultCode.SUCCESS) {\n        throw new Error(\n          `PeriodicExportingMetricReader: metrics export failed (error ${result.error})`\n        );\n      }\n    };\n\n    // Avoid scheduling a promise to make the behavior more predictable and easier to test\n    if (resourceMetrics.resource.asyncAttributesPending) {\n      resourceMetrics.resource\n        .waitForAsyncAttributes?.()\n        .then(doExport, err =>\n          diag.debug('Error while resolving async portion of resource: ', err)\n        );\n    } else {\n      await doExport();\n    }\n  }\n\n  protected override onInitialized(): void {\n    // start running the interval as soon as this reader is initialized and keep handle for shutdown.\n    this._interval = setInterval(() => {\n      // this._runOnce never rejects. Using void operator to suppress @typescript-eslint/no-floating-promises.\n      void this._runOnce();\n    }, this._exportInterval);\n    unrefTimer(this._interval);\n  }\n\n  protected async onForceFlush(): Promise<void> {\n    await this._runOnce();\n    await this._exporter.forceFlush();\n  }\n\n  protected async onShutdown(): Promise<void> {\n    if (this._interval) {\n      clearInterval(this._interval);\n    }\n\n    await this._exporter.shutdown();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ExportResultCode } from '@opentelemetry/core';\nimport { ExportResult } from '@opentelemetry/core';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { ResourceMetrics } from './MetricData';\nimport { PushMetricExporter } from './MetricExporter';\n\n/**\n * In-memory Metrics Exporter is a Push Metric Exporter\n * which accumulates metrics data in the local memory and\n * allows to inspect it (useful for e.g. unit tests).\n */\nexport class InMemoryMetricExporter implements PushMetricExporter {\n  protected _shutdown = false;\n  protected _aggregationTemporality: AggregationTemporality;\n  private _metrics: ResourceMetrics[] = [];\n\n  constructor(aggregationTemporality: AggregationTemporality) {\n    this._aggregationTemporality = aggregationTemporality;\n  }\n\n  /**\n   * @inheritedDoc\n   */\n  export(\n    metrics: ResourceMetrics,\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    // Avoid storing metrics when exporter is shutdown\n    if (this._shutdown) {\n      setTimeout(() => resultCallback({ code: ExportResultCode.FAILED }), 0);\n      return;\n    }\n\n    this._metrics.push(metrics);\n    setTimeout(() => resultCallback({ code: ExportResultCode.SUCCESS }), 0);\n  }\n\n  /**\n   * Returns all the collected resource metrics\n   * @returns ResourceMetrics[]\n   */\n  public getMetrics(): ResourceMetrics[] {\n    return this._metrics;\n  }\n\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  reset() {\n    this._metrics = [];\n  }\n\n  selectAggregationTemporality(\n    _instrumentType: InstrumentType\n  ): AggregationTemporality {\n    return this._aggregationTemporality;\n  }\n\n  shutdown(): Promise<void> {\n    this._shutdown = true;\n    return Promise.resolve();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExportResult, ExportResultCode } from '@opentelemetry/core';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { ResourceMetrics } from './MetricData';\nimport { PushMetricExporter } from './MetricExporter';\nimport {\n  AggregationTemporalitySelector,\n  DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR,\n} from './AggregationSelector';\n\ninterface ConsoleMetricExporterOptions {\n  temporalitySelector?: AggregationTemporalitySelector;\n}\n\n/* eslint-disable no-console */\nexport class ConsoleMetricExporter implements PushMetricExporter {\n  protected _shutdown = false;\n  protected _temporalitySelector: AggregationTemporalitySelector;\n\n  constructor(options?: ConsoleMetricExporterOptions) {\n    this._temporalitySelector =\n      options?.temporalitySelector ?? DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR;\n  }\n\n  export(\n    metrics: ResourceMetrics,\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    if (this._shutdown) {\n      // If the exporter is shutting down, by spec, we need to return FAILED as export result\n      setImmediate(resultCallback, { code: ExportResultCode.FAILED });\n      return;\n    }\n\n    return ConsoleMetricExporter._sendMetrics(metrics, resultCallback);\n  }\n\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  selectAggregationTemporality(\n    _instrumentType: InstrumentType\n  ): AggregationTemporality {\n    return this._temporalitySelector(_instrumentType);\n  }\n\n  shutdown(): Promise<void> {\n    this._shutdown = true;\n    return Promise.resolve();\n  }\n\n  private static _sendMetrics(\n    metrics: ResourceMetrics,\n    done: (result: ExportResult) => void\n  ): void {\n    for (const scopeMetrics of metrics.scopeMetrics) {\n      for (const metric of scopeMetrics.metrics) {\n        console.dir({\n          descriptor: metric.descriptor,\n          dataPointType: metric.dataPointType,\n          dataPoints: metric.dataPoints,\n        });\n      }\n    }\n\n    done({ code: ExportResultCode.SUCCESS });\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { InstrumentSelector } from './InstrumentSelector';\nimport { MeterSelector } from './MeterSelector';\nimport { View } from './View';\n\nexport class ViewRegistry {\n  private _registeredViews: View[] = [];\n\n  addView(view: View) {\n    this._registeredViews.push(view);\n  }\n\n  findViews(\n    instrument: InstrumentDescriptor,\n    meter: InstrumentationScope\n  ): View[] {\n    const views = this._registeredViews.filter(registeredView => {\n      return (\n        this._matchInstrument(registeredView.instrumentSelector, instrument) &&\n        this._matchMeter(registeredView.meterSelector, meter)\n      );\n    });\n\n    return views;\n  }\n\n  private _matchInstrument(\n    selector: InstrumentSelector,\n    instrument: InstrumentDescriptor\n  ): boolean {\n    return (\n      (selector.getType() === undefined ||\n        instrument.type === selector.getType()) &&\n      selector.getNameFilter().match(instrument.name) &&\n      selector.getUnitFilter().match(instrument.unit)\n    );\n  }\n\n  private _matchMeter(\n    selector: MeterSelector,\n    meter: InstrumentationScope\n  ): boolean {\n    return (\n      selector.getNameFilter().match(meter.name) &&\n      (meter.version === undefined ||\n        selector.getVersionFilter().match(meter.version)) &&\n      (meter.schemaUrl === undefined ||\n        selector.getSchemaUrlFilter().match(meter.schemaUrl))\n    );\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  context as contextApi,\n  diag,\n  Context,\n  MetricAttributes,\n  ValueType,\n  UpDownCounter,\n  Counter,\n  Histogram,\n  Observable,\n  ObservableCallback,\n  ObservableCounter,\n  ObservableGauge,\n  ObservableUpDownCounter,\n} from '@opentelemetry/api';\nimport { millisToHrTime } from '@opentelemetry/core';\nimport { InstrumentDescriptor } from './InstrumentDescriptor';\nimport { ObservableRegistry } from './state/ObservableRegistry';\nimport {\n  AsyncWritableMetricStorage,\n  WritableMetricStorage,\n} from './state/WritableMetricStorage';\n\nexport class SyncInstrument {\n  constructor(\n    private _writableMetricStorage: WritableMetricStorage,\n    protected _descriptor: InstrumentDescriptor\n  ) {}\n\n  protected _record(\n    value: number,\n    attributes: MetricAttributes = {},\n    context: Context = contextApi.active()\n  ) {\n    if (typeof value !== 'number') {\n      diag.warn(\n        `non-number value provided to metric ${this._descriptor.name}: ${value}`\n      );\n      return;\n    }\n    if (\n      this._descriptor.valueType === ValueType.INT &&\n      !Number.isInteger(value)\n    ) {\n      diag.warn(\n        `INT value type cannot accept a floating-point value for ${this._descriptor.name}, ignoring the fractional digits.`\n      );\n      value = Math.trunc(value);\n      // ignore non-finite values.\n      if (!Number.isInteger(value)) {\n        return;\n      }\n    }\n    this._writableMetricStorage.record(\n      value,\n      attributes,\n      context,\n      millisToHrTime(Date.now())\n    );\n  }\n}\n\n/**\n * The class implements {@link UpDownCounter} interface.\n */\nexport class UpDownCounterInstrument\n  extends SyncInstrument\n  implements UpDownCounter\n{\n  /**\n   * Increment value of counter by the input. Inputs may be negative.\n   */\n  add(value: number, attributes?: MetricAttributes, ctx?: Context): void {\n    this._record(value, attributes, ctx);\n  }\n}\n\n/**\n * The class implements {@link Counter} interface.\n */\nexport class CounterInstrument extends SyncInstrument implements Counter {\n  /**\n   * Increment value of counter by the input. Inputs may not be negative.\n   */\n  add(value: number, attributes?: MetricAttributes, ctx?: Context): void {\n    if (value < 0) {\n      diag.warn(\n        `negative value provided to counter ${this._descriptor.name}: ${value}`\n      );\n      return;\n    }\n\n    this._record(value, attributes, ctx);\n  }\n}\n\n/**\n * The class implements {@link Histogram} interface.\n */\nexport class HistogramInstrument extends SyncInstrument implements Histogram {\n  /**\n   * Records a measurement. Value of the measurement must not be negative.\n   */\n  record(value: number, attributes?: MetricAttributes, ctx?: Context): void {\n    if (value < 0) {\n      diag.warn(\n        `negative value provided to histogram ${this._descriptor.name}: ${value}`\n      );\n      return;\n    }\n    this._record(value, attributes, ctx);\n  }\n}\n\nexport class ObservableInstrument implements Observable {\n  /** @internal */\n  _metricStorages: AsyncWritableMetricStorage[];\n  /** @internal */\n  _descriptor: InstrumentDescriptor;\n\n  constructor(\n    descriptor: InstrumentDescriptor,\n    metricStorages: AsyncWritableMetricStorage[],\n    private _observableRegistry: ObservableRegistry\n  ) {\n    this._descriptor = descriptor;\n    this._metricStorages = metricStorages;\n  }\n\n  /**\n   * @see {Observable.addCallback}\n   */\n  addCallback(callback: ObservableCallback) {\n    this._observableRegistry.addCallback(callback, this);\n  }\n\n  /**\n   * @see {Observable.removeCallback}\n   */\n  removeCallback(callback: ObservableCallback) {\n    this._observableRegistry.removeCallback(callback, this);\n  }\n}\n\nexport class ObservableCounterInstrument\n  extends ObservableInstrument\n  implements ObservableCounter {}\nexport class ObservableGaugeInstrument\n  extends ObservableInstrument\n  implements ObservableGauge {}\nexport class ObservableUpDownCounterInstrument\n  extends ObservableInstrument\n  implements ObservableUpDownCounter {}\n\nexport function isObservableInstrument(\n  it: unknown\n): it is ObservableInstrument {\n  return it instanceof ObservableInstrument;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Meter as IMeter,\n  MetricOptions,\n  Histogram,\n  Counter,\n  UpDownCounter,\n  ObservableGauge,\n  ObservableCounter,\n  ObservableUpDownCounter,\n  BatchObservableCallback,\n  Observable,\n} from '@opentelemetry/api';\nimport {\n  createInstrumentDescriptor,\n  InstrumentType,\n} from './InstrumentDescriptor';\nimport {\n  CounterInstrument,\n  HistogramInstrument,\n  ObservableCounterInstrument,\n  ObservableGaugeInstrument,\n  ObservableUpDownCounterInstrument,\n  UpDownCounterInstrument,\n} from './Instruments';\nimport { MeterSharedState } from './state/MeterSharedState';\n\n/**\n * This class implements the {@link IMeter} interface.\n */\nexport class Meter implements IMeter {\n  constructor(private _meterSharedState: MeterSharedState) {}\n\n  /**\n   * Create a {@link Histogram} instrument.\n   */\n  createHistogram(name: string, options?: MetricOptions): Histogram {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.HISTOGRAM,\n      options\n    );\n    const storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new HistogramInstrument(storage, descriptor);\n  }\n\n  /**\n   * Create a {@link Counter} instrument.\n   */\n  createCounter(name: string, options?: MetricOptions): Counter {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.COUNTER,\n      options\n    );\n    const storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new CounterInstrument(storage, descriptor);\n  }\n\n  /**\n   * Create a {@link UpDownCounter} instrument.\n   */\n  createUpDownCounter(name: string, options?: MetricOptions): UpDownCounter {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.UP_DOWN_COUNTER,\n      options\n    );\n    const storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new UpDownCounterInstrument(storage, descriptor);\n  }\n\n  /**\n   * Create a {@link ObservableGauge} instrument.\n   */\n  createObservableGauge(\n    name: string,\n    options?: MetricOptions\n  ): ObservableGauge {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.OBSERVABLE_GAUGE,\n      options\n    );\n    const storages =\n      this._meterSharedState.registerAsyncMetricStorage(descriptor);\n    return new ObservableGaugeInstrument(\n      descriptor,\n      storages,\n      this._meterSharedState.observableRegistry\n    );\n  }\n\n  /**\n   * Create a {@link ObservableCounter} instrument.\n   */\n  createObservableCounter(\n    name: string,\n    options?: MetricOptions\n  ): ObservableCounter {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.OBSERVABLE_COUNTER,\n      options\n    );\n    const storages =\n      this._meterSharedState.registerAsyncMetricStorage(descriptor);\n    return new ObservableCounterInstrument(\n      descriptor,\n      storages,\n      this._meterSharedState.observableRegistry\n    );\n  }\n\n  /**\n   * Create a {@link ObservableUpDownCounter} instrument.\n   */\n  createObservableUpDownCounter(\n    name: string,\n    options?: MetricOptions\n  ): ObservableUpDownCounter {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.OBSERVABLE_UP_DOWN_COUNTER,\n      options\n    );\n    const storages =\n      this._meterSharedState.registerAsyncMetricStorage(descriptor);\n    return new ObservableUpDownCounterInstrument(\n      descriptor,\n      storages,\n      this._meterSharedState.observableRegistry\n    );\n  }\n\n  /**\n   * @see {@link Meter.addBatchObservableCallback}\n   */\n  addBatchObservableCallback(\n    callback: BatchObservableCallback,\n    observables: Observable[]\n  ) {\n    this._meterSharedState.observableRegistry.addBatchCallback(\n      callback,\n      observables\n    );\n  }\n\n  /**\n   * @see {@link Meter.removeBatchObservableCallback}\n   */\n  removeBatchObservableCallback(\n    callback: BatchObservableCallback,\n    observables: Observable[]\n  ) {\n    this._meterSharedState.observableRegistry.removeBatchCallback(\n      callback,\n      observables\n    );\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { MetricData } from '../export/MetricData';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport {\n  createInstrumentDescriptor,\n  InstrumentDescriptor,\n} from '../InstrumentDescriptor';\n\n/**\n * Internal interface.\n *\n * Represents a storage from which we can collect metrics.\n */\nexport abstract class MetricStorage {\n  constructor(protected _instrumentDescriptor: InstrumentDescriptor) {}\n\n  /**\n   * Collects the metrics from this storage.\n   *\n   * Note: This is a stateful operation and may reset any interval-related\n   * state for the MetricCollector.\n   */\n  abstract collect(\n    collector: MetricCollectorHandle,\n    collectionTime: HrTime\n  ): Maybe<MetricData>;\n\n  getInstrumentDescriptor(): Readonly<InstrumentDescriptor> {\n    return this._instrumentDescriptor;\n  }\n\n  updateDescription(description: string): void {\n    this._instrumentDescriptor = createInstrumentDescriptor(\n      this._instrumentDescriptor.name,\n      this._instrumentDescriptor.type,\n      {\n        description: description,\n        valueType: this._instrumentDescriptor.valueType,\n        unit: this._instrumentDescriptor.unit,\n        advice: this._instrumentDescriptor.advice,\n      }\n    );\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricAttributes } from '@opentelemetry/api';\nimport { hashAttributes } from '../utils';\n\nexport interface Hash<ValueType, HashCodeType> {\n  (value: ValueType): HashCodeType;\n}\n\nexport class HashMap<KeyType, ValueType, HashCodeType> {\n  private _valueMap = new Map<HashCodeType, ValueType>();\n  private _keyMap = new Map<HashCodeType, KeyType>();\n\n  constructor(private _hash: Hash<KeyType, HashCodeType>) {}\n\n  get(key: KeyType, hashCode?: HashCodeType) {\n    hashCode ??= this._hash(key);\n    return this._valueMap.get(hashCode);\n  }\n\n  getOrDefault(key: KeyType, defaultFactory: () => ValueType) {\n    const hash = this._hash(key);\n    if (this._valueMap.has(hash)) {\n      return this._valueMap.get(hash);\n    }\n    const val = defaultFactory();\n    if (!this._keyMap.has(hash)) {\n      this._keyMap.set(hash, key);\n    }\n    this._valueMap.set(hash, val);\n    return val;\n  }\n\n  set(key: KeyType, value: ValueType, hashCode?: HashCodeType) {\n    hashCode ??= this._hash(key);\n    if (!this._keyMap.has(hashCode)) {\n      this._keyMap.set(hashCode, key);\n    }\n    this._valueMap.set(hashCode, value);\n  }\n\n  has(key: KeyType, hashCode?: HashCodeType) {\n    hashCode ??= this._hash(key);\n    return this._valueMap.has(hashCode);\n  }\n\n  *keys(): IterableIterator<[KeyType, HashCodeType]> {\n    const keyIterator = this._keyMap.entries();\n    let next = keyIterator.next();\n    while (next.done !== true) {\n      yield [next.value[1], next.value[0]];\n      next = keyIterator.next();\n    }\n  }\n\n  *entries(): IterableIterator<[KeyType, ValueType, HashCodeType]> {\n    const valueIterator = this._valueMap.entries();\n    let next = valueIterator.next();\n    while (next.done !== true) {\n      // next.value[0] here can not be undefined\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      yield [this._keyMap.get(next.value[0])!, next.value[1], next.value[0]];\n      next = valueIterator.next();\n    }\n  }\n\n  get size() {\n    return this._valueMap.size;\n  }\n}\n\nexport class AttributeHashMap<ValueType> extends HashMap<\n  MetricAttributes,\n  ValueType,\n  string\n> {\n  constructor() {\n    super(hashAttributes);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { Maybe } from '../utils';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { AttributeHashMap } from './HashMap';\n\n/**\n * Internal interface.\n *\n * Allows synchronous collection of metrics. This processor should allow\n * allocation of new aggregation cells for metrics and convert cumulative\n * recording to delta data points.\n */\nexport class DeltaMetricProcessor<T extends Maybe<Accumulation>> {\n  private _activeCollectionStorage = new AttributeHashMap<T>();\n  // TODO: find a reasonable mean to clean the memo;\n  // https://github.com/open-telemetry/opentelemetry-specification/pull/2208\n  private _cumulativeMemoStorage = new AttributeHashMap<T>();\n\n  constructor(private _aggregator: Aggregator<T>) {}\n\n  record(\n    value: number,\n    attributes: MetricAttributes,\n    _context: Context,\n    collectionTime: HrTime\n  ) {\n    const accumulation = this._activeCollectionStorage.getOrDefault(\n      attributes,\n      () => this._aggregator.createAccumulation(collectionTime)\n    );\n    accumulation?.record(value);\n  }\n\n  batchCumulate(\n    measurements: AttributeHashMap<number>,\n    collectionTime: HrTime\n  ) {\n    Array.from(measurements.entries()).forEach(\n      ([attributes, value, hashCode]) => {\n        const accumulation =\n          this._aggregator.createAccumulation(collectionTime);\n        accumulation?.record(value);\n        let delta = accumulation;\n        // Diff with recorded cumulative memo.\n        if (this._cumulativeMemoStorage.has(attributes, hashCode)) {\n          // has() returned true, previous is present.\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          const previous = this._cumulativeMemoStorage.get(\n            attributes,\n            hashCode\n          )!;\n          delta = this._aggregator.diff(previous, accumulation);\n        }\n        // Merge with uncollected active delta.\n        if (this._activeCollectionStorage.has(attributes, hashCode)) {\n          // has() returned true, previous is present.\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          const active = this._activeCollectionStorage.get(\n            attributes,\n            hashCode\n          )!;\n          delta = this._aggregator.merge(active, delta);\n        }\n\n        // Save the current record and the delta record.\n        this._cumulativeMemoStorage.set(attributes, accumulation, hashCode);\n        this._activeCollectionStorage.set(attributes, delta, hashCode);\n      }\n    );\n  }\n\n  /**\n   * Returns a collection of delta metrics. Start time is the when first\n   * time event collected.\n   */\n  collect() {\n    const unreportedDelta = this._activeCollectionStorage;\n    this._activeCollectionStorage = new AttributeHashMap();\n    return unreportedDelta;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport {\n  Accumulation,\n  AccumulationRecord,\n  Aggregator,\n} from '../aggregator/types';\nimport { MetricData } from '../export/MetricData';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport { AttributeHashMap } from './HashMap';\n\n/**\n * Remembers what was presented to a specific exporter.\n */\ninterface LastReportedHistory<T extends Maybe<Accumulation>> {\n  /**\n   * The last accumulation of metric data.\n   */\n  accumulations: AttributeHashMap<T>;\n  /**\n   * The timestamp the data was reported.\n   */\n  collectionTime: HrTime;\n  /**\n   * The AggregationTemporality used to aggregate reports.\n   */\n  aggregationTemporality: AggregationTemporality;\n}\n\n/**\n * Internal interface.\n *\n * Provides unique reporting for each collector. Allows synchronous collection\n * of metrics and reports given temporality values.\n */\nexport class TemporalMetricProcessor<T extends Maybe<Accumulation>> {\n  private _unreportedAccumulations = new Map<\n    MetricCollectorHandle,\n    AttributeHashMap<T>[]\n  >();\n  private _reportHistory = new Map<\n    MetricCollectorHandle,\n    LastReportedHistory<T>\n  >();\n\n  constructor(\n    private _aggregator: Aggregator<T>,\n    collectorHandles: MetricCollectorHandle[]\n  ) {\n    collectorHandles.forEach(handle => {\n      this._unreportedAccumulations.set(handle, []);\n    });\n  }\n\n  /**\n   * Builds the {@link MetricData} streams to report against a specific MetricCollector.\n   * @param collector The information of the MetricCollector.\n   * @param collectors The registered collectors.\n   * @param instrumentDescriptor The instrumentation descriptor that these metrics generated with.\n   * @param currentAccumulations The current accumulation of metric data from instruments.\n   * @param collectionTime The current collection timestamp.\n   * @returns The {@link MetricData} points or `null`.\n   */\n  buildMetrics(\n    collector: MetricCollectorHandle,\n    instrumentDescriptor: InstrumentDescriptor,\n    currentAccumulations: AttributeHashMap<T>,\n    collectionTime: HrTime\n  ): Maybe<MetricData> {\n    this._stashAccumulations(currentAccumulations);\n    const unreportedAccumulations =\n      this._getMergedUnreportedAccumulations(collector);\n\n    let result = unreportedAccumulations;\n    let aggregationTemporality: AggregationTemporality;\n    // Check our last report time.\n    if (this._reportHistory.has(collector)) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const last = this._reportHistory.get(collector)!;\n      const lastCollectionTime = last.collectionTime;\n      aggregationTemporality = last.aggregationTemporality;\n\n      // Use aggregation temporality + instrument to determine if we do a merge or a diff of\n      // previous. We have the following four scenarios:\n      // 1. Cumulative Aggregation (temporality) + Delta recording (sync instrument).\n      //    Here we merge with our last record to get a cumulative aggregation.\n      // 2. Cumulative Aggregation + Cumulative recording (async instrument).\n      //    Cumulative records are converted to delta recording with DeltaMetricProcessor.\n      //    Here we merge with our last record to get a cumulative aggregation.\n      // 3. Delta Aggregation + Delta recording\n      //    Calibrate the startTime of metric streams to be the reader's lastCollectionTime.\n      // 4. Delta Aggregation + Cumulative recording.\n      //    Cumulative records are converted to delta recording with DeltaMetricProcessor.\n      //    Calibrate the startTime of metric streams to be the reader's lastCollectionTime.\n      if (aggregationTemporality === AggregationTemporality.CUMULATIVE) {\n        // We need to make sure the current delta recording gets merged into the previous cumulative\n        // for the next cumulative recording.\n        result = TemporalMetricProcessor.merge(\n          last.accumulations,\n          unreportedAccumulations,\n          this._aggregator\n        );\n      } else {\n        result = TemporalMetricProcessor.calibrateStartTime(\n          last.accumulations,\n          unreportedAccumulations,\n          lastCollectionTime\n        );\n      }\n    } else {\n      // Call into user code to select aggregation temporality for the instrument.\n      aggregationTemporality = collector.selectAggregationTemporality(\n        instrumentDescriptor.type\n      );\n    }\n\n    // Update last reported (cumulative) accumulation.\n    this._reportHistory.set(collector, {\n      accumulations: result,\n      collectionTime,\n      aggregationTemporality,\n    });\n\n    const accumulationRecords = AttributesMapToAccumulationRecords(result);\n\n    // do not convert to metric data if there is nothing to convert.\n    if (accumulationRecords.length === 0) {\n      return undefined;\n    }\n\n    return this._aggregator.toMetricData(\n      instrumentDescriptor,\n      aggregationTemporality,\n      accumulationRecords,\n      /* endTime */ collectionTime\n    );\n  }\n\n  private _stashAccumulations(currentAccumulation: AttributeHashMap<T>) {\n    const registeredCollectors = this._unreportedAccumulations.keys();\n    for (const collector of registeredCollectors) {\n      let stash = this._unreportedAccumulations.get(collector);\n      if (stash === undefined) {\n        stash = [];\n        this._unreportedAccumulations.set(collector, stash);\n      }\n      stash.push(currentAccumulation);\n    }\n  }\n\n  private _getMergedUnreportedAccumulations(collector: MetricCollectorHandle) {\n    let result = new AttributeHashMap<T>();\n    const unreportedList = this._unreportedAccumulations.get(collector);\n    this._unreportedAccumulations.set(collector, []);\n    if (unreportedList === undefined) {\n      return result;\n    }\n    for (const it of unreportedList) {\n      result = TemporalMetricProcessor.merge(result, it, this._aggregator);\n    }\n    return result;\n  }\n\n  static merge<T extends Maybe<Accumulation>>(\n    last: AttributeHashMap<T>,\n    current: AttributeHashMap<T>,\n    aggregator: Aggregator<T>\n  ) {\n    const result = last;\n    const iterator = current.entries();\n    let next = iterator.next();\n    while (next.done !== true) {\n      const [key, record, hash] = next.value;\n      if (last.has(key, hash)) {\n        const lastAccumulation = last.get(key, hash);\n        // last.has() returned true, lastAccumulation is present.\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const accumulation = aggregator.merge(lastAccumulation!, record);\n        result.set(key, accumulation, hash);\n      } else {\n        result.set(key, record, hash);\n      }\n\n      next = iterator.next();\n    }\n    return result;\n  }\n\n  /**\n   * Calibrate the reported metric streams' startTime to lastCollectionTime. Leaves\n   * the new stream to be the initial observation time unchanged.\n   */\n  static calibrateStartTime<T extends Maybe<Accumulation>>(\n    last: AttributeHashMap<T>,\n    current: AttributeHashMap<T>,\n    lastCollectionTime: HrTime\n  ) {\n    for (const [key, hash] of last.keys()) {\n      const currentAccumulation = current.get(key, hash);\n      currentAccumulation?.setStartTime(lastCollectionTime);\n    }\n    return current;\n  }\n}\n\n// TypeScript complains about converting 3 elements tuple to AccumulationRecord<T>.\nfunction AttributesMapToAccumulationRecords<T>(\n  map: AttributeHashMap<T>\n): AccumulationRecord<T>[] {\n  return Array.from(map.entries()) as unknown as AccumulationRecord<T>[];\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { AttributesProcessor } from '../view/AttributesProcessor';\nimport { MetricStorage } from './MetricStorage';\nimport { MetricData } from '../export/MetricData';\nimport { DeltaMetricProcessor } from './DeltaMetricProcessor';\nimport { TemporalMetricProcessor } from './TemporalMetricProcessor';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport { AttributeHashMap } from './HashMap';\nimport { AsyncWritableMetricStorage } from './WritableMetricStorage';\n\n/**\n * Internal interface.\n *\n * Stores and aggregates {@link MetricData} for asynchronous instruments.\n */\nexport class AsyncMetricStorage<T extends Maybe<Accumulation>>\n  extends MetricStorage\n  implements AsyncWritableMetricStorage\n{\n  private _deltaMetricStorage: DeltaMetricProcessor<T>;\n  private _temporalMetricStorage: TemporalMetricProcessor<T>;\n\n  constructor(\n    _instrumentDescriptor: InstrumentDescriptor,\n    aggregator: Aggregator<T>,\n    private _attributesProcessor: AttributesProcessor,\n    collectorHandles: MetricCollectorHandle[]\n  ) {\n    super(_instrumentDescriptor);\n    this._deltaMetricStorage = new DeltaMetricProcessor(aggregator);\n    this._temporalMetricStorage = new TemporalMetricProcessor(\n      aggregator,\n      collectorHandles\n    );\n  }\n\n  record(measurements: AttributeHashMap<number>, observationTime: HrTime) {\n    const processed = new AttributeHashMap<number>();\n    Array.from(measurements.entries()).forEach(([attributes, value]) => {\n      processed.set(this._attributesProcessor.process(attributes), value);\n    });\n    this._deltaMetricStorage.batchCumulate(processed, observationTime);\n  }\n\n  /**\n   * Collects the metrics from this storage. The ObservableCallback is invoked\n   * during the collection.\n   *\n   * Note: This is a stateful operation and may reset any interval-related\n   * state for the MetricCollector.\n   */\n  collect(\n    collector: MetricCollectorHandle,\n    collectionTime: HrTime\n  ): Maybe<MetricData> {\n    const accumulations = this._deltaMetricStorage.collect();\n\n    return this._temporalMetricStorage.buildMetrics(\n      collector,\n      this._instrumentDescriptor,\n      accumulations,\n      collectionTime\n    );\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentSelectorCriteria } from './InstrumentSelector';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\n\nexport function getIncompatibilityDetails(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  let incompatibility = '';\n  if (existing.unit !== otherDescriptor.unit) {\n    incompatibility += `\\t- Unit '${existing.unit}' does not match '${otherDescriptor.unit}'\\n`;\n  }\n  if (existing.type !== otherDescriptor.type) {\n    incompatibility += `\\t- Type '${existing.type}' does not match '${otherDescriptor.type}'\\n`;\n  }\n  if (existing.valueType !== otherDescriptor.valueType) {\n    incompatibility += `\\t- Value Type '${existing.valueType}' does not match '${otherDescriptor.valueType}'\\n`;\n  }\n  if (existing.description !== otherDescriptor.description) {\n    incompatibility += `\\t- Description '${existing.description}' does not match '${otherDescriptor.description}'\\n`;\n  }\n\n  return incompatibility;\n}\n\nexport function getValueTypeConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  return `\\t- use valueType '${existing.valueType}' on instrument creation or use an instrument name other than '${otherDescriptor.name}'`;\n}\n\nexport function getUnitConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  return `\\t- use unit '${existing.unit}' on instrument creation or use an instrument name other than '${otherDescriptor.name}'`;\n}\n\nexport function getTypeConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  const selector: InstrumentSelectorCriteria = {\n    name: otherDescriptor.name,\n    type: otherDescriptor.type,\n    unit: otherDescriptor.unit,\n  };\n\n  const selectorString = JSON.stringify(selector);\n\n  return `\\t- create a new view with a name other than '${existing.name}' and InstrumentSelector '${selectorString}'`;\n}\n\nexport function getDescriptionResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n): string {\n  const selector: InstrumentSelectorCriteria = {\n    name: otherDescriptor.name,\n    type: otherDescriptor.type,\n    unit: otherDescriptor.unit,\n  };\n\n  const selectorString = JSON.stringify(selector);\n\n  return `\\t- create a new view with a name other than '${existing.name}' and InstrumentSelector '${selectorString}'\n    \\t- OR - create a new view with the name ${existing.name} and description '${existing.description}' and InstrumentSelector ${selectorString}\n    \\t- OR - create a new view with the name ${otherDescriptor.name} and description '${existing.description}' and InstrumentSelector ${selectorString}`;\n}\n\nexport function getConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n): string {\n  // Conflicts that cannot be solved via views.\n  if (existing.valueType !== otherDescriptor.valueType) {\n    return getValueTypeConflictResolutionRecipe(existing, otherDescriptor);\n  }\n\n  if (existing.unit !== otherDescriptor.unit) {\n    return getUnitConflictResolutionRecipe(existing, otherDescriptor);\n  }\n\n  // Conflicts that can be solved via views.\n  if (existing.type !== otherDescriptor.type) {\n    // this will automatically solve possible description conflicts.\n    return getTypeConflictResolutionRecipe(existing, otherDescriptor);\n  }\n\n  if (existing.description !== otherDescriptor.description) {\n    return getDescriptionResolutionRecipe(existing, otherDescriptor);\n  }\n\n  return '';\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricStorage } from './MetricStorage';\nimport {\n  InstrumentDescriptor,\n  isDescriptorCompatibleWith,\n} from '../InstrumentDescriptor';\nimport * as api from '@opentelemetry/api';\nimport {\n  getConflictResolutionRecipe,\n  getIncompatibilityDetails,\n} from '../view/RegistrationConflicts';\nimport { MetricCollectorHandle } from './MetricCollector';\n\ntype StorageMap = Map<string, MetricStorage[]>;\n\n/**\n * Internal class for storing {@link MetricStorage}\n */\nexport class MetricStorageRegistry {\n  private readonly _sharedRegistry: StorageMap = new Map();\n  private readonly _perCollectorRegistry = new Map<\n    MetricCollectorHandle,\n    StorageMap\n  >();\n\n  static create() {\n    return new MetricStorageRegistry();\n  }\n\n  getStorages(collector: MetricCollectorHandle): MetricStorage[] {\n    let storages: MetricStorage[] = [];\n    for (const metricStorages of this._sharedRegistry.values()) {\n      storages = storages.concat(metricStorages);\n    }\n\n    const perCollectorStorages = this._perCollectorRegistry.get(collector);\n    if (perCollectorStorages != null) {\n      for (const metricStorages of perCollectorStorages.values()) {\n        storages = storages.concat(metricStorages);\n      }\n    }\n\n    return storages;\n  }\n\n  register(storage: MetricStorage) {\n    this._registerStorage(storage, this._sharedRegistry);\n  }\n\n  registerForCollector(\n    collector: MetricCollectorHandle,\n    storage: MetricStorage\n  ) {\n    let storageMap = this._perCollectorRegistry.get(collector);\n    if (storageMap == null) {\n      storageMap = new Map();\n      this._perCollectorRegistry.set(collector, storageMap);\n    }\n    this._registerStorage(storage, storageMap);\n  }\n\n  findOrUpdateCompatibleStorage<T extends MetricStorage>(\n    expectedDescriptor: InstrumentDescriptor\n  ): T | null {\n    const storages = this._sharedRegistry.get(expectedDescriptor.name);\n    if (storages === undefined) {\n      return null;\n    }\n\n    // If the descriptor is compatible, the type of their metric storage\n    // (either SyncMetricStorage or AsyncMetricStorage) must be compatible.\n    return this._findOrUpdateCompatibleStorage<T>(expectedDescriptor, storages);\n  }\n\n  findOrUpdateCompatibleCollectorStorage<T extends MetricStorage>(\n    collector: MetricCollectorHandle,\n    expectedDescriptor: InstrumentDescriptor\n  ): T | null {\n    const storageMap = this._perCollectorRegistry.get(collector);\n    if (storageMap === undefined) {\n      return null;\n    }\n\n    const storages = storageMap.get(expectedDescriptor.name);\n    if (storages === undefined) {\n      return null;\n    }\n\n    // If the descriptor is compatible, the type of their metric storage\n    // (either SyncMetricStorage or AsyncMetricStorage) must be compatible.\n    return this._findOrUpdateCompatibleStorage<T>(expectedDescriptor, storages);\n  }\n\n  private _registerStorage(storage: MetricStorage, storageMap: StorageMap) {\n    const descriptor = storage.getInstrumentDescriptor();\n    const storages = storageMap.get(descriptor.name);\n\n    if (storages === undefined) {\n      storageMap.set(descriptor.name, [storage]);\n      return;\n    }\n\n    storages.push(storage);\n  }\n\n  private _findOrUpdateCompatibleStorage<T extends MetricStorage>(\n    expectedDescriptor: InstrumentDescriptor,\n    existingStorages: MetricStorage[]\n  ): T | null {\n    let compatibleStorage = null;\n\n    for (const existingStorage of existingStorages) {\n      const existingDescriptor = existingStorage.getInstrumentDescriptor();\n\n      if (isDescriptorCompatibleWith(existingDescriptor, expectedDescriptor)) {\n        // Use the longer description if it does not match.\n        if (existingDescriptor.description !== expectedDescriptor.description) {\n          if (\n            expectedDescriptor.description.length >\n            existingDescriptor.description.length\n          ) {\n            existingStorage.updateDescription(expectedDescriptor.description);\n          }\n\n          api.diag.warn(\n            'A view or instrument with the name ',\n            expectedDescriptor.name,\n            ' has already been registered, but has a different description and is incompatible with another registered view.\\n',\n            'Details:\\n',\n            getIncompatibilityDetails(existingDescriptor, expectedDescriptor),\n            'The longer description will be used.\\nTo resolve the conflict:',\n            getConflictResolutionRecipe(existingDescriptor, expectedDescriptor)\n          );\n        }\n        // Storage is fully compatible. There will never be more than one pre-existing fully compatible storage.\n        compatibleStorage = existingStorage as T;\n      } else {\n        // The implementation SHOULD warn about duplicate instrument registration\n        // conflicts after applying View configuration.\n        api.diag.warn(\n          'A view or instrument with the name ',\n          expectedDescriptor.name,\n          ' has already been registered and is incompatible with another registered view.\\n',\n          'Details:\\n',\n          getIncompatibilityDetails(existingDescriptor, expectedDescriptor),\n          'To resolve the conflict:\\n',\n          getConflictResolutionRecipe(existingDescriptor, expectedDescriptor)\n        );\n      }\n    }\n\n    return compatibleStorage;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { WritableMetricStorage } from './WritableMetricStorage';\n\n/**\n * Internal interface.\n */\nexport class MultiMetricStorage implements WritableMetricStorage {\n  constructor(private readonly _backingStorages: WritableMetricStorage[]) {}\n\n  record(\n    value: number,\n    attributes: MetricAttributes,\n    context: Context,\n    recordTime: HrTime\n  ) {\n    this._backingStorages.forEach(it => {\n      it.record(value, attributes, context, recordTime);\n    });\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  ObservableResult,\n  MetricAttributes,\n  ValueType,\n  BatchObservableResult,\n  Observable,\n} from '@opentelemetry/api';\nimport { AttributeHashMap } from './state/HashMap';\nimport { isObservableInstrument, ObservableInstrument } from './Instruments';\n\n/**\n * The class implements {@link ObservableResult} interface.\n */\nexport class ObservableResultImpl implements ObservableResult {\n  /**\n   * @internal\n   */\n  _buffer = new AttributeHashMap<number>();\n\n  constructor(\n    private _instrumentName: string,\n    private _valueType: ValueType\n  ) {}\n\n  /**\n   * Observe a measurement of the value associated with the given attributes.\n   */\n  observe(value: number, attributes: MetricAttributes = {}): void {\n    if (typeof value !== 'number') {\n      diag.warn(\n        `non-number value provided to metric ${this._instrumentName}: ${value}`\n      );\n      return;\n    }\n    if (this._valueType === ValueType.INT && !Number.isInteger(value)) {\n      diag.warn(\n        `INT value type cannot accept a floating-point value for ${this._instrumentName}, ignoring the fractional digits.`\n      );\n      value = Math.trunc(value);\n      // ignore non-finite values.\n      if (!Number.isInteger(value)) {\n        return;\n      }\n    }\n    this._buffer.set(attributes, value);\n  }\n}\n\n/**\n * The class implements {@link BatchObservableCallback} interface.\n */\nexport class BatchObservableResultImpl implements BatchObservableResult {\n  /**\n   * @internal\n   */\n  _buffer: Map<ObservableInstrument, AttributeHashMap<number>> = new Map();\n\n  /**\n   * Observe a measurement of the value associated with the given attributes.\n   */\n  observe(\n    metric: Observable,\n    value: number,\n    attributes: MetricAttributes = {}\n  ): void {\n    if (!isObservableInstrument(metric)) {\n      return;\n    }\n    let map = this._buffer.get(metric);\n    if (map == null) {\n      map = new AttributeHashMap();\n      this._buffer.set(metric, map);\n    }\n    if (typeof value !== 'number') {\n      diag.warn(\n        `non-number value provided to metric ${metric._descriptor.name}: ${value}`\n      );\n      return;\n    }\n    if (\n      metric._descriptor.valueType === ValueType.INT &&\n      !Number.isInteger(value)\n    ) {\n      diag.warn(\n        `INT value type cannot accept a floating-point value for ${metric._descriptor.name}, ignoring the fractional digits.`\n      );\n      value = Math.trunc(value);\n      // ignore non-finite values.\n      if (!Number.isInteger(value)) {\n        return;\n      }\n    }\n    map.set(attributes, value);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  HrTime,\n  BatchObservableCallback,\n  Observable,\n  ObservableCallback,\n} from '@opentelemetry/api';\nimport { isObservableInstrument, ObservableInstrument } from '../Instruments';\nimport {\n  BatchObservableResultImpl,\n  ObservableResultImpl,\n} from '../ObservableResult';\nimport {\n  callWithTimeout,\n  PromiseAllSettled,\n  isPromiseAllSettledRejectionResult,\n  setEquals,\n} from '../utils';\n\n/**\n * Records for single instrument observable callback.\n */\ninterface ObservableCallbackRecord {\n  callback: ObservableCallback;\n  instrument: ObservableInstrument;\n}\n\n/**\n * Records for multiple instruments observable callback.\n */\ninterface BatchObservableCallbackRecord {\n  callback: BatchObservableCallback;\n  instruments: Set<ObservableInstrument>;\n}\n\n/**\n * An internal interface for managing ObservableCallbacks.\n *\n * Every registered callback associated with a set of instruments are be evaluated\n * exactly once during collection prior to reading data for that instrument.\n */\nexport class ObservableRegistry {\n  private _callbacks: ObservableCallbackRecord[] = [];\n  private _batchCallbacks: BatchObservableCallbackRecord[] = [];\n\n  addCallback(callback: ObservableCallback, instrument: ObservableInstrument) {\n    const idx = this._findCallback(callback, instrument);\n    if (idx >= 0) {\n      return;\n    }\n    this._callbacks.push({ callback, instrument });\n  }\n\n  removeCallback(\n    callback: ObservableCallback,\n    instrument: ObservableInstrument\n  ) {\n    const idx = this._findCallback(callback, instrument);\n    if (idx < 0) {\n      return;\n    }\n    this._callbacks.splice(idx, 1);\n  }\n\n  addBatchCallback(\n    callback: BatchObservableCallback,\n    instruments: Observable[]\n  ) {\n    // Create a set of unique instruments.\n    const observableInstruments = new Set(\n      instruments.filter(isObservableInstrument)\n    );\n    if (observableInstruments.size === 0) {\n      diag.error(\n        'BatchObservableCallback is not associated with valid instruments',\n        instruments\n      );\n      return;\n    }\n    const idx = this._findBatchCallback(callback, observableInstruments);\n    if (idx >= 0) {\n      return;\n    }\n    this._batchCallbacks.push({ callback, instruments: observableInstruments });\n  }\n\n  removeBatchCallback(\n    callback: BatchObservableCallback,\n    instruments: Observable[]\n  ) {\n    // Create a set of unique instruments.\n    const observableInstruments = new Set(\n      instruments.filter(isObservableInstrument)\n    );\n    const idx = this._findBatchCallback(callback, observableInstruments);\n    if (idx < 0) {\n      return;\n    }\n    this._batchCallbacks.splice(idx, 1);\n  }\n\n  /**\n   * @returns a promise of rejected reasons for invoking callbacks.\n   */\n  async observe(\n    collectionTime: HrTime,\n    timeoutMillis?: number\n  ): Promise<unknown[]> {\n    const callbackFutures = this._observeCallbacks(\n      collectionTime,\n      timeoutMillis\n    );\n    const batchCallbackFutures = this._observeBatchCallbacks(\n      collectionTime,\n      timeoutMillis\n    );\n\n    const results = await PromiseAllSettled([\n      ...callbackFutures,\n      ...batchCallbackFutures,\n    ]);\n\n    const rejections = results\n      .filter(isPromiseAllSettledRejectionResult)\n      .map(it => it.reason);\n    return rejections;\n  }\n\n  private _observeCallbacks(observationTime: HrTime, timeoutMillis?: number) {\n    return this._callbacks.map(async ({ callback, instrument }) => {\n      const observableResult = new ObservableResultImpl(\n        instrument._descriptor.name,\n        instrument._descriptor.valueType\n      );\n      let callPromise: Promise<void> = Promise.resolve(\n        callback(observableResult)\n      );\n      if (timeoutMillis != null) {\n        callPromise = callWithTimeout(callPromise, timeoutMillis);\n      }\n      await callPromise;\n      instrument._metricStorages.forEach(metricStorage => {\n        metricStorage.record(observableResult._buffer, observationTime);\n      });\n    });\n  }\n\n  private _observeBatchCallbacks(\n    observationTime: HrTime,\n    timeoutMillis?: number\n  ) {\n    return this._batchCallbacks.map(async ({ callback, instruments }) => {\n      const observableResult = new BatchObservableResultImpl();\n      let callPromise: Promise<void> = Promise.resolve(\n        callback(observableResult)\n      );\n      if (timeoutMillis != null) {\n        callPromise = callWithTimeout(callPromise, timeoutMillis);\n      }\n      await callPromise;\n      instruments.forEach(instrument => {\n        const buffer = observableResult._buffer.get(instrument);\n        if (buffer == null) {\n          return;\n        }\n        instrument._metricStorages.forEach(metricStorage => {\n          metricStorage.record(buffer, observationTime);\n        });\n      });\n    });\n  }\n\n  private _findCallback(\n    callback: ObservableCallback,\n    instrument: ObservableInstrument\n  ) {\n    return this._callbacks.findIndex(record => {\n      return record.callback === callback && record.instrument === instrument;\n    });\n  }\n\n  private _findBatchCallback(\n    callback: BatchObservableCallback,\n    instruments: Set<ObservableInstrument>\n  ) {\n    return this._batchCallbacks.findIndex(record => {\n      return (\n        record.callback === callback &&\n        setEquals(record.instruments, instruments)\n      );\n    });\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { WritableMetricStorage } from './WritableMetricStorage';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { AttributesProcessor } from '../view/AttributesProcessor';\nimport { MetricStorage } from './MetricStorage';\nimport { MetricData } from '../export/MetricData';\nimport { DeltaMetricProcessor } from './DeltaMetricProcessor';\nimport { TemporalMetricProcessor } from './TemporalMetricProcessor';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\n\n/**\n * Internal interface.\n *\n * Stores and aggregates {@link MetricData} for synchronous instruments.\n */\nexport class SyncMetricStorage<T extends Maybe<Accumulation>>\n  extends MetricStorage\n  implements WritableMetricStorage\n{\n  private _deltaMetricStorage: DeltaMetricProcessor<T>;\n  private _temporalMetricStorage: TemporalMetricProcessor<T>;\n\n  constructor(\n    instrumentDescriptor: InstrumentDescriptor,\n    aggregator: Aggregator<T>,\n    private _attributesProcessor: AttributesProcessor,\n    collectorHandles: MetricCollectorHandle[]\n  ) {\n    super(instrumentDescriptor);\n    this._deltaMetricStorage = new DeltaMetricProcessor(aggregator);\n    this._temporalMetricStorage = new TemporalMetricProcessor(\n      aggregator,\n      collectorHandles\n    );\n  }\n\n  record(\n    value: number,\n    attributes: MetricAttributes,\n    context: Context,\n    recordTime: HrTime\n  ) {\n    attributes = this._attributesProcessor.process(attributes, context);\n    this._deltaMetricStorage.record(value, attributes, context, recordTime);\n  }\n\n  /**\n   * Collects the metrics from this storage.\n   *\n   * Note: This is a stateful operation and may reset any interval-related\n   * state for the MetricCollector.\n   */\n  collect(\n    collector: MetricCollectorHandle,\n    collectionTime: HrTime\n  ): Maybe<MetricData> {\n    const accumulations = this._deltaMetricStorage.collect();\n\n    return this._temporalMetricStorage.buildMetrics(\n      collector,\n      this._instrumentDescriptor,\n      accumulations,\n      collectionTime\n    );\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, MetricAttributes } from '@opentelemetry/api';\n\n/**\n * The {@link AttributesProcessor} is responsible for customizing which\n * attribute(s) are to be reported as metrics dimension(s) and adding\n * additional dimension(s) from the {@link Context}.\n */\nexport abstract class AttributesProcessor {\n  /**\n   * Process the metric instrument attributes.\n   *\n   * @param incoming The metric instrument attributes.\n   * @param context The active context when the instrument is synchronous.\n   * `undefined` otherwise.\n   */\n  abstract process(\n    incoming: MetricAttributes,\n    context?: Context\n  ): MetricAttributes;\n\n  static Noop() {\n    return NOOP;\n  }\n}\n\nexport class NoopAttributesProcessor extends AttributesProcessor {\n  process(incoming: MetricAttributes, _context?: Context) {\n    return incoming;\n  }\n}\n\n/**\n * {@link AttributesProcessor} that filters by allowed attribute names and drops any names that are not in the\n * allow list.\n */\nexport class FilteringAttributesProcessor extends AttributesProcessor {\n  constructor(private _allowedAttributeNames: string[]) {\n    super();\n  }\n\n  process(incoming: MetricAttributes, _context: Context): MetricAttributes {\n    const filteredAttributes: MetricAttributes = {};\n    Object.keys(incoming)\n      .filter(attributeName =>\n        this._allowedAttributeNames.includes(attributeName)\n      )\n      .forEach(\n        attributeName =>\n          (filteredAttributes[attributeName] = incoming[attributeName])\n      );\n    return filteredAttributes;\n  }\n}\n\nconst NOOP = new NoopAttributesProcessor();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { MetricCollectOptions } from '../export/MetricProducer';\nimport { ScopeMetrics } from '../export/MetricData';\nimport {\n  createInstrumentDescriptorWithView,\n  InstrumentDescriptor,\n} from '../InstrumentDescriptor';\nimport { Meter } from '../Meter';\nimport { isNotNullish, Maybe } from '../utils';\nimport { AsyncMetricStorage } from './AsyncMetricStorage';\nimport { MeterProviderSharedState } from './MeterProviderSharedState';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport { MetricStorageRegistry } from './MetricStorageRegistry';\nimport { MultiMetricStorage } from './MultiWritableMetricStorage';\nimport { ObservableRegistry } from './ObservableRegistry';\nimport { SyncMetricStorage } from './SyncMetricStorage';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { AttributesProcessor } from '../view/AttributesProcessor';\nimport { MetricStorage } from './MetricStorage';\n\n/**\n * An internal record for shared meter provider states.\n */\nexport class MeterSharedState {\n  metricStorageRegistry = new MetricStorageRegistry();\n  observableRegistry = new ObservableRegistry();\n  meter: Meter;\n\n  constructor(\n    private _meterProviderSharedState: MeterProviderSharedState,\n    private _instrumentationScope: InstrumentationScope\n  ) {\n    this.meter = new Meter(this);\n  }\n\n  registerMetricStorage(descriptor: InstrumentDescriptor) {\n    const storages = this._registerMetricStorage(descriptor, SyncMetricStorage);\n\n    if (storages.length === 1) {\n      return storages[0];\n    }\n    return new MultiMetricStorage(storages);\n  }\n\n  registerAsyncMetricStorage(descriptor: InstrumentDescriptor) {\n    const storages = this._registerMetricStorage(\n      descriptor,\n      AsyncMetricStorage\n    );\n\n    return storages;\n  }\n\n  /**\n   * @param collector opaque handle of {@link MetricCollector} which initiated the collection.\n   * @param collectionTime the HrTime at which the collection was initiated.\n   * @param options options for collection.\n   * @returns the list of metric data collected.\n   */\n  async collect(\n    collector: MetricCollectorHandle,\n    collectionTime: HrTime,\n    options?: MetricCollectOptions\n  ): Promise<ScopeMetricsResult | null> {\n    /**\n     * 1. Call all observable callbacks first.\n     * 2. Collect metric result for the collector.\n     */\n    const errors = await this.observableRegistry.observe(\n      collectionTime,\n      options?.timeoutMillis\n    );\n    const storages = this.metricStorageRegistry.getStorages(collector);\n\n    // prevent more allocations if there are no storages.\n    if (storages.length === 0) {\n      return null;\n    }\n\n    const metricDataList = storages\n      .map(metricStorage => {\n        return metricStorage.collect(collector, collectionTime);\n      })\n      .filter(isNotNullish);\n\n    // skip this scope if no data was collected (storage created, but no data observed)\n    if (metricDataList.length === 0) {\n      return { errors };\n    }\n\n    return {\n      scopeMetrics: {\n        scope: this._instrumentationScope,\n        metrics: metricDataList,\n      },\n      errors,\n    };\n  }\n\n  private _registerMetricStorage<\n    MetricStorageType extends MetricStorageConstructor,\n    R extends InstanceType<MetricStorageType>,\n  >(\n    descriptor: InstrumentDescriptor,\n    MetricStorageType: MetricStorageType\n  ): R[] {\n    const views = this._meterProviderSharedState.viewRegistry.findViews(\n      descriptor,\n      this._instrumentationScope\n    );\n    let storages = views.map(view => {\n      const viewDescriptor = createInstrumentDescriptorWithView(\n        view,\n        descriptor\n      );\n      const compatibleStorage =\n        this.metricStorageRegistry.findOrUpdateCompatibleStorage<R>(\n          viewDescriptor\n        );\n      if (compatibleStorage != null) {\n        return compatibleStorage;\n      }\n      const aggregator = view.aggregation.createAggregator(viewDescriptor);\n      const viewStorage = new MetricStorageType(\n        viewDescriptor,\n        aggregator,\n        view.attributesProcessor,\n        this._meterProviderSharedState.metricCollectors\n      ) as R;\n      this.metricStorageRegistry.register(viewStorage);\n      return viewStorage;\n    });\n\n    // Fallback to the per-collector aggregations if no view is configured for the instrument.\n    if (storages.length === 0) {\n      const perCollectorAggregations =\n        this._meterProviderSharedState.selectAggregations(descriptor.type);\n      const collectorStorages = perCollectorAggregations.map(\n        ([collector, aggregation]) => {\n          const compatibleStorage =\n            this.metricStorageRegistry.findOrUpdateCompatibleCollectorStorage<R>(\n              collector,\n              descriptor\n            );\n          if (compatibleStorage != null) {\n            return compatibleStorage;\n          }\n          const aggregator = aggregation.createAggregator(descriptor);\n          const storage = new MetricStorageType(\n            descriptor,\n            aggregator,\n            AttributesProcessor.Noop(),\n            [collector]\n          ) as R;\n          this.metricStorageRegistry.registerForCollector(collector, storage);\n          return storage;\n        }\n      );\n      storages = storages.concat(collectorStorages);\n    }\n\n    return storages;\n  }\n}\n\ninterface ScopeMetricsResult {\n  scopeMetrics?: ScopeMetrics;\n  errors: unknown[];\n}\n\ninterface MetricStorageConstructor {\n  new (\n    instrumentDescriptor: InstrumentDescriptor,\n    aggregator: Aggregator<Maybe<Accumulation>>,\n    attributesProcessor: AttributesProcessor,\n    collectors: MetricCollectorHandle[]\n  ): MetricStorage;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { IResource } from '@opentelemetry/resources';\nimport { Aggregation, InstrumentType } from '..';\nimport { instrumentationScopeId } from '../utils';\nimport { ViewRegistry } from '../view/ViewRegistry';\nimport { MeterSharedState } from './MeterSharedState';\nimport { MetricCollector, MetricCollectorHandle } from './MetricCollector';\n\n/**\n * An internal record for shared meter provider states.\n */\nexport class MeterProviderSharedState {\n  viewRegistry = new ViewRegistry();\n\n  metricCollectors: MetricCollector[] = [];\n\n  meterSharedStates: Map<string, MeterSharedState> = new Map();\n\n  constructor(public resource: IResource) {}\n\n  getMeterSharedState(instrumentationScope: InstrumentationScope) {\n    const id = instrumentationScopeId(instrumentationScope);\n    let meterSharedState = this.meterSharedStates.get(id);\n    if (meterSharedState == null) {\n      meterSharedState = new MeterSharedState(this, instrumentationScope);\n      this.meterSharedStates.set(id, meterSharedState);\n    }\n    return meterSharedState;\n  }\n\n  selectAggregations(instrumentType: InstrumentType) {\n    const result: [MetricCollectorHandle, Aggregation][] = [];\n    for (const collector of this.metricCollectors) {\n      result.push([collector, collector.selectAggregation(instrumentType)]);\n    }\n    return result;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { millisToHrTime } from '@opentelemetry/core';\nimport { AggregationTemporalitySelector } from '../export/AggregationSelector';\nimport { CollectionResult, ScopeMetrics } from '../export/MetricData';\nimport { MetricProducer, MetricCollectOptions } from '../export/MetricProducer';\nimport { MetricReader } from '../export/MetricReader';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { ForceFlushOptions, ShutdownOptions } from '../types';\nimport { MeterProviderSharedState } from './MeterProviderSharedState';\n\n/**\n * An internal opaque interface that the MetricReader receives as\n * MetricProducer. It acts as the storage key to the internal metric stream\n * state for each MetricReader.\n */\nexport class MetricCollector implements MetricProducer {\n  constructor(\n    private _sharedState: MeterProviderSharedState,\n    private _metricReader: MetricReader\n  ) {}\n\n  async collect(options?: MetricCollectOptions): Promise<CollectionResult> {\n    const collectionTime = millisToHrTime(Date.now());\n    const scopeMetrics: ScopeMetrics[] = [];\n    const errors: unknown[] = [];\n\n    const meterCollectionPromises = Array.from(\n      this._sharedState.meterSharedStates.values()\n    ).map(async meterSharedState => {\n      const current = await meterSharedState.collect(\n        this,\n        collectionTime,\n        options\n      );\n\n      // only add scope metrics if available\n      if (current?.scopeMetrics != null) {\n        scopeMetrics.push(current.scopeMetrics);\n      }\n\n      // only add errors if available\n      if (current?.errors != null) {\n        errors.push(...current.errors);\n      }\n    });\n    await Promise.all(meterCollectionPromises);\n\n    return {\n      resourceMetrics: {\n        resource: this._sharedState.resource,\n        scopeMetrics: scopeMetrics,\n      },\n      errors: errors,\n    };\n  }\n\n  /**\n   * Delegates for MetricReader.forceFlush.\n   */\n  async forceFlush(options?: ForceFlushOptions): Promise<void> {\n    await this._metricReader.forceFlush(options);\n  }\n\n  /**\n   * Delegates for MetricReader.shutdown.\n   */\n  async shutdown(options?: ShutdownOptions): Promise<void> {\n    await this._metricReader.shutdown(options);\n  }\n\n  selectAggregationTemporality(instrumentType: InstrumentType) {\n    return this._metricReader.selectAggregationTemporality(instrumentType);\n  }\n\n  selectAggregation(instrumentType: InstrumentType) {\n    return this._metricReader.selectAggregation(instrumentType);\n  }\n}\n\n/**\n * An internal interface for MetricCollector. Exposes the necessary\n * information for metric collection.\n */\nexport interface MetricCollectorHandle {\n  selectAggregationTemporality: AggregationTemporalitySelector;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  MeterProvider as IMeterProvider,\n  Meter as IMeter,\n  MeterOptions,\n  createNoopMeter,\n} from '@opentelemetry/api';\nimport { IResource, Resource } from '@opentelemetry/resources';\nimport { MetricReader } from './export/MetricReader';\nimport { MeterProviderSharedState } from './state/MeterProviderSharedState';\nimport { MetricCollector } from './state/MetricCollector';\nimport { ForceFlushOptions, ShutdownOptions } from './types';\nimport { View } from './view/View';\n\n/**\n * MeterProviderOptions provides an interface for configuring a MeterProvider.\n */\nexport interface MeterProviderOptions {\n  /** Resource associated with metric telemetry  */\n  resource?: IResource;\n  views?: View[];\n}\n\n/**\n * This class implements the {@link MeterProvider} interface.\n */\nexport class MeterProvider implements IMeterProvider {\n  private _sharedState: MeterProviderSharedState;\n  private _shutdown = false;\n\n  constructor(options?: MeterProviderOptions) {\n    const resource = Resource.default().merge(\n      options?.resource ?? Resource.empty()\n    );\n    this._sharedState = new MeterProviderSharedState(resource);\n    if (options?.views != null && options.views.length > 0) {\n      for (const view of options.views) {\n        this._sharedState.viewRegistry.addView(view);\n      }\n    }\n  }\n\n  /**\n   * Get a meter with the configuration of the MeterProvider.\n   */\n  getMeter(name: string, version = '', options: MeterOptions = {}): IMeter {\n    // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/sdk.md#meter-creation\n    if (this._shutdown) {\n      diag.warn('A shutdown MeterProvider cannot provide a Meter');\n      return createNoopMeter();\n    }\n\n    return this._sharedState.getMeterSharedState({\n      name,\n      version,\n      schemaUrl: options.schemaUrl,\n    }).meter;\n  }\n\n  /**\n   * Register a {@link MetricReader} to the meter provider. After the\n   * registration, the MetricReader can start metrics collection.\n   *\n   * @param metricReader the metric reader to be registered.\n   */\n  addMetricReader(metricReader: MetricReader) {\n    const collector = new MetricCollector(this._sharedState, metricReader);\n    metricReader.setMetricProducer(collector);\n    this._sharedState.metricCollectors.push(collector);\n  }\n\n  /**\n   * Flush all buffered data and shut down the MeterProvider and all registered\n   * MetricReaders.\n   *\n   * Returns a promise which is resolved when all flushes are complete.\n   */\n  async shutdown(options?: ShutdownOptions): Promise<void> {\n    if (this._shutdown) {\n      diag.warn('shutdown may only be called once per MeterProvider');\n      return;\n    }\n\n    this._shutdown = true;\n\n    await Promise.all(\n      this._sharedState.metricCollectors.map(collector => {\n        return collector.shutdown(options);\n      })\n    );\n  }\n\n  /**\n   * Notifies all registered MetricReaders to flush any buffered data.\n   *\n   * Returns a promise which is resolved when all flushes are complete.\n   */\n  async forceFlush(options?: ForceFlushOptions): Promise<void> {\n    // do not flush after shutdown\n    if (this._shutdown) {\n      diag.warn('invalid attempt to force flush after MeterProvider shutdown');\n      return;\n    }\n\n    await Promise.all(\n      this._sharedState.metricCollectors.map(collector => {\n        return collector.forceFlush(options);\n      })\n    );\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// https://tc39.es/proposal-regex-escaping\n// escape ^ $ \\ .  + ? ( ) [ ] { } |\n// do not need to escape * as we interpret it as wildcard\nconst ESCAPE = /[\\^$\\\\.+?()[\\]{}|]/g;\n\nexport interface Predicate {\n  match(str: string): boolean;\n}\n\n/**\n * Wildcard pattern predicate, supports patterns like `*`, `foo*`, `*bar`.\n */\nexport class PatternPredicate implements Predicate {\n  private _matchAll: boolean;\n  private _regexp: RegExp;\n\n  constructor(pattern: string) {\n    if (pattern === '*') {\n      this._matchAll = true;\n      this._regexp = /.*/;\n    } else {\n      this._matchAll = false;\n      this._regexp = new RegExp(PatternPredicate.escapePattern(pattern));\n    }\n  }\n\n  match(str: string): boolean {\n    if (this._matchAll) {\n      return true;\n    }\n\n    return this._regexp.test(str);\n  }\n\n  static escapePattern(pattern: string): string {\n    return `^${pattern.replace(ESCAPE, '\\\\$&').replace('*', '.*')}$`;\n  }\n\n  static hasWildcard(pattern: string): boolean {\n    return pattern.includes('*');\n  }\n}\n\nexport class ExactPredicate implements Predicate {\n  private _matchAll: boolean;\n  private _pattern?: string;\n\n  constructor(pattern?: string) {\n    this._matchAll = pattern === undefined;\n    this._pattern = pattern;\n  }\n\n  match(str: string): boolean {\n    if (this._matchAll) {\n      return true;\n    }\n    if (str === this._pattern) {\n      return true;\n    }\n    return false;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { ExactPredicate, PatternPredicate, Predicate } from './Predicate';\n\nexport interface InstrumentSelectorCriteria {\n  name?: string;\n  type?: InstrumentType;\n  unit?: string;\n}\n\nexport class InstrumentSelector {\n  private _nameFilter: Predicate;\n  private _type?: InstrumentType;\n  private _unitFilter: Predicate;\n\n  constructor(criteria?: InstrumentSelectorCriteria) {\n    this._nameFilter = new PatternPredicate(criteria?.name ?? '*');\n    this._type = criteria?.type;\n    this._unitFilter = new ExactPredicate(criteria?.unit);\n  }\n\n  getType() {\n    return this._type;\n  }\n\n  getNameFilter() {\n    return this._nameFilter;\n  }\n\n  getUnitFilter() {\n    return this._unitFilter;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ExactPredicate, Predicate } from './Predicate';\n\nexport interface MeterSelectorCriteria {\n  name?: string;\n  version?: string;\n  schemaUrl?: string;\n}\n\nexport class MeterSelector {\n  private _nameFilter: Predicate;\n  private _versionFilter: Predicate;\n  private _schemaUrlFilter: Predicate;\n\n  constructor(criteria?: MeterSelectorCriteria) {\n    this._nameFilter = new ExactPredicate(criteria?.name);\n    this._versionFilter = new ExactPredicate(criteria?.version);\n    this._schemaUrlFilter = new ExactPredicate(criteria?.schemaUrl);\n  }\n\n  getNameFilter() {\n    return this._nameFilter;\n  }\n\n  /**\n   * TODO: semver filter? no spec yet.\n   */\n  getVersionFilter() {\n    return this._versionFilter;\n  }\n\n  getSchemaUrlFilter() {\n    return this._schemaUrlFilter;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PatternPredicate } from './Predicate';\nimport {\n  AttributesProcessor,\n  FilteringAttributesProcessor,\n} from './AttributesProcessor';\nimport { InstrumentSelector } from './InstrumentSelector';\nimport { MeterSelector } from './MeterSelector';\nimport { Aggregation } from './Aggregation';\nimport { InstrumentType } from '../InstrumentDescriptor';\n\nexport type ViewOptions = {\n  /**\n   *  Alters the metric stream:\n   *  This will be used as the name of the metrics stream.\n   *  If not provided, the original Instrument name will be used.\n   */\n  name?: string;\n  /**\n   * Alters the metric stream:\n   * This will be used as the description of the metrics stream.\n   * If not provided, the original Instrument description will be used by default.\n   *\n   * @example <caption>changes the description of all selected instruments to 'sample description'</caption>\n   * description: 'sample description'\n   */\n  description?: string;\n  /**\n   * Alters the metric stream:\n   * If provided, the attributes that are not in the list will be ignored.\n   * If not provided, all attribute keys will be used by default.\n   *\n   * @example <caption>drops all attributes with top-level keys except for 'myAttr' and 'myOtherAttr'</caption>\n   * attributeKeys: ['myAttr', 'myOtherAttr']\n   * @example <caption>drops all attributes</caption>\n   * attributeKeys: []\n   */\n  attributeKeys?: string[];\n  /**\n   * Alters the metric stream:\n   * Alters the {@link Aggregation} of the metric stream.\n   *\n   * @example <caption>changes the aggregation of the selected instrument(s) to ExplicitBucketHistogramAggregation</caption>\n   * aggregation: new ExplicitBucketHistogramAggregation([1, 10, 100])\n   * @example <caption>changes the aggregation of the selected instrument(s) to LastValueAggregation</caption>\n   * aggregation: new LastValueAggregation()\n   */\n  aggregation?: Aggregation;\n  /**\n   * Instrument selection criteria:\n   * The original type of the Instrument(s).\n   *\n   * @example <caption>selects all counters</caption>\n   * instrumentType: InstrumentType.COUNTER\n   * @example <caption>selects all histograms</caption>\n   * instrumentType: InstrumentType.HISTOGRAM\n   */\n  instrumentType?: InstrumentType;\n  /**\n   * Instrument selection criteria:\n   * Original name of the Instrument(s) with wildcard support.\n   *\n   * @example <caption>select all instruments</caption>\n   * instrumentName: '*'\n   * @example <caption>select all instruments starting with 'my.instruments.'</caption>\n   * instrumentName: 'my.instruments.*'\n   * @example <caption>select all instruments named 'my.instrument.requests' exactly</caption>\n   * instrumentName: 'my.instruments.requests'\n   */\n  instrumentName?: string;\n  /**\n   * Instrument selection criteria:\n   * The unit of the Instrument(s).\n   *\n   * @example <caption>select all instruments with unit 'ms'</caption>\n   * instrumentUnit: 'ms'\n   */\n  instrumentUnit?: string;\n  /**\n   * Instrument selection criteria:\n   * The name of the Meter. No wildcard support, name must match the meter exactly.\n   *\n   * @example <caption>select all meters named 'example.component.app' exactly</caption>\n   * meterName: 'example.component.app'\n   */\n  meterName?: string;\n  /**\n   * Instrument selection criteria:\n   * The version of the Meter. No wildcard support, version must match exactly.\n   *\n   * @example\n   * meterVersion: '1.0.1'\n   */\n  meterVersion?: string;\n  /**\n   * Instrument selection criteria:\n   * The schema URL of the Meter. No wildcard support, schema URL must match exactly.\n   *\n   * @example <caption>Select all meters with schema URL 'https://example.com/schema' exactly.</caption>\n   * meterSchemaUrl: 'https://example.com/schema'\n   */\n  meterSchemaUrl?: string;\n};\n\nfunction isSelectorNotProvided(options: ViewOptions): boolean {\n  return (\n    options.instrumentName == null &&\n    options.instrumentType == null &&\n    options.instrumentUnit == null &&\n    options.meterName == null &&\n    options.meterVersion == null &&\n    options.meterSchemaUrl == null\n  );\n}\n\n/**\n * Can be passed to a {@link MeterProvider} to select instruments and alter their metric stream.\n */\nexport class View {\n  readonly name?: string;\n  readonly description?: string;\n  readonly aggregation: Aggregation;\n  readonly attributesProcessor: AttributesProcessor;\n  readonly instrumentSelector: InstrumentSelector;\n  readonly meterSelector: MeterSelector;\n\n  /**\n   * Create a new {@link View} instance.\n   *\n   * Parameters can be categorized as two types:\n   *  Instrument selection criteria: Used to describe the instrument(s) this view will be applied to.\n   *  Will be treated as additive (the Instrument has to meet all the provided criteria to be selected).\n   *\n   *  Metric stream altering: Alter the metric stream of instruments selected by instrument selection criteria.\n   *\n   * @param viewOptions {@link ViewOptions} for altering the metric stream and instrument selection.\n   * @param viewOptions.name\n   * Alters the metric stream:\n   *  This will be used as the name of the metrics stream.\n   *  If not provided, the original Instrument name will be used.\n   * @param viewOptions.description\n   * Alters the metric stream:\n   *  This will be used as the description of the metrics stream.\n   *  If not provided, the original Instrument description will be used by default.\n   * @param viewOptions.attributeKeys\n   * Alters the metric stream:\n   *  If provided, the attributes that are not in the list will be ignored.\n   *  If not provided, all attribute keys will be used by default.\n   * @param viewOptions.aggregation\n   * Alters the metric stream:\n   *  Alters the {@link Aggregation} of the metric stream.\n   * @param viewOptions.instrumentName\n   * Instrument selection criteria:\n   *  Original name of the Instrument(s) with wildcard support.\n   * @param viewOptions.instrumentType\n   * Instrument selection criteria:\n   *  The original type of the Instrument(s).\n   * @param viewOptions.instrumentUnit\n   * Instrument selection criteria:\n   *  The unit of the Instrument(s).\n   * @param viewOptions.meterName\n   * Instrument selection criteria:\n   *  The name of the Meter. No wildcard support, name must match the meter exactly.\n   * @param viewOptions.meterVersion\n   * Instrument selection criteria:\n   *  The version of the Meter. No wildcard support, version must match exactly.\n   * @param viewOptions.meterSchemaUrl\n   * Instrument selection criteria:\n   *  The schema URL of the Meter. No wildcard support, schema URL must match exactly.\n   *\n   * @example\n   * // Create a view that changes the Instrument 'my.instrument' to use to an\n   * // ExplicitBucketHistogramAggregation with the boundaries [20, 30, 40]\n   * new View({\n   *   aggregation: new ExplicitBucketHistogramAggregation([20, 30, 40]),\n   *   instrumentName: 'my.instrument'\n   * })\n   */\n  constructor(viewOptions: ViewOptions) {\n    // If no criteria is provided, the SDK SHOULD treat it as an error.\n    // It is recommended that the SDK implementations fail fast.\n    if (isSelectorNotProvided(viewOptions)) {\n      throw new Error('Cannot create view with no selector arguments supplied');\n    }\n\n    // the SDK SHOULD NOT allow Views with a specified name to be declared with instrument selectors that\n    // may select more than one instrument (e.g. wild card instrument name) in the same Meter.\n    if (\n      viewOptions.name != null &&\n      (viewOptions?.instrumentName == null ||\n        PatternPredicate.hasWildcard(viewOptions.instrumentName))\n    ) {\n      throw new Error(\n        'Views with a specified name must be declared with an instrument selector that selects at most one instrument per meter.'\n      );\n    }\n\n    // Create AttributesProcessor if attributeKeys are defined set.\n    if (viewOptions.attributeKeys != null) {\n      this.attributesProcessor = new FilteringAttributesProcessor(\n        viewOptions.attributeKeys\n      );\n    } else {\n      this.attributesProcessor = AttributesProcessor.Noop();\n    }\n\n    this.name = viewOptions.name;\n    this.description = viewOptions.description;\n    this.aggregation = viewOptions.aggregation ?? Aggregation.Default();\n    this.instrumentSelector = new InstrumentSelector({\n      name: viewOptions.instrumentName,\n      type: viewOptions.instrumentType,\n      unit: viewOptions.instrumentUnit,\n    });\n    this.meterSelector = new MeterSelector({\n      name: viewOptions.meterName,\n      version: viewOptions.meterVersion,\n      schemaUrl: viewOptions.meterSchemaUrl,\n    });\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricDescriptor } from './export/MetricData';\n\nexport {\n  Sum,\n  LastValue,\n  Histogram,\n  ExponentialHistogram,\n} from './aggregator/types';\n\nexport {\n  AggregationSelector,\n  AggregationTemporalitySelector,\n} from './export/AggregationSelector';\n\nexport { AggregationTemporality } from './export/AggregationTemporality';\n\nexport {\n  DataPoint,\n  DataPointType,\n  SumMetricData,\n  GaugeMetricData,\n  HistogramMetricData,\n  ExponentialHistogramMetricData,\n  ResourceMetrics,\n  ScopeMetrics,\n  MetricData,\n  MetricDescriptor,\n  CollectionResult,\n} from './export/MetricData';\n\nexport { PushMetricExporter } from './export/MetricExporter';\n\nexport { MetricReader, MetricReaderOptions } from './export/MetricReader';\n\nexport {\n  PeriodicExportingMetricReader,\n  PeriodicExportingMetricReaderOptions,\n} from './export/PeriodicExportingMetricReader';\n\nexport { InMemoryMetricExporter } from './export/InMemoryMetricExporter';\n\nexport { ConsoleMetricExporter } from './export/ConsoleMetricExporter';\n\nexport { MetricCollectOptions, MetricProducer } from './export/MetricProducer';\n\nexport { InstrumentType } from './InstrumentDescriptor';\n/**\n * @deprecated Use {@link MetricDescriptor} instead.\n */\nexport type InstrumentDescriptor = MetricDescriptor;\n\nexport { MeterProvider, MeterProviderOptions } from './MeterProvider';\n\nexport {\n  DefaultAggregation,\n  ExplicitBucketHistogramAggregation,\n  ExponentialHistogramAggregation,\n  DropAggregation,\n  HistogramAggregation,\n  LastValueAggregation,\n  SumAggregation,\n  Aggregation,\n} from './view/Aggregation';\n\nexport { View, ViewOptions } from './view/View';\n\nexport { TimeoutError } from './utils';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContextManager, Context } from '@opentelemetry/api';\nimport { EventEmitter } from 'events';\n\ntype Func<T> = (...args: unknown[]) => T;\n\n/**\n * Store a map for each event of all original listeners and their \"patched\"\n * version. So when a listener is removed by the user, the corresponding\n * patched function will be also removed.\n */\ninterface PatchMap {\n  [name: string]: WeakMap<Func<void>, Func<void>>;\n}\n\nconst ADD_LISTENER_METHODS = [\n  'addListener' as const,\n  'on' as const,\n  'once' as const,\n  'prependListener' as const,\n  'prependOnceListener' as const,\n];\n\nexport abstract class AbstractAsyncHooksContextManager\n  implements ContextManager\n{\n  abstract active(): Context;\n\n  abstract with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F>;\n\n  abstract enable(): this;\n\n  abstract disable(): this;\n\n  /**\n   * Binds a the certain context or the active one to the target function and then returns the target\n   * @param context A context (span) to be bind to target\n   * @param target a function or event emitter. When target or one of its callbacks is called,\n   *  the provided context will be used as the active context for the duration of the call.\n   */\n  bind<T>(context: Context, target: T): T {\n    if (target instanceof EventEmitter) {\n      return this._bindEventEmitter(context, target);\n    }\n\n    if (typeof target === 'function') {\n      return this._bindFunction(context, target);\n    }\n    return target;\n  }\n\n  private _bindFunction<T extends Function>(context: Context, target: T): T {\n    const manager = this;\n    const contextWrapper = function (this: never, ...args: unknown[]) {\n      return manager.with(context, () => target.apply(this, args));\n    };\n    Object.defineProperty(contextWrapper, 'length', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: target.length,\n    });\n    /**\n     * It isn't possible to tell Typescript that contextWrapper is the same as T\n     * so we forced to cast as any here.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return contextWrapper as any;\n  }\n\n  /**\n   * By default, EventEmitter call their callback with their context, which we do\n   * not want, instead we will bind a specific context to all callbacks that\n   * go through it.\n   * @param context the context we want to bind\n   * @param ee EventEmitter an instance of EventEmitter to patch\n   */\n  private _bindEventEmitter<T extends EventEmitter>(\n    context: Context,\n    ee: T\n  ): T {\n    const map = this._getPatchMap(ee);\n    if (map !== undefined) return ee;\n    this._createPatchMap(ee);\n\n    // patch methods that add a listener to propagate context\n    ADD_LISTENER_METHODS.forEach(methodName => {\n      if (ee[methodName] === undefined) return;\n      ee[methodName] = this._patchAddListener(ee, ee[methodName], context);\n    });\n    // patch methods that remove a listener\n    if (typeof ee.removeListener === 'function') {\n      ee.removeListener = this._patchRemoveListener(ee, ee.removeListener);\n    }\n    if (typeof ee.off === 'function') {\n      ee.off = this._patchRemoveListener(ee, ee.off);\n    }\n    // patch method that remove all listeners\n    if (typeof ee.removeAllListeners === 'function') {\n      ee.removeAllListeners = this._patchRemoveAllListeners(\n        ee,\n        ee.removeAllListeners\n      );\n    }\n    return ee;\n  }\n\n  /**\n   * Patch methods that remove a given listener so that we match the \"patched\"\n   * version of that listener (the one that propagate context).\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   */\n  private _patchRemoveListener(ee: EventEmitter, original: Function) {\n    const contextManager = this;\n    return function (this: never, event: string, listener: Func<void>) {\n      const events = contextManager._getPatchMap(ee)?.[event];\n      if (events === undefined) {\n        return original.call(this, event, listener);\n      }\n      const patchedListener = events.get(listener);\n      return original.call(this, event, patchedListener || listener);\n    };\n  }\n\n  /**\n   * Patch methods that remove all listeners so we remove our\n   * internal references for a given event.\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   */\n  private _patchRemoveAllListeners(ee: EventEmitter, original: Function) {\n    const contextManager = this;\n    return function (this: never, event: string) {\n      const map = contextManager._getPatchMap(ee);\n      if (map !== undefined) {\n        if (arguments.length === 0) {\n          contextManager._createPatchMap(ee);\n        } else if (map[event] !== undefined) {\n          delete map[event];\n        }\n      }\n      return original.apply(this, arguments);\n    };\n  }\n\n  /**\n   * Patch methods on an event emitter instance that can add listeners so we\n   * can force them to propagate a given context.\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   * @param [context] context to propagate when calling listeners\n   */\n  private _patchAddListener(\n    ee: EventEmitter,\n    original: Function,\n    context: Context\n  ) {\n    const contextManager = this;\n    return function (this: never, event: string, listener: Func<void>) {\n      /**\n       * This check is required to prevent double-wrapping the listener.\n       * The implementation for ee.once wraps the listener and calls ee.on.\n       * Without this check, we would wrap that wrapped listener.\n       * This causes an issue because ee.removeListener depends on the onceWrapper\n       * to properly remove the listener. If we wrap their wrapper, we break\n       * that detection.\n       */\n      if (contextManager._wrapped) {\n        return original.call(this, event, listener);\n      }\n      let map = contextManager._getPatchMap(ee);\n      if (map === undefined) {\n        map = contextManager._createPatchMap(ee);\n      }\n      let listeners = map[event];\n      if (listeners === undefined) {\n        listeners = new WeakMap();\n        map[event] = listeners;\n      }\n      const patchedListener = contextManager.bind(context, listener);\n      // store a weak reference of the user listener to ours\n      listeners.set(listener, patchedListener);\n\n      /**\n       * See comment at the start of this function for the explanation of this property.\n       */\n      contextManager._wrapped = true;\n      try {\n        return original.call(this, event, patchedListener);\n      } finally {\n        contextManager._wrapped = false;\n      }\n    };\n  }\n\n  private _createPatchMap(ee: EventEmitter): PatchMap {\n    const map = Object.create(null);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (ee as any)[this._kOtListeners] = map;\n    return map;\n  }\n  private _getPatchMap(ee: EventEmitter): PatchMap | undefined {\n    return (ee as never)[this._kOtListeners];\n  }\n\n  private readonly _kOtListeners = Symbol('OtListeners');\n  private _wrapped = false;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, ROOT_CONTEXT } from '@opentelemetry/api';\nimport { AsyncLocalStorage } from 'async_hooks';\nimport { AbstractAsyncHooksContextManager } from './AbstractAsyncHooksContextManager';\n\nexport class AsyncLocalStorageContextManager extends AbstractAsyncHooksContextManager {\n  private _asyncLocalStorage: AsyncLocalStorage<Context>;\n\n  constructor() {\n    super();\n    this._asyncLocalStorage = new AsyncLocalStorage();\n  }\n\n  active(): Context {\n    return this._asyncLocalStorage.getStore() ?? ROOT_CONTEXT;\n  }\n\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    const cb = thisArg == null ? fn : fn.bind(thisArg);\n    return this._asyncLocalStorage.run(context, cb as never, ...args);\n  }\n\n  enable(): this {\n    return this;\n  }\n\n  disable(): this {\n    this._asyncLocalStorage.disable();\n    return this;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { IAnyValue, IKeyValue } from './types';\nimport { Attributes } from '@opentelemetry/api';\n\nexport function toAttributes(attributes: Attributes): IKeyValue[] {\n  return Object.keys(attributes).map(key => toKeyValue(key, attributes[key]));\n}\n\nexport function toKeyValue(key: string, value: unknown): IKeyValue {\n  return {\n    key: key,\n    value: toAnyValue(value),\n  };\n}\n\nexport function toAnyValue(value: unknown): IAnyValue {\n  const t = typeof value;\n  if (t === 'string') return { stringValue: value as string };\n  if (t === 'number') {\n    if (!Number.isInteger(value)) return { doubleValue: value as number };\n    return { intValue: value as number };\n  }\n  if (t === 'boolean') return { boolValue: value as boolean };\n  if (value instanceof Uint8Array) return { bytesValue: value };\n  if (Array.isArray(value))\n    return { arrayValue: { values: value.map(toAnyValue) } };\n  if (t === 'object' && value != null)\n    return {\n      kvlistValue: {\n        values: Object.entries(value as object).map(([k, v]) =>\n          toKeyValue(k, v)\n        ),\n      },\n    };\n\n  return {};\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { Link } from '@opentelemetry/api';\nimport type { ReadableSpan, TimedEvent } from '@opentelemetry/sdk-trace-base';\nimport type { Encoder } from '../common';\nimport { toAttributes } from '../common/internal';\nimport { EStatusCode, IEvent, ILink, ISpan } from './types';\n\nexport function sdkSpanToOtlpSpan(span: ReadableSpan, encoder: Encoder): ISpan {\n  const ctx = span.spanContext();\n  const status = span.status;\n  return {\n    traceId: encoder.encodeSpanContext(ctx.traceId),\n    spanId: encoder.encodeSpanContext(ctx.spanId),\n    parentSpanId: encoder.encodeOptionalSpanContext(span.parentSpanId),\n    traceState: ctx.traceState?.serialize(),\n    name: span.name,\n    // Span kind is offset by 1 because the API does not define a value for unset\n    kind: span.kind == null ? 0 : span.kind + 1,\n    startTimeUnixNano: encoder.encodeHrTime(span.startTime),\n    endTimeUnixNano: encoder.encodeHrTime(span.endTime),\n    attributes: toAttributes(span.attributes),\n    droppedAttributesCount: span.droppedAttributesCount,\n    events: span.events.map(event => toOtlpSpanEvent(event, encoder)),\n    droppedEventsCount: span.droppedEventsCount,\n    status: {\n      // API and proto enums share the same values\n      code: status.code as unknown as EStatusCode,\n      message: status.message,\n    },\n    links: span.links.map(link => toOtlpLink(link, encoder)),\n    droppedLinksCount: span.droppedLinksCount,\n  };\n}\n\nexport function toOtlpLink(link: Link, encoder: Encoder): ILink {\n  return {\n    attributes: link.attributes ? toAttributes(link.attributes) : [],\n    spanId: encoder.encodeSpanContext(link.context.spanId),\n    traceId: encoder.encodeSpanContext(link.context.traceId),\n    traceState: link.context.traceState?.serialize(),\n    droppedAttributesCount: link.droppedAttributesCount || 0,\n  };\n}\n\nexport function toOtlpSpanEvent(\n  timedEvent: TimedEvent,\n  encoder: Encoder\n): IEvent {\n  return {\n    attributes: timedEvent.attributes\n      ? toAttributes(timedEvent.attributes)\n      : [],\n    name: timedEvent.name,\n    timeUnixNano: encoder.encodeHrTime(timedEvent.time),\n    droppedAttributesCount: timedEvent.droppedAttributesCount || 0,\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { OtlpEncodingOptions, Fixed64, LongBits } from './types';\nimport { HrTime } from '@opentelemetry/api';\nimport { hexToBase64, hrTimeToNanoseconds } from '@opentelemetry/core';\n\nconst NANOSECONDS = BigInt(1_000_000_000);\n\nexport function hrTimeToNanos(hrTime: HrTime): bigint {\n  return BigInt(hrTime[0]) * NANOSECONDS + BigInt(hrTime[1]);\n}\n\nexport function toLongBits(value: bigint): LongBits {\n  const low = Number(BigInt.asUintN(32, value));\n  const high = Number(BigInt.asUintN(32, value >> BigInt(32)));\n  return { low, high };\n}\n\nexport function encodeAsLongBits(hrTime: HrTime): LongBits {\n  const nanos = hrTimeToNanos(hrTime);\n  return toLongBits(nanos);\n}\n\nexport function encodeAsString(hrTime: HrTime): string {\n  const nanos = hrTimeToNanos(hrTime);\n  return nanos.toString();\n}\n\nconst encodeTimestamp =\n  typeof BigInt !== 'undefined' ? encodeAsString : hrTimeToNanoseconds;\n\nexport type HrTimeEncodeFunction = (hrTime: HrTime) => Fixed64;\nexport type SpanContextEncodeFunction = (spanContext: string) => string;\nexport type OptionalSpanContextEncodeFunction = (\n  spanContext: string | undefined\n) => string | undefined;\n\nexport interface Encoder {\n  encodeHrTime: HrTimeEncodeFunction;\n  encodeSpanContext: SpanContextEncodeFunction;\n  encodeOptionalSpanContext: OptionalSpanContextEncodeFunction;\n}\n\nfunction identity<T>(value: T): T {\n  return value;\n}\n\nfunction optionalHexToBase64(str: string | undefined): string | undefined {\n  if (str === undefined) return undefined;\n  return hexToBase64(str);\n}\n\nconst DEFAULT_ENCODER: Encoder = {\n  encodeHrTime: encodeAsLongBits,\n  encodeSpanContext: hexToBase64,\n  encodeOptionalSpanContext: optionalHexToBase64,\n};\n\nexport function getOtlpEncoder(options?: OtlpEncodingOptions): Encoder {\n  if (options === undefined) {\n    return DEFAULT_ENCODER;\n  }\n\n  const useLongBits = options.useLongBits ?? true;\n  const useHex = options.useHex ?? false;\n  return {\n    encodeHrTime: useLongBits ? encodeAsLongBits : encodeTimestamp,\n    encodeSpanContext: useHex ? identity : hexToBase64,\n    encodeOptionalSpanContext: useHex ? identity : optionalHexToBase64,\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { IResource } from '@opentelemetry/resources';\nimport type { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport type { OtlpEncodingOptions } from '../common/types';\nimport { toAttributes } from '../common/internal';\nimport { sdkSpanToOtlpSpan } from './internal';\nimport {\n  IExportTraceServiceRequest,\n  IResourceSpans,\n  IScopeSpans,\n} from './types';\nimport { Encoder, getOtlpEncoder } from '../common';\n\nexport function createExportTraceServiceRequest(\n  spans: ReadableSpan[],\n  options?: OtlpEncodingOptions\n): IExportTraceServiceRequest {\n  const encoder = getOtlpEncoder(options);\n  return {\n    resourceSpans: spanRecordsToResourceSpans(spans, encoder),\n  };\n}\n\nfunction createResourceMap(readableSpans: ReadableSpan[]) {\n  const resourceMap: Map<IResource, Map<string, ReadableSpan[]>> = new Map();\n  for (const record of readableSpans) {\n    let ilmMap = resourceMap.get(record.resource);\n\n    if (!ilmMap) {\n      ilmMap = new Map();\n      resourceMap.set(record.resource, ilmMap);\n    }\n\n    // TODO this is duplicated in basic tracer. Consolidate on a common helper in core\n    const instrumentationLibraryKey = `${record.instrumentationLibrary.name}@${\n      record.instrumentationLibrary.version || ''\n    }:${record.instrumentationLibrary.schemaUrl || ''}`;\n    let records = ilmMap.get(instrumentationLibraryKey);\n\n    if (!records) {\n      records = [];\n      ilmMap.set(instrumentationLibraryKey, records);\n    }\n\n    records.push(record);\n  }\n\n  return resourceMap;\n}\n\nfunction spanRecordsToResourceSpans(\n  readableSpans: ReadableSpan[],\n  encoder: Encoder\n): IResourceSpans[] {\n  const resourceMap = createResourceMap(readableSpans);\n  const out: IResourceSpans[] = [];\n\n  const entryIterator = resourceMap.entries();\n  let entry = entryIterator.next();\n  while (!entry.done) {\n    const [resource, ilmMap] = entry.value;\n    const scopeResourceSpans: IScopeSpans[] = [];\n    const ilmIterator = ilmMap.values();\n    let ilmEntry = ilmIterator.next();\n    while (!ilmEntry.done) {\n      const scopeSpans = ilmEntry.value;\n      if (scopeSpans.length > 0) {\n        const { name, version, schemaUrl } =\n          scopeSpans[0].instrumentationLibrary;\n        const spans = scopeSpans.map(readableSpan =>\n          sdkSpanToOtlpSpan(readableSpan, encoder)\n        );\n\n        scopeResourceSpans.push({\n          scope: { name, version },\n          spans: spans,\n          schemaUrl: schemaUrl,\n        });\n      }\n      ilmEntry = ilmIterator.next();\n    }\n    // TODO SDK types don't provide resource schema URL at this time\n    const transformedSpans: IResourceSpans = {\n      resource: {\n        attributes: toAttributes(resource.attributes),\n        droppedAttributesCount: 0,\n      },\n      scopeSpans: scopeResourceSpans,\n      schemaUrl: undefined,\n    };\n\n    out.push(transformedSpans);\n    entry = entryIterator.next();\n  }\n\n  return out;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\n\nconst DEFAULT_TRACE_TIMEOUT = 10000;\nexport const DEFAULT_EXPORT_MAX_ATTEMPTS = 5;\nexport const DEFAULT_EXPORT_INITIAL_BACKOFF = 1000;\nexport const DEFAULT_EXPORT_MAX_BACKOFF = 5000;\nexport const DEFAULT_EXPORT_BACKOFF_MULTIPLIER = 1.5;\n\n/**\n * Parses headers from config leaving only those that have defined values\n * @param partialHeaders\n */\nexport function parseHeaders(\n  partialHeaders: Partial<Record<string, unknown>> = {}\n): Record<string, string> {\n  const headers: Record<string, string> = {};\n  Object.entries(partialHeaders).forEach(([key, value]) => {\n    if (typeof value !== 'undefined') {\n      headers[key] = String(value);\n    } else {\n      diag.warn(`Header \"${key}\" has wrong value and will be ignored`);\n    }\n  });\n  return headers;\n}\n\n/**\n * Adds path (version + signal) to a no per-signal endpoint\n * @param url\n * @param path\n * @returns url + path\n */\nexport function appendResourcePathToUrl(url: string, path: string): string {\n  if (!url.endsWith('/')) {\n    url = url + '/';\n  }\n  return url + path;\n}\n\n/**\n * Adds root path to signal specific endpoint when endpoint contains no path part and no root path\n * @param url\n * @returns url\n */\nexport function appendRootPathToUrlIfNeeded(url: string): string {\n  try {\n    const parsedUrl = new URL(url);\n    if (parsedUrl.pathname === '') {\n      parsedUrl.pathname = parsedUrl.pathname + '/';\n    }\n    return parsedUrl.toString();\n  } catch {\n    diag.warn(`Could not parse export URL: '${url}'`);\n    return url;\n  }\n}\n\n/**\n * Configure exporter trace timeout value from passed in value or environment variables\n * @param timeoutMillis\n * @returns timeout value in milliseconds\n */\nexport function configureExporterTimeout(\n  timeoutMillis: number | undefined\n): number {\n  if (typeof timeoutMillis === 'number') {\n    if (timeoutMillis <= 0) {\n      // OTLP exporter configured timeout - using default value of 10000ms\n      return invalidTimeout(timeoutMillis, DEFAULT_TRACE_TIMEOUT);\n    }\n    return timeoutMillis;\n  } else {\n    return getExporterTimeoutFromEnv();\n  }\n}\n\nfunction getExporterTimeoutFromEnv(): number {\n  const definedTimeout = Number(\n    getEnv().OTEL_EXPORTER_OTLP_TRACES_TIMEOUT ??\n      getEnv().OTEL_EXPORTER_OTLP_TIMEOUT\n  );\n\n  if (definedTimeout <= 0) {\n    // OTLP exporter configured timeout - using default value of 10000ms\n    return invalidTimeout(definedTimeout, DEFAULT_TRACE_TIMEOUT);\n  } else {\n    return definedTimeout;\n  }\n}\n\n// OTLP exporter configured timeout - using default value of 10000ms\nexport function invalidTimeout(\n  timeout: number,\n  defaultTimeout: number\n): number {\n  diag.warn('Timeout must be greater than 0', timeout);\n\n  return defaultTimeout;\n}\n\nexport function isExportRetryable(statusCode: number): boolean {\n  const retryCodes = [429, 502, 503, 504];\n\n  return retryCodes.includes(statusCode);\n}\n\nexport function parseRetryAfterToMills(retryAfter?: string | null): number {\n  if (retryAfter == null) {\n    return -1;\n  }\n  const seconds = Number.parseInt(retryAfter, 10);\n  if (Number.isInteger(seconds)) {\n    return seconds > 0 ? seconds * 1000 : -1;\n  }\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After#directives\n  const delay = new Date(retryAfter).getTime() - Date.now();\n\n  if (delay >= 0) {\n    return delay;\n  }\n  return 0;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport {\n  ExportResult,\n  ExportResultCode,\n  BindOnceFuture,\n} from '@opentelemetry/core';\nimport {\n  OTLPExporterError,\n  OTLPExporterConfigBase,\n  ExportServiceError,\n} from './types';\nimport { configureExporterTimeout } from './util';\n\n/**\n * Collector Exporter abstract base class\n */\nexport abstract class OTLPExporterBase<\n  T extends OTLPExporterConfigBase,\n  ExportItem,\n  ServiceRequest,\n> {\n  public readonly url: string;\n  public readonly hostname: string | undefined;\n  public readonly timeoutMillis: number;\n  protected _concurrencyLimit: number;\n  protected _sendingPromises: Promise<unknown>[] = [];\n  protected _shutdownOnce: BindOnceFuture<void>;\n\n  /**\n   * @param config\n   */\n  constructor(config: T = {} as T) {\n    this.url = this.getDefaultUrl(config);\n    if (typeof config.hostname === 'string') {\n      this.hostname = config.hostname;\n    }\n\n    this.shutdown = this.shutdown.bind(this);\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n\n    this._concurrencyLimit =\n      typeof config.concurrencyLimit === 'number'\n        ? config.concurrencyLimit\n        : 30;\n\n    this.timeoutMillis = configureExporterTimeout(config.timeoutMillis);\n\n    // platform dependent\n    this.onInit(config);\n  }\n\n  /**\n   * Export items.\n   * @param items\n   * @param resultCallback\n   */\n  export(\n    items: ExportItem[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Exporter has been shutdown'),\n      });\n      return;\n    }\n\n    if (this._sendingPromises.length >= this._concurrencyLimit) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Concurrent export limit reached'),\n      });\n      return;\n    }\n\n    this._export(items)\n      .then(() => {\n        resultCallback({ code: ExportResultCode.SUCCESS });\n      })\n      .catch((error: ExportServiceError) => {\n        resultCallback({ code: ExportResultCode.FAILED, error });\n      });\n  }\n\n  private _export(items: ExportItem[]): Promise<unknown> {\n    return new Promise<void>((resolve, reject) => {\n      try {\n        diag.debug('items to be sent', items);\n        this.send(items, resolve, reject);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Shutdown the exporter.\n   */\n  shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  /**\n   * Exports any pending spans in the exporter\n   */\n  forceFlush(): Promise<void> {\n    return Promise.all(this._sendingPromises).then(() => {\n      /** ignore resolved values */\n    });\n  }\n\n  /**\n   * Called by _shutdownOnce with BindOnceFuture\n   */\n  private _shutdown(): Promise<void> {\n    diag.debug('shutdown started');\n    this.onShutdown();\n    return this.forceFlush();\n  }\n\n  abstract onShutdown(): void;\n  abstract onInit(config: T): void;\n  abstract send(\n    items: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: OTLPExporterError) => void\n  ): void;\n  abstract getDefaultUrl(config: T): string;\n  abstract convert(objects: ExportItem[]): ServiceRequest;\n}\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n\n    if (start === end) { // fix for IE 10/Win8 and others' subarray returning array of size 1\n        var nativeBuffer = util.Buffer;\n        return nativeBuffer\n            ? nativeBuffer.alloc(0)\n            : new this.buf.constructor(0);\n    }\n    return this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=types.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Fixed64, IInstrumentationScope, IKeyValue } from '../common/types';\nimport { IResource } from '../resource/types';\n\n/** Properties of an ExportTraceServiceRequest. */\nexport interface IExportTraceServiceRequest {\n  /** ExportTraceServiceRequest resourceSpans */\n  resourceSpans?: IResourceSpans[];\n}\n\nexport interface IExportTraceServiceResponse {\n  /** ExportTraceServiceResponse partialSuccess */\n  partialSuccess?: IExportTracePartialSuccess;\n}\n\nexport interface IExportTracePartialSuccess {\n  /** ExportLogsServiceResponse rejectedLogRecords */\n  rejectedSpans?: number;\n\n  /** ExportLogsServiceResponse errorMessage */\n  errorMessage?: string;\n}\n\n/** Properties of a ResourceSpans. */\nexport interface IResourceSpans {\n  /** ResourceSpans resource */\n  resource?: IResource;\n\n  /** ResourceSpans scopeSpans */\n  scopeSpans: IScopeSpans[];\n\n  /** ResourceSpans schemaUrl */\n  schemaUrl?: string;\n}\n\n/** Properties of an ScopeSpans. */\nexport interface IScopeSpans {\n  /** IScopeSpans scope */\n  scope?: IInstrumentationScope;\n\n  /** IScopeSpans spans */\n  spans?: ISpan[];\n\n  /** IScopeSpans schemaUrl */\n  schemaUrl?: string | null;\n}\n\n/** Properties of a Span. */\nexport interface ISpan {\n  /** Span traceId */\n  traceId: string;\n\n  /** Span spanId */\n  spanId: string;\n\n  /** Span traceState */\n  traceState?: string | null;\n\n  /** Span parentSpanId */\n  parentSpanId?: string;\n\n  /** Span name */\n  name: string;\n\n  /** Span kind */\n  kind: ESpanKind;\n\n  /** Span startTimeUnixNano */\n  startTimeUnixNano: Fixed64;\n\n  /** Span endTimeUnixNano */\n  endTimeUnixNano: Fixed64;\n\n  /** Span attributes */\n  attributes: IKeyValue[];\n\n  /** Span droppedAttributesCount */\n  droppedAttributesCount: number;\n\n  /** Span events */\n  events: IEvent[];\n\n  /** Span droppedEventsCount */\n  droppedEventsCount: number;\n\n  /** Span links */\n  links: ILink[];\n\n  /** Span droppedLinksCount */\n  droppedLinksCount: number;\n\n  /** Span status */\n  status: IStatus;\n}\n\n/**\n * SpanKind is the type of span. Can be used to specify additional relationships between spans\n * in addition to a parent/child relationship.\n */\nexport enum ESpanKind {\n  /** Unspecified. Do NOT use as default. Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED. */\n  SPAN_KIND_UNSPECIFIED = 0,\n\n  /** Indicates that the span represents an internal operation within an application,\n   * as opposed to an operation happening at the boundaries. Default value.\n   */\n  SPAN_KIND_INTERNAL = 1,\n\n  /** Indicates that the span covers server-side handling of an RPC or other\n   * remote network request.\n   */\n  SPAN_KIND_SERVER = 2,\n\n  /** Indicates that the span describes a request to some remote service.\n   */\n  SPAN_KIND_CLIENT = 3,\n\n  /** Indicates that the span describes a producer sending a message to a broker.\n   * Unlike CLIENT and SERVER, there is often no direct critical path latency relationship\n   * between producer and consumer spans. A PRODUCER span ends when the message was accepted\n   * by the broker while the logical processing of the message might span a much longer time.\n   */\n  SPAN_KIND_PRODUCER = 4,\n\n  /** Indicates that the span describes consumer receiving a message from a broker.\n   * Like the PRODUCER kind, there is often no direct critical path latency relationship\n   * between producer and consumer spans.\n   */\n  SPAN_KIND_CONSUMER = 5,\n}\n\n/** Properties of a Status. */\nexport interface IStatus {\n  /** Status message */\n  message?: string;\n\n  /** Status code */\n  code: EStatusCode;\n}\n\n/** StatusCode enum. */\nexport const enum EStatusCode {\n  /** The default status. */\n  STATUS_CODE_UNSET = 0,\n  /** The Span has been evaluated by an Application developers or Operator to have completed successfully. */\n  STATUS_CODE_OK = 1,\n  /** The Span contains an error. */\n  STATUS_CODE_ERROR = 2,\n}\n\n/** Properties of an Event. */\nexport interface IEvent {\n  /** Event timeUnixNano */\n  timeUnixNano: Fixed64;\n\n  /** Event name */\n  name: string;\n\n  /** Event attributes */\n  attributes: IKeyValue[];\n\n  /** Event droppedAttributesCount */\n  droppedAttributesCount: number;\n}\n\n/** Properties of a Link. */\nexport interface ILink {\n  /** Link traceId */\n  traceId: string;\n\n  /** Link spanId */\n  spanId: string;\n\n  /** Link traceState */\n  traceState?: string;\n\n  /** Link attributes */\n  attributes: IKeyValue[];\n\n  /** Link droppedAttributesCount */\n  droppedAttributesCount: number;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { OtlpEncodingOptions } from '../common/types';\nimport { ValueType } from '@opentelemetry/api';\nimport {\n  AggregationTemporality,\n  DataPoint,\n  DataPointType,\n  ExponentialHistogram,\n  Histogram,\n  MetricData,\n  ResourceMetrics,\n  ScopeMetrics,\n} from '@opentelemetry/sdk-metrics';\nimport { toAttributes } from '../common/internal';\nimport {\n  EAggregationTemporality,\n  IExponentialHistogramDataPoint,\n  IHistogramDataPoint,\n  IMetric,\n  INumberDataPoint,\n  IResourceMetrics,\n  IScopeMetrics,\n} from './types';\nimport { Encoder, getOtlpEncoder } from '../common';\n\nexport function toResourceMetrics(\n  resourceMetrics: ResourceMetrics,\n  options?: OtlpEncodingOptions\n): IResourceMetrics {\n  const encoder = getOtlpEncoder(options);\n  return {\n    resource: {\n      attributes: toAttributes(resourceMetrics.resource.attributes),\n      droppedAttributesCount: 0,\n    },\n    schemaUrl: undefined,\n    scopeMetrics: toScopeMetrics(resourceMetrics.scopeMetrics, encoder),\n  };\n}\n\nexport function toScopeMetrics(\n  scopeMetrics: ScopeMetrics[],\n  encoder: Encoder\n): IScopeMetrics[] {\n  return Array.from(\n    scopeMetrics.map(metrics => ({\n      scope: {\n        name: metrics.scope.name,\n        version: metrics.scope.version,\n      },\n      metrics: metrics.metrics.map(metricData => toMetric(metricData, encoder)),\n      schemaUrl: metrics.scope.schemaUrl,\n    }))\n  );\n}\n\nexport function toMetric(metricData: MetricData, encoder: Encoder): IMetric {\n  const out: IMetric = {\n    name: metricData.descriptor.name,\n    description: metricData.descriptor.description,\n    unit: metricData.descriptor.unit,\n  };\n\n  const aggregationTemporality = toAggregationTemporality(\n    metricData.aggregationTemporality\n  );\n\n  switch (metricData.dataPointType) {\n    case DataPointType.SUM:\n      out.sum = {\n        aggregationTemporality,\n        isMonotonic: metricData.isMonotonic,\n        dataPoints: toSingularDataPoints(metricData, encoder),\n      };\n      break;\n    case DataPointType.GAUGE:\n      out.gauge = {\n        dataPoints: toSingularDataPoints(metricData, encoder),\n      };\n      break;\n    case DataPointType.HISTOGRAM:\n      out.histogram = {\n        aggregationTemporality,\n        dataPoints: toHistogramDataPoints(metricData, encoder),\n      };\n      break;\n    case DataPointType.EXPONENTIAL_HISTOGRAM:\n      out.exponentialHistogram = {\n        aggregationTemporality,\n        dataPoints: toExponentialHistogramDataPoints(metricData, encoder),\n      };\n      break;\n  }\n\n  return out;\n}\n\nfunction toSingularDataPoint(\n  dataPoint:\n    | DataPoint<number>\n    | DataPoint<Histogram>\n    | DataPoint<ExponentialHistogram>,\n  valueType: ValueType,\n  encoder: Encoder\n) {\n  const out: INumberDataPoint = {\n    attributes: toAttributes(dataPoint.attributes),\n    startTimeUnixNano: encoder.encodeHrTime(dataPoint.startTime),\n    timeUnixNano: encoder.encodeHrTime(dataPoint.endTime),\n  };\n\n  switch (valueType) {\n    case ValueType.INT:\n      out.asInt = dataPoint.value as number;\n      break;\n    case ValueType.DOUBLE:\n      out.asDouble = dataPoint.value as number;\n      break;\n  }\n\n  return out;\n}\n\nfunction toSingularDataPoints(\n  metricData: MetricData,\n  encoder: Encoder\n): INumberDataPoint[] {\n  return metricData.dataPoints.map(dataPoint => {\n    return toSingularDataPoint(\n      dataPoint,\n      metricData.descriptor.valueType,\n      encoder\n    );\n  });\n}\n\nfunction toHistogramDataPoints(\n  metricData: MetricData,\n  encoder: Encoder\n): IHistogramDataPoint[] {\n  return metricData.dataPoints.map(dataPoint => {\n    const histogram = dataPoint.value as Histogram;\n    return {\n      attributes: toAttributes(dataPoint.attributes),\n      bucketCounts: histogram.buckets.counts,\n      explicitBounds: histogram.buckets.boundaries,\n      count: histogram.count,\n      sum: histogram.sum,\n      min: histogram.min,\n      max: histogram.max,\n      startTimeUnixNano: encoder.encodeHrTime(dataPoint.startTime),\n      timeUnixNano: encoder.encodeHrTime(dataPoint.endTime),\n    };\n  });\n}\n\nfunction toExponentialHistogramDataPoints(\n  metricData: MetricData,\n  encoder: Encoder\n): IExponentialHistogramDataPoint[] {\n  return metricData.dataPoints.map(dataPoint => {\n    const histogram = dataPoint.value as ExponentialHistogram;\n    return {\n      attributes: toAttributes(dataPoint.attributes),\n      count: histogram.count,\n      min: histogram.min,\n      max: histogram.max,\n      sum: histogram.sum,\n      positive: {\n        offset: histogram.positive.offset,\n        bucketCounts: histogram.positive.bucketCounts,\n      },\n      negative: {\n        offset: histogram.negative.offset,\n        bucketCounts: histogram.negative.bucketCounts,\n      },\n      scale: histogram.scale,\n      zeroCount: histogram.zeroCount,\n      startTimeUnixNano: encoder.encodeHrTime(dataPoint.startTime),\n      timeUnixNano: encoder.encodeHrTime(dataPoint.endTime),\n    };\n  });\n}\n\nfunction toAggregationTemporality(\n  temporality: AggregationTemporality\n): EAggregationTemporality {\n  switch (temporality) {\n    case AggregationTemporality.DELTA:\n      return EAggregationTemporality.AGGREGATION_TEMPORALITY_DELTA;\n    case AggregationTemporality.CUMULATIVE:\n      return EAggregationTemporality.AGGREGATION_TEMPORALITY_CUMULATIVE;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { ResourceMetrics } from '@opentelemetry/sdk-metrics';\nimport type { IExportMetricsServiceRequest } from './types';\nimport type { OtlpEncodingOptions } from '../common/types';\nimport { toResourceMetrics } from './internal';\n\nexport function createExportMetricsServiceRequest(\n  resourceMetrics: ResourceMetrics[],\n  options?: OtlpEncodingOptions\n): IExportMetricsServiceRequest {\n  return {\n    resourceMetrics: resourceMetrics.map(metrics =>\n      toResourceMetrics(metrics, options)\n    ),\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ReadableLogRecord } from '@opentelemetry/sdk-logs';\nimport {\n  ESeverityNumber,\n  IExportLogsServiceRequest,\n  ILogRecord,\n  IResourceLogs,\n} from './types';\nimport { IResource } from '@opentelemetry/resources';\nimport { Encoder, getOtlpEncoder } from '../common';\nimport { toAnyValue, toAttributes, toKeyValue } from '../common/internal';\nimport { SeverityNumber } from '@opentelemetry/api-logs';\nimport { OtlpEncodingOptions, IKeyValue } from '../common/types';\nimport { LogAttributes } from '@opentelemetry/api-logs';\n\nexport function createExportLogsServiceRequest(\n  logRecords: ReadableLogRecord[],\n  options?: OtlpEncodingOptions\n): IExportLogsServiceRequest {\n  const encoder = getOtlpEncoder(options);\n  return {\n    resourceLogs: logRecordsToResourceLogs(logRecords, encoder),\n  };\n}\n\nfunction createResourceMap(\n  logRecords: ReadableLogRecord[]\n): Map<IResource, Map<string, ReadableLogRecord[]>> {\n  const resourceMap: Map<\n    IResource,\n    Map<string, ReadableLogRecord[]>\n  > = new Map();\n\n  for (const record of logRecords) {\n    const {\n      resource,\n      instrumentationScope: { name, version = '', schemaUrl = '' },\n    } = record;\n\n    let ismMap = resourceMap.get(resource);\n    if (!ismMap) {\n      ismMap = new Map();\n      resourceMap.set(resource, ismMap);\n    }\n\n    const ismKey = `${name}@${version}:${schemaUrl}`;\n    let records = ismMap.get(ismKey);\n    if (!records) {\n      records = [];\n      ismMap.set(ismKey, records);\n    }\n    records.push(record);\n  }\n  return resourceMap;\n}\n\nfunction logRecordsToResourceLogs(\n  logRecords: ReadableLogRecord[],\n  encoder: Encoder\n): IResourceLogs[] {\n  const resourceMap = createResourceMap(logRecords);\n  return Array.from(resourceMap, ([resource, ismMap]) => ({\n    resource: {\n      attributes: toAttributes(resource.attributes),\n      droppedAttributesCount: 0,\n    },\n    scopeLogs: Array.from(ismMap, ([, scopeLogs]) => {\n      const {\n        instrumentationScope: { name, version, schemaUrl },\n      } = scopeLogs[0];\n      return {\n        scope: { name, version },\n        logRecords: scopeLogs.map(log => toLogRecord(log, encoder)),\n        schemaUrl,\n      };\n    }),\n    schemaUrl: undefined,\n  }));\n}\n\nfunction toLogRecord(log: ReadableLogRecord, encoder: Encoder): ILogRecord {\n  return {\n    timeUnixNano: encoder.encodeHrTime(log.hrTime),\n    observedTimeUnixNano: encoder.encodeHrTime(log.hrTimeObserved),\n    severityNumber: toSeverityNumber(log.severityNumber),\n    severityText: log.severityText,\n    body: toAnyValue(log.body),\n    attributes: toLogAttributes(log.attributes),\n    droppedAttributesCount: log.droppedAttributesCount,\n    flags: log.spanContext?.traceFlags,\n    traceId: encoder.encodeOptionalSpanContext(log.spanContext?.traceId),\n    spanId: encoder.encodeOptionalSpanContext(log.spanContext?.spanId),\n  };\n}\n\nfunction toSeverityNumber(\n  severityNumber: SeverityNumber | undefined\n): ESeverityNumber | undefined {\n  return severityNumber as number | undefined as ESeverityNumber | undefined;\n}\n\nexport function toLogAttributes(attributes: LogAttributes): IKeyValue[] {\n  return Object.keys(attributes).map(key => toKeyValue(key, attributes[key]));\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './common/types';\nexport * from './common';\nexport * from './metrics/types';\nexport * from './resource/types';\nexport * from './trace/types';\nexport * from './logs/types';\n\nexport { createExportTraceServiceRequest } from './trace';\nexport { createExportMetricsServiceRequest } from './metrics';\nexport { createExportLogsServiceRequest } from './logs';\n","import type { ContextManager, TextMapPropagator } from \"@opentelemetry/api\";\nimport type { InstrumentationOption } from \"@opentelemetry/instrumentation\";\nimport type { ResourceDetectionConfig } from \"@opentelemetry/resources\";\nimport type {\n  Sampler,\n  SpanExporter,\n  SpanProcessor,\n} from \"@opentelemetry/sdk-trace-base\";\nimport {\n  AlwaysOffSampler,\n  AlwaysOnSampler,\n  ParentBasedSampler,\n  TraceIdRatioBasedSampler,\n  BasicTracerProvider,\n  BatchSpanProcessor,\n  RandomIdGenerator,\n} from \"@opentelemetry/sdk-trace-base\";\nimport {\n  metrics,\n  diag,\n  DiagConsoleLogger,\n  DiagLogLevel,\n} from \"@opentelemetry/api\";\nimport { logs } from \"@opentelemetry/api-logs\";\nimport { registerInstrumentations } from \"@opentelemetry/instrumentation/build/src/autoLoader\";\nimport {\n  detectResourcesSync,\n  envDetectorSync,\n  Resource,\n} from \"@opentelemetry/resources\";\nimport { LoggerProvider } from \"@opentelemetry/sdk-logs\";\nimport { MeterProvider } from \"@opentelemetry/sdk-metrics\";\nimport { SemanticResourceAttributes } from \"@opentelemetry/semantic-conventions\";\nimport {\n  parseEnvironment,\n  DEFAULT_ENVIRONMENT,\n} from \"@opentelemetry/core/build/src/utils/environment\";\nimport { AsyncLocalStorageContextManager } from \"@opentelemetry/context-async-hooks/build/src/AsyncLocalStorageContextManager\";\nimport {\n  CompositePropagator,\n  W3CBaggagePropagator,\n  baggageUtils,\n} from \"@opentelemetry/core\";\nimport { CompositeSpanProcessor } from \"./processor/composite-span-processor\";\nimport { OTLPHttpJsonTraceExporter } from \"./exporters/exporter-trace-otlp-http-fetch\";\nimport { OTLPHttpProtoTraceExporter } from \"./exporters/exporter-trace-otlp-proto-fetch\";\nimport { omitUndefinedAttributes } from \"./util/attributes\";\nimport type {\n  Configuration,\n  InstrumentationConfiguration,\n  InstrumentationOptionOrName,\n  PropagatorOrName,\n  SampleOrName,\n  SpanProcessorOrName,\n} from \"./types\";\nimport { FetchInstrumentation } from \"./instrumentations/fetch\";\nimport { W3CTraceContextPropagator } from \"./propagators/w3c-tracecontext-propagator\";\nimport { VercelRuntimePropagator } from \"./vercel-request-context/propagator\";\nimport { VercelRuntimeSpanExporter } from \"./vercel-request-context/exporter\";\n\ntype Env = ReturnType<typeof parseEnvironment>;\n\nconst logLevelMap: Record<string, DiagLogLevel> = {\n  ALL: DiagLogLevel.ALL,\n  VERBOSE: DiagLogLevel.VERBOSE,\n  DEBUG: DiagLogLevel.DEBUG,\n  INFO: DiagLogLevel.INFO,\n  WARN: DiagLogLevel.WARN,\n  ERROR: DiagLogLevel.ERROR,\n  NONE: DiagLogLevel.NONE,\n};\n\nexport class Sdk {\n  private contextManager: ContextManager | undefined;\n  private tracerProvider: BasicTracerProvider | undefined;\n  private loggerProvider: LoggerProvider | undefined;\n  private meterProvider: MeterProvider | undefined;\n  private disableInstrumentations: (() => void) | undefined;\n\n  public constructor(private configuration: Configuration = {}) {}\n\n  public start(): void {\n    const env = getEnv();\n    const configuration = this.configuration;\n    const runtime = process.env.NEXT_RUNTIME || \"nodejs\";\n\n    const disabled = Boolean(env.OTEL_SDK_DISABLED);\n\n    // Default is INFO, use environment without defaults to check\n    // if the user originally set the environment variable.\n    if (process.env.OTEL_LOG_LEVEL) {\n      diag.setLogger(new DiagConsoleLogger(), {\n        logLevel: logLevelMap[process.env.OTEL_LOG_LEVEL.toUpperCase()],\n      });\n    }\n\n    if (disabled) {\n      return;\n    }\n\n    const idGenerator = configuration.idGenerator ?? new RandomIdGenerator();\n\n    const contextManager =\n      configuration.contextManager ?? new AsyncLocalStorageContextManager();\n    contextManager.enable();\n    this.contextManager = contextManager;\n\n    const serviceName =\n      env.OTEL_SERVICE_NAME || configuration.serviceName || \"app\";\n    let resource = new Resource(\n      omitUndefinedAttributes({\n        [SemanticResourceAttributes.SERVICE_NAME]: serviceName,\n\n        // Node.\n        \"node.ci\": process.env.CI ? true : undefined,\n        \"node.env\": process.env.NODE_ENV,\n\n        // Vercel.\n        // https://vercel.com/docs/projects/environment-variables/system-environment-variables\n        // Vercel Env set as top level attribute for simplicity. One of 'production', 'preview' or 'development'.\n        env: process.env.VERCEL_ENV || process.env.NEXT_PUBLIC_VERCEL_ENV,\n        \"vercel.region\": process.env.VERCEL_REGION,\n        \"vercel.runtime\": runtime,\n        \"vercel.sha\":\n          process.env.VERCEL_GIT_COMMIT_SHA ||\n          process.env.NEXT_PUBLIC_VERCEL_GIT_COMMIT_SHA,\n        \"vercel.host\":\n          process.env.VERCEL_URL ||\n          process.env.NEXT_PUBLIC_VERCEL_URL ||\n          undefined,\n        \"vercel.branch_host\":\n          process.env.VERCEL_BRANCH_URL ||\n          process.env.NEXT_PUBLIC_VERCEL_BRANCH_URL ||\n          undefined,\n        \"vercel.deployment_id\": process.env.VERCEL_DEPLOYMENT_ID || undefined,\n        [SemanticResourceAttributes.SERVICE_VERSION]:\n          process.env.VERCEL_DEPLOYMENT_ID,\n\n        ...configuration.attributes,\n      })\n    );\n    const resourceDetectors = configuration.resourceDetectors ?? [\n      envDetectorSync,\n    ];\n    const autoDetectResources = configuration.autoDetectResources ?? true;\n    if (autoDetectResources) {\n      const internalConfig: ResourceDetectionConfig = {\n        detectors: resourceDetectors,\n      };\n      resource = resource.merge(detectResourcesSync(internalConfig));\n    }\n\n    const propagators = parsePropagators(\n      configuration.propagators,\n      configuration,\n      env\n    );\n    const traceSampler = parseSampler(configuration.traceSampler, env);\n    const spanProcessors = parseSpanProcessor(\n      configuration.spanProcessors,\n      configuration,\n      env\n    );\n    if (spanProcessors.length === 0) {\n      diag.warn(\n        \"@vercel/otel: No span processors configured. No spans will be exported.\"\n      );\n    }\n    const spanLimits = configuration.spanLimits;\n    const tracerProvider = new BasicTracerProvider({\n      resource,\n      idGenerator,\n      sampler: traceSampler,\n      spanLimits,\n    });\n    tracerProvider.addSpanProcessor(\n      new CompositeSpanProcessor(\n        spanProcessors,\n        configuration.attributesFromHeaders\n      )\n    );\n    tracerProvider.register({\n      contextManager,\n      propagator: new CompositePropagator({ propagators }),\n    });\n    this.tracerProvider = tracerProvider;\n\n    if (configuration.logRecordProcessor) {\n      const loggerProvider = new LoggerProvider({ resource });\n      this.loggerProvider = loggerProvider;\n      loggerProvider.addLogRecordProcessor(configuration.logRecordProcessor);\n      logs.setGlobalLoggerProvider(loggerProvider);\n    }\n\n    if (configuration.metricReader || configuration.views) {\n      const meterProvider = new MeterProvider({\n        resource,\n        views: configuration.views ?? [],\n      });\n      if (configuration.metricReader) {\n        meterProvider.addMetricReader(configuration.metricReader);\n      }\n      metrics.setGlobalMeterProvider(meterProvider);\n      this.meterProvider = meterProvider;\n    }\n\n    const instrumentations = parseInstrumentations(\n      configuration.instrumentations,\n      configuration.instrumentationConfig\n    );\n    this.disableInstrumentations = registerInstrumentations({\n      instrumentations,\n    });\n\n    diag.info(\"@vercel/otel: started\", serviceName, runtime);\n  }\n\n  public async shutdown(): Promise<void> {\n    const promises: Promise<unknown>[] = [];\n\n    if (this.tracerProvider) {\n      promises.push(this.tracerProvider.shutdown());\n    }\n    if (this.loggerProvider) {\n      promises.push(this.loggerProvider.shutdown());\n    }\n    if (this.meterProvider) {\n      promises.push(this.meterProvider.shutdown());\n    }\n\n    diag.info(\n      \"@vercel/otel: shutting down\",\n      promises.length,\n      process.env.NEXT_RUNTIME\n    );\n\n    await Promise.all(promises);\n\n    if (this.contextManager) {\n      this.contextManager.disable();\n    }\n    const { disableInstrumentations } = this;\n    if (disableInstrumentations) {\n      disableInstrumentations();\n    }\n  }\n}\n\nfunction getEnv(): Env {\n  const processEnv = parseEnvironment(process.env);\n  return { ...DEFAULT_ENVIRONMENT, ...processEnv };\n}\n\nfunction parseInstrumentations(\n  arg: InstrumentationOptionOrName[] | undefined,\n  instrumentationConfig: InstrumentationConfiguration | undefined\n): InstrumentationOption[] {\n  return (arg ?? [\"auto\"])\n    .map((instrumentationOrName) => {\n      if (instrumentationOrName === \"auto\") {\n        diag.debug(\n          \"@vercel/otel: Configure instrumentations: fetch\",\n          instrumentationConfig?.fetch\n        );\n        return [new FetchInstrumentation(instrumentationConfig?.fetch)];\n      }\n      if (instrumentationOrName === \"fetch\") {\n        diag.debug(\n          \"@vercel/otel: Configure instrumentations: fetch\",\n          instrumentationConfig?.fetch\n        );\n        return new FetchInstrumentation(instrumentationConfig?.fetch);\n      }\n      return instrumentationOrName;\n    })\n    .flat();\n}\n\nfunction parsePropagators(\n  arg: PropagatorOrName[] | undefined,\n  configuration: Configuration,\n  env: Env\n): TextMapPropagator[] {\n  const envPropagators =\n    process.env.OTEL_PROPAGATORS &&\n    env.OTEL_PROPAGATORS &&\n    env.OTEL_PROPAGATORS.length > 0\n      ? env.OTEL_PROPAGATORS\n      : undefined;\n  return (arg ?? envPropagators ?? [\"auto\"])\n    .map((propagatorOrName) => {\n      if (propagatorOrName === \"none\") {\n        return [];\n      }\n      if (propagatorOrName === \"auto\") {\n        const autoList: { name: string; propagator: TextMapPropagator }[] = [];\n        autoList.push({\n          name: \"tracecontext\",\n          propagator: new W3CTraceContextPropagator(),\n        });\n        autoList.push({\n          name: \"baggage\",\n          propagator: new W3CBaggagePropagator(),\n        });\n        autoList.push({\n          name: \"vercel-runtime\",\n          propagator: new VercelRuntimePropagator(),\n        });\n\n        diag.debug(\n          `@vercel/otel: Configure propagators: ${autoList\n            .map((i) => i.name)\n            .join(\", \")}`\n        );\n        return autoList.map((i) => i.propagator);\n      }\n      if (propagatorOrName === \"tracecontext\") {\n        diag.debug(\"@vercel/otel: Configure propagator: tracecontext\");\n        return new W3CTraceContextPropagator();\n      }\n      if (propagatorOrName === \"baggage\") {\n        diag.debug(\"@vercel/otel: Configure propagator: baggage\");\n        return new W3CBaggagePropagator();\n      }\n      if (typeof propagatorOrName === \"string\") {\n        throw new Error(`Unknown propagator: \"${propagatorOrName}\"`);\n      }\n      return propagatorOrName;\n    })\n    .flat();\n}\n\nconst FALLBACK_OTEL_TRACES_SAMPLER = \"always_on\";\nconst DEFAULT_RATIO = 1;\n\n/**\n * The code below is borrowed from the https://github.com/open-telemetry/opentelemetry-js/blob/b6e532bf52c9553e51aa6d3375e85f0dd9bd67c1/packages/opentelemetry-sdk-trace-base/src/config.ts#L64\n * bacause, unfortunately, OpenTelemetry API doesn't export it directly.\n */\nfunction parseSampler(arg: SampleOrName | undefined, env: Env): Sampler {\n  if (arg && typeof arg !== \"string\") {\n    return arg;\n  }\n\n  const name =\n    arg && arg !== \"auto\"\n      ? arg\n      : env.OTEL_TRACES_SAMPLER || FALLBACK_OTEL_TRACES_SAMPLER;\n  diag.debug(\"@vercel/otel: Configure sampler: \", name);\n  switch (name) {\n    case \"always_on\":\n      return new AlwaysOnSampler();\n    case \"always_off\":\n      return new AlwaysOffSampler();\n    case \"parentbased_always_on\":\n      return new ParentBasedSampler({\n        root: new AlwaysOnSampler(),\n      });\n    case \"parentbased_always_off\":\n      return new ParentBasedSampler({\n        root: new AlwaysOffSampler(),\n      });\n    case \"traceidratio\":\n      return new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(env));\n    case \"parentbased_traceidratio\":\n      return new ParentBasedSampler({\n        root: new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(env)),\n      });\n    default:\n      diag.error(\n        `@vercel/otel: OTEL_TRACES_SAMPLER value \"${String(\n          env.OTEL_TRACES_SAMPLER\n        )} invalid, defaulting to ${FALLBACK_OTEL_TRACES_SAMPLER}\".`\n      );\n      return new AlwaysOnSampler();\n  }\n}\n\nfunction getSamplerProbabilityFromEnv(env: Env): number {\n  if (\n    env.OTEL_TRACES_SAMPLER_ARG === undefined ||\n    env.OTEL_TRACES_SAMPLER_ARG === \"\"\n  ) {\n    diag.error(\n      `@vercel/otel: OTEL_TRACES_SAMPLER_ARG is blank, defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  diag.debug(\n    \"@vercel/otel: Configure sampler probability: \",\n    env.OTEL_TRACES_SAMPLER_ARG\n  );\n  const probability = Number(env.OTEL_TRACES_SAMPLER_ARG);\n\n  if (isNaN(probability)) {\n    diag.error(\n      `@vercel/otel: OTEL_TRACES_SAMPLER_ARG=${env.OTEL_TRACES_SAMPLER_ARG} was given, but it is invalid, defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  if (probability < 0 || probability > 1) {\n    diag.error(\n      `@vercel/otel: OTEL_TRACES_SAMPLER_ARG=${env.OTEL_TRACES_SAMPLER_ARG} was given, but it is out of range ([0..1]), defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  return probability;\n}\n\nfunction parseSpanProcessor(\n  arg: SpanProcessorOrName[] | undefined,\n  configuration: Configuration,\n  env: Env\n): SpanProcessor[] {\n  return [\n    ...(arg ?? [\"auto\"])\n      .flatMap((spanProcessorOrName) => {\n        if (spanProcessorOrName === \"auto\") {\n          const processors: SpanProcessor[] = [\n            new BatchSpanProcessor(new VercelRuntimeSpanExporter()),\n          ];\n\n          if (process.env.VERCEL_OTEL_ENDPOINTS) {\n            // OTEL collector is configured on 4318 port.\n            const port = process.env.VERCEL_OTEL_ENDPOINTS_PORT || \"4318\";\n            // It's important to use x-protobuf here because the Vercel collector\n            // doesn't correctly process `TimeUnixNano{low, high}` encoding.\n            const protocol =\n              process.env.VERCEL_OTEL_ENDPOINTS_PROTOCOL || \"http/protobuf\";\n            diag.debug(\n              \"@vercel/otel: Configure vercel otel collector on port: \",\n              port,\n              protocol\n            );\n            const config = {\n              url: `http://localhost:${port}/v1/traces`,\n              headers: {},\n            };\n            const exporter =\n              protocol === \"http/protobuf\"\n                ? new OTLPHttpProtoTraceExporter(config)\n                : new OTLPHttpJsonTraceExporter(config);\n\n            processors.push(new BatchSpanProcessor(exporter));\n          }\n\n          // Consider going throw `VERCEL_OTEL_ENDPOINTS` (otel collector) for OTLP.\n          else if (\n            !configuration.traceExporter ||\n            configuration.traceExporter === \"auto\" ||\n            env.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT ||\n            env.OTEL_EXPORTER_OTLP_ENDPOINT\n          ) {\n            processors.push(new BatchSpanProcessor(parseTraceExporter(env)));\n          }\n\n          return processors;\n        }\n        return spanProcessorOrName;\n      })\n      .filter(isNotNull),\n    ...(configuration.traceExporter && configuration.traceExporter !== \"auto\"\n      ? [new BatchSpanProcessor(configuration.traceExporter)]\n      : []),\n  ];\n}\n\n/**\n * This code is moved from the https://github.com/open-telemetry/opentelemetry-js/blob/00e78efd840d3f49d9d4b025a9965e8d3f2913ad/experimental/packages/opentelemetry-sdk-node/src/TracerProviderWithEnvExporter.ts#L41\n * due to the https://github.com/open-telemetry/opentelemetry-js/issues/4212\n */\nfunction parseTraceExporter(env: Env): SpanExporter {\n  const protocol =\n    process.env.OTEL_EXPORTER_OTLP_TRACES_PROTOCOL ??\n    process.env.OTEL_EXPORTER_OTLP_PROTOCOL ??\n    \"http/protobuf\";\n  const url = buildExporterUrlFromEnv(env);\n  const headers = {\n    ...baggageUtils.parseKeyPairsIntoRecord(env.OTEL_EXPORTER_OTLP_HEADERS),\n    ...baggageUtils.parseKeyPairsIntoRecord(\n      env.OTEL_EXPORTER_OTLP_TRACES_HEADERS\n    ),\n  };\n  diag.debug(\n    \"@vercel/otel: Configure trace exporter: \",\n    protocol,\n    url,\n    `headers: ${Object.keys(headers).join(\",\") || \"<none>\"}`\n  );\n  switch (protocol) {\n    case \"http/json\":\n      return new OTLPHttpJsonTraceExporter({ url, headers });\n    case \"http/protobuf\":\n      return new OTLPHttpProtoTraceExporter({ url, headers });\n    default:\n      // \"grpc\" protocol is not supported in Edge.\n      diag.warn(\n        `@vercel/otel: Unsupported OTLP traces protocol: ${protocol}. Using http/protobuf.`\n      );\n      return new OTLPHttpProtoTraceExporter();\n  }\n}\n\nconst DEFAULT_COLLECTOR_RESOURCE_PATH = \"v1/traces\";\nconst DEFAULT_COLLECTOR_URL = `http://localhost:4318/${DEFAULT_COLLECTOR_RESOURCE_PATH}`;\n\nfunction buildExporterUrlFromEnv(env: Env): string {\n  const defaultUrlFromEnv = env.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT;\n  if (defaultUrlFromEnv && typeof defaultUrlFromEnv === \"string\") {\n    return defaultUrlFromEnv;\n  }\n\n  const defaultUrlFromEnvAll = env.OTEL_EXPORTER_OTLP_ENDPOINT;\n  if (defaultUrlFromEnvAll && typeof defaultUrlFromEnvAll === \"string\") {\n    return `${defaultUrlFromEnvAll}/${DEFAULT_COLLECTOR_RESOURCE_PATH}`;\n  }\n\n  return DEFAULT_COLLECTOR_URL;\n}\n\nfunction isNotNull<T>(x: T | null | undefined): x is T {\n  return x !== null && x !== undefined;\n}\n","import type { Attributes, Context } from \"@opentelemetry/api\";\nimport { diag, SpanKind } from \"@opentelemetry/api\";\nimport type {\n  Span,\n  ReadableSpan,\n  SpanProcessor,\n} from \"@opentelemetry/sdk-trace-base\";\nimport { getVercelRequestContext } from \"../vercel-request-context/api\";\nimport { getVercelRequestContextAttributes } from \"../vercel-request-context/attributes\";\nimport { isSampled } from \"../util/sampled\";\nimport type { AttributesFromHeaders } from \"../types\";\n\n/** @internal */\nexport class CompositeSpanProcessor implements SpanProcessor {\n  private readonly rootSpanIds = new Map<\n    string,\n    { rootSpanId: string; open: Span[] }\n  >();\n  private readonly waitSpanEnd = new Map<string, () => void>();\n\n  constructor(\n    private processors: SpanProcessor[],\n    private attributesFromHeaders: AttributesFromHeaders | undefined\n  ) {}\n\n  forceFlush(): Promise<void> {\n    return Promise.all(\n      this.processors.map((p) =>\n        p.forceFlush().catch((e) => {\n          diag.error(\"@vercel/otel: forceFlush failed:\", e);\n        })\n      )\n    ).then(() => undefined);\n  }\n\n  shutdown(): Promise<void> {\n    return Promise.all(\n      this.processors.map((p) => p.shutdown().catch(() => undefined))\n    ).then(() => undefined);\n  }\n\n  onStart(span: Span, parentContext: Context): void {\n    const { traceId, spanId, traceFlags } = span.spanContext();\n    const isRoot = !span.parentSpanId || !this.rootSpanIds.has(traceId);\n    if (isRoot) {\n      this.rootSpanIds.set(traceId, { rootSpanId: spanId, open: [] });\n    } else {\n      this.rootSpanIds.get(traceId)?.open.push(span);\n    }\n    if (isRoot && isSampled(traceFlags)) {\n      const vrc = getVercelRequestContext();\n      const vercelRequestContextAttrs = getVercelRequestContextAttributes(\n        vrc,\n        this.attributesFromHeaders\n      );\n      if (vercelRequestContextAttrs) {\n        span.setAttributes(vercelRequestContextAttrs);\n      }\n\n      // Flush the streams to avoid data loss.\n      if (vrc) {\n        vrc.waitUntil(async () => {\n          if (this.rootSpanIds.has(traceId)) {\n            // Not root has not completed yet, so no point in flushing.\n            // Need to wait for onEnd.\n            const promise = new Promise<void>((resolve) => {\n              this.waitSpanEnd.set(traceId, resolve);\n            });\n            let timer: NodeJS.Timeout | undefined;\n            await Promise.race([\n              promise,\n              new Promise((resolve) => {\n                timer = setTimeout(() => {\n                  this.waitSpanEnd.delete(traceId);\n                  resolve(undefined);\n                }, 50);\n              }),\n            ]);\n            if (timer) {\n              clearTimeout(timer);\n            }\n          }\n          return this.forceFlush();\n        });\n      }\n    }\n\n    for (const spanProcessor of this.processors) {\n      spanProcessor.onStart(span, parentContext);\n    }\n  }\n\n  onEnd(span: ReadableSpan): void {\n    const { traceId, spanId, traceFlags } = span.spanContext();\n    const sampled = isSampled(traceFlags);\n    const rootObj = this.rootSpanIds.get(traceId);\n    const isRoot = rootObj?.rootSpanId === spanId;\n\n    if (sampled) {\n      const resourceAttributes = getResourceAttributes(span);\n      if (resourceAttributes) {\n        Object.assign(span.attributes, resourceAttributes);\n      }\n    }\n\n    if (isRoot) {\n      this.rootSpanIds.delete(traceId);\n      if (rootObj.open.length > 0) {\n        for (const openSpan of rootObj.open) {\n          if (!openSpan.ended && openSpan.spanContext().spanId !== spanId) {\n            try {\n              openSpan.end();\n            } catch (e) {\n              diag.error(\"@vercel/otel: onEnd failed:\", e);\n            }\n          }\n        }\n      }\n    } else if (rootObj) {\n      for (let i = 0; i < rootObj.open.length; i++) {\n        if (rootObj.open[i]?.spanContext().spanId === spanId) {\n          rootObj.open.splice(i, 1);\n        }\n      }\n    }\n\n    for (const spanProcessor of this.processors) {\n      spanProcessor.onEnd(span);\n    }\n\n    if (isRoot) {\n      const pending = this.waitSpanEnd.get(traceId);\n      if (pending) {\n        this.waitSpanEnd.delete(traceId);\n        pending();\n      }\n    }\n  }\n}\n\nconst SPAN_KIND_NAME: { [key in SpanKind]: string } = {\n  [SpanKind.INTERNAL]: \"internal\",\n  [SpanKind.SERVER]: \"server\",\n  [SpanKind.CLIENT]: \"client\",\n  [SpanKind.PRODUCER]: \"producer\",\n  [SpanKind.CONSUMER]: \"consumer\",\n};\n\nfunction getResourceAttributes(span: ReadableSpan): Attributes | undefined {\n  const { kind, attributes } = span;\n  const {\n    \"operation.name\": operationName,\n    \"resource.name\": resourceName,\n    \"span.type\": spanTypeAttr,\n    \"next.span_type\": nextSpanType,\n    \"http.method\": httpMethod,\n    \"http.route\": httpRoute,\n  } = attributes;\n  if (operationName) {\n    return undefined;\n  }\n\n  const resourceNameResolved =\n    resourceName ??\n    (httpMethod &&\n    typeof httpMethod === \"string\" &&\n    httpRoute &&\n    typeof httpRoute === \"string\"\n      ? `${httpMethod} ${httpRoute}`\n      : httpRoute);\n\n  if (\n    span.kind === SpanKind.SERVER &&\n    httpMethod &&\n    httpRoute &&\n    typeof httpMethod === \"string\" &&\n    typeof httpRoute === \"string\"\n  ) {\n    return {\n      \"operation.name\": \"web.request\",\n      \"resource.name\": resourceNameResolved,\n    };\n  }\n\n  // Per https://github.com/DataDog/datadog-agent/blob/main/pkg/config/config_template.yaml,\n  // the default operation.name is \"library name + span kind\".\n  const libraryName = span.instrumentationLibrary.name;\n  const spanType = nextSpanType ?? spanTypeAttr;\n  if (spanType && typeof spanType === \"string\") {\n    const nextOperationName = toOperationName(libraryName, spanType);\n    if (httpRoute) {\n      return {\n        \"operation.name\": nextOperationName,\n        \"resource.name\": resourceNameResolved,\n      };\n    }\n    return { \"operation.name\": nextOperationName };\n  }\n\n  return {\n    \"operation.name\": toOperationName(\n      libraryName,\n      kind === SpanKind.INTERNAL ? \"\" : SPAN_KIND_NAME[kind]\n    ),\n  };\n}\n\nfunction toOperationName(libraryName: string, name: string): string {\n  if (!libraryName) {\n    return name;\n  }\n  let cleanLibraryName = libraryName.replace(/[ @./]/g, \"_\");\n  if (cleanLibraryName.startsWith(\"_\")) {\n    cleanLibraryName = cleanLibraryName.slice(1);\n  }\n  return name ? `${cleanLibraryName}.${name}` : cleanLibraryName;\n}\n","/**\n * TODO: Placeholder for the `@vercel/request-context-storage` package.\n * Replace with the real package once it's published.\n */\n\nimport type { SpanContext } from \"@opentelemetry/api\";\n\n/** @internal */\nexport interface VercelRequestContext {\n  waitUntil: (\n    promiseOrFunc: Promise<unknown> | (() => Promise<unknown>)\n  ) => void;\n  headers: Record<string, string | undefined>;\n  url: string;\n  telemetry?: {\n    reportSpans: (data: unknown) => void;\n    rootSpanContext?: SpanContext;\n  };\n  [key: symbol]: unknown;\n}\n\ninterface Reader {\n  get: () => VercelRequestContext | undefined;\n}\n\nconst symbol = Symbol.for(\"@vercel/request-context\");\n\ninterface GlobalWithReader {\n  [symbol]?: Reader;\n}\n\n/** @internal */\nexport function getVercelRequestContext(): VercelRequestContext | undefined {\n  const reader = (globalThis as GlobalWithReader)[symbol];\n  return reader?.get();\n}\n","import type { Attributes, TextMapGetter } from \"@opentelemetry/api\";\nimport { SemanticAttributes } from \"@opentelemetry/semantic-conventions\";\nimport { omitUndefinedAttributes } from \"../util/attributes\";\nimport { parseRequestId } from \"../util/request-id\";\nimport type { AttributesFromHeaders } from \"../types\";\nimport type { VercelRequestContext } from \"./api\";\nimport { getVercelRequestContext } from \"./api\";\n\n/** @internal */\nexport function getVercelRequestContextAttributes(\n  context: VercelRequestContext | undefined = getVercelRequestContext(),\n  attributesFromHeaders?: AttributesFromHeaders\n): Attributes | undefined {\n  if (!context) {\n    return undefined;\n  }\n\n  const rootAttrs = attributesFromHeaders\n    ? resolveAttributesFromHeaders(attributesFromHeaders, context.headers)\n    : undefined;\n\n  return omitUndefinedAttributes({\n    [SemanticAttributes.HTTP_HOST]: context.headers.host,\n    [SemanticAttributes.HTTP_USER_AGENT]: context.headers[\"user-agent\"],\n    \"http.referer\": context.headers.referer,\n\n    \"vercel.request_id\": parseRequestId(context.headers[\"x-vercel-id\"]),\n    \"vercel.matched_path\": context.headers[\"x-matched-path\"],\n    \"vercel.edge_region\": process.env.VERCEL_REGION,\n\n    ...rootAttrs,\n  });\n}\n\ntype VercelRequestContextHeaders = VercelRequestContext[\"headers\"];\n\nconst getter: TextMapGetter<VercelRequestContextHeaders> = {\n  keys(_carrier: VercelRequestContextHeaders): string[] {\n    return [];\n  },\n  get(\n    carrier: VercelRequestContextHeaders,\n    key: string\n  ): string | string[] | undefined {\n    return carrier[key.toLocaleLowerCase()];\n  },\n};\n\nfunction resolveAttributesFromHeaders(\n  attributesFromHeaders: AttributesFromHeaders,\n  headers: VercelRequestContextHeaders\n): Attributes | undefined {\n  if (typeof attributesFromHeaders === \"function\") {\n    return attributesFromHeaders(headers, getter);\n  }\n\n  const attrs: Attributes = {};\n  for (const [attrName, headerName] of Object.entries(attributesFromHeaders)) {\n    const headerValue = headers[headerName.toLocaleLowerCase()];\n    if (headerValue !== undefined) {\n      attrs[attrName] = headerValue;\n    }\n  }\n  return attrs;\n}\n","import type { Attributes } from \"@opentelemetry/api\";\n\n/** @internal */\nexport function omitUndefinedAttributes<T extends Attributes = Attributes>(\n  obj: T\n): T {\n  return Object.fromEntries(\n    Object.entries(obj).filter(([_, value]) => value !== undefined)\n  ) as T;\n}\n","/** @internal */\nexport function parseRequestId(header: string | undefined): string | undefined {\n  if (!header) {\n    return undefined;\n  }\n  const parts = header.split(\"::\");\n  return parts.at(-1);\n}\n","import { TraceFlags } from \"@opentelemetry/api\";\n\nexport function isSampled(traceFlags: number): boolean {\n  // eslint-disable-next-line no-bitwise\n  return (traceFlags & TraceFlags.SAMPLED) !== 0;\n}\n","import type { ReadableSpan, SpanExporter } from \"@opentelemetry/sdk-trace-base\";\nimport type { IExportTraceServiceRequest } from \"@opentelemetry/otlp-transformer\";\nimport { createExportTraceServiceRequest } from \"@opentelemetry/otlp-transformer/build/src/trace\";\nimport type { ExportResult } from \"@opentelemetry/core\";\nimport { OTLPExporterEdgeBase } from \"./otlp-exporter-base\";\nimport { getDefaultUrl } from \"./trace-config\";\nimport type { OTLPExporterConfig } from \"./config\";\n\n/**\n * OTLP exporter for the `http/json` protocol. Compatible with the \"edge\" runtime.\n */\nexport class OTLPHttpJsonTraceExporter implements SpanExporter {\n  /** @internal */\n  private readonly impl: Impl;\n\n  constructor(config: OTLPExporterConfig = {}) {\n    this.impl = new Impl(config);\n  }\n\n  /** See `SpanExporter#export()` */\n  export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    this.impl.export(spans, resultCallback);\n  }\n\n  /** See `SpanExporter#shutdown()` */\n  shutdown(): Promise<void> {\n    return this.impl.shutdown();\n  }\n\n  /** See `SpanExporter#forceFlush()` */\n  forceFlush(): Promise<void> {\n    return this.impl.forceFlush();\n  }\n}\n\n/** @internal */\nclass Impl extends OTLPExporterEdgeBase<\n  ReadableSpan,\n  IExportTraceServiceRequest\n> {\n  convert(spans: ReadableSpan[]): IExportTraceServiceRequest {\n    return createExportTraceServiceRequest(spans, {\n      useHex: true,\n      useLongBits: false,\n    });\n  }\n\n  override toMessage(serviceRequest: IExportTraceServiceRequest): {\n    body: string | Uint8Array | Blob;\n    contentType: string;\n    headers?: Record<string, string> | undefined;\n  } {\n    return {\n      body: JSON.stringify(serviceRequest),\n      contentType: \"application/json\",\n    };\n  }\n\n  getDefaultUrl(config: OTLPExporterConfig): string {\n    return getDefaultUrl(config);\n  }\n}\n","import type { OTLPExporterError } from \"@opentelemetry/otlp-exporter-base\";\nimport { OTLPExporterBase } from \"@opentelemetry/otlp-exporter-base/build/src/OTLPExporterBase\";\nimport { diag } from \"@opentelemetry/api\";\nimport type { OTLPExporterConfig } from \"./config\";\n\n/** @internal */\nexport abstract class OTLPExporterEdgeBase<\n  ExportItem,\n  ServiceRequest,\n> extends OTLPExporterBase<OTLPExporterConfig, ExportItem, ServiceRequest> {\n  /** @internal */\n  private _headers: Record<string, unknown> | undefined;\n\n  constructor(config: OTLPExporterConfig = {}) {\n    super(config);\n    if (config.headers) {\n      this._headers = config.headers;\n    }\n  }\n\n  onShutdown(): void {\n    diag.debug(\"@vercel/otel/otlp: onShutdown\");\n  }\n\n  onInit(): void {\n    diag.debug(\"@vercel/otel/otlp: onInit\");\n  }\n\n  send(\n    items: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: OTLPExporterError) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      diag.debug(\n        \"@vercel/otel/otlp: Shutdown already started. Cannot send objects\"\n      );\n      return;\n    }\n\n    const serviceRequest = this.convert(items);\n\n    let body: string | Uint8Array | Blob;\n    let contentType: string;\n    let headers: Record<string, string> | undefined;\n    try {\n      const message = this.toMessage(serviceRequest);\n      ({ body, contentType, headers } = message);\n    } catch (e) {\n      diag.warn(\"@vercel/otel/otlp: no proto\", e);\n      return;\n    }\n\n    const promise = fetch(this.url, {\n      method: \"POST\",\n      body,\n      headers: {\n        ...this._headers,\n        ...headers,\n        \"Content-Type\": contentType,\n        \"User-Agent\": \"OTel-OTLP-Exporter-JavaScript/0.46.0\",\n      },\n      // @ts-expect-error - this handles a Next.js specific issue\n      next: { internal: true },\n    })\n      .then((res) => {\n        diag.debug(\"@vercel/otel/otlp: onSuccess\", res.status, res.statusText);\n        onSuccess();\n        // Drain the response body.\n        void res.arrayBuffer().catch(() => undefined);\n      })\n      .catch((err) => {\n        diag.error(\"@vercel/otel/otlp: onError\", err);\n        onError(err as OTLPExporterError);\n      })\n      .finally(() => {\n        const index = this._sendingPromises.indexOf(promise);\n        this._sendingPromises.splice(index, 1);\n      });\n\n    this._sendingPromises.push(promise);\n  }\n\n  getDefaultUrl(_config: OTLPExporterConfig): string {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  abstract toMessage(serviceRequest: ServiceRequest): {\n    body: string | Uint8Array | Blob;\n    contentType: string;\n    headers?: Record<string, string>;\n  };\n}\n","import type { OTLPExporterConfig } from \"./config\";\n\nconst DEFAULT_COLLECTOR_RESOURCE_PATH = \"v1/traces\";\nconst DEFAULT_COLLECTOR_URL = `http://localhost:4318/${DEFAULT_COLLECTOR_RESOURCE_PATH}`;\n\n/** @internal */\nexport function getDefaultUrl(config: OTLPExporterConfig): string {\n  if (typeof config.url === \"string\") {\n    return config.url;\n  }\n  return DEFAULT_COLLECTOR_URL;\n}\n","import type { ReadableSpan, SpanExporter } from \"@opentelemetry/sdk-trace-base\";\nimport type { IExportTraceServiceRequest } from \"@opentelemetry/otlp-transformer\";\nimport { createExportTraceServiceRequest } from \"@opentelemetry/otlp-transformer/build/src/trace\";\nimport type { ExportResult } from \"@opentelemetry/core\";\nimport { OTLPExporterEdgeBase } from \"./otlp-exporter-base\";\nimport { getDefaultUrl } from \"./trace-config\";\nimport type { OTLPExporterConfig } from \"./config\";\nimport { encodeTraceServiceRequest } from \"./proto\";\n\n/**\n * OTLP exporter for the `http/protobuf` protocol. Compatible with the \"edge\" runtime.\n */\nexport class OTLPHttpProtoTraceExporter implements SpanExporter {\n  /** @internal */\n  private readonly impl: Impl;\n\n  constructor(config: OTLPExporterConfig = {}) {\n    this.impl = new Impl(config);\n  }\n\n  /** See `SpanExporter#export()` */\n  export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    this.impl.export(spans, resultCallback);\n  }\n\n  /** See `SpanExporter#shutdown()` */\n  shutdown(): Promise<void> {\n    return this.impl.shutdown();\n  }\n\n  /** See `SpanExporter#forceFlush()` */\n  forceFlush(): Promise<void> {\n    return this.impl.forceFlush();\n  }\n}\n\n/** @internal */\nclass Impl extends OTLPExporterEdgeBase<\n  ReadableSpan,\n  IExportTraceServiceRequest\n> {\n  convert(spans: ReadableSpan[]): IExportTraceServiceRequest {\n    return createExportTraceServiceRequest(spans, undefined);\n  }\n\n  override toMessage(serviceRequest: IExportTraceServiceRequest): {\n    body: string | Uint8Array | Blob;\n    contentType: string;\n    headers?: Record<string, string> | undefined;\n  } {\n    const body = encodeTraceServiceRequest(serviceRequest);\n    return {\n      body,\n      contentType: \"application/x-protobuf\",\n      headers: { accept: \"application/x-protobuf\" },\n    };\n  }\n\n  getDefaultUrl(config: OTLPExporterConfig): string {\n    return getDefaultUrl(config);\n  }\n}\n","/* eslint-disable eslint-comments/disable-enable-pair */\n/* eslint-disable camelcase */\n/* eslint-disable eqeqeq */\n\n/* eslint-disable @typescript-eslint/prefer-optional-chain */\n/* eslint-disable @typescript-eslint/prefer-for-of */\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/* eslint-disable @typescript-eslint/no-unnecessary-condition */\n\n/**\n * This file is constructed by:\n *\n * 1. Clone https://github.com/open-telemetry/opentelemetry-js.git\n * 2. Run `protos:generate` in `experimental/packages/otlp-proto-exporter-base/`\n * 3. Fork `experimental/packages/otlp-proto-exporter-base/src/generated/root.js` and inline all encode methods. Throw away the rest of the code.\n *\n * The OTLP protocol is very stable, so these steps would only need to be done rarely.\n */\n\nimport type {\n  IAnyValue,\n  IArrayValue,\n  IEvent,\n  IExportTraceServiceRequest,\n  IInstrumentationScope,\n  IKeyValue,\n  IKeyValueList,\n  ILink,\n  IResource,\n  IResourceSpans,\n  IScopeSpans,\n  ISpan,\n  IStatus,\n} from \"@opentelemetry/otlp-transformer\";\nimport type { Long } from \"protobufjs/minimal\";\nimport { Writer } from \"protobufjs/minimal\";\n\nexport function encodeTraceServiceRequest(\n  message: IExportTraceServiceRequest\n): Uint8Array {\n  const writer = new Writer();\n  ExportTraceServiceRequest_encode(message, writer);\n  return writer.finish();\n}\n\nexport function ExportTraceServiceRequest_encode(\n  message: IExportTraceServiceRequest,\n  writer: Writer\n): Writer {\n  if (message.resourceSpans != null && message.resourceSpans.length)\n    for (let i = 0; i < message.resourceSpans.length; ++i)\n      ResourceSpans_encode(\n        message.resourceSpans[i]!,\n        writer.uint32(/* id 1, wireType 2 =*/ 10).fork()\n      ).ldelim();\n  return writer;\n}\n\nfunction ResourceSpans_encode(message: IResourceSpans, writer: Writer): Writer {\n  if (message.resource != null)\n    Resource_encode(\n      message.resource,\n      writer.uint32(/* id 1, wireType 2 =*/ 10).fork()\n    ).ldelim();\n  if (message.scopeSpans != null && message.scopeSpans.length)\n    for (let i = 0; i < message.scopeSpans.length; ++i)\n      ScopeSpans_encode(\n        message.scopeSpans[i]!,\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork()\n      ).ldelim();\n  if (message.schemaUrl != null)\n    writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.schemaUrl);\n  return writer;\n}\n\nfunction Resource_encode(message: IResource, writer: Writer): Writer {\n  if (message.attributes != null && message.attributes.length)\n    for (let i = 0; i < message.attributes.length; ++i)\n      KeyValue_encode(\n        message.attributes[i]!,\n        writer.uint32(/* id 1, wireType 2 =*/ 10).fork()\n      ).ldelim();\n  if (message.droppedAttributesCount != null)\n    writer\n      .uint32(/* id 2, wireType 0 =*/ 16)\n      .uint32(message.droppedAttributesCount);\n  return writer;\n}\n\nfunction ScopeSpans_encode(message: IScopeSpans, writer: Writer): Writer {\n  if (message.scope != null)\n    InstrumentationScope_encode(\n      message.scope,\n      writer.uint32(/* id 1, wireType 2 =*/ 10).fork()\n    ).ldelim();\n  if (message.spans != null && message.spans.length)\n    for (let i = 0; i < message.spans.length; ++i)\n      Span_encode(\n        message.spans[i]!,\n        writer.uint32(/* id 2, wireType 2 =*/ 18).fork()\n      ).ldelim();\n  if (message.schemaUrl != null)\n    writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.schemaUrl);\n  return writer;\n}\n\nfunction KeyValue_encode(message: IKeyValue, writer: Writer): Writer {\n  if (message.key != null)\n    writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.key);\n  if (message.value != null)\n    AnyValue_encode(\n      message.value,\n      writer.uint32(/* id 2, wireType 2 =*/ 18).fork()\n    ).ldelim();\n  return writer;\n}\n\nfunction AnyValue_encode(message: IAnyValue, writer: Writer): Writer {\n  if (message.stringValue != null)\n    writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.stringValue);\n  if (message.boolValue != null)\n    writer.uint32(/* id 2, wireType 0 =*/ 16).bool(message.boolValue);\n  if (message.intValue != null)\n    writer.uint32(/* id 3, wireType 0 =*/ 24).int64(message.intValue);\n  if (message.doubleValue != null)\n    writer.uint32(/* id 4, wireType 1 =*/ 33).double(message.doubleValue);\n  if (message.arrayValue != null)\n    ArrayValue_encode(\n      message.arrayValue,\n      writer.uint32(/* id 5, wireType 2 =*/ 42).fork()\n    ).ldelim();\n  if (message.kvlistValue != null)\n    KeyValueList_encode(\n      message.kvlistValue,\n      writer.uint32(/* id 6, wireType 2 =*/ 50).fork()\n    ).ldelim();\n  if (message.bytesValue != null)\n    writer.uint32(/* id 7, wireType 2 =*/ 58).bytes(message.bytesValue);\n  return writer;\n}\n\nfunction ArrayValue_encode(message: IArrayValue, writer: Writer): Writer {\n  if (message.values != null && message.values.length)\n    for (let i = 0; i < message.values.length; ++i)\n      AnyValue_encode(\n        message.values[i]!,\n        writer.uint32(/* id 1, wireType 2 =*/ 10).fork()\n      ).ldelim();\n  return writer;\n}\n\nfunction KeyValueList_encode(message: IKeyValueList, writer: Writer): Writer {\n  if (message.values != null && message.values.length)\n    for (let i = 0; i < message.values.length; ++i)\n      KeyValue_encode(\n        message.values[i]!,\n        writer.uint32(/* id 1, wireType 2 =*/ 10).fork()\n      ).ldelim();\n  return writer;\n}\n\nfunction InstrumentationScope_encode(\n  message: IInstrumentationScope,\n  writer: Writer\n): Writer {\n  if (message.name != null)\n    writer.uint32(/* id 1, wireType 2 =*/ 10).string(message.name);\n  if (message.version != null)\n    writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.version);\n  if (message.attributes != null && message.attributes.length)\n    for (let i = 0; i < message.attributes.length; ++i)\n      KeyValue_encode(\n        message.attributes[i]!,\n        writer.uint32(/* id 3, wireType 2 =*/ 26).fork()\n      ).ldelim();\n  if (message.droppedAttributesCount != null)\n    writer\n      .uint32(/* id 4, wireType 0 =*/ 32)\n      .uint32(message.droppedAttributesCount);\n  return writer;\n}\n\nfunction Span_encode(message: ISpan, writer: Writer): Writer {\n  if (message.traceId != null)\n    writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.traceId);\n  if (message.spanId != null)\n    writer.uint32(/* id 2, wireType 2 =*/ 18).bytes(message.spanId);\n  if (message.traceState != null)\n    writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.traceState);\n  if (message.parentSpanId != null)\n    writer.uint32(/* id 4, wireType 2 =*/ 34).bytes(message.parentSpanId);\n  if (message.name != null)\n    writer.uint32(/* id 5, wireType 2 =*/ 42).string(message.name);\n  if (message.kind != null)\n    writer.uint32(/* id 6, wireType 0 =*/ 48).int32(message.kind);\n  if (message.startTimeUnixNano != null)\n    writer\n      .uint32(/* id 7, wireType 1 =*/ 57)\n      .fixed64(message.startTimeUnixNano as Long);\n  if (message.endTimeUnixNano != null)\n    writer\n      .uint32(/* id 8, wireType 1 =*/ 65)\n      .fixed64(message.endTimeUnixNano as Long);\n  if (message.attributes != null && message.attributes.length)\n    for (let i = 0; i < message.attributes.length; ++i)\n      KeyValue_encode(\n        message.attributes[i]!,\n        writer.uint32(/* id 9, wireType 2 =*/ 74).fork()\n      ).ldelim();\n  if (message.droppedAttributesCount != null)\n    writer\n      .uint32(/* id 10, wireType 0 =*/ 80)\n      .uint32(message.droppedAttributesCount);\n  if (message.events != null && message.events.length)\n    for (let i = 0; i < message.events.length; ++i)\n      Event_encode(\n        message.events[i]!,\n        writer.uint32(/* id 11, wireType 2 =*/ 90).fork()\n      ).ldelim();\n  if (message.droppedEventsCount != null)\n    writer\n      .uint32(/* id 12, wireType 0 =*/ 96)\n      .uint32(message.droppedEventsCount);\n  if (message.links != null && message.links.length)\n    for (let i = 0; i < message.links.length; ++i)\n      Link_encode(\n        message.links[i]!,\n        writer.uint32(/* id 13, wireType 2 =*/ 106).fork()\n      ).ldelim();\n  if (message.droppedLinksCount != null)\n    writer\n      .uint32(/* id 14, wireType 0 =*/ 112)\n      .uint32(message.droppedLinksCount);\n  if (message.status != null)\n    Status_encode(\n      message.status,\n      writer.uint32(/* id 15, wireType 2 =*/ 122).fork()\n    ).ldelim();\n  return writer;\n}\n\nfunction Status_encode(message: IStatus, writer: Writer): Writer {\n  if (message.message != null)\n    writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.message);\n  if (message.code != null)\n    writer.uint32(/* id 3, wireType 0 =*/ 24).int32(message.code);\n  return writer;\n}\n\nfunction Event_encode(message: IEvent, writer: Writer): Writer {\n  if (message.timeUnixNano != null)\n    writer\n      .uint32(/* id 1, wireType 1 =*/ 9)\n      .fixed64(message.timeUnixNano as Long);\n  if (message.name != null)\n    writer.uint32(/* id 2, wireType 2 =*/ 18).string(message.name);\n  if (message.attributes != null && message.attributes.length)\n    for (let i = 0; i < message.attributes.length; ++i)\n      KeyValue_encode(\n        message.attributes[i]!,\n        writer.uint32(/* id 3, wireType 2 =*/ 26).fork()\n      ).ldelim();\n  if (message.droppedAttributesCount != null)\n    writer\n      .uint32(/* id 4, wireType 0 =*/ 32)\n      .uint32(message.droppedAttributesCount);\n  return writer;\n}\n\nfunction Link_encode(message: ILink, writer: Writer): Writer {\n  if (message.traceId != null)\n    writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.traceId);\n  if (message.spanId != null)\n    writer.uint32(/* id 2, wireType 2 =*/ 18).bytes(message.spanId);\n  if (message.traceState != null)\n    writer.uint32(/* id 3, wireType 2 =*/ 26).string(message.traceState);\n  if (message.attributes != null && message.attributes.length)\n    for (let i = 0; i < message.attributes.length; ++i)\n      KeyValue_encode(\n        message.attributes[i]!,\n        writer.uint32(/* id 4, wireType 2 =*/ 34).fork()\n      ).ldelim();\n  if (message.droppedAttributesCount != null)\n    writer\n      .uint32(/* id 5, wireType 0 =*/ 40)\n      .uint32(message.droppedAttributesCount);\n  return writer;\n}\n","import {\n  SpanKind,\n  SpanStatusCode,\n  propagation,\n  context,\n  trace as traceApi,\n} from \"@opentelemetry/api\";\nimport type {\n  Attributes,\n  Span,\n  TextMapSetter,\n  TracerProvider,\n} from \"@opentelemetry/api\";\nimport type {\n  Instrumentation,\n  InstrumentationConfig,\n} from \"@opentelemetry/instrumentation\";\nimport { SemanticAttributes } from \"@opentelemetry/semantic-conventions\";\nimport { resolveTemplate } from \"../util/template\";\nimport { getVercelRequestContext } from \"../vercel-request-context/api\";\nimport { isSampled } from \"../util/sampled\";\n\n/**\n * Configuration for the \"fetch\" instrumentation.\n *\n * Some of this configuration can be overriden on a per-fetch call basis by\n * using the `opentelemetry` property in the `RequestInit` object (requires Next 14.1.1 or above).\n * This property can include:\n * - `ignore`: boolean - whether to ignore the fetch call from tracing. Overrides\n *   `ignoreUrls`.\n * - `propagateContext: boolean`: overrides `propagateContextUrls` for this call.\n * - `spanName: string`: overrides the computed span name for this call.\n * - `attributes: Attributes`: overrides the computed attributes for this call.\n */\nexport interface FetchInstrumentationConfig extends InstrumentationConfig {\n  /**\n   * A set of URL matchers (string prefix or regex) that should be ignored from tracing.\n   * By default all URLs are traced.\n   * Can be overriden by the `opentelemetry.ignore` property in the `RequestInit` object.\n   *\n   * Example: `fetch: { ignoreUrls: [/example.com/] }`.\n   */\n  ignoreUrls?: (string | RegExp)[];\n\n  /**\n   * A set of URL matchers (string prefix or regex) for which the tracing context\n   * should be propagated (see [`propagators`](Configuration#propagators)).\n   * By default the context is propagated _only_ for the\n   * [deployment URLs](https://vercel.com/docs/deployments/generated-urls), all\n   * other URLs should be enabled explicitly.\n   * Can be overriden by the `opentelemetry.propagateContext` property in the `RequestInit` object.\n   *\n   * Example: `fetch: { propagateContextUrls: [ /my.api/ ] }`.\n   */\n  propagateContextUrls?: (string | RegExp)[];\n\n  /**\n   * A set of URL matchers (string prefix or regex) for which the tracing context\n   * should not be propagated (see [`propagators`](Configuration#propagators)). This allows you to exclude a\n   * subset of URLs allowed by the [`propagateContextUrls`](FetchInstrumentationConfig#propagateContextUrls).\n   * Can be overriden by the `opentelemetry.propagateContext` property in the `RequestInit` object.\n   */\n  dontPropagateContextUrls?: (string | RegExp)[];\n\n  /**\n   * A string for the \"resource.name\" attribute that can include attribute expressions in `{}`.\n   * Can be overriden by the `opentelemetry.attributes` property in the `RequestInit` object.\n   *\n   * Example: `fetch: { resourceNameTemplate: \"{http.host}\" }`.\n   */\n  resourceNameTemplate?: string;\n\n  /**\n   * A map of attributes that should be created from the request headers. The keys of the map are\n   * attribute names and the values are request header names. If a resonse header doesn't exist, no\n   * attribute will be created for it.\n   *\n   * Example: `fetch: { attributesFromRequestHeaders: { \"attr1\": \"X-Attr\" } }`\n   */\n  attributesFromRequestHeaders?: Record<string, string>;\n\n  /**\n   * A map of attributes that should be created from the response headers. The keys of the map are\n   * attribute names and the values are response header names. If a resonse header doesn't exist, no\n   * attribute will be created for it.\n   *\n   * Example: `fetch: { attributesFromResponseHeaders: { \"attr1\": \"X-Attr\" } }`\n   */\n  attributesFromResponseHeaders?: Record<string, string>;\n}\n\ndeclare global {\n  interface RequestInit {\n    opentelemetry?: {\n      ignore?: boolean;\n      propagateContext?: boolean;\n      spanName?: string;\n      attributes?: Attributes;\n    };\n  }\n}\n\ntype InternalRequestInit = RequestInit & {\n  next?: {\n    internal: boolean;\n  };\n};\n\nexport class FetchInstrumentation implements Instrumentation {\n  instrumentationName = \"@vercel/otel/fetch\";\n  instrumentationVersion = \"1.0.0\";\n  /** @internal */\n  private config: FetchInstrumentationConfig;\n  /** @internal */\n  private originalFetch: typeof fetch | undefined;\n  /** @internal */\n  private tracerProvider: TracerProvider | undefined;\n\n  constructor(config: FetchInstrumentationConfig = {}) {\n    this.config = config;\n  }\n\n  getConfig(): FetchInstrumentationConfig {\n    return this.config;\n  }\n\n  setConfig(): void {\n    // Nothing.\n  }\n\n  setTracerProvider(tracerProvider: TracerProvider): void {\n    this.tracerProvider = tracerProvider;\n  }\n\n  setMeterProvider(): void {\n    // Nothing.\n  }\n\n  public enable(): void {\n    this.disable();\n\n    const { tracerProvider } = this;\n    if (!tracerProvider) {\n      return;\n    }\n\n    const tracer = tracerProvider.getTracer(\n      this.instrumentationName,\n      this.instrumentationVersion\n    );\n\n    const ignoreUrls = this.config.ignoreUrls ?? [];\n\n    const shouldIgnore = (\n      url: URL,\n      init: InternalRequestInit | undefined\n    ): boolean => {\n      if (init?.opentelemetry?.ignore !== undefined) {\n        return init.opentelemetry.ignore;\n      }\n      if (ignoreUrls.length === 0) {\n        return false;\n      }\n      const urlString = url.toString();\n      return ignoreUrls.some((match) => {\n        if (typeof match === \"string\") {\n          if (match === \"*\") {\n            return true;\n          }\n          return urlString.startsWith(match);\n        }\n        return match.test(urlString);\n      });\n    };\n\n    const host =\n      process.env.VERCEL_URL || process.env.NEXT_PUBLIC_VERCEL_URL || null;\n    const branchHost =\n      process.env.VERCEL_BRANCH_URL ||\n      process.env.NEXT_PUBLIC_VERCEL_BRANCH_URL ||\n      null;\n    const propagateContextUrls = this.config.propagateContextUrls ?? [];\n    const dontPropagateContextUrls = this.config.dontPropagateContextUrls ?? [];\n    const resourceNameTemplate = this.config.resourceNameTemplate;\n    const { attributesFromRequestHeaders, attributesFromResponseHeaders } =\n      this.config;\n\n    const shouldPropagate = (\n      url: URL,\n      init: InternalRequestInit | undefined\n    ): boolean => {\n      if (init?.opentelemetry?.propagateContext) {\n        return init.opentelemetry.propagateContext;\n      }\n      const urlString = url.toString();\n      if (\n        dontPropagateContextUrls.length > 0 &&\n        dontPropagateContextUrls.some((match) => {\n          if (typeof match === \"string\") {\n            if (match === \"*\") {\n              return true;\n            }\n            return urlString.startsWith(match);\n          }\n          return match.test(urlString);\n        })\n      ) {\n        return false;\n      }\n      // Allow same origin.\n      if (\n        host &&\n        url.protocol === \"https:\" &&\n        (url.host === host ||\n          url.host === branchHost ||\n          url.host === getVercelRequestContext()?.headers.host)\n      ) {\n        return true;\n      }\n      // Allow localhost for testing in a dev mode.\n      if (!host && url.protocol === \"http:\" && url.hostname === \"localhost\") {\n        return true;\n      }\n      return propagateContextUrls.some((match) => {\n        if (typeof match === \"string\") {\n          if (match === \"*\") {\n            return true;\n          }\n          return urlString.startsWith(match);\n        }\n        return match.test(urlString);\n      });\n    };\n\n    // Disable fetch tracing in Next.js.\n    process.env.NEXT_OTEL_FETCH_DISABLED = \"1\";\n\n    const originalFetch = globalThis.fetch;\n    this.originalFetch = originalFetch;\n\n    const doFetch: typeof fetch = async (input, initArg) => {\n      const init = initArg as InternalRequestInit | undefined;\n\n      // Passthrough internal requests.\n      if (init?.next?.internal) {\n        return originalFetch(input, init);\n      }\n\n      const req = new Request(\n        // The input Request must be cloned to avoid the bug\n        // on Edge runtime where the `new Request()` eagerly\n        // consumes the body of the original Request.\n        input instanceof Request ? input.clone() : input,\n        init\n      );\n      const url = new URL(req.url);\n      if (shouldIgnore(url, init)) {\n        return originalFetch(input, init);\n      }\n\n      const attrs = {\n        [SemanticAttributes.HTTP_METHOD]: req.method,\n        [SemanticAttributes.HTTP_URL]: req.url,\n        [SemanticAttributes.HTTP_HOST]: url.host,\n        [SemanticAttributes.HTTP_SCHEME]: url.protocol.replace(\":\", \"\"),\n        [SemanticAttributes.NET_PEER_NAME]: url.hostname,\n        [SemanticAttributes.NET_PEER_PORT]: url.port,\n      };\n      const resourceName = resourceNameTemplate\n        ? resolveTemplate(resourceNameTemplate, attrs)\n        : removeSearch(req.url);\n\n      const spanName =\n        init?.opentelemetry?.spanName ?? `fetch ${req.method} ${req.url}`;\n\n      const parentContext = context.active();\n\n      const span = tracer.startSpan(\n        spanName,\n        {\n          kind: SpanKind.CLIENT,\n          attributes: {\n            ...attrs,\n            \"operation.name\": `fetch.${req.method}`,\n            \"resource.name\": resourceName,\n            ...init?.opentelemetry?.attributes,\n          },\n        },\n        parentContext\n      );\n      if (!span.isRecording() || !isSampled(span.spanContext().traceFlags)) {\n        span.end();\n        return originalFetch(input, init);\n      }\n\n      if (shouldPropagate(url, init)) {\n        const fetchContext = traceApi.setSpan(parentContext, span);\n        propagation.inject(fetchContext, req.headers, HEADERS_SETTER);\n      }\n\n      if (attributesFromRequestHeaders) {\n        headersToAttributes(span, attributesFromRequestHeaders, req.headers);\n      }\n\n      try {\n        const startTime = Date.now();\n        // Remove \"content-type\" for a FormData body because undici regenerates\n        // a new multipart separator each time.\n        if (init?.body && init.body instanceof FormData) {\n          req.headers.delete(\"content-type\");\n        }\n        const res = await originalFetch(input, {\n          ...init,\n          headers: req.headers,\n        });\n        const duration = Date.now() - startTime;\n        span.setAttribute(SemanticAttributes.HTTP_STATUS_CODE, res.status);\n        span.setAttribute(\"http.response_time\", duration);\n        if (attributesFromResponseHeaders) {\n          headersToAttributes(span, attributesFromResponseHeaders, res.headers);\n        }\n        if (res.status >= 500) {\n          onError(span, `Status: ${res.status} (${res.statusText})`);\n        }\n\n        // Flush body, but non-blocking.\n        if (res.body) {\n          void pipeResponse(res).then(\n            (byteLength) => {\n              if (span.isRecording()) {\n                span.setAttribute(\n                  SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED,\n                  byteLength\n                );\n                span.end();\n              }\n            },\n            (err) => {\n              if (span.isRecording()) {\n                onError(span, err);\n                span.end();\n              }\n            }\n          );\n        } else {\n          span.end();\n        }\n\n        return res;\n      } catch (e) {\n        onError(span, e);\n        span.end();\n        throw e;\n      }\n    };\n    globalThis.fetch = doFetch;\n  }\n\n  public disable(): void {\n    if (this.originalFetch) {\n      globalThis.fetch = this.originalFetch;\n    }\n  }\n}\n\nconst HEADERS_SETTER: TextMapSetter<Headers> = {\n  set(carrier: Headers, key: string, value: string): void {\n    carrier.set(key, value);\n  },\n};\n\nfunction removeSearch(url: string): string {\n  const index = url.indexOf(\"?\");\n  return index === -1 ? url : url.substring(0, index);\n}\n\nfunction pipeResponse(res: Response): Promise<number> {\n  let length = 0;\n  const clone = res.clone();\n  const reader = clone.body?.getReader();\n  if (!reader) {\n    return Promise.resolve(0);\n  }\n  const read = (): Promise<void> => {\n    return reader.read().then(({ done, value }) => {\n      if (done) {\n        return;\n      }\n      length += value.byteLength;\n      return read();\n    });\n  };\n  return read().then(() => length);\n}\n\nfunction onError(span: Span, err: unknown): void {\n  if (err instanceof Error) {\n    span.recordException(err);\n    span.setStatus({\n      code: SpanStatusCode.ERROR,\n      message: err.message,\n    });\n  } else {\n    const message = String(err);\n    span.setStatus({\n      code: SpanStatusCode.ERROR,\n      message,\n    });\n  }\n}\n\nfunction headersToAttributes(\n  span: Span,\n  attrsToHeadersMap: Record<string, string>,\n  headers: Headers\n): void {\n  for (const [attrName, headerName] of Object.entries(attrsToHeadersMap)) {\n    const headerValue = headers.get(headerName);\n    if (headerValue !== null) {\n      span.setAttribute(attrName, headerValue);\n    }\n  }\n}\n","import type { Attributes } from \"@opentelemetry/api\";\n\nexport function resolveTemplate(template: string, attrs: Attributes): string {\n  return template.replace(/\\{(?<temp1>[^{}]+)\\}/g, (match, key) => {\n    const value = attrs[key as string];\n    if (value !== undefined) {\n      return String(value);\n    }\n    return match;\n  });\n}\n","import {\n  createTraceState,\n  isSpanContextValid,\n  trace as traceApi,\n} from \"@opentelemetry/api\";\nimport type {\n  Context,\n  SpanContext,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n} from \"@opentelemetry/api\";\nimport { isTracingSuppressed } from \"@opentelemetry/core\";\n\nconst VERSION = \"00\";\n\nconst TRACE_PARENT_HEADER = \"traceparent\";\nconst TRACE_STATE_HEADER = \"tracestate\";\n\n/**\n * Same as the `W3CTraceContextPropagator` from `@opentelemetry/core`, but with\n * a workaround for RegExp issue in Edge.\n */\nexport class W3CTraceContextPropagator implements TextMapPropagator {\n  fields(): string[] {\n    return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  inject(context: Context, carrier: any, setter: TextMapSetter): void {\n    const spanContext = traceApi.getSpanContext(context);\n    if (\n      !spanContext ||\n      isTracingSuppressed(context) ||\n      !isSpanContextValid(spanContext)\n    )\n      return;\n\n    const traceParent = `${VERSION}-${spanContext.traceId}-${\n      spanContext.spanId\n    }-0${Number(spanContext.traceFlags || 0).toString(16)}`;\n\n    setter.set(carrier, TRACE_PARENT_HEADER, traceParent);\n    if (spanContext.traceState) {\n      setter.set(\n        carrier,\n        TRACE_STATE_HEADER,\n        spanContext.traceState.serialize()\n      );\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  extract(context: Context, carrier: any, getter: TextMapGetter): Context {\n    const traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);\n    if (!traceParentHeader) return context;\n    const traceParent = Array.isArray(traceParentHeader)\n      ? traceParentHeader[0]\n      : traceParentHeader;\n    if (typeof traceParent !== \"string\") return context;\n    const spanContext = parseTraceParent(traceParent);\n    if (!spanContext) return context;\n\n    spanContext.isRemote = true;\n\n    const traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);\n    if (traceStateHeader) {\n      // If more than one `tracestate` header is found, we merge them into a\n      // single header.\n      const state = Array.isArray(traceStateHeader)\n        ? traceStateHeader.join(\",\")\n        : traceStateHeader;\n      spanContext.traceState = createTraceState(\n        typeof state === \"string\" ? state : undefined\n      );\n    }\n    return traceApi.setSpanContext(context, spanContext);\n  }\n}\n\nfunction parseTraceParent(traceParent: string): SpanContext | null {\n  const [version, traceId, spanId, traceFlags, other] = traceParent.split(\"-\");\n  if (\n    !version ||\n    !traceId ||\n    !spanId ||\n    !traceFlags ||\n    version.length !== 2 ||\n    traceId.length !== 32 ||\n    spanId.length !== 16 ||\n    traceFlags.length !== 2\n  )\n    return null;\n\n  // According to the specification the implementation should be compatible\n  // with future versions. If there are more parts, we only reject it if it's using version 00\n  // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent\n  if (version === \"00\" && other) return null;\n\n  return {\n    traceId,\n    spanId,\n    traceFlags: parseInt(traceFlags, 16),\n  };\n}\n","import type { Context, TextMapPropagator } from \"@opentelemetry/api\";\nimport { diag, TraceFlags, trace as tracing } from \"@opentelemetry/api\";\nimport { getVercelRequestContext } from \"./api\";\n\nexport class VercelRuntimePropagator implements TextMapPropagator {\n  fields(): string[] {\n    return [];\n  }\n\n  inject(): void {\n    // Nothing.\n  }\n\n  extract(context: Context): Context {\n    const vrc = getVercelRequestContext();\n    if (!vrc?.telemetry) {\n      diag.warn(\"@vercel/otel: Vercel telemetry extension not found.\");\n      return context;\n    }\n\n    const { rootSpanContext } = vrc.telemetry;\n    if (!rootSpanContext) {\n      return context;\n    }\n\n    diag.debug(\n      \"@vercel/otel: Extracted root SpanContext from Vercel request context.\",\n      rootSpanContext\n    );\n    return tracing.setSpanContext(context, {\n      ...rootSpanContext,\n      isRemote: true,\n      traceFlags: rootSpanContext.traceFlags || TraceFlags.SAMPLED,\n    });\n  }\n}\n","import { diag } from \"@opentelemetry/api\";\nimport type { ReadableSpan, SpanExporter } from \"@opentelemetry/sdk-trace-base\";\nimport { ExportResultCode, type ExportResult } from \"@opentelemetry/core\";\nimport { createExportTraceServiceRequest } from \"@opentelemetry/otlp-transformer\";\nimport { getVercelRequestContext } from \"./api\";\n\nexport class VercelRuntimeSpanExporter implements SpanExporter {\n  export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    const context = getVercelRequestContext();\n    if (!context?.telemetry) {\n      diag.warn(\"@vercel/otel: no telemetry context found\");\n      resultCallback({ code: ExportResultCode.SUCCESS, error: undefined });\n      return;\n    }\n\n    try {\n      // Converts a Span to IResourceSpans > IScopeSpans > ISpan structure, which\n      // is OTLP format. It's can be directly serialized to JSON or converted\n      // to Protobuf.\n      // {\n      //   // Uses hex-encoding trace and span IDs. Otherwise, base64 is used.\n      //   useHex: true,\n      //   // Uses `{high, low}` format for timestamps. Otherwise, `unixNanon` is used.\n      //   // TODO Fix this\n      //   useLongBits: false,\n      // }\n      const data = createExportTraceServiceRequest(spans, {\n        useHex: true,\n        useLongBits: false,\n      });\n\n      context.telemetry.reportSpans(data);\n      resultCallback({ code: ExportResultCode.SUCCESS, error: undefined });\n    } catch (e) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: e instanceof Error ? e : new Error(String(e)),\n      });\n    }\n  }\n\n  shutdown(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  forceFlush?(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n","import type { Configuration } from \"./types\";\nimport { Sdk } from \"./sdk\";\n\nexport type * from \"./types\";\nexport type { OTLPExporterConfig } from \"./exporters/config\";\nexport { OTLPHttpJsonTraceExporter } from \"./exporters/exporter-trace-otlp-http-fetch\";\nexport { OTLPHttpProtoTraceExporter } from \"./exporters/exporter-trace-otlp-proto-fetch\";\nexport {\n  type FetchInstrumentationConfig,\n  FetchInstrumentation,\n} from \"./instrumentations/fetch\";\n\n/**\n * Registers the OpenTelemetry SDK with the specified service name and the default configuration.\n * Should be included in the `instrumentation.ts`. For example:\n *\n * ```ts\n * import { registerOTel } from \"@vercel/otel\";\n *\n * export function register() {\n *   registerOTel({\n *     serviceName: \"my-app\",\n *     ...\n *   });\n * }\n * ```\n *\n * @param optionsOrServiceName - Either a service name as a string or a configuration object.\n */\nexport function registerOTel(\n  optionsOrServiceName?: Configuration | string\n): void {\n  let options: Configuration;\n  if (!optionsOrServiceName) {\n    options = {};\n  } else if (typeof optionsOrServiceName === \"string\") {\n    options = { serviceName: optionsOrServiceName };\n  } else {\n    options = optionsOrServiceName;\n  }\n  const sdk = new Sdk(options);\n  sdk.start();\n}\n"],"names":["api_exports","api_star","init_api","__esmMin","__reExport","api_1","SUPPRESS_TRACING_KEY","suppressTracing","context","exports","unsuppressTracing","isTracingSuppressed","exports","api_1","constants_1","serializeKeyPairs","keyPairs","hValue","current","value","exports","getKeyPairs","baggage","key","entry","parsePairKeyValue","valueProps","keyPairPart","separatorIndex","metadata","parseKeyPairsIntoRecord","keyPair","headers","api_1","suppress_tracing_1","constants_1","utils_1","W3CBaggagePropagator","context","carrier","setter","baggage","keyPairs","pair","headerValue","getter","baggageString","entry","keyPair","baggageEntry","exports","AnchoredClock","systemClock","monotonicClock","delta","exports","api_1","sanitizeAttributes","attributes","out","key","val","isAttributeKey","isAttributeValue","exports","isHomogeneousAttributeValueArray","isValidPrimitiveAttributeValue","arr","type","element","api_1","loggingErrorHandler","ex","stringifyException","exports","flattenException","result","current","propertyName","value","logging_error_handler_1","delegateHandler","setGlobalErrorHandler","handler","exports","globalErrorHandler","ex","TracesSamplerValues","exports","exports","api_1","sampling_1","globalThis_1","DEFAULT_LIST_SEPARATOR","ENVIRONMENT_BOOLEAN_KEYS","isEnvVarABoolean","key","ENVIRONMENT_NUMBERS_KEYS","isEnvVarANumber","ENVIRONMENT_LISTS_KEYS","isEnvVarAList","exports","parseBoolean","environment","values","value","parseNumber","name","min","max","parseStringList","output","input","separator","givenValue","v","logLevelMap","setLogLevelFromEnv","theLevel","parseEnvironment","env","getEnvWithoutDefaults","os","environment_1","getEnv","processEnv","exports","exports","intValue","charCode","buf8","buf16","hexToBase64","hexStr","buf","offset","i","hi","lo","exports","SPAN_ID_BYTES","TRACE_ID_BYTES","RandomIdGenerator","getIdGenerator","exports","SHARED_BUFFER","bytes","i","perf_hooks_1","exports","exports","exports","__exportStar","exports","exports","__exportStar","exports","__exportStar","exports","version_1","semantic_conventions_1","exports","unrefTimer","timer","exports","__exportStar","exports","__exportStar","exports","platform_1","NANOSECOND_DIGITS","NANOSECOND_DIGITS_IN_MILLIS","MILLISECONDS_TO_NANOSECONDS","SECOND_TO_NANOSECONDS","millisToHrTime","epochMillis","epochSeconds","seconds","nanos","exports","getTimeOrigin","timeOrigin","perf","hrTime","performanceNow","now","addHrTimes","timeInputToHrTime","time","isTimeInputHrTime","hrTimeDuration","startTime","endTime","hrTimeToTimeStamp","precision","tmp","nanoString","hrTimeToNanoseconds","hrTimeToMilliseconds","hrTimeToMicroseconds","value","isTimeInput","time1","time2","out","ExportResultCode","exports","api_1","CompositePropagator","config","_a","p","x","y","context","carrier","setter","propagator","err","getter","ctx","exports","VALID_KEY_CHAR_RANGE","VALID_KEY","VALID_VENDOR_KEY","VALID_KEY_REGEX","VALID_VALUE_BASE_REGEX","INVALID_VALUE_COMMA_EQUAL_REGEX","validateKey","key","exports","validateValue","value","validators_1","MAX_TRACE_STATE_ITEMS","MAX_TRACE_STATE_LEN","LIST_MEMBERS_SEPARATOR","LIST_MEMBER_KEY_VALUE_SPLITTER","TraceState","_TraceState","rawTraceState","key","value","traceState","agg","part","listMember","i","exports","api_1","suppress_tracing_1","TraceState_1","exports","VERSION","VERSION_PART","TRACE_ID_PART","PARENT_ID_PART","FLAGS_PART","TRACE_PARENT_REGEX","parseTraceParent","traceParent","match","W3CTraceContextPropagator","context","carrier","setter","spanContext","getter","traceParentHeader","traceStateHeader","state","api_1","RPC_METADATA_KEY","RPCType","exports","setRPCMetadata","context","meta","deleteRPCMetadata","getRPCMetadata","api_1","AlwaysOffSampler","exports","api_1","AlwaysOnSampler","exports","api_1","global_error_handler_1","AlwaysOffSampler_1","AlwaysOnSampler_1","ParentBasedSampler","config","_a","_b","_c","_d","context","traceId","spanName","spanKind","attributes","links","parentContext","exports","api_1","TraceIdRatioBasedSampler","_ratio","context","traceId","ratio","accumulation","i","pos","part","exports","objectTag","nullTag","undefinedTag","funcProto","funcToString","objectCtorString","getPrototype","overArg","objectProto","hasOwnProperty","symToStringTag","nativeObjectToString","func","transform","arg","isPlainObject","value","isObjectLike","baseGetTag","proto","Ctor","exports","getRawTag","objectToString","isOwn","tag","unmasked","result","lodash_merge_1","MAX_LEVEL","merge","args","result","objects","mergeTwoObjects","exports","takeValue","value","isArray","one","two","level","isPrimitive","isFunction","i","j","isObject","keys","key","shouldMerge","twoValue","obj1","obj2","wasObjectReferenced","arr1","arr2","obj","arr","info","TimeoutError","_TimeoutError","message","exports","callWithTimeout","promise","timeout","timeoutHandle","timeoutPromise","_resolve","reject","result","reason","urlMatches","url","urlToMatch","exports","isUrlIgnored","ignoredUrls","ignoreUrl","isWrapped","func","exports","Deferred","resolve","reject","val","err","exports","promise_1","BindOnceFuture","_callback","_that","args","val","err","exports","api_1","suppress_tracing_1","_export","exporter","arg","resolve","result","exports","__exportStar","exports","exporter_1","exports","api_1","core_1","semantic_conventions_1","enums_1","Span","parentTracer","context","spanName","spanContext","kind","parentSpanId","links","startTime","_deprecatedClock","attributes","now","key","value","k","v","name","attributesOrStartTime","timeStamp","status","endTime","inp","msDuration","exception","time","limit","val","exports","SamplingDecision","exports","Sampler_1","AlwaysOffSampler","exports","Sampler_1","AlwaysOnSampler","exports","api_1","core_1","AlwaysOffSampler_1","AlwaysOnSampler_1","ParentBasedSampler","config","_a","_b","_c","_d","context","traceId","spanName","spanKind","attributes","links","parentContext","exports","api_1","Sampler_1","TraceIdRatioBasedSampler","_ratio","context","traceId","ratio","accumulation","i","pos","part","exports","api_1","core_1","AlwaysOffSampler_1","AlwaysOnSampler_1","ParentBasedSampler_1","TraceIdRatioBasedSampler_1","env","FALLBACK_OTEL_TRACES_SAMPLER","DEFAULT_RATIO","loadDefaultConfig","buildSamplerFromEnv","exports","environment","getSamplerProbabilityFromEnv","probability","config_1","core_1","mergeConfig","userConfig","perInstanceDefaults","DEFAULT_CONFIG","target","exports","reconfigureLimits","spanLimits","parsedEnvConfig","_f","_e","_d","_b","_a","_c","_m","_l","_k","_h","_g","_j","api_1","core_1","BatchSpanProcessorBase","_exporter","config","env","_span","_parentContext","span","resolve","reject","promises","count","i","j","timer","spans","doExport","result","_a","pendingResources","resource","err","flush","e","exports","BatchSpanProcessorBase_1","BatchSpanProcessor","exports","SPAN_ID_BYTES","TRACE_ID_BYTES","RandomIdGenerator","getIdGenerator","exports","SHARED_BUFFER","bytes","i","__exportStar","exports","__exportStar","exports","api","core_1","Span_1","utility_1","platform_1","Tracer","instrumentationLibrary","config","_tracerProvider","localConfig","name","options","context","parentSpan","parentSpanContext","spanId","traceId","traceState","parentSpanId","spanKind","_a","links","_b","link","attributes","samplingResult","_c","traceFlags","spanContext","initAttributes","arg2","arg3","arg4","opts","ctx","fn","parentContext","span","contextWithSpanSet","exports","defaultServiceName","exports","normalizeArch","nodeArchString","exports","normalizeType","nodePlatform","child_process","util","exports","execAsync_1","api_1","getMachineId","idLine","line","parts","e","exports","fs_1","api_1","getMachineId","paths","path","e","exports","fs_1","execAsync_1","api_1","getMachineId","e","exports","process","execAsync_1","api_1","getMachineId","args","command","parts","e","exports","api_1","getMachineId","exports","process","getMachineId","exports","semantic_conventions_1","Resource_1","os_1","utils_1","getMachineId_1","HostDetectorSync","_config","attributes","machineId","exports","HostDetectorSync_1","HostDetector","_config","exports","semantic_conventions_1","Resource_1","os_1","utils_1","OSDetectorSync","_config","attributes","exports","OSDetectorSync_1","OSDetector","_config","exports","api_1","semantic_conventions_1","Resource_1","os","ProcessDetectorSync","_config","attributes","userInfo","e","exports","ProcessDetectorSync_1","ProcessDetector","config","exports","__exportStar","exports","__exportStar","exports","api_1","semantic_conventions_1","core_1","platform_1","Resource","_Resource","attributes","asyncAttributesPromise","_a","asyncAttributes","err","other","mergedSyncAttributes","mergedAttributesPromise","thisAsyncAttributes","otherAsyncAttributes","exports","__1","BrowserDetector","config","exports","api_1","core_1","semantic_conventions_1","Resource_1","EnvDetectorSync","_config","attributes","env","rawAttributes","serviceName","parsedAttributes","e","rawEnvAttributes","rawAttribute","keyValuePair","key","value","name","str","i","ch","exports","EnvDetectorSync_1","EnvDetector","config","exports","semantic_conventions_1","__1","api_1","BrowserDetectorSync","config","browserResource","_config","exports","__exportStar","exports","isPromiseLike","val","exports","Resource_1","api_1","utils_1","detectResources","config","resources","d","resource","e","logResources","acc","exports","detectResourcesSync","_a","resourceOrPromise","createPromise","mergedResources","resourceDebugString","__exportStar","exports","core_1","MultiSpanProcessor","_spanProcessors","promises","spanProcessor","resolve","error","span","context","reject","exports","NoopSpanProcessor","_span","_context","exports","api_1","core_1","resources_1","_1","config_1","MultiSpanProcessor_1","NoopSpanProcessor_1","platform_1","utility_1","ForceFlushState","exports","BasicTracerProvider","config","mergedConfig","_a","defaultExporter","batchProcessor","name","version","options","key","spanProcessor","err","timeout","promises","resolve","state","timeoutInterval","error","reject","results","errors","result","uniquePropagatorNames","validPropagators","propagator","list","item","exporterName","exporter","core_1","ConsoleSpanExporter","spans","resultCallback","span","_a","done","exports","core_1","InMemorySpanExporter","spans","resultCallback","exports","api_1","core_1","SimpleSpanProcessor","_exporter","_span","_parentContext","span","doExport","result","_a","error","exportPromise","_b","err","exports","__exportStar","exports","api_logs_exports","api_logs_star","init_api_logs","__esmMin","__reExport","parseInstrumentationOptions","options","instrumentations","i","j","option","results","exports","enableInstrumentations","tracerProvider","meterProvider","instrumentation","disableInstrumentations","api_1","autoLoaderUtils_1","registerInstrumentations","options","instrumentations","tracerProvider","meterProvider","exports","api_1","api","core_1","LogRecord","_sharedState","instrumentationScope","logRecord","timestamp","observedTimestamp","severityNumber","severityText","body","attributes","context","now","spanContext","key","value","k","v","limit","val","exports","api_1","LogRecord_1","Logger","instrumentationScope","_sharedState","logRecord","currentContext","logRecordInstance","exports","core_1","loadDefaultConfig","exports","reconfigureLimits","logRecordLimits","parsedEnvConfig","_c","_b","_a","_f","_e","_d","core_1","MultiLogRecordProcessor","processors","forceFlushTimeoutMillis","timeout","processor","logRecord","context","exports","NoopLogRecordProcessor","_logRecord","_context","exports","NoopLogRecordProcessor_1","LoggerProviderSharedState","resource","forceFlushTimeoutMillis","logRecordLimits","exports","api_1","api_logs_1","resources_1","core_1","Logger_1","config_1","MultiLogRecordProcessor_1","LoggerProviderSharedState_1","exports","LoggerProvider","config","resource","logRecordLimits","forceFlushTimeoutMillis","name","version","options","loggerName","key","processor","err","core_1","core_2","ConsoleLogRecordExporter","logs","resultCallback","logRecord","_a","_b","_c","logRecords","done","exports","core_1","SimpleLogRecordProcessor","_exporter","logRecord","res","_a","exports","core_1","InMemoryLogRecordExporter","logs","resultCallback","exports","api_1","core_1","BatchLogRecordProcessorBase","_exporter","config","env","_a","_b","_c","_d","logRecord","resolve","reject","promises","batchCount","i","logRecords","res","exports","BatchLogRecordProcessorBase_1","BatchLogRecordProcessor","exports","BatchLogRecordProcessor_1","exports","node_1","exports","LoggerProvider_1","exports","LogRecord_1","NoopLogRecordProcessor_1","ConsoleLogRecordExporter_1","SimpleLogRecordProcessor_1","InMemoryLogRecordExporter_1","platform_1","AggregationTemporality","exports","DataPointType","exports","isNotNullish","item","exports","hashAttributes","attributes","keys","key","instrumentationScopeId","instrumentationScope","_a","_b","TimeoutError","_TimeoutError","message","callWithTimeout","promise","timeout","timeoutHandle","timeoutPromise","_resolve","reject","result","reason","PromiseAllSettled","promises","p","e","isPromiseAllSettledRejectionResult","it","FlatMap","arr","fn","setEquals","lhs","rhs","binarySearchLB","value","lo","hi","mid","equalsCaseInsensitive","AggregatorKind","exports","types_1","DropAggregator","_previous","_delta","_current","_descriptor","_aggregationTemporality","_accumulationByAttributes","_endTime","exports","api_1","utils_1","InstrumentType","exports","createInstrumentDescriptor","name","type","options","isValidName","_a","_b","_c","_d","createInstrumentDescriptorWithView","view","instrument","isDescriptorCompatibleWith","descriptor","otherDescriptor","NAME_REGEXP","types_1","MetricData_1","InstrumentDescriptor_1","utils_1","createNewEmptyCheckpoint","boundaries","counts","HistogramAccumulation","startTime","_boundaries","_recordMinMax","_current","value","idx","exports","HistogramAggregator","previous","delta","previousValue","deltaValue","previousCounts","deltaCounts","mergedCounts","min","max","current","currentValue","currentCounts","diffedCounts","descriptor","aggregationTemporality","accumulationByAttributes","endTime","attributes","accumulation","pointValue","allowsNegativeValues","Buckets","_Buckets","backing","BucketsBacking","indexBase","indexStart","indexEnd","_","i","position","bias","bucketIndex","increment","decrement","by","size","each","inpos","outpos","pos","mod","dest","src","exports","_BucketsBacking","_counts","newSize","oldPositiveLimit","newPositiveLimit","tmp","from","limit","num","exports","EXPONENT_MASK","SIGNIFICAND_MASK","EXPONENT_BIAS","getNormalBase2","value","dv","getSignificand","hiBits","loBits","ldexp","frac","exp","exports","nextGreaterSquare","v","MappingError","exports","ieee754","util","types_1","ExponentMapping","scale","value","exp","correction","index","minIndex","maxIndex","shift","exports","ieee754","util","types_1","LogarithmMapping","scale","value","index","maxIndex","minIndex","exports","ExponentMapping_1","LogarithmMapping_1","types_1","MIN_SCALE","MAX_SCALE","PREBUILT_MAPPINGS","_","i","getMapping","scale","exports","types_1","MetricData_1","api_1","InstrumentDescriptor_1","Buckets_1","getMapping_1","util_1","HighLow","_HighLow","low","high","h1","h2","MAX_SCALE","DEFAULT_MAX_SIZE","MIN_MAX_SIZE","ExponentialHistogramAccumulation","_ExponentialHistogramAccumulation","startTime","_maxSize","_recordMinMax","_sum","_count","_zeroCount","_min","_max","_positive","_negative","_mapping","value","increment","previous","minScale","other","buckets","index","rescalingNeeded","change","span","bucketIndex","needed","size","bias","oldPositiveLimit","newSize","newPositiveLimit","newScale","highLowPos","highLowNeg","currentScale","shift","ours","theirs","scale","theirOffset","theirChange","i","exports","ExponentialHistogramAggregator","delta","result","current","descriptor","aggregationTemporality","accumulationByAttributes","endTime","attributes","accumulation","pointValue","allowsNegativeValues","types_1","core_1","MetricData_1","LastValueAccumulation","startTime","_current","sampleTime","value","exports","LastValueAggregator","previous","delta","latestAccumulation","current","descriptor","aggregationTemporality","accumulationByAttributes","endTime","attributes","accumulation","types_1","MetricData_1","SumAccumulation","startTime","monotonic","_current","reset","value","exports","SumAggregator","previous","delta","prevPv","deltaPv","current","currPv","descriptor","aggregationTemporality","accumulationByAttributes","endTime","attributes","accumulation","__exportStar","exports","api","aggregator_1","InstrumentDescriptor_1","Aggregation","DROP_AGGREGATION","SUM_AGGREGATION","LAST_VALUE_AGGREGATION","HISTOGRAM_AGGREGATION","EXPONENTIAL_HISTOGRAM_AGGREGATION","DEFAULT_AGGREGATION","exports","DropAggregation","_DropAggregation","_instrument","SumAggregation","_SumAggregation","instrument","LastValueAggregation","_LastValueAggregation","HistogramAggregation","_HistogramAggregation","ExplicitBucketHistogramAggregation","boundaries","_recordMinMax","a","b","minusInfinityIndex","infinityIndex","ExponentialHistogramAggregation","_maxSize","DefaultAggregation","Aggregation_1","AggregationTemporality_1","DEFAULT_AGGREGATION_SELECTOR","_instrumentType","exports","DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR","api","utils_1","AggregationSelector_1","MetricReader","options","_a","_b","_c","metricProducer","instrumentType","sdkCollectionResults","additionalCollectionResults","producer","errors","result","resource","scopeMetrics","exports","api","core_1","MetricReader_1","utils_1","api_1","PeriodicExportingMetricReader","options","_a","_b","_c","_d","err","resourceMetrics","errors","doExport","result","exports","core_1","InMemoryMetricExporter","aggregationTemporality","metrics","resultCallback","_instrumentType","exports","core_1","AggregationSelector_1","ConsoleMetricExporter","_ConsoleMetricExporter","options","_a","metrics","resultCallback","_instrumentType","done","scopeMetrics","metric","exports","ViewRegistry","view","instrument","meter","registeredView","selector","exports","api_1","core_1","SyncInstrument","_writableMetricStorage","_descriptor","value","attributes","context","exports","UpDownCounterInstrument","ctx","CounterInstrument","HistogramInstrument","ObservableInstrument","descriptor","metricStorages","_observableRegistry","callback","ObservableCounterInstrument","ObservableGaugeInstrument","ObservableUpDownCounterInstrument","isObservableInstrument","it","InstrumentDescriptor_1","Instruments_1","Meter","_meterSharedState","name","options","descriptor","storage","storages","callback","observables","exports","InstrumentDescriptor_1","MetricStorage","_instrumentDescriptor","description","exports","utils_1","HashMap","_hash","key","hashCode","defaultFactory","hash","val","value","keyIterator","next","valueIterator","exports","AttributeHashMap","HashMap_1","DeltaMetricProcessor","_aggregator","value","attributes","_context","collectionTime","accumulation","measurements","hashCode","delta","previous","active","unreportedDelta","exports","AggregationTemporality_1","HashMap_1","TemporalMetricProcessor","_TemporalMetricProcessor","_aggregator","collectorHandles","handle","collector","instrumentDescriptor","currentAccumulations","collectionTime","unreportedAccumulations","result","aggregationTemporality","last","lastCollectionTime","accumulationRecords","AttributesMapToAccumulationRecords","currentAccumulation","registeredCollectors","stash","unreportedList","it","current","aggregator","iterator","next","key","record","hash","lastAccumulation","accumulation","exports","map","MetricStorage_1","DeltaMetricProcessor_1","TemporalMetricProcessor_1","HashMap_1","AsyncMetricStorage","_instrumentDescriptor","aggregator","_attributesProcessor","collectorHandles","measurements","observationTime","processed","attributes","value","collector","collectionTime","accumulations","exports","getIncompatibilityDetails","existing","otherDescriptor","incompatibility","exports","getValueTypeConflictResolutionRecipe","getUnitConflictResolutionRecipe","getTypeConflictResolutionRecipe","selector","selectorString","getDescriptionResolutionRecipe","getConflictResolutionRecipe","InstrumentDescriptor_1","api","RegistrationConflicts_1","MetricStorageRegistry","_MetricStorageRegistry","collector","storages","metricStorages","perCollectorStorages","storage","storageMap","expectedDescriptor","descriptor","existingStorages","compatibleStorage","existingStorage","existingDescriptor","exports","MultiMetricStorage","_backingStorages","value","attributes","context","recordTime","it","exports","api_1","HashMap_1","Instruments_1","ObservableResultImpl","_instrumentName","_valueType","value","attributes","exports","BatchObservableResultImpl","metric","map","api_1","Instruments_1","ObservableResult_1","utils_1","ObservableRegistry","callback","instrument","idx","instruments","observableInstruments","collectionTime","timeoutMillis","callbackFutures","batchCallbackFutures","it","observationTime","observableResult","callPromise","metricStorage","buffer","record","exports","MetricStorage_1","DeltaMetricProcessor_1","TemporalMetricProcessor_1","SyncMetricStorage","instrumentDescriptor","aggregator","_attributesProcessor","collectorHandles","value","attributes","context","recordTime","collector","collectionTime","accumulations","exports","AttributesProcessor","NOOP","exports","NoopAttributesProcessor","incoming","_context","FilteringAttributesProcessor","_allowedAttributeNames","filteredAttributes","attributeName","InstrumentDescriptor_1","Meter_1","utils_1","AsyncMetricStorage_1","MetricStorageRegistry_1","MultiWritableMetricStorage_1","ObservableRegistry_1","SyncMetricStorage_1","AttributesProcessor_1","MeterSharedState","_meterProviderSharedState","_instrumentationScope","descriptor","storages","collector","collectionTime","options","errors","metricDataList","metricStorage","MetricStorageType","view","viewDescriptor","compatibleStorage","aggregator","viewStorage","collectorStorages","aggregation","storage","exports","utils_1","ViewRegistry_1","MeterSharedState_1","MeterProviderSharedState","resource","instrumentationScope","id","meterSharedState","instrumentType","result","collector","exports","core_1","MetricCollector","_sharedState","_metricReader","options","collectionTime","scopeMetrics","errors","meterCollectionPromises","meterSharedState","current","instrumentType","exports","api_1","resources_1","MeterProviderSharedState_1","MetricCollector_1","MeterProvider","options","resource","_a","view","name","version","metricReader","collector","exports","ESCAPE","PatternPredicate","_PatternPredicate","pattern","str","exports","ExactPredicate","Predicate_1","InstrumentSelector","criteria","_a","exports","Predicate_1","MeterSelector","criteria","exports","Predicate_1","AttributesProcessor_1","InstrumentSelector_1","MeterSelector_1","Aggregation_1","isSelectorNotProvided","options","View","viewOptions","_a","exports","AggregationTemporality_1","exports","MetricData_1","MetricReader_1","PeriodicExportingMetricReader_1","InMemoryMetricExporter_1","ConsoleMetricExporter_1","InstrumentDescriptor_1","MeterProvider_1","Aggregation_1","View_1","utils_1","events_1","ADD_LISTENER_METHODS","AbstractAsyncHooksContextManager","context","target","manager","contextWrapper","args","ee","methodName","original","contextManager","event","listener","events","_a","patchedListener","map","listeners","exports","api_1","async_hooks_1","AbstractAsyncHooksContextManager_1","AsyncLocalStorageContextManager","_a","context","fn","thisArg","args","cb","exports","toAttributes","attributes","key","toKeyValue","exports","value","toAnyValue","t","k","v","internal_1","sdkSpanToOtlpSpan","span","encoder","ctx","status","_a","event","toOtlpSpanEvent","link","toOtlpLink","exports","timedEvent","core_1","NANOSECONDS","hrTimeToNanos","hrTime","exports","toLongBits","value","low","high","encodeAsLongBits","nanos","encodeAsString","encodeTimestamp","identity","optionalHexToBase64","str","DEFAULT_ENCODER","getOtlpEncoder","options","useLongBits","_a","useHex","_b","internal_1","internal_2","common_1","createExportTraceServiceRequest","spans","options","encoder","spanRecordsToResourceSpans","exports","createResourceMap","readableSpans","resourceMap","record","ilmMap","instrumentationLibraryKey","records","out","entryIterator","entry","resource","scopeResourceSpans","ilmIterator","ilmEntry","scopeSpans","name","version","schemaUrl","readableSpan","transformedSpans","api_1","core_1","DEFAULT_TRACE_TIMEOUT","exports","parseHeaders","partialHeaders","headers","key","value","appendResourcePathToUrl","url","path","appendRootPathToUrlIfNeeded","parsedUrl","configureExporterTimeout","timeoutMillis","invalidTimeout","getExporterTimeoutFromEnv","definedTimeout","_a","timeout","defaultTimeout","isExportRetryable","statusCode","parseRetryAfterToMills","retryAfter","seconds","delay","api_1","core_1","util_1","OTLPExporterBase","config","items","resultCallback","error","resolve","reject","e","exports","require_aspromise","__commonJSMin","exports","module","asPromise","fn","ctx","params","offset","index","pending","resolve","reject","err","require_base64","__commonJSMin","exports","base64","string","p","b64","s64","i","buffer","start","end","parts","chunk","j","t","b","invalidEncoding","offset","c","require_eventemitter","__commonJSMin","exports","module","EventEmitter","evt","fn","ctx","listeners","args","require_float","__commonJSMin","exports","module","factory","f32","f8b","le","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloat_ieee754","writeUint","sign","exponent","mantissa","writeUintLE","writeUintBE","readFloat_ieee754","readUint","uint","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","require_inquire","__commonJSMin","e","require_utf8","__commonJSMin","exports","utf8","string","len","c","buffer","start","end","parts","chunk","i","t","offset","c1","c2","require_pool","__commonJSMin","exports","module","pool","alloc","slice","size","SIZE","MAX","slab","offset","buf","require_longbits","__commonJSMin","exports","module","LongBits","util","lo","hi","zero","zeroHash","value","sign","unsigned","charCodeAt","hash","mask","part0","part1","part2","require_minimal","__commonJSMin","exports","util","value","obj","prop","Buffer","sizeOrArray","hash","unsigned","bits","merge","dst","src","ifNotSet","keys","str","newError","name","CustomError","message","properties","fieldNames","fieldMap","i","encoding","size","require_writer","__commonJSMin","exports","module","Writer","util","BufferWriter","LongBits","base64","utf8","Op","fn","len","val","noop","State","writer","create","size","writeByte","buf","pos","writeVarint32","VarintOp","value","writeVarint64","bits","writeFixed32","writeBytes","head","tail","BufferWriter_","require_writer_buffer","__commonJSMin","exports","module","BufferWriter","Writer","util","val","buf","pos","value","len","writeStringBuffer","require_reader","__commonJSMin","exports","module","Reader","util","BufferReader","LongBits","utf8","indexOutOfRange","reader","writeLength","buffer","create_array","create","value","readLongVarint","bits","i","readFixed32_end","buf","end","readFixed64","length","start","nativeBuffer","bytes","wireType","BufferReader_","fn","require_reader_buffer","__commonJSMin","exports","module","BufferReader","Reader","util","buffer","len","require_service","__commonJSMin","exports","module","Service","util","rpcImpl","requestDelimited","responseDelimited","rpcCall","method","requestCtor","responseCtor","request","callback","self","err","response","endedByRPC","require_rpc","__commonJSMin","exports","rpc","require_roots","__commonJSMin","exports","module","require_index_minimal","__commonJSMin","exports","protobuf","configure","require_minimal","__commonJSMin","exports","module","require_types","__commonJSMin","exports","ESpanKind","exports","api_1","sdk_metrics_1","internal_1","common_1","toResourceMetrics","resourceMetrics","options","encoder","toScopeMetrics","exports","scopeMetrics","metrics","metricData","toMetric","out","aggregationTemporality","toAggregationTemporality","toSingularDataPoints","toHistogramDataPoints","toExponentialHistogramDataPoints","toSingularDataPoint","dataPoint","valueType","histogram","temporality","internal_1","createExportMetricsServiceRequest","resourceMetrics","options","metrics","exports","common_1","internal_1","createExportLogsServiceRequest","logRecords","options","encoder","logRecordsToResourceLogs","exports","createResourceMap","resourceMap","record","resource","name","version","schemaUrl","ismMap","ismKey","records","scopeLogs","log","toLogRecord","toLogAttributes","_a","_b","_c","attributes","key","__exportStar","exports","trace_1","metrics_1","logs_1","import_sdk_trace_base","init_api","init_api_logs","import_autoLoader","import_resources","import_sdk_logs","import_sdk_metrics","import_semantic_conventions","import_environment","import_AsyncLocalStorageContextManager","import_core","init_api","symbol","getVercelRequestContext","import_semantic_conventions","omitUndefinedAttributes","obj","_","value","parseRequestId","header","getVercelRequestContextAttributes","context","getVercelRequestContext","attributesFromHeaders","rootAttrs","resolveAttributesFromHeaders","omitUndefinedAttributes","parseRequestId","getter","_carrier","carrier","key","headers","attrs","attrName","headerName","headerValue","init_api","isSampled","traceFlags","CompositeSpanProcessor","processors","attributesFromHeaders","p","e","span","parentContext","traceId","spanId","traceFlags","isRoot","isSampled","vrc","getVercelRequestContext","vercelRequestContextAttrs","getVercelRequestContextAttributes","promise","resolve","timer","spanProcessor","sampled","rootObj","resourceAttributes","getResourceAttributes","openSpan","i","pending","SPAN_KIND_NAME","kind","attributes","operationName","resourceName","spanTypeAttr","nextSpanType","httpMethod","httpRoute","resourceNameResolved","libraryName","spanType","nextOperationName","toOperationName","name","cleanLibraryName","import_trace","import_OTLPExporterBase","init_api","OTLPExporterEdgeBase","config","items","onSuccess","onError","serviceRequest","body","contentType","headers","e","promise","res","err","index","_config","DEFAULT_COLLECTOR_RESOURCE_PATH","DEFAULT_COLLECTOR_URL","getDefaultUrl","config","OTLPHttpJsonTraceExporter","config","Impl","spans","resultCallback","OTLPExporterEdgeBase","serviceRequest","getDefaultUrl","import_trace","import_minimal","encodeTraceServiceRequest","message","writer","ExportTraceServiceRequest_encode","i","ResourceSpans_encode","Resource_encode","ScopeSpans_encode","KeyValue_encode","InstrumentationScope_encode","Span_encode","AnyValue_encode","ArrayValue_encode","KeyValueList_encode","Event_encode","Link_encode","Status_encode","OTLPHttpProtoTraceExporter","config","Impl","spans","resultCallback","OTLPExporterEdgeBase","serviceRequest","encodeTraceServiceRequest","getDefaultUrl","init_api","import_semantic_conventions","resolveTemplate","template","attrs","match","key","value","FetchInstrumentation","config","tracerProvider","tracer","ignoreUrls","shouldIgnore","url","init","urlString","match","host","branchHost","propagateContextUrls","dontPropagateContextUrls","resourceNameTemplate","attributesFromRequestHeaders","attributesFromResponseHeaders","shouldPropagate","getVercelRequestContext","originalFetch","doFetch","input","initArg","req","attrs","resourceName","resolveTemplate","removeSearch","spanName","parentContext","span","isSampled","fetchContext","traceApi","HEADERS_SETTER","headersToAttributes","startTime","res","duration","onError","pipeResponse","byteLength","err","e","carrier","key","value","index","length","reader","read","done","message","attrsToHeadersMap","headers","attrName","headerName","headerValue","init_api","import_core","VERSION","TRACE_PARENT_HEADER","TRACE_STATE_HEADER","W3CTraceContextPropagator","context","carrier","setter","spanContext","traceApi","traceParent","getter","traceParentHeader","parseTraceParent","traceStateHeader","state","version","traceId","spanId","traceFlags","other","init_api","VercelRuntimePropagator","context","vrc","getVercelRequestContext","rootSpanContext","tracing","init_api","import_core","import_otlp_transformer","VercelRuntimeSpanExporter","spans","resultCallback","context","getVercelRequestContext","data","e","logLevelMap","Sdk","configuration","env","getEnv","runtime","disabled","idGenerator","contextManager","serviceName","resource","omitUndefinedAttributes","resourceDetectors","internalConfig","propagators","parsePropagators","traceSampler","parseSampler","spanProcessors","parseSpanProcessor","spanLimits","tracerProvider","CompositeSpanProcessor","loggerProvider","meterProvider","instrumentations","parseInstrumentations","promises","disableInstrumentations","processEnv","arg","instrumentationConfig","instrumentationOrName","FetchInstrumentation","envPropagators","propagatorOrName","autoList","W3CTraceContextPropagator","VercelRuntimePropagator","i","FALLBACK_OTEL_TRACES_SAMPLER","DEFAULT_RATIO","name","getSamplerProbabilityFromEnv","probability","spanProcessorOrName","processors","VercelRuntimeSpanExporter","port","protocol","config","exporter","OTLPHttpProtoTraceExporter","OTLPHttpJsonTraceExporter","parseTraceExporter","isNotNull","url","buildExporterUrlFromEnv","headers","DEFAULT_COLLECTOR_RESOURCE_PATH","DEFAULT_COLLECTOR_URL","defaultUrlFromEnv","defaultUrlFromEnvAll","x","registerOTel","optionsOrServiceName","options","Sdk"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210],"debugId":null}}]
}