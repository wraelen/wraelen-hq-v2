{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/app/auth/signin/page.tsx"],"sourcesContent":["// src/app/auth/signin/page.tsx – Login form (client-side for interactivity; base Supabase client for browser mutations – best for Next.js 15+ pivot, async-safe without deprecated helpers)\n'use client';  // Logic: Client component (best for form state – no SSR overhead for inputs; push back: Server actions for mutations if scaling auth heavy)\n\nimport { createClient } from '@supabase/supabase-js';  // Base package client (no helpers – lighter, future-proof; uses NEXT_PUBLIC vars for browser)\nimport { useRouter } from 'next/navigation';  // Re-added: For client-side refresh/push (smooth redirect – best for \"game\" feel without full reload; push back: Hard reload if sync issues persist)\nimport { useState } from 'react';\n\nexport default function SignIn() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const router = useRouter();  // Logic: Use for refresh/push (client nav – fast, no reload if possible; best for UX in internal app)\n\n  // Logic: Client-side creation (best practice: Use base createClient for browser – env vars available via process.env.NEXT_PUBLIC_*; no cookies needed on client as sessions persist via localStorage/JWT)\n  const supabase = createClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  );\n\n  const handleSignIn = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const { error } = await supabase.auth.signInWithPassword({ email, password });  // Logic: Supabase native (hashing/JWT auto – no custom bcrypt)\n    if (error) {\n      setError(error.message);  // UX: Feedback for flow (e.g., \"Invalid credentials\" – improves rep login experience)\n      console.error('Login error:', error.message);  // Logic: Dev log (check browser console if no redirect)\n    } else {\n      console.log('Login success – syncing session...');  // Logic: Dev log (confirm if this prints – if yes, signIn succeeded; if no, auth failed)\n      await supabase.auth.getSession();  // Logic: Force session sync (best practice: Ensures JWT/localStorage updated before redirect – fixes timing bug where middleware sees no session; no-brainer for reliable post-login flow)\n      router.refresh();  // Logic: Refresh server data (updates layout/dashboard session without full reload – smooth \"game\" transition; push back: Use window.location.href if refresh flakes in Turbopack)\n      router.push('/dashboard');  // Logic: Client-side push (fast nav – best for App Router; if sync issue, fallback to window.location.href = '/dashboard')\n    }\n  };\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-black text-green-400 font-mono\">\n      <form onSubmit={handleSignIn} className=\"p-8 border-2 border-green-500 rounded-lg shadow-[0_0_15px_rgba(0,255,0,0.7)] bg-black/80\">\n        <h2 className=\"text-2xl mb-6 text-center\">Enter Wraelen HQ</h2>\n        {error && <p className=\"text-red-500 mb-4\">{error}</p>}  // Logic: Conditional error (best for UX – clear, non-blocking)\n        <input\n          type=\"email\"\n          placeholder=\"Email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          className=\"w-full mb-4 p-2 bg-black border border-green-500 text-green-400 focus:outline-none focus:border-green-300\"\n        />\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          className=\"w-full mb-6 p-2 bg-black border border-green-500 text-green-400 focus:outline-none focus:border-green-300\"\n        />\n        <button type=\"submit\" className=\"w-full p-2 bg-green-500 text-black hover:bg-green-600\">Login</button>\n      </form>\n    </div>\n  );\n}"],"names":[],"mappings":"AAAA,4LAA4L;;;;;;AAG5L,4gBAAuD,8FAA8F;AACrJ,upBAA8C,qJAAqJ;AACnM;AAJA,cAAe,4IAA4I;;;;;AAM5I,SAAS;IACtB,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,idAAQ,EAAC;IACnC,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,idAAQ,EAAC;IACzC,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,idAAQ,EAAgB;IAClD,MAAM,SAAS,IAAA,+YAAS,KAAK,sGAAsG;IAEnI,0MAA0M;IAC1M,MAAM,WAAW,IAAA,kUAAY;IAK7B,MAAM,eAAe,OAAO;QAC1B,EAAE,cAAc;QAChB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,kBAAkB,CAAC;YAAE;YAAO;QAAS,IAAK,+DAA+D;QAC/I,IAAI,OAAO;YACT,SAAS,MAAM,OAAO,GAAI,sFAAsF;YAChH,QAAQ,KAAK,CAAC,gBAAgB,MAAM,OAAO,GAAI,wDAAwD;QACzG,OAAO;YACL,QAAQ,GAAG,CAAC,uCAAwC,yFAAyF;YAC7I,MAAM,SAAS,IAAI,CAAC,UAAU,IAAK,2LAA2L;YAC9N,OAAO,OAAO,IAAK,mLAAmL;YACtM,OAAO,IAAI,CAAC,eAAgB,2HAA2H;QACzJ;IACF;IAEA,qBACE,8eAAC;QAAI,WAAU;kBACb,cAAA,8eAAC;YAAK,UAAU;YAAc,WAAU;;8BACtC,8eAAC;oBAAG,WAAU;8BAA4B;;;;;;gBACzC,uBAAS,8eAAC;oBAAE,WAAU;8BAAqB;;;;;;gBAAW;8BACvD,8eAAC;oBACC,MAAK;oBACL,aAAY;oBACZ,OAAO;oBACP,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;oBACxC,WAAU;;;;;;8BAEZ,8eAAC;oBACC,MAAK;oBACL,aAAY;oBACZ,OAAO;oBACP,UAAU,CAAC,IAAM,YAAY,EAAE,MAAM,CAAC,KAAK;oBAC3C,WAAU;;;;;;8BAEZ,8eAAC;oBAAO,MAAK;oBAAS,WAAU;8BAAwD;;;;;;;;;;;;;;;;;AAIhG","debugId":null}}]
}