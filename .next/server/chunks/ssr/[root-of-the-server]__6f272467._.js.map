{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/components/ui/progress.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Progress = registerClientReference(\n    function() { throw new Error(\"Attempted to call Progress() from the server but Progress is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/progress.tsx <module evaluation>\",\n    \"Progress\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,WAAW,CAAA,GAAA,ocAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,gEACA","debugId":null}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/components/ui/progress.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Progress = registerClientReference(\n    function() { throw new Error(\"Attempted to call Progress() from the server but Progress is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/progress.tsx\",\n    \"Progress\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,WAAW,CAAA,GAAA,ocAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,4CACA","debugId":null}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 133, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/lib/prisma.ts"],"sourcesContent":["// lib/prisma.ts\nimport { PrismaClient } from '@prisma/client';\n\ntype PrismaClientConstructor = () => PrismaClient;  // Explicit for ReturnType\n\nconst prismaClientSingleton: PrismaClientConstructor = () => {\n  return new PrismaClient();\n};\n\ndeclare global {\n  // eslint-disable-next-line no-var -- Hoisting required for global Prisma singleton\n  var prisma: ReturnType<PrismaClientConstructor> | undefined;\n}\n\nconst prisma = globalThis.prisma ?? prismaClientSingleton();\n\nif (process.env.NODE_ENV !== 'production') globalThis.prisma = prisma!;  // Non-null for dev\n\nexport default prisma;"],"names":[],"mappings":"AAAA,gBAAgB;;;;AAChB;;AAIA,MAAM,wBAAiD;IACrD,OAAO,IAAI,6HAAA,CAAA,eAAY;AACzB;AAOA,MAAM,SAAS,WAAW,MAAM,IAAI;AAEpC,wCAA2C,WAAW,MAAM,GAAG,QAAU,mBAAmB;uCAE7E","debugId":null}},
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/app/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["// src/app/api/auth/[...nextauth]/route.ts (new file—Auth.js config for login/register with credentials, Prisma adapter for User model integration, session extension for gamification fields)\nimport { PrismaAdapter } from '@auth/prisma-adapter'; // Added: Prisma adapter for session/user linking (auto-creates User on register if not exists)\nimport bcrypt from 'bcryptjs'; // Added: For password hashing/verification (secure storage/comparison)\nimport NextAuth, { Session } from 'next-auth';\nimport { AdapterUser } from 'next-auth/adapters'; // Import AdapterUser type from next-auth/adapters\nimport { JWT } from 'next-auth/jwt'; // Import JWT type from next-auth/jwt\nimport CredentialsProvider from 'next-auth/providers/credentials'; // Added: For username/password login (credentials provider)\nimport prisma from '@/lib/prisma'; // Kept your singleton Prisma client\n\nexport const authOptions = {\n  adapter: PrismaAdapter(prisma), // Added: Uses Prisma to store sessions/accounts, links to your User model (required for adapter; handles register/login auto)\n  providers: [\n    CredentialsProvider({\n      name: 'Credentials',\n      credentials: {\n        username: { label: \"Username\", type: \"text\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        if (!credentials?.username || !credentials?.password) return null; // Added: Basic validation (no empty fields)\n        const user = await prisma.user.findUnique({ where: { username: credentials.username } });\n        if (user && await bcrypt.compare(credentials.password, user.password)) {\n          return user; // Added: Successful login—returns user for session\n        }\n        return null; // Added: Invalid creds—return null to fail\n      },\n    }),\n  ],\n  callbacks: {\n    async session({ session, token }: { session: Session; token: JWT }) { // Kept existing: Use token for JWT strategy (fixes TS2353 'id' not in session.user and TS2345 incompatible—NextAuth callbacks use token for custom fields)\n      // Added: Extend session with gamification fields from token (points/badges/role for dashboard/XP bar; available in getServerSession; id from token.userId)\n      session.user = { ...session.user, id: token.userId as string, role: token.role as Role, points: token.points as number, badges: token.badges as string[] };\n      return session;\n    },\n    async jwt({ token, user }: { token: JWT; user?: AdapterUser }) { // Updated: Type 'user' as AdapterUser (fixes TS2345 'any' and incompatible types in callbacks; AdapterUser for default NextAuth user on first login)\n      if (user) {\n        token.userId = user.id;\n        token.role = user.role;\n        token.points = user.points;\n        token.badges = user.badges;\n      }\n      return token;\n    },\n  },\n  secret: process.env.JWT_SECRET, // Added: From .env (generate random string: openssl rand -base64 32)\n  session: { strategy: \"jwt\" as const }, // Kept existing: JWT for session (simple for solo; switch to database for scale)\n  pages: { signIn: '/auth/signin' }, // Added: Custom login page (create next for game-themed UI)\n};\n\nconst handler = NextAuth(authOptions);\nexport { handler as GET, handler as POST }; // Added: Export for API route (handles all auth requests)"],"names":[],"mappings":"AAAA,8LAA8L;;;;;;AAC9L,wjBAAsD,+FAA+F;AACrJ,2TAA+B,uEAAuE;AACtG;AAGA,umBAAmE,4DAA4D;AAC/H,0MAAmC,oCAAoC;;;;;;AAEhE,MAAM,cAAc;IACzB,SAAS,CAAA,GAAA,kVAAA,CAAA,gBAAa,AAAD,EAAE,oHAAA,CAAA,UAAM;IAC7B,WAAW;QACT,CAAA,GAAA,uWAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAO;gBAC5C,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,YAAY,CAAC,aAAa,UAAU,OAAO,MAAM,4CAA4C;gBAC/G,MAAM,OAAO,MAAM,oHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBAAE,OAAO;wBAAE,UAAU,YAAY,QAAQ;oBAAC;gBAAE;gBACtF,IAAI,QAAQ,MAAM,sLAAA,CAAA,UAAM,CAAC,OAAO,CAAC,YAAY,QAAQ,EAAE,KAAK,QAAQ,GAAG;oBACrE,OAAO,MAAM,mDAAmD;gBAClE;gBACA,OAAO,MAAM,2CAA2C;YAC1D;QACF;KACD;IACD,WAAW;QACT,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAoC;YAChE,2JAA2J;YAC3J,QAAQ,IAAI,GAAG;gBAAE,GAAG,QAAQ,IAAI;gBAAE,IAAI,MAAM,MAAM;gBAAY,MAAM,MAAM,IAAI;gBAAU,QAAQ,MAAM,MAAM;gBAAY,QAAQ,MAAM,MAAM;YAAa;YACzJ,OAAO;QACT;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAsC;YAC3D,IAAI,MAAM;gBACR,MAAM,MAAM,GAAG,KAAK,EAAE;gBACtB,MAAM,IAAI,GAAG,KAAK,IAAI;gBACtB,MAAM,MAAM,GAAG,KAAK,MAAM;gBAC1B,MAAM,MAAM,GAAG,KAAK,MAAM;YAC5B;YACA,OAAO;QACT;IACF;IACA,QAAQ,QAAQ,GAAG,CAAC,UAAU;IAC9B,SAAS;QAAE,UAAU;IAAe;IACpC,OAAO;QAAE,QAAQ;IAAe;AAClC;AAEA,MAAM,UAAU,CAAA,GAAA,oVAAA,CAAA,UAAQ,AAAD,EAAE;;CACmB,0DAA0D","debugId":null}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/app/layout.tsx"],"sourcesContent":["import \"src/styles/tailwind.css\" // Kept existing import for Tailwind styles\n\nimport Link from 'next/link'; // Added: For client-side navigation links (best practice in Next.js—fast, no reloads for game-like feel on page changes)\nimport { getServerSession } from 'next-auth'; // Kept existing: For fetching user session with XP/points (requires next-auth installed and authOptions defined in api/auth/[...nextauth]/route.ts)\nimport { Progress } from '@/components/ui/progress'; // Kept existing: Shadcn Progress component for visual XP bar (install if not: npx shadcn-ui@latest add progress)\nimport { authOptions } from './auth/[...nextauth]/route'; // Kept existing: Import auth config (stub if not set up yet; push back: Add Auth.js for secure roles/XP access)\n\nexport default async function RootLayout({ children }: { children: React.ReactNode }) {\n  const session = await getServerSession(authOptions); // Kept existing: Fetch session server-side to get user XP/points (safe for async layout in Next.js app dir)\n  const userXp = session?.user?.points || 0; // Updated: Get points from session (defaults to 0 if not logged in or no points field)\n  const currentLevel = Math.min(Math.floor(userXp / 100), 99); // Kept existing: Calc level 0-99 based on points (100 points per level placeholder—adjust to your defined task values; no multipliers as per your request)\n\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Added: Navigation bar for easy page traversal (links to Home/Dashboard/Login/Register/Logout—conditional on session for auth state; uses next/link for client-side routing, Tailwind for styling; placed above XP bar for hierarchy) */}\n        <nav className=\"fixed top-4 left-0 w-full bg-gray-800 text-white z-40 flex justify-center space-x-4 p-2\"> /* Game-themed dark bar; fixed above XP for always visible */\n          <Link href=\"/\">Home</Link> /* Link to home page (boilerplate default; client-side nav) */\n          <Link href=\"/dashboard\">Dashboard</Link> /* Link to dashboard (gamified view; fixes 404 by ensuring page.tsx exists—create next) */\n          {session ? (\n            <Link href=\"/api/auth/signout\">Logout</Link> /* Conditional: Logout if logged in (next-auth built-in signout route; redirect to home) */\n          ) : (\n            <>\n              <Link href=\"/auth/signin\">Login</Link> /* Link to login page (custom form; fixes 404 by ensuring page.tsx exists—create if not) */\n              <Link href=\"/auth/register\">Register</Link> /* Link to register page (form calling /api/register; add page.tsx for UI—stub below) */\n            </>\n          )}\n        </nav>\n        {/* Added: Persistent XP bar on every page (visual progress, like WoW top bar; tied to session XP for real-time feel—updates on re-render after quests) */}\n        <div className=\"fixed top-0 left-0 w-full h-4 bg-gray-200 z-50\">\n          <Progress value={(userXp % 100)} className=\"h-full\" /> {/* Added: Progress to next level using Shadcn (Tailwind-styled); value is % to next 100 XP */}\n          <span className=\"absolute top-0 left-1/2 transform -translate-x-1/2 text-xs text-black\">Level {currentLevel} ({userXp % 100}/100 XP)</span> /* Added: Level display with placeholder for lore tooltip (add Tooltip component here for hover explanation) */\n        </div>\n        {children} // Kept existing children render\n      </body>\n    </html>\n  )\n}"],"names":[],"mappings":";;;;AAEA,ymBAA8B,yHAAyH;AACvJ,okBAA8C,oJAAoJ;AAClM,uOAAqD,iHAAiH;AACtK,yPAA0D,gHAAgH;;;;;;;AAE3J,eAAe,WAAW,EAAE,QAAQ,EAAiC;IAClF,MAAM,UAAU,MAAM,CAAA,GAAA,oVAAA,CAAA,mBAAgB,AAAD,EAAE,iJAAA,CAAA,cAAW,GAAG,4GAA4G;IACjK,MAAM,SAAS,SAAS,MAAM,UAAU,GAAG,uFAAuF;IAClI,MAAM,eAAe,KAAK,GAAG,CAAC,KAAK,KAAK,CAAC,SAAS,MAAM,KAAK,2JAA2J;IAExN,qBACE,6bAAC;QAAK,MAAK;kBACT,cAAA,6bAAC;;8BAEC,6bAAC;oBAAI,WAAU;;wBAA0F;sCACvG,6bAAC,2WAAA,CAAA,UAAI;4BAAC,MAAK;sCAAI;;;;;;wBAAW;sCAC1B,6bAAC,2WAAA,CAAA,UAAI;4BAAC,MAAK;sCAAa;;;;;;wBAAgB;wBACvC,wBACC,6bAAC,2WAAA,CAAA,UAAI;4BAAC,MAAK;sCAAoB;;;;;iDAE/B;;8CACE,6bAAC,2WAAA,CAAA,UAAI;oCAAC,MAAK;8CAAe;;;;;;gCAAY;8CACtC,6bAAC,2WAAA,CAAA,UAAI;oCAAC,MAAK;8CAAiB;;;;;;gCAAe;;;;;;;;;8BAKjD,6bAAC;oBAAI,WAAU;;sCACb,6bAAC,oIAAA,CAAA,WAAQ;4BAAC,OAAQ,SAAS;4BAAM,WAAU;;;;;;wBAAW;sCACtD,6bAAC;4BAAK,WAAU;;gCAAwE;gCAAO;gCAAa;gCAAG,SAAS;gCAAI;;;;;;;wBAAe;;;;;;;gBAE5I;gBAAS;;;;;;;;;;;;AAIlB","debugId":null}}]
}