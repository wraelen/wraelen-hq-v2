{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/inter_dd475d0c.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"inter_dd475d0c-module__9A3jha__className\",\n  \"variable\": \"inter_dd475d0c-module__9A3jha__variable\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/inter_dd475d0c.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Inter%22,%22arguments%22:[{%22subsets%22:[%22latin%22],%22variable%22:%22--font-sans%22}],%22variableName%22:%22fontSans%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Inter', 'Inter Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,gKAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,gKAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,gKAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/components/ui/progress.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const Progress = registerClientReference(\n    function() { throw new Error(\"Attempted to call Progress() from the server but Progress is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/wraelen/wraelen-internal-boilerplate/src/components/ui/progress.tsx <module evaluation>\",\n    \"Progress\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,WAAW,IAAA,wgBAAuB,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,qGACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/components/ui/progress.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const Progress = registerClientReference(\n    function() { throw new Error(\"Attempted to call Progress() from the server but Progress is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/wraelen/wraelen-internal-boilerplate/src/components/ui/progress.tsx\",\n    \"Progress\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,WAAW,IAAA,wgBAAuB,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,iFACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/lib/prisma.ts"],"sourcesContent":["// src/lib/prisma.ts – Prisma singleton (best practice: Avoids new instances per request – reduces latency/overhead for quest updates; push back: Raw imports risk exhaustion on Supabase as reps grow)\nimport { PrismaClient } from '@prisma/client';\n\nlet prisma: PrismaClient;\n\nif (process.env.NODE_ENV === 'production') {\n  prisma = new PrismaClient();  // Prod: Single instance (efficient scale for leaderboards/queries)\n} else {\n  if (!globalThis.prisma) {\n    globalThis.prisma = new PrismaClient();  // Dev: Global persists across HMR (hot reload – no reconnections on code changes)\n  }\n  prisma = globalThis.prisma;\n}\n\nexport default prisma;  // Logic: Export for server use (type-safe, e.g., prisma.profile.findUnique autocompletes points/role)"],"names":[],"mappings":"AAAA,uMAAuM;;;;;AACvM;;AAEA,IAAI;AAEJ;;KAEO;IACL,IAAI,CAAC,WAAW,MAAM,EAAE;QACtB,WAAW,MAAM,GAAG,IAAI,6IAAY,IAAK,kFAAkF;IAC7H;IACA,SAAS,WAAW,MAAM;AAC5B;uCAEe;CAAS,sGAAsG","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,IAAA,qRAAO,EAAC,IAAA,+OAAI,EAAC;AACtB","debugId":null}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/app/layout.tsx"],"sourcesContent":["// src/app/layout.tsx – Root layout (server-side; best practice: Global metadata/UI like XP bar – efficient SSR, no client fetches for core elements)\nimport '@/styles/global.css'; // Kept: Tailwind/globals (best for console/game theme – add monospace fonts/glow plugins later for \"HQ\" vibe)\nimport { createServerClient } from '@supabase/ssr'; // Added: ssr client (logic: Async-safe sessions for Next.js 15+ – fixes cookies await; type-safe)\nimport type { Metadata } from 'next'; // Kept: Type-safe metadata (best for SEO/internal search)\nimport { Inter as FontSans } from 'next/font/google'; // Kept: Font opt (push back: Add monospace like 'Fira Code' for terminal feel – install via npm)\nimport { cookies } from 'next/headers'; // For cookie store (best for server sessions – secure)\nimport Link from 'next/link'; // Kept: Client nav (fast, no reloads – game-like flow for traversing levels/quests)\nimport { redirect } from 'next/navigation';\nimport { Progress } from '@/components/ui/progress'; // Kept: Shadcn for XP bar (install if missing: npx shadcn@latest add progress; visual motivator for reps)\nimport prisma from '@/lib/prisma'; // Prisma singleton (logic: Get points/role – relational fetch for gamification)\nimport { cn } from '@/lib/utils'; // Kept: Tailwind helper (best for conditional classes, e.g., role-based styling)\nconst fontSans = FontSans({\n  subsets: ['latin'],\n  variable: '--font-sans',\n});\nexport const metadata: Metadata = { // Kept: Global meta (best for branding – add og images for \"HQ\" game feel)\n  title: 'Wraelen HQ',\n  description: 'Gamified internal headquarters for Wraelen real estate wholesaling – level up, earn badges, challenge alongside peers!',\n};\nexport default async function RootLayout({ children }: { children: React.ReactNode }) {\n  const cookieStore = await cookies(); // Logic: Awaitable in 15+ (best for dynamic APIs – secure cookie access)\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    { cookies: {\n      getAll: () => cookieStore.getAll(),\n      setAll: (cookiesToSet) => {\n        try {\n          cookiesToSet.forEach(({ name, value, options }) => cookieStore.set(name, value, options)); // Logic: Attempts set (succeeds in components; ignored in actions via catch – middleware refreshes on redirect)\n        } catch {\n          // The `set` method was called from a Server Action. Ignore – middleware will refresh session on next request.\n        }\n      },\n    } }\n  ); // Logic: ssr client (no NextAuth – simpler, native)\n  const { data: { session } } = await supabase.auth.getSession(); // Logic: Await fetch (async-safe – best for SSR)\n  let xp = 0; // Stub XP/points (logic: Fetch from Prisma if logged in – best for gamification display; update on point thresholds later, e.g., 1000 points = \"Apprentice\")\n  let role = 'Guest'; // Default (push back: Use 'Novice' post-login; add badges UI)\n  if (session) {\n    const profile = await prisma.profile.findUnique({ where: { user_id: session.user.id } }); // Logic: Singleton fetch (efficient)\n    xp = profile?.points || 0;\n    role = profile?.role || 'Novice';\n  }\n  return (\n    <html lang=\"en\">\n      <body className={cn('min-h-screen bg-background font-sans antialiased', fontSans.variable)}> \n        <header className=\"p-4 bg-black text-green-400 border-b border-green-500\"> \n          <nav className=\"flex justify-between items-center\">\n            <Link href=\"/\" className=\"text-2xl font-bold\">Wraelen HQ</Link> \n            <div className=\"flex items-center gap-4\">\n              <span>Role: {role}</span> \n              <Progress value={(xp / 1000) * 100} className=\"w-32\" /> \n              {session ? <form action={async () => { 'use server'; await supabase.auth.signOut(); redirect('/auth/signin'); }}><button type=\"submit\">Logout</button></form> : <Link href=\"/auth/signin\">Login</Link>} \n            </div>\n          </nav>\n        </header>\n        {children}\n      </body>\n    </html>\n  );\n}"],"names":[],"mappings":"AAAA,qJAAqJ;;;;;;;;;;;;AAErJ,gjBAAoD,kGAAkG;AAAtJ;;AAGA,ipBAAwC,uDAAuD;AAC/F,+rBAA8B,oFAAoF;AAClH;AAAA;AACA,6TAAqD,0GAA0G;AAC/J,gSAAmC,gFAAgF;AACnH,8RAAkC,iFAAiF;;;;;;;;;;;;;AAK5G,MAAM,WAAqB;IAChC,OAAO;IACP,aAAa;AACf;MAkCuC,uCAAR;;IAAoC,MAAM,eAAc,OAAO;IAAI,IAAA,icAAQ,EAAC;AAAiB;AAArF,+eAAA;AAjCxB,eAAe,WAAW,EAAE,QAAQ,EAAiC;IAClF,MAAM,cAAc,MAAM,IAAA,0YAAO,KAAI,yEAAyE;IAC9G,MAAM,WAAW,IAAA,6VAAkB,sUAGjC;QAAE,SAAS;YACT,QAAQ,IAAM,YAAY,MAAM;YAChC,QAAQ,CAAC;gBACP,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAAK,YAAY,GAAG,CAAC,MAAM,OAAO,WAAW,gHAAgH;gBAC7M,EAAE,OAAM;gBACN,8GAA8G;gBAChH;YACF;QACF;IAAE,IACD,oDAAoD;IACvD,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,UAAU,IAAI,iDAAiD;IACjH,IAAI,KAAK,GAAG,6JAA6J;IACzK,IAAI,OAAO,SAAS,8DAA8D;IAClF,IAAI,SAAS;QACX,MAAM,UAAU,MAAM,gLAAM,CAAC,OAAO,CAAC,UAAU,CAAC;YAAE,OAAO;gBAAE,SAAS,QAAQ,IAAI,CAAC,EAAE;YAAC;QAAE,IAAI,qCAAqC;QAC/H,KAAK,SAAS,UAAU;QACxB,OAAO,SAAS,QAAQ;IAC1B;IACA,qBACE,8eAAC;QAAK,MAAK;kBACT,cAAA,8eAAC;YAAK,WAAW,IAAA,0KAAE,EAAC,oDAAoD,oJAAQ,CAAC,QAAQ;;8BACvF,8eAAC;oBAAO,WAAU;8BAChB,cAAA,8eAAC;wBAAI,WAAU;;0CACb,8eAAC,uaAAI;gCAAC,MAAK;gCAAI,WAAU;0CAAqB;;;;;;0CAC9C,8eAAC;gCAAI,WAAU;;kDACb,8eAAC;;4CAAK;4CAAO;;;;;;;kDACb,8eAAC,iMAAQ;wCAAC,OAAO,AAAC,KAAK,OAAQ;wCAAK,WAAU;;;;;;oCAC7C,wBAAU,8eAAC;wCAAK,MAAM,EAAE;kDAAwF,cAAA,8eAAC;4CAAO,MAAK;sDAAS;;;;;;;;;;6DAAyB,8eAAC,uaAAI;wCAAC,MAAK;kDAAe;;;;;;;;;;;;;;;;;;;;;;;gBAI/L;;;;;;;;;;;;AAIT","debugId":null}}]
}