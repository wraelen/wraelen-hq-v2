{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/app/auth/signup/action.ts"],"sourcesContent":["// src/app/auth/signup/actions.ts – Server actions for signup (separate file for 'use server' – best practice: Keeps client/server code clean, avoids parse errors in mixed files; future-proof for adding more actions like quest completion)\n'use server';  // Logic: Marks as server-only (runs on server – secure DB ops; must be first line to avoid 'not at top' error)\n\nimport { revalidatePath } from 'next/cache';  // For cache invalidation (optimizes post-signup dashboard load – fresh data without manual refresh)\nimport prisma from '@/lib/prisma';  // Prisma singleton (logic: Relational profile creation for gamification init – best for scale as reps grow)\n\nexport async function createInitialProfile(userId: string) {\n  await prisma.profile.create({\n    data: {\n      userId,  // Logic: Links to Supabase user.id (UUID – enables efficient joins for quests/leaderboards, e.g., top points by role)\n      role: 'Novice',  // Logic: Initial role (gamification start – unlock 'Apprentice' at 1000 points via future API threshold check)\n      points: 0,  // Logic: Start at zero (earn via quests like Zillow scrapes or CallRail logs – increment in API routes)\n      badges: [],  // Logic: Empty array (add strings like 'LeadScraper' on quest completion – queryable for badges leaderboard)\n    },\n  });\n  revalidatePath('/dashboard');  // Logic: Invalidates cache (ensures dashboard shows fresh profile data post-signup – best for seamless flow after redirect)\n}"],"names":[],"mappings":"AAAA,8OAA8O;;;;;;AAG9O,6oBAA8C,oGAAoG;AAClJ,gSAAoC,4GAA4G;;;;;AAEzI,eAAe,qBAAqB,MAAc;IACvD,MAAM,gLAAM,CAAC,OAAO,CAAC,MAAM,CAAC;QAC1B,MAAM;YACJ;YACA,MAAM;YACN,QAAQ;YACR,QAAQ,EAAE;QACZ;IACF;IACA,IAAA,+YAAc,EAAC,eAAgB,4HAA4H;AAC7J;;;IAVsB;;AAAA,+eAAA","debugId":null}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/.next-internal/server/app/auth/signup/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {$$RSC_SERVER_ACTION_0 as '40d92fdaace826a4b14baf5b30cd6ab04e268791d4'} from 'ACTIONS_MODULE0'\nexport {createInitialProfile as '4043e5f9f7926f8f1b5fd13aa7f4f13c5c82ddb93a'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/app/auth/signup/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/wraelen/wraelen-internal-boilerplate/src/app/auth/signup/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/wraelen/wraelen-internal-boilerplate/src/app/auth/signup/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wgBAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAqU,GAClW,mGACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/app/auth/signup/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/wraelen/wraelen-internal-boilerplate/src/app/auth/signup/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/wraelen/wraelen-internal-boilerplate/src/app/auth/signup/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wgBAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAiT,GAC9U,+EACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}