{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 18, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/components/ui/table.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Table = registerClientReference(\n    function() { throw new Error(\"Attempted to call Table() from the server but Table is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/table.tsx <module evaluation>\",\n    \"Table\",\n);\nexport const TableBody = registerClientReference(\n    function() { throw new Error(\"Attempted to call TableBody() from the server but TableBody is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/table.tsx <module evaluation>\",\n    \"TableBody\",\n);\nexport const TableCaption = registerClientReference(\n    function() { throw new Error(\"Attempted to call TableCaption() from the server but TableCaption is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/table.tsx <module evaluation>\",\n    \"TableCaption\",\n);\nexport const TableCell = registerClientReference(\n    function() { throw new Error(\"Attempted to call TableCell() from the server but TableCell is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/table.tsx <module evaluation>\",\n    \"TableCell\",\n);\nexport const TableFooter = registerClientReference(\n    function() { throw new Error(\"Attempted to call TableFooter() from the server but TableFooter is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/table.tsx <module evaluation>\",\n    \"TableFooter\",\n);\nexport const TableHead = registerClientReference(\n    function() { throw new Error(\"Attempted to call TableHead() from the server but TableHead is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/table.tsx <module evaluation>\",\n    \"TableHead\",\n);\nexport const TableHeader = registerClientReference(\n    function() { throw new Error(\"Attempted to call TableHeader() from the server but TableHeader is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/table.tsx <module evaluation>\",\n    \"TableHeader\",\n);\nexport const TableRow = registerClientReference(\n    function() { throw new Error(\"Attempted to call TableRow() from the server but TableRow is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/table.tsx <module evaluation>\",\n    \"TableRow\",\n);\n"],"names":[],"mappings":";;;;;;;;;;AAAA;;AACO,MAAM,QAAQ,CAAA,GAAA,ocAAA,CAAA,0BAAuB,AAAD,EACvC;IAAa,MAAM,IAAI,MAAM;AAA0N,GACvP,6DACA;AAEG,MAAM,YAAY,CAAA,GAAA,ocAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,6DACA;AAEG,MAAM,eAAe,CAAA,GAAA,ocAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,6DACA;AAEG,MAAM,YAAY,CAAA,GAAA,ocAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,6DACA;AAEG,MAAM,cAAc,CAAA,GAAA,ocAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,6DACA;AAEG,MAAM,YAAY,CAAA,GAAA,ocAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,6DACA;AAEG,MAAM,cAAc,CAAA,GAAA,ocAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,6DACA;AAEG,MAAM,WAAW,CAAA,GAAA,ocAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,6DACA","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/components/ui/table.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Table = registerClientReference(\n    function() { throw new Error(\"Attempted to call Table() from the server but Table is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/table.tsx\",\n    \"Table\",\n);\nexport const TableBody = registerClientReference(\n    function() { throw new Error(\"Attempted to call TableBody() from the server but TableBody is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/table.tsx\",\n    \"TableBody\",\n);\nexport const TableCaption = registerClientReference(\n    function() { throw new Error(\"Attempted to call TableCaption() from the server but TableCaption is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/table.tsx\",\n    \"TableCaption\",\n);\nexport const TableCell = registerClientReference(\n    function() { throw new Error(\"Attempted to call TableCell() from the server but TableCell is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/table.tsx\",\n    \"TableCell\",\n);\nexport const TableFooter = registerClientReference(\n    function() { throw new Error(\"Attempted to call TableFooter() from the server but TableFooter is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/table.tsx\",\n    \"TableFooter\",\n);\nexport const TableHead = registerClientReference(\n    function() { throw new Error(\"Attempted to call TableHead() from the server but TableHead is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/table.tsx\",\n    \"TableHead\",\n);\nexport const TableHeader = registerClientReference(\n    function() { throw new Error(\"Attempted to call TableHeader() from the server but TableHeader is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/table.tsx\",\n    \"TableHeader\",\n);\nexport const TableRow = registerClientReference(\n    function() { throw new Error(\"Attempted to call TableRow() from the server but TableRow is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/table.tsx\",\n    \"TableRow\",\n);\n"],"names":[],"mappings":";;;;;;;;;;AAAA;;AACO,MAAM,QAAQ,CAAA,GAAA,ocAAA,CAAA,0BAAuB,AAAD,EACvC;IAAa,MAAM,IAAI,MAAM;AAA0N,GACvP,yCACA;AAEG,MAAM,YAAY,CAAA,GAAA,ocAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,yCACA;AAEG,MAAM,eAAe,CAAA,GAAA,ocAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,yCACA;AAEG,MAAM,YAAY,CAAA,GAAA,ocAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,yCACA;AAEG,MAAM,cAAc,CAAA,GAAA,ocAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,yCACA;AAEG,MAAM,YAAY,CAAA,GAAA,ocAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,yCACA;AAEG,MAAM,cAAc,CAAA,GAAA,ocAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,yCACA;AAEG,MAAM,WAAW,CAAA,GAAA,ocAAA,CAAA,0BAAuB,AAAD,EAC1C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,yCACA","debugId":null}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/app/dashboard/page.tsx"],"sourcesContent":["// src/app/dashboard/page.tsx (updated—stubbed session check for testing full content without login; re-enable for production security; kept all comments/code)\n// import { getServerSession } from 'next-auth'; // Removed unused import\nimport { Progress } from '@/components/ui/progress'; // Kept existing\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'; // Kept existing\nimport prisma from '@/lib/prisma'; // Kept existing\n// import { authOptions } from '../api/auth/[...nextauth]/route'; // Removed unused import\n\nexport default async function Dashboard() {\n  // const session = await getServerSession(authOptions); // Commented out: Stub for testing without login (fixes blank 'Login required' page; re-enable for auth guard to protect data)\n  // if (!session) return <div>Login required</div>; // Commented out: Stub—remove to see full dashboard; push back: Add middleware.ts for auto-redirect to /auth/signin on unauth\n\n  const stubUserId = 'your_test_user_id_from_studio'; // Added: Stub userId for testing Prisma fetch without session (replace with a seeded user id from Prisma Studio, e.g., novice_rep's id; remove when re-enabling session)\n  const user = await prisma.user.findUnique({ where: { id: stubUserId }, include: { leads: true } }); // Updated: Use stubUserId for testing (fixes undefined user when no session; re-enable session.user?.id for auth)\n  const leaders = await prisma.user.findMany({ orderBy: { points: 'desc' }, take: 10 }); // Kept existing\n\n  const totalScore = user?.leads.reduce((sum, lead) => sum + lead.score, 0) || 0; // Kept existing\n  const nextThreshold = 1000; // Kept existing\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <h1>Wraelen HQ - {user?.username} (Role: {user?.role})</h1>\n      <p>Points: {user?.points ?? 0} | Badges: {user?.badges.join(', ')}</p> /* Updated: ?? 0 for user.points (fixes potential undefined) */\n      <Progress value={(user?.points ?? 0 / nextThreshold) * 100} className=\"w-full mb-4\" /> /* Updated: ?? 0 for user.points (fixes potential undefined) */\n      <p>Quest Bonuses from Leads: +{totalScore} XP</p>\n      <h2>Your Leads ({user?.leads.length})</h2>\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Address</TableHead>\n            <TableHead>Price</TableHead>\n            <TableHead>Score</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {user?.leads.map((lead) => (\n            <TableRow key={lead.id}>\n              <TableCell>{lead.address}</TableCell>\n              <TableCell>{lead.price}</TableCell>\n              <TableCell>{lead.score}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      <h2>Leaderboard</h2>\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Rank</TableHead>\n            <TableHead>Rep</TableHead>\n            <TableHead>Points</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {leaders.map((rep, idx) => (\n            <TableRow key={rep.id}>\n              <TableCell>{idx + 1}</TableCell>\n              <TableCell>{rep.username}</TableCell>\n              <TableCell>{rep.points}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}"],"names":[],"mappings":"AAAA,+JAA+J;AAC/J,yEAAyE;;;;;AACzE,uOAAqD,gBAAgB;AACrE,iOAAuG,gBAAgB;AACvH,0MAAmC,gBAAgB;;;;;AAGpC,eAAe;IAC5B,sLAAsL;IACtL,gLAAgL;IAEhL,MAAM,aAAa,iCAAiC,yKAAyK;IAC7N,MAAM,OAAO,MAAM,oHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QAAE,OAAO;YAAE,IAAI;QAAW;QAAG,SAAS;YAAE,OAAO;QAAK;IAAE,IAAI,kHAAkH;IACtN,MAAM,UAAU,MAAM,oHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QAAE,SAAS;YAAE,QAAQ;QAAO;QAAG,MAAM;IAAG,IAAI,gBAAgB;IAEvG,MAAM,aAAa,MAAM,MAAM,OAAO,CAAC,KAAK,OAAS,MAAM,KAAK,KAAK,EAAE,MAAM,GAAG,gBAAgB;IAChG,MAAM,gBAAgB,MAAM,gBAAgB;IAE5C,qBACE,6bAAC;QAAI,WAAU;;0BACb,6bAAC;;oBAAG;oBAAc,MAAM;oBAAS;oBAAS,MAAM;oBAAK;;;;;;;0BACrD,6bAAC;;oBAAE;oBAAS,MAAM,UAAU;oBAAE;oBAAY,MAAM,OAAO,KAAK;;;;;;;YAAU;0BACtE,6bAAC,oIAAA,CAAA,WAAQ;gBAAC,OAAO,CAAC,MAAM,UAAU,IAAI,aAAa,IAAI;gBAAK,WAAU;;;;;;YAAgB;0BACtF,6bAAC;;oBAAE;oBAA4B;oBAAW;;;;;;;0BAC1C,6bAAC;;oBAAG;oBAAa,MAAM,MAAM;oBAAO;;;;;;;0BACpC,6bAAC,iIAAA,CAAA,QAAK;;kCACJ,6bAAC,iIAAA,CAAA,cAAW;kCACV,cAAA,6bAAC,iIAAA,CAAA,WAAQ;;8CACP,6bAAC,iIAAA,CAAA,YAAS;8CAAC;;;;;;8CACX,6bAAC,iIAAA,CAAA,YAAS;8CAAC;;;;;;8CACX,6bAAC,iIAAA,CAAA,YAAS;8CAAC;;;;;;;;;;;;;;;;;kCAGf,6bAAC,iIAAA,CAAA,YAAS;kCACP,MAAM,MAAM,IAAI,CAAC,qBAChB,6bAAC,iIAAA,CAAA,WAAQ;;kDACP,6bAAC,iIAAA,CAAA,YAAS;kDAAE,KAAK,OAAO;;;;;;kDACxB,6bAAC,iIAAA,CAAA,YAAS;kDAAE,KAAK,KAAK;;;;;;kDACtB,6bAAC,iIAAA,CAAA,YAAS;kDAAE,KAAK,KAAK;;;;;;;+BAHT,KAAK,EAAE;;;;;;;;;;;;;;;;0BAQ5B,6bAAC;0BAAG;;;;;;0BACJ,6bAAC,iIAAA,CAAA,QAAK;;kCACJ,6bAAC,iIAAA,CAAA,cAAW;kCACV,cAAA,6bAAC,iIAAA,CAAA,WAAQ;;8CACP,6bAAC,iIAAA,CAAA,YAAS;8CAAC;;;;;;8CACX,6bAAC,iIAAA,CAAA,YAAS;8CAAC;;;;;;8CACX,6bAAC,iIAAA,CAAA,YAAS;8CAAC;;;;;;;;;;;;;;;;;kCAGf,6bAAC,iIAAA,CAAA,YAAS;kCACP,QAAQ,GAAG,CAAC,CAAC,KAAK,oBACjB,6bAAC,iIAAA,CAAA,WAAQ;;kDACP,6bAAC,iIAAA,CAAA,YAAS;kDAAE,MAAM;;;;;;kDAClB,6bAAC,iIAAA,CAAA,YAAS;kDAAE,IAAI,QAAQ;;;;;;kDACxB,6bAAC,iIAAA,CAAA,YAAS;kDAAE,IAAI,MAAM;;;;;;;+BAHT,IAAI,EAAE;;;;;;;;;;;;;;;;;;;;;;AAUjC","debugId":null}}]
}