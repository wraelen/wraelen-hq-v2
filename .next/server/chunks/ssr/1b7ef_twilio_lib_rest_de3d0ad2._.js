module.exports = [
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/accounts/v1/authTokenPromotion.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Accounts
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AuthTokenPromotionInstance = exports.AuthTokenPromotionContextImpl = void 0;
exports.AuthTokenPromotionListInstance = AuthTokenPromotionListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
class AuthTokenPromotionContextImpl {
    constructor(_version){
        this._version = _version;
        this._solution = {};
        this._uri = `/AuthTokens/Promote`;
    }
    update(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AuthTokenPromotionInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AuthTokenPromotionContextImpl = AuthTokenPromotionContextImpl;
class AuthTokenPromotionInstance {
    constructor(_version, payload){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.authToken = payload.auth_token;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {};
    }
    get _proxy() {
        this._context = this._context || new AuthTokenPromotionContextImpl(this._version);
        return this._context;
    }
    /**
     * Update a AuthTokenPromotionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed AuthTokenPromotionInstance
     */ update(callback) {
        return this._proxy.update(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            authToken: this.authToken,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AuthTokenPromotionInstance = AuthTokenPromotionInstance;
function AuthTokenPromotionListInstance(version) {
    const instance = ()=>instance.get();
    instance.get = function get() {
        return new AuthTokenPromotionContextImpl(version);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/accounts/v1/bulkConsents.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Accounts
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BulkConsentsInstance = void 0;
exports.BulkConsentsListInstance = BulkConsentsListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function BulkConsentsListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Consents/Bulk`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["items"] === null || params["items"] === undefined) {
            throw new Error("Required parameter \"params['items']\" missing.");
        }
        let data = {};
        data["Items"] = serialize.map(params["items"], (e)=>serialize.object(e));
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BulkConsentsInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class BulkConsentsInstance {
    constructor(_version, payload){
        this._version = _version;
        this.items = payload.items;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            items: this.items
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BulkConsentsInstance = BulkConsentsInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/accounts/v1/bulkContacts.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Accounts
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BulkContactsInstance = void 0;
exports.BulkContactsListInstance = BulkContactsListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function BulkContactsListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Contacts/Bulk`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["items"] === null || params["items"] === undefined) {
            throw new Error("Required parameter \"params['items']\" missing.");
        }
        let data = {};
        data["Items"] = serialize.map(params["items"], (e)=>serialize.object(e));
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BulkContactsInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class BulkContactsInstance {
    constructor(_version, payload){
        this._version = _version;
        this.items = payload.items;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            items: this.items
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BulkContactsInstance = BulkContactsInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/accounts/v1/credential/aws.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Accounts
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AwsPage = exports.AwsInstance = exports.AwsContextImpl = void 0;
exports.AwsListInstance = AwsListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class AwsContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Credentials/AWS/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AwsInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AwsInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AwsContextImpl = AwsContextImpl;
class AwsInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new AwsContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a AwsInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a AwsInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed AwsInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AwsInstance = AwsInstance;
function AwsListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new AwsContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Credentials/AWS`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["credentials"] === null || params["credentials"] === undefined) {
            throw new Error("Required parameter \"params['credentials']\" missing.");
        }
        let data = {};
        data["Credentials"] = params["credentials"];
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["accountSid"] !== undefined) data["AccountSid"] = params["accountSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AwsInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AwsPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new AwsPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class AwsPage extends Page_1.default {
    /**
     * Initialize the AwsPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of AwsInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new AwsInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AwsPage = AwsPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/accounts/v1/credential/publicKey.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Accounts
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PublicKeyPage = exports.PublicKeyInstance = exports.PublicKeyContextImpl = void 0;
exports.PublicKeyListInstance = PublicKeyListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class PublicKeyContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Credentials/PublicKeys/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PublicKeyInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PublicKeyInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PublicKeyContextImpl = PublicKeyContextImpl;
class PublicKeyInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new PublicKeyContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a PublicKeyInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a PublicKeyInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed PublicKeyInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PublicKeyInstance = PublicKeyInstance;
function PublicKeyListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new PublicKeyContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Credentials/PublicKeys`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["publicKey"] === null || params["publicKey"] === undefined) {
            throw new Error("Required parameter \"params['publicKey']\" missing.");
        }
        let data = {};
        data["PublicKey"] = params["publicKey"];
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["accountSid"] !== undefined) data["AccountSid"] = params["accountSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PublicKeyInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PublicKeyPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new PublicKeyPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class PublicKeyPage extends Page_1.default {
    /**
     * Initialize the PublicKeyPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of PublicKeyInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new PublicKeyInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PublicKeyPage = PublicKeyPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/accounts/v1/credential.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Accounts
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CredentialListInstance = CredentialListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const aws_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/accounts/v1/credential/aws.js [app-rsc] (ecmascript)");
const publicKey_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/accounts/v1/credential/publicKey.js [app-rsc] (ecmascript)");
function CredentialListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Credentials`;
    Object.defineProperty(instance, "aws", {
        get: function aws() {
            if (!instance._aws) {
                instance._aws = (0, aws_1.AwsListInstance)(instance._version);
            }
            return instance._aws;
        }
    });
    Object.defineProperty(instance, "publicKey", {
        get: function publicKey() {
            if (!instance._publicKey) {
                instance._publicKey = (0, publicKey_1.PublicKeyListInstance)(instance._version);
            }
            return instance._publicKey;
        }
    });
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/accounts/v1/safelist.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Accounts
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SafelistInstance = void 0;
exports.SafelistListInstance = SafelistListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function SafelistListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/SafeList/Numbers`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["phoneNumber"] === null || params["phoneNumber"] === undefined) {
            throw new Error("Required parameter \"params['phoneNumber']\" missing.");
        }
        let data = {};
        data["PhoneNumber"] = params["phoneNumber"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SafelistInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.remove = function remove(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["phoneNumber"] !== undefined) data["PhoneNumber"] = params["phoneNumber"];
        const headers = {};
        let operationVersion = version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            params: data,
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.fetch = function fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["phoneNumber"] !== undefined) data["PhoneNumber"] = params["phoneNumber"];
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SafelistInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SafelistInstance {
    constructor(_version, payload){
        this._version = _version;
        this.sid = payload.sid;
        this.phoneNumber = payload.phone_number;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            phoneNumber: this.phoneNumber
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SafelistInstance = SafelistInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/accounts/v1/secondaryAuthToken.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Accounts
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SecondaryAuthTokenInstance = exports.SecondaryAuthTokenContextImpl = void 0;
exports.SecondaryAuthTokenListInstance = SecondaryAuthTokenListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
class SecondaryAuthTokenContextImpl {
    constructor(_version){
        this._version = _version;
        this._solution = {};
        this._uri = `/AuthTokens/Secondary`;
    }
    create(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SecondaryAuthTokenInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SecondaryAuthTokenContextImpl = SecondaryAuthTokenContextImpl;
class SecondaryAuthTokenInstance {
    constructor(_version, payload){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.secondaryAuthToken = payload.secondary_auth_token;
        this.url = payload.url;
        this._solution = {};
    }
    get _proxy() {
        this._context = this._context || new SecondaryAuthTokenContextImpl(this._version);
        return this._context;
    }
    /**
     * Create a SecondaryAuthTokenInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed SecondaryAuthTokenInstance
     */ create(callback) {
        return this._proxy.create(callback);
    }
    /**
     * Remove a SecondaryAuthTokenInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            secondaryAuthToken: this.secondaryAuthToken,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SecondaryAuthTokenInstance = SecondaryAuthTokenInstance;
function SecondaryAuthTokenListInstance(version) {
    const instance = ()=>instance.get();
    instance.get = function get() {
        return new SecondaryAuthTokenContextImpl(version);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/accounts/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Accounts
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const authTokenPromotion_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/accounts/v1/authTokenPromotion.js [app-rsc] (ecmascript)");
const bulkConsents_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/accounts/v1/bulkConsents.js [app-rsc] (ecmascript)");
const bulkContacts_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/accounts/v1/bulkContacts.js [app-rsc] (ecmascript)");
const credential_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/accounts/v1/credential.js [app-rsc] (ecmascript)");
const safelist_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/accounts/v1/safelist.js [app-rsc] (ecmascript)");
const secondaryAuthToken_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/accounts/v1/secondaryAuthToken.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of Accounts
     *
     * @param domain - The Twilio (Twilio.Accounts) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for authTokenPromotion resource */ get authTokenPromotion() {
        this._authTokenPromotion = this._authTokenPromotion || (0, authTokenPromotion_1.AuthTokenPromotionListInstance)(this);
        return this._authTokenPromotion;
    }
    /** Getter for bulkConsents resource */ get bulkConsents() {
        this._bulkConsents = this._bulkConsents || (0, bulkConsents_1.BulkConsentsListInstance)(this);
        return this._bulkConsents;
    }
    /** Getter for bulkContacts resource */ get bulkContacts() {
        this._bulkContacts = this._bulkContacts || (0, bulkContacts_1.BulkContactsListInstance)(this);
        return this._bulkContacts;
    }
    /** Getter for credentials resource */ get credentials() {
        this._credentials = this._credentials || (0, credential_1.CredentialListInstance)(this);
        return this._credentials;
    }
    /** Getter for safelist resource */ get safelist() {
        this._safelist = this._safelist || (0, safelist_1.SafelistListInstance)(this);
        return this._safelist;
    }
    /** Getter for secondaryAuthToken resource */ get secondaryAuthToken() {
        this._secondaryAuthToken = this._secondaryAuthToken || (0, secondaryAuthToken_1.SecondaryAuthTokenListInstance)(this);
        return this._secondaryAuthToken;
    }
}
exports.default = V1;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/AccountsBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/accounts/V1.js [app-rsc] (ecmascript)"));
class AccountsBase extends Domain_1.default {
    /**
     * Initialize accounts domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://accounts.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
}
module.exports = AccountsBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Accounts.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const AccountsBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/AccountsBase.js [app-rsc] (ecmascript)"));
class Accounts extends AccountsBase_1.default {
    /**
     * @deprecated - Use v1.authTokenPromotion; instead
     */ get authTokenPromotion() {
        console.warn("authTokenPromotion is deprecated. Use v1.authTokenPromotion; instead.");
        return this.v1.authTokenPromotion;
    }
    /**
     * @deprecated - Use v1.credentials; instead
     */ get credentials() {
        console.warn("credentials is deprecated. Use v1.credentials; instead.");
        return this.v1.credentials;
    }
    /**
     * @deprecated - Use v1.secondaryAuthToken; instead
     */ get secondaryAuthToken() {
        console.warn("secondaryAuthToken is deprecated. Use v1.secondaryAuthToken; instead.");
        return this.v1.secondaryAuthToken;
    }
}
module.exports = Accounts;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/ApiBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V2010_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/api/V2010.js [app-rsc] (ecmascript)"));
class ApiBase extends Domain_1.default {
    /**
     * Initialize api domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://api.twilio.com");
    }
    get v2010() {
        this._v2010 = this._v2010 || new V2010_1.default(this);
        return this._v2010;
    }
}
module.exports = ApiBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Api.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const ApiBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/ApiBase.js [app-rsc] (ecmascript)"));
class Api extends ApiBase_1.default {
    get account() {
        return this.v2010.account;
    }
    get accounts() {
        return this.v2010.accounts;
    }
    /**
     * @deprecated - Use account.addresses instead
     */ get addresses() {
        console.warn("addresses is deprecated. Use account.addresses instead.");
        return this.account.addresses;
    }
    /**
     * @deprecated - Use account.applications instead
     */ get applications() {
        console.warn("applications is deprecated. Use account.applications instead.");
        return this.account.applications;
    }
    /**
     * @deprecated - Use account.authorizedConnectApps instead
     */ get authorizedConnectApps() {
        console.warn("authorizedConnectApps is deprecated. Use account.authorizedConnectApps instead.");
        return this.account.authorizedConnectApps;
    }
    /**
     * @deprecated - Use account.availablePhoneNumbers instead
     */ get availablePhoneNumbers() {
        console.warn("availablePhoneNumbers is deprecated. Use account.availablePhoneNumbers instead.");
        return this.account.availablePhoneNumbers;
    }
    /**
     * @deprecated - Use account.balance instead
     */ get balance() {
        console.warn("balance is deprecated. Use account.balance instead.");
        return this.account.balance;
    }
    /**
     * @deprecated - Use account.calls instead
     */ get calls() {
        console.warn("calls is deprecated. Use account.calls instead.");
        return this.account.calls;
    }
    /**
     * @deprecated - Use account.conferences instead
     */ get conferences() {
        console.warn("conferences is deprecated. Use account.conferences instead.");
        return this.account.conferences;
    }
    /**
     * @deprecated - Use account.connectApps instead
     */ get connectApps() {
        console.warn("connectApps is deprecated. Use account.connectApps instead.");
        return this.account.connectApps;
    }
    /**
     * @deprecated - Use account.incomingPhoneNumbers instead
     */ get incomingPhoneNumbers() {
        console.warn("incomingPhoneNumbers is deprecated. Use account.incomingPhoneNumbers instead.");
        return this.account.incomingPhoneNumbers;
    }
    /**
     * @deprecated - Use account.keys instead
     */ get keys() {
        console.warn("keys is deprecated. Use account.keys instead.");
        return this.account.keys;
    }
    /**
     * @deprecated - Use account.messages instead
     */ get messages() {
        console.warn("messages is deprecated. Use account.messages instead.");
        return this.account.messages;
    }
    /**
     * @deprecated - Use account.newKeys instead
     */ get newKeys() {
        console.warn("newKeys is deprecated. Use account.newKeys instead.");
        return this.account.newKeys;
    }
    /**
     * @deprecated - Use account.newSigningKeys instead
     */ get newSigningKeys() {
        console.warn("newSigningKeys is deprecated. Use account.newSigningKeys instead.");
        return this.account.newSigningKeys;
    }
    /**
     * @deprecated - Use account.notifications instead
     */ get notifications() {
        console.warn("notifications is deprecated. Use account.notifications instead.");
        return this.account.notifications;
    }
    /**
     * @deprecated - Use account.outgoingCallerIds instead
     */ get outgoingCallerIds() {
        console.warn("outgoingCallerIds is deprecated. Use account.outgoingCallerIds instead.");
        return this.account.outgoingCallerIds;
    }
    /**
     * @deprecated - Use account.queues instead
     */ get queues() {
        console.warn("queues is deprecated. Use account.queues instead.");
        return this.account.queues;
    }
    /**
     * @deprecated - Use account.recordings instead
     */ get recordings() {
        console.warn("recordings is deprecated. Use account.recordings instead.");
        return this.account.recordings;
    }
    /**
     * @deprecated - Use account.signingKeys instead
     */ get signingKeys() {
        console.warn("signingKeys is deprecated. Use account.signingKeys instead.");
        return this.account.signingKeys;
    }
    /**
     * @deprecated - Use account.sip instead
     */ get sip() {
        console.warn("sip is deprecated. Use account.sip instead.");
        return this.account.sip;
    }
    /**
     * @deprecated - Use account.shortCodes instead
     */ get shortCodes() {
        console.warn("shortCodes is deprecated. Use account.shortCodes instead.");
        return this.account.shortCodes;
    }
    /**
     * @deprecated - Use account.tokens instead
     */ get tokens() {
        console.warn("tokens is deprecated. Use account.tokens instead.");
        return this.account.tokens;
    }
    /**
     * @deprecated - Use account.transcriptions instead
     */ get transcriptions() {
        console.warn("transcriptions is deprecated. Use account.transcriptions instead.");
        return this.account.transcriptions;
    }
    /**
     * @deprecated - Use account.usage instead
     */ get usage() {
        console.warn("usage is deprecated. Use account.usage instead.");
        return this.account.usage;
    }
    /**
     * @deprecated - Use account.validationRequests instead
     */ get validationRequests() {
        console.warn("validationRequests is deprecated. Use account.validationRequests instead.");
        return this.account.validationRequests;
    }
}
module.exports = Api;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/assistant/assistantsKnowledge.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Assistants
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AssistantsKnowledgePage = exports.AssistantsKnowledgeInstance = exports.AssistantsKnowledgeContextImpl = void 0;
exports.AssistantsKnowledgeListInstance = AssistantsKnowledgeListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class AssistantsKnowledgeContextImpl {
    constructor(_version, assistantId, id){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(assistantId)) {
            throw new Error("Parameter 'assistantId' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(id)) {
            throw new Error("Parameter 'id' is not valid.");
        }
        this._solution = {
            assistantId,
            id
        };
        this._uri = `/Assistants/${assistantId}/Knowledge/${id}`;
    }
    create(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AssistantsKnowledgeInstance(operationVersion, payload, instance._solution.assistantId, instance._solution.id));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AssistantsKnowledgeContextImpl = AssistantsKnowledgeContextImpl;
class AssistantsKnowledgeInstance {
    constructor(_version, payload, assistantId, id){
        this._version = _version;
        this.description = payload.description;
        this.id = payload.id;
        this.accountSid = payload.account_sid;
        this.knowledgeSourceDetails = payload.knowledge_source_details;
        this.name = payload.name;
        this.status = payload.status;
        this.type = payload.type;
        this.url = payload.url;
        this.embeddingModel = payload.embedding_model;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this._solution = {
            assistantId,
            id: id || this.id
        };
    }
    get _proxy() {
        this._context = this._context || new AssistantsKnowledgeContextImpl(this._version, this._solution.assistantId, this._solution.id);
        return this._context;
    }
    /**
     * Create a AssistantsKnowledgeInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed AssistantsKnowledgeInstance
     */ create(callback) {
        return this._proxy.create(callback);
    }
    /**
     * Remove a AssistantsKnowledgeInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            description: this.description,
            id: this.id,
            accountSid: this.accountSid,
            knowledgeSourceDetails: this.knowledgeSourceDetails,
            name: this.name,
            status: this.status,
            type: this.type,
            url: this.url,
            embeddingModel: this.embeddingModel,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AssistantsKnowledgeInstance = AssistantsKnowledgeInstance;
function AssistantsKnowledgeListInstance(version, assistantId) {
    if (!(0, utility_1.isValidPathParam)(assistantId)) {
        throw new Error("Parameter 'assistantId' is not valid.");
    }
    const instance = (id)=>instance.get(id);
    instance.get = function get(id) {
        return new AssistantsKnowledgeContextImpl(version, assistantId, id);
    };
    instance._version = version;
    instance._solution = {
        assistantId
    };
    instance._uri = `/Assistants/${assistantId}/Knowledge`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AssistantsKnowledgePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new AssistantsKnowledgePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class AssistantsKnowledgePage extends Page_1.default {
    /**
     * Initialize the AssistantsKnowledgePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of AssistantsKnowledgeInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new AssistantsKnowledgeInstance(this._version, payload, this._solution.assistantId);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AssistantsKnowledgePage = AssistantsKnowledgePage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/assistant/assistantsTool.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Assistants
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AssistantsToolPage = exports.AssistantsToolInstance = exports.AssistantsToolContextImpl = void 0;
exports.AssistantsToolListInstance = AssistantsToolListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class AssistantsToolContextImpl {
    constructor(_version, assistantId, id){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(assistantId)) {
            throw new Error("Parameter 'assistantId' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(id)) {
            throw new Error("Parameter 'id' is not valid.");
        }
        this._solution = {
            assistantId,
            id
        };
        this._uri = `/Assistants/${assistantId}/Tools/${id}`;
    }
    create(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AssistantsToolInstance(operationVersion, payload, instance._solution.assistantId, instance._solution.id));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AssistantsToolContextImpl = AssistantsToolContextImpl;
class AssistantsToolInstance {
    constructor(_version, payload, assistantId, id){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.description = payload.description;
        this.enabled = payload.enabled;
        this.id = payload.id;
        this.meta = payload.meta;
        this.name = payload.name;
        this.requiresAuth = payload.requires_auth;
        this.type = payload.type;
        this.url = payload.url;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this._solution = {
            assistantId,
            id: id || this.id
        };
    }
    get _proxy() {
        this._context = this._context || new AssistantsToolContextImpl(this._version, this._solution.assistantId, this._solution.id);
        return this._context;
    }
    /**
     * Create a AssistantsToolInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed AssistantsToolInstance
     */ create(callback) {
        return this._proxy.create(callback);
    }
    /**
     * Remove a AssistantsToolInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            description: this.description,
            enabled: this.enabled,
            id: this.id,
            meta: this.meta,
            name: this.name,
            requiresAuth: this.requiresAuth,
            type: this.type,
            url: this.url,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AssistantsToolInstance = AssistantsToolInstance;
function AssistantsToolListInstance(version, assistantId) {
    if (!(0, utility_1.isValidPathParam)(assistantId)) {
        throw new Error("Parameter 'assistantId' is not valid.");
    }
    const instance = (id)=>instance.get(id);
    instance.get = function get(id) {
        return new AssistantsToolContextImpl(version, assistantId, id);
    };
    instance._version = version;
    instance._solution = {
        assistantId
    };
    instance._uri = `/Assistants/${assistantId}/Tools`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AssistantsToolPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new AssistantsToolPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class AssistantsToolPage extends Page_1.default {
    /**
     * Initialize the AssistantsToolPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of AssistantsToolInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new AssistantsToolInstance(this._version, payload, this._solution.assistantId);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AssistantsToolPage = AssistantsToolPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/assistant/feedback.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Assistants
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FeedbackPage = exports.FeedbackInstance = exports.AssistantsV1ServiceCreateFeedbackRequest = void 0;
exports.FeedbackListInstance = FeedbackListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class AssistantsV1ServiceCreateFeedbackRequest {
}
exports.AssistantsV1ServiceCreateFeedbackRequest = AssistantsV1ServiceCreateFeedbackRequest;
function FeedbackListInstance(version, id) {
    if (!(0, utility_1.isValidPathParam)(id)) {
        throw new Error("Parameter 'id' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        id
    };
    instance._uri = `/Assistants/${id}/Feedbacks`;
    instance.create = function create(params, headers, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new FeedbackInstance(operationVersion, payload, instance._solution.id));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new FeedbackPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new FeedbackPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class FeedbackInstance {
    constructor(_version, payload, id){
        this._version = _version;
        this.assistantId = payload.assistant_id;
        this.id = payload.id;
        this.accountSid = payload.account_sid;
        this.userSid = payload.user_sid;
        this.messageId = payload.message_id;
        this.score = payload.score;
        this.sessionId = payload.session_id;
        this.text = payload.text;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            assistantId: this.assistantId,
            id: this.id,
            accountSid: this.accountSid,
            userSid: this.userSid,
            messageId: this.messageId,
            score: this.score,
            sessionId: this.sessionId,
            text: this.text,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.FeedbackInstance = FeedbackInstance;
class FeedbackPage extends Page_1.default {
    /**
     * Initialize the FeedbackPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of FeedbackInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new FeedbackInstance(this._version, payload, this._solution.id);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.FeedbackPage = FeedbackPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/assistant/message.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Assistants
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MessageInstance = exports.AssistantsV1ServiceAssistantSendMessageRequest = void 0;
exports.MessageListInstance = MessageListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class AssistantsV1ServiceAssistantSendMessageRequest {
}
exports.AssistantsV1ServiceAssistantSendMessageRequest = AssistantsV1ServiceAssistantSendMessageRequest;
function MessageListInstance(version, id) {
    if (!(0, utility_1.isValidPathParam)(id)) {
        throw new Error("Parameter 'id' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        id
    };
    instance._uri = `/Assistants/${id}/Messages`;
    instance.create = function create(params, headers, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new MessageInstance(operationVersion, payload, instance._solution.id));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class MessageInstance {
    constructor(_version, payload, id){
        this._version = _version;
        this.status = payload.status;
        this.flagged = payload.flagged;
        this.aborted = payload.aborted;
        this.sessionId = payload.session_id;
        this.accountSid = payload.account_sid;
        this.body = payload.body;
        this.error = payload.error;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            status: this.status,
            flagged: this.flagged,
            aborted: this.aborted,
            sessionId: this.sessionId,
            accountSid: this.accountSid,
            body: this.body,
            error: this.error
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.MessageInstance = MessageInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/assistant.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Assistants
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AssistantPage = exports.AssistantInstance = exports.AssistantContextImpl = exports.AssistantsV1ServiceUpdateAssistantRequest = exports.AssistantsV1ServiceTool = exports.AssistantsV1ServiceSegmentCredential = exports.AssistantsV1ServiceKnowledge = exports.AssistantsV1ServiceCustomerAi = exports.AssistantsV1ServiceCreateAssistantRequest = void 0;
exports.AssistantListInstance = AssistantListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const assistantsKnowledge_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/assistant/assistantsKnowledge.js [app-rsc] (ecmascript)");
const assistantsTool_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/assistant/assistantsTool.js [app-rsc] (ecmascript)");
const feedback_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/assistant/feedback.js [app-rsc] (ecmascript)");
const message_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/assistant/message.js [app-rsc] (ecmascript)");
class AssistantsV1ServiceCreateAssistantRequest {
}
exports.AssistantsV1ServiceCreateAssistantRequest = AssistantsV1ServiceCreateAssistantRequest;
class AssistantsV1ServiceCustomerAi {
}
exports.AssistantsV1ServiceCustomerAi = AssistantsV1ServiceCustomerAi;
class AssistantsV1ServiceKnowledge {
}
exports.AssistantsV1ServiceKnowledge = AssistantsV1ServiceKnowledge;
class AssistantsV1ServiceSegmentCredential {
}
exports.AssistantsV1ServiceSegmentCredential = AssistantsV1ServiceSegmentCredential;
class AssistantsV1ServiceTool {
}
exports.AssistantsV1ServiceTool = AssistantsV1ServiceTool;
class AssistantsV1ServiceUpdateAssistantRequest {
}
exports.AssistantsV1ServiceUpdateAssistantRequest = AssistantsV1ServiceUpdateAssistantRequest;
class AssistantContextImpl {
    constructor(_version, id){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(id)) {
            throw new Error("Parameter 'id' is not valid.");
        }
        this._solution = {
            id
        };
        this._uri = `/Assistants/${id}`;
    }
    get assistantsKnowledge() {
        this._assistantsKnowledge = this._assistantsKnowledge || (0, assistantsKnowledge_1.AssistantsKnowledgeListInstance)(this._version, this._solution.id);
        return this._assistantsKnowledge;
    }
    get assistantsTools() {
        this._assistantsTools = this._assistantsTools || (0, assistantsTool_1.AssistantsToolListInstance)(this._version, this._solution.id);
        return this._assistantsTools;
    }
    get feedbacks() {
        this._feedbacks = this._feedbacks || (0, feedback_1.FeedbackListInstance)(this._version, this._solution.id);
        return this._feedbacks;
    }
    get messages() {
        this._messages = this._messages || (0, message_1.MessageListInstance)(this._version, this._solution.id);
        return this._messages;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AssistantInstance(operationVersion, payload, instance._solution.id));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, headers, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "put",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AssistantInstance(operationVersion, payload, instance._solution.id));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AssistantContextImpl = AssistantContextImpl;
class AssistantInstance {
    constructor(_version, payload, id){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.customerAi = payload.customer_ai;
        this.id = payload.id;
        this.model = payload.model;
        this.name = payload.name;
        this.owner = payload.owner;
        this.url = payload.url;
        this.personalityPrompt = payload.personality_prompt;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.knowledge = payload.knowledge;
        this.tools = payload.tools;
        this._solution = {
            id: id || this.id
        };
    }
    get _proxy() {
        this._context = this._context || new AssistantContextImpl(this._version, this._solution.id);
        return this._context;
    }
    /**
     * Remove a AssistantInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a AssistantInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed AssistantInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the assistantsKnowledge.
     */ assistantsKnowledge() {
        return this._proxy.assistantsKnowledge;
    }
    /**
     * Access the assistantsTools.
     */ assistantsTools() {
        return this._proxy.assistantsTools;
    }
    /**
     * Access the feedbacks.
     */ feedbacks() {
        return this._proxy.feedbacks;
    }
    /**
     * Access the messages.
     */ messages() {
        return this._proxy.messages;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            customerAi: this.customerAi,
            id: this.id,
            model: this.model,
            name: this.name,
            owner: this.owner,
            url: this.url,
            personalityPrompt: this.personalityPrompt,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            knowledge: this.knowledge,
            tools: this.tools
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AssistantInstance = AssistantInstance;
function AssistantListInstance(version) {
    const instance = (id)=>instance.get(id);
    instance.get = function get(id) {
        return new AssistantContextImpl(version, id);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Assistants`;
    instance.create = function create(params, headers, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AssistantInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AssistantPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new AssistantPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class AssistantPage extends Page_1.default {
    /**
     * Initialize the AssistantPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of AssistantInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new AssistantInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AssistantPage = AssistantPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/knowledge/chunk.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Assistants
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ChunkPage = exports.ChunkInstance = void 0;
exports.ChunkListInstance = ChunkListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
function ChunkListInstance(version, id) {
    if (!(0, utility_1.isValidPathParam)(id)) {
        throw new Error("Parameter 'id' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        id
    };
    instance._uri = `/Knowledge/${id}/Chunks`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ChunkPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ChunkPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ChunkInstance {
    constructor(_version, payload, id){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.content = payload.content;
        this.metadata = payload.metadata;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            content: this.content,
            metadata: this.metadata,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ChunkInstance = ChunkInstance;
class ChunkPage extends Page_1.default {
    /**
     * Initialize the ChunkPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ChunkInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ChunkInstance(this._version, payload, this._solution.id);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ChunkPage = ChunkPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/knowledge/knowledgeStatus.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Assistants
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.KnowledgeStatusInstance = exports.KnowledgeStatusContextImpl = void 0;
exports.KnowledgeStatusListInstance = KnowledgeStatusListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class KnowledgeStatusContextImpl {
    constructor(_version, id){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(id)) {
            throw new Error("Parameter 'id' is not valid.");
        }
        this._solution = {
            id
        };
        this._uri = `/Knowledge/${id}/Status`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new KnowledgeStatusInstance(operationVersion, payload, instance._solution.id));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.KnowledgeStatusContextImpl = KnowledgeStatusContextImpl;
class KnowledgeStatusInstance {
    constructor(_version, payload, id){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.status = payload.status;
        this.lastStatus = payload.last_status;
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this._solution = {
            id
        };
    }
    get _proxy() {
        this._context = this._context || new KnowledgeStatusContextImpl(this._version, this._solution.id);
        return this._context;
    }
    /**
     * Fetch a KnowledgeStatusInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed KnowledgeStatusInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            status: this.status,
            lastStatus: this.lastStatus,
            dateUpdated: this.dateUpdated
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.KnowledgeStatusInstance = KnowledgeStatusInstance;
function KnowledgeStatusListInstance(version, id) {
    if (!(0, utility_1.isValidPathParam)(id)) {
        throw new Error("Parameter 'id' is not valid.");
    }
    const instance = ()=>instance.get();
    instance.get = function get() {
        return new KnowledgeStatusContextImpl(version, id);
    };
    instance._version = version;
    instance._solution = {
        id
    };
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/knowledge.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Assistants
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.KnowledgePage = exports.KnowledgeInstance = exports.KnowledgeContextImpl = exports.AssistantsV1ServiceUpdateKnowledgeRequest = exports.AssistantsV1ServiceCreatePolicyRequest = exports.AssistantsV1ServiceCreateKnowledgeRequest = void 0;
exports.KnowledgeListInstance = KnowledgeListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const chunk_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/knowledge/chunk.js [app-rsc] (ecmascript)");
const knowledgeStatus_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/knowledge/knowledgeStatus.js [app-rsc] (ecmascript)");
class AssistantsV1ServiceCreateKnowledgeRequest {
}
exports.AssistantsV1ServiceCreateKnowledgeRequest = AssistantsV1ServiceCreateKnowledgeRequest;
class AssistantsV1ServiceCreatePolicyRequest {
}
exports.AssistantsV1ServiceCreatePolicyRequest = AssistantsV1ServiceCreatePolicyRequest;
class AssistantsV1ServiceUpdateKnowledgeRequest {
}
exports.AssistantsV1ServiceUpdateKnowledgeRequest = AssistantsV1ServiceUpdateKnowledgeRequest;
class KnowledgeContextImpl {
    constructor(_version, id){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(id)) {
            throw new Error("Parameter 'id' is not valid.");
        }
        this._solution = {
            id
        };
        this._uri = `/Knowledge/${id}`;
    }
    get chunks() {
        this._chunks = this._chunks || (0, chunk_1.ChunkListInstance)(this._version, this._solution.id);
        return this._chunks;
    }
    get knowledgeStatus() {
        this._knowledgeStatus = this._knowledgeStatus || (0, knowledgeStatus_1.KnowledgeStatusListInstance)(this._version, this._solution.id);
        return this._knowledgeStatus;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new KnowledgeInstance(operationVersion, payload, instance._solution.id));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, headers, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "put",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new KnowledgeInstance(operationVersion, payload, instance._solution.id));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.KnowledgeContextImpl = KnowledgeContextImpl;
class KnowledgeInstance {
    constructor(_version, payload, id){
        this._version = _version;
        this.description = payload.description;
        this.id = payload.id;
        this.accountSid = payload.account_sid;
        this.knowledgeSourceDetails = payload.knowledge_source_details;
        this.name = payload.name;
        this.status = payload.status;
        this.type = payload.type;
        this.url = payload.url;
        this.embeddingModel = payload.embedding_model;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this._solution = {
            id: id || this.id
        };
    }
    get _proxy() {
        this._context = this._context || new KnowledgeContextImpl(this._version, this._solution.id);
        return this._context;
    }
    /**
     * Remove a KnowledgeInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a KnowledgeInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed KnowledgeInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the chunks.
     */ chunks() {
        return this._proxy.chunks;
    }
    /**
     * Access the knowledgeStatus.
     */ knowledgeStatus() {
        return this._proxy.knowledgeStatus;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            description: this.description,
            id: this.id,
            accountSid: this.accountSid,
            knowledgeSourceDetails: this.knowledgeSourceDetails,
            name: this.name,
            status: this.status,
            type: this.type,
            url: this.url,
            embeddingModel: this.embeddingModel,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.KnowledgeInstance = KnowledgeInstance;
function KnowledgeListInstance(version) {
    const instance = (id)=>instance.get(id);
    instance.get = function get(id) {
        return new KnowledgeContextImpl(version, id);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Knowledge`;
    instance.create = function create(params, headers, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new KnowledgeInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["assistantId"] !== undefined) data["AssistantId"] = params["assistantId"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new KnowledgePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new KnowledgePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class KnowledgePage extends Page_1.default {
    /**
     * Initialize the KnowledgePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of KnowledgeInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new KnowledgeInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.KnowledgePage = KnowledgePage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/policy.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Assistants
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PolicyPage = exports.PolicyInstance = void 0;
exports.PolicyListInstance = PolicyListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function PolicyListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Policies`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["toolId"] !== undefined) data["ToolId"] = params["toolId"];
        if (params["knowledgeId"] !== undefined) data["KnowledgeId"] = params["knowledgeId"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PolicyPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new PolicyPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class PolicyInstance {
    constructor(_version, payload){
        this._version = _version;
        this.id = payload.id;
        this.name = payload.name;
        this.description = payload.description;
        this.accountSid = payload.account_sid;
        this.userSid = payload.user_sid;
        this.type = payload.type;
        this.policyDetails = payload.policy_details;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            id: this.id,
            name: this.name,
            description: this.description,
            accountSid: this.accountSid,
            userSid: this.userSid,
            type: this.type,
            policyDetails: this.policyDetails,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PolicyInstance = PolicyInstance;
class PolicyPage extends Page_1.default {
    /**
     * Initialize the PolicyPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of PolicyInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new PolicyInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PolicyPage = PolicyPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/session/message.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Assistants
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MessagePage = exports.MessageInstance = void 0;
exports.MessageListInstance = MessageListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
function MessageListInstance(version, sessionId) {
    if (!(0, utility_1.isValidPathParam)(sessionId)) {
        throw new Error("Parameter 'sessionId' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        sessionId
    };
    instance._uri = `/Sessions/${sessionId}/Messages`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new MessagePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new MessagePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class MessageInstance {
    constructor(_version, payload, sessionId){
        this._version = _version;
        this.id = payload.id;
        this.accountSid = payload.account_sid;
        this.assistantId = payload.assistant_id;
        this.sessionId = payload.session_id;
        this.identity = payload.identity;
        this.role = payload.role;
        this.content = payload.content;
        this.meta = payload.meta;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            id: this.id,
            accountSid: this.accountSid,
            assistantId: this.assistantId,
            sessionId: this.sessionId,
            identity: this.identity,
            role: this.role,
            content: this.content,
            meta: this.meta,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.MessageInstance = MessageInstance;
class MessagePage extends Page_1.default {
    /**
     * Initialize the MessagePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of MessageInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new MessageInstance(this._version, payload, this._solution.sessionId);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.MessagePage = MessagePage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/session.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Assistants
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SessionPage = exports.SessionInstance = exports.SessionContextImpl = void 0;
exports.SessionListInstance = SessionListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const message_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/session/message.js [app-rsc] (ecmascript)");
class SessionContextImpl {
    constructor(_version, id){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(id)) {
            throw new Error("Parameter 'id' is not valid.");
        }
        this._solution = {
            id
        };
        this._uri = `/Sessions/${id}`;
    }
    get messages() {
        this._messages = this._messages || (0, message_1.MessageListInstance)(this._version, this._solution.id);
        return this._messages;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SessionInstance(operationVersion, payload, instance._solution.id));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SessionContextImpl = SessionContextImpl;
class SessionInstance {
    constructor(_version, payload, id){
        this._version = _version;
        this.id = payload.id;
        this.accountSid = payload.account_sid;
        this.assistantId = payload.assistant_id;
        this.verified = payload.verified;
        this.identity = payload.identity;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this._solution = {
            id: id || this.id
        };
    }
    get _proxy() {
        this._context = this._context || new SessionContextImpl(this._version, this._solution.id);
        return this._context;
    }
    /**
     * Fetch a SessionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed SessionInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Access the messages.
     */ messages() {
        return this._proxy.messages;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            id: this.id,
            accountSid: this.accountSid,
            assistantId: this.assistantId,
            verified: this.verified,
            identity: this.identity,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SessionInstance = SessionInstance;
function SessionListInstance(version) {
    const instance = (id)=>instance.get(id);
    instance.get = function get(id) {
        return new SessionContextImpl(version, id);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Sessions`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SessionPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new SessionPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SessionPage extends Page_1.default {
    /**
     * Initialize the SessionPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of SessionInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new SessionInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SessionPage = SessionPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/tool.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Assistants
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ToolPage = exports.ToolInstance = exports.ToolContextImpl = exports.AssistantsV1ServiceUpdateToolRequest = exports.AssistantsV1ServicePolicy = exports.AssistantsV1ServiceCreateToolRequest = exports.AssistantsV1ServiceCreatePolicyRequest = void 0;
exports.ToolListInstance = ToolListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class AssistantsV1ServiceCreatePolicyRequest {
}
exports.AssistantsV1ServiceCreatePolicyRequest = AssistantsV1ServiceCreatePolicyRequest;
class AssistantsV1ServiceCreateToolRequest {
}
exports.AssistantsV1ServiceCreateToolRequest = AssistantsV1ServiceCreateToolRequest;
class AssistantsV1ServicePolicy {
}
exports.AssistantsV1ServicePolicy = AssistantsV1ServicePolicy;
class AssistantsV1ServiceUpdateToolRequest {
}
exports.AssistantsV1ServiceUpdateToolRequest = AssistantsV1ServiceUpdateToolRequest;
class ToolContextImpl {
    constructor(_version, id){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(id)) {
            throw new Error("Parameter 'id' is not valid.");
        }
        this._solution = {
            id
        };
        this._uri = `/Tools/${id}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ToolInstance(operationVersion, payload, instance._solution.id));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, headers, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "put",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ToolInstance(operationVersion, payload, instance._solution.id));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ToolContextImpl = ToolContextImpl;
class ToolInstance {
    constructor(_version, payload, id){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.description = payload.description;
        this.enabled = payload.enabled;
        this.id = payload.id;
        this.meta = payload.meta;
        this.name = payload.name;
        this.requiresAuth = payload.requires_auth;
        this.type = payload.type;
        this.url = payload.url;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.policies = payload.policies;
        this._solution = {
            id: id || this.id
        };
    }
    get _proxy() {
        this._context = this._context || new ToolContextImpl(this._version, this._solution.id);
        return this._context;
    }
    /**
     * Remove a ToolInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a ToolInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ToolInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            description: this.description,
            enabled: this.enabled,
            id: this.id,
            meta: this.meta,
            name: this.name,
            requiresAuth: this.requiresAuth,
            type: this.type,
            url: this.url,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            policies: this.policies
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ToolInstance = ToolInstance;
function ToolListInstance(version) {
    const instance = (id)=>instance.get(id);
    instance.get = function get(id) {
        return new ToolContextImpl(version, id);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Tools`;
    instance.create = function create(params, headers, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ToolInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["assistantId"] !== undefined) data["AssistantId"] = params["assistantId"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ToolPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ToolPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ToolPage extends Page_1.default {
    /**
     * Initialize the ToolPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ToolInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ToolInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ToolPage = ToolPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Assistants
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const assistant_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/assistant.js [app-rsc] (ecmascript)");
const knowledge_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/knowledge.js [app-rsc] (ecmascript)");
const policy_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/policy.js [app-rsc] (ecmascript)");
const session_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/session.js [app-rsc] (ecmascript)");
const tool_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/v1/tool.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of Assistants
     *
     * @param domain - The Twilio (Twilio.Assistants) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for assistants resource */ get assistants() {
        this._assistants = this._assistants || (0, assistant_1.AssistantListInstance)(this);
        return this._assistants;
    }
    /** Getter for knowledge resource */ get knowledge() {
        this._knowledge = this._knowledge || (0, knowledge_1.KnowledgeListInstance)(this);
        return this._knowledge;
    }
    /** Getter for policies resource */ get policies() {
        this._policies = this._policies || (0, policy_1.PolicyListInstance)(this);
        return this._policies;
    }
    /** Getter for sessions resource */ get sessions() {
        this._sessions = this._sessions || (0, session_1.SessionListInstance)(this);
        return this._sessions;
    }
    /** Getter for tools resource */ get tools() {
        this._tools = this._tools || (0, tool_1.ToolListInstance)(this);
        return this._tools;
    }
}
exports.default = V1;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/AssistantsBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/assistants/V1.js [app-rsc] (ecmascript)"));
class AssistantsBase extends Domain_1.default {
    /**
     * Initialize assistants domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://assistants.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
}
module.exports = AssistantsBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Assistants.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const AssistantsBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/AssistantsBase.js [app-rsc] (ecmascript)"));
class Assistants extends AssistantsBase_1.default {
}
module.exports = Assistants;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/bulkexports/v1/export/day.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Bulkexports
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DayPage = exports.DayInstance = exports.DayContextImpl = void 0;
exports.DayListInstance = DayListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class DayContextImpl {
    constructor(_version, resourceType, day){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(resourceType)) {
            throw new Error("Parameter 'resourceType' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(day)) {
            throw new Error("Parameter 'day' is not valid.");
        }
        this._solution = {
            resourceType,
            day
        };
        this._uri = `/Exports/${resourceType}/Days/${day}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new DayInstance(operationVersion, payload, instance._solution.resourceType, instance._solution.day));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DayContextImpl = DayContextImpl;
class DayInstance {
    constructor(_version, payload, resourceType, day){
        this._version = _version;
        this.redirectTo = payload.redirect_to;
        this.day = payload.day;
        this.size = deserialize.integer(payload.size);
        this.createDate = payload.create_date;
        this.friendlyName = payload.friendly_name;
        this.resourceType = payload.resource_type;
        this._solution = {
            resourceType,
            day: day || this.day
        };
    }
    get _proxy() {
        this._context = this._context || new DayContextImpl(this._version, this._solution.resourceType, this._solution.day);
        return this._context;
    }
    /**
     * Fetch a DayInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed DayInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            redirectTo: this.redirectTo,
            day: this.day,
            size: this.size,
            createDate: this.createDate,
            friendlyName: this.friendlyName,
            resourceType: this.resourceType
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DayInstance = DayInstance;
function DayListInstance(version, resourceType) {
    if (!(0, utility_1.isValidPathParam)(resourceType)) {
        throw new Error("Parameter 'resourceType' is not valid.");
    }
    const instance = (day)=>instance.get(day);
    instance.get = function get(day) {
        return new DayContextImpl(version, resourceType, day);
    };
    instance._version = version;
    instance._solution = {
        resourceType
    };
    instance._uri = `/Exports/${resourceType}/Days`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new DayPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new DayPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class DayPage extends Page_1.default {
    /**
     * Initialize the DayPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of DayInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new DayInstance(this._version, payload, this._solution.resourceType);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DayPage = DayPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/bulkexports/v1/export/exportCustomJob.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Bulkexports
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ExportCustomJobPage = exports.ExportCustomJobInstance = void 0;
exports.ExportCustomJobListInstance = ExportCustomJobListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
function ExportCustomJobListInstance(version, resourceType) {
    if (!(0, utility_1.isValidPathParam)(resourceType)) {
        throw new Error("Parameter 'resourceType' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        resourceType
    };
    instance._uri = `/Exports/${resourceType}/Jobs`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["startDay"] === null || params["startDay"] === undefined) {
            throw new Error("Required parameter \"params['startDay']\" missing.");
        }
        if (params["endDay"] === null || params["endDay"] === undefined) {
            throw new Error("Required parameter \"params['endDay']\" missing.");
        }
        if (params["friendlyName"] === null || params["friendlyName"] === undefined) {
            throw new Error("Required parameter \"params['friendlyName']\" missing.");
        }
        let data = {};
        data["StartDay"] = params["startDay"];
        data["EndDay"] = params["endDay"];
        data["FriendlyName"] = params["friendlyName"];
        if (params["webhookUrl"] !== undefined) data["WebhookUrl"] = params["webhookUrl"];
        if (params["webhookMethod"] !== undefined) data["WebhookMethod"] = params["webhookMethod"];
        if (params["email"] !== undefined) data["Email"] = params["email"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ExportCustomJobInstance(operationVersion, payload, instance._solution.resourceType));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ExportCustomJobPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ExportCustomJobPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ExportCustomJobInstance {
    constructor(_version, payload, resourceType){
        this._version = _version;
        this.friendlyName = payload.friendly_name;
        this.resourceType = payload.resource_type;
        this.startDay = payload.start_day;
        this.endDay = payload.end_day;
        this.webhookUrl = payload.webhook_url;
        this.webhookMethod = payload.webhook_method;
        this.email = payload.email;
        this.jobSid = payload.job_sid;
        this.details = payload.details;
        this.jobQueuePosition = payload.job_queue_position;
        this.estimatedCompletionTime = payload.estimated_completion_time;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            friendlyName: this.friendlyName,
            resourceType: this.resourceType,
            startDay: this.startDay,
            endDay: this.endDay,
            webhookUrl: this.webhookUrl,
            webhookMethod: this.webhookMethod,
            email: this.email,
            jobSid: this.jobSid,
            details: this.details,
            jobQueuePosition: this.jobQueuePosition,
            estimatedCompletionTime: this.estimatedCompletionTime
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ExportCustomJobInstance = ExportCustomJobInstance;
class ExportCustomJobPage extends Page_1.default {
    /**
     * Initialize the ExportCustomJobPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ExportCustomJobInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ExportCustomJobInstance(this._version, payload, this._solution.resourceType);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ExportCustomJobPage = ExportCustomJobPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/bulkexports/v1/export/job.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Bulkexports
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.JobInstance = exports.JobContextImpl = void 0;
exports.JobListInstance = JobListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class JobContextImpl {
    constructor(_version, jobSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(jobSid)) {
            throw new Error("Parameter 'jobSid' is not valid.");
        }
        this._solution = {
            jobSid
        };
        this._uri = `/Exports/Jobs/${jobSid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new JobInstance(operationVersion, payload, instance._solution.jobSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.JobContextImpl = JobContextImpl;
class JobInstance {
    constructor(_version, payload, jobSid){
        this._version = _version;
        this.resourceType = payload.resource_type;
        this.friendlyName = payload.friendly_name;
        this.details = payload.details;
        this.startDay = payload.start_day;
        this.endDay = payload.end_day;
        this.jobSid = payload.job_sid;
        this.webhookUrl = payload.webhook_url;
        this.webhookMethod = payload.webhook_method;
        this.email = payload.email;
        this.url = payload.url;
        this.jobQueuePosition = payload.job_queue_position;
        this.estimatedCompletionTime = payload.estimated_completion_time;
        this._solution = {
            jobSid: jobSid || this.jobSid
        };
    }
    get _proxy() {
        this._context = this._context || new JobContextImpl(this._version, this._solution.jobSid);
        return this._context;
    }
    /**
     * Remove a JobInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a JobInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed JobInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            resourceType: this.resourceType,
            friendlyName: this.friendlyName,
            details: this.details,
            startDay: this.startDay,
            endDay: this.endDay,
            jobSid: this.jobSid,
            webhookUrl: this.webhookUrl,
            webhookMethod: this.webhookMethod,
            email: this.email,
            url: this.url,
            jobQueuePosition: this.jobQueuePosition,
            estimatedCompletionTime: this.estimatedCompletionTime
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.JobInstance = JobInstance;
function JobListInstance(version) {
    const instance = (jobSid)=>instance.get(jobSid);
    instance.get = function get(jobSid) {
        return new JobContextImpl(version, jobSid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/bulkexports/v1/export.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Bulkexports
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ExportInstance = exports.ExportContextImpl = void 0;
exports.ExportListInstance = ExportListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const day_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/bulkexports/v1/export/day.js [app-rsc] (ecmascript)");
const exportCustomJob_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/bulkexports/v1/export/exportCustomJob.js [app-rsc] (ecmascript)");
const job_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/bulkexports/v1/export/job.js [app-rsc] (ecmascript)");
class ExportContextImpl {
    constructor(_version, resourceType){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(resourceType)) {
            throw new Error("Parameter 'resourceType' is not valid.");
        }
        this._solution = {
            resourceType
        };
        this._uri = `/Exports/${resourceType}`;
    }
    get days() {
        this._days = this._days || (0, day_1.DayListInstance)(this._version, this._solution.resourceType);
        return this._days;
    }
    get exportCustomJobs() {
        this._exportCustomJobs = this._exportCustomJobs || (0, exportCustomJob_1.ExportCustomJobListInstance)(this._version, this._solution.resourceType);
        return this._exportCustomJobs;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ExportInstance(operationVersion, payload, instance._solution.resourceType));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ExportContextImpl = ExportContextImpl;
class ExportInstance {
    constructor(_version, payload, resourceType){
        this._version = _version;
        this.resourceType = payload.resource_type;
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            resourceType: resourceType || this.resourceType
        };
    }
    get _proxy() {
        this._context = this._context || new ExportContextImpl(this._version, this._solution.resourceType);
        return this._context;
    }
    /**
     * Fetch a ExportInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ExportInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Access the days.
     */ days() {
        return this._proxy.days;
    }
    /**
     * Access the exportCustomJobs.
     */ exportCustomJobs() {
        return this._proxy.exportCustomJobs;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            resourceType: this.resourceType,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ExportInstance = ExportInstance;
function ExportListInstance(version) {
    const instance = (resourceType)=>instance.get(resourceType);
    instance.get = function get(resourceType) {
        return new ExportContextImpl(version, resourceType);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Exports`;
    Object.defineProperty(instance, "jobs", {
        get: function jobs() {
            if (!instance._jobs) {
                instance._jobs = (0, job_1.JobListInstance)(instance._version);
            }
            return instance._jobs;
        }
    });
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/bulkexports/v1/exportConfiguration.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Bulkexports
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ExportConfigurationInstance = exports.ExportConfigurationContextImpl = void 0;
exports.ExportConfigurationListInstance = ExportConfigurationListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class ExportConfigurationContextImpl {
    constructor(_version, resourceType){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(resourceType)) {
            throw new Error("Parameter 'resourceType' is not valid.");
        }
        this._solution = {
            resourceType
        };
        this._uri = `/Exports/${resourceType}/Configuration`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ExportConfigurationInstance(operationVersion, payload, instance._solution.resourceType));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["enabled"] !== undefined) data["Enabled"] = serialize.bool(params["enabled"]);
        if (params["webhookUrl"] !== undefined) data["WebhookUrl"] = params["webhookUrl"];
        if (params["webhookMethod"] !== undefined) data["WebhookMethod"] = params["webhookMethod"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ExportConfigurationInstance(operationVersion, payload, instance._solution.resourceType));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ExportConfigurationContextImpl = ExportConfigurationContextImpl;
class ExportConfigurationInstance {
    constructor(_version, payload, resourceType){
        this._version = _version;
        this.enabled = payload.enabled;
        this.webhookUrl = payload.webhook_url;
        this.webhookMethod = payload.webhook_method;
        this.resourceType = payload.resource_type;
        this.url = payload.url;
        this._solution = {
            resourceType: resourceType || this.resourceType
        };
    }
    get _proxy() {
        this._context = this._context || new ExportConfigurationContextImpl(this._version, this._solution.resourceType);
        return this._context;
    }
    /**
     * Fetch a ExportConfigurationInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ExportConfigurationInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            enabled: this.enabled,
            webhookUrl: this.webhookUrl,
            webhookMethod: this.webhookMethod,
            resourceType: this.resourceType,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ExportConfigurationInstance = ExportConfigurationInstance;
function ExportConfigurationListInstance(version) {
    const instance = (resourceType)=>instance.get(resourceType);
    instance.get = function get(resourceType) {
        return new ExportConfigurationContextImpl(version, resourceType);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/bulkexports/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Bulkexports
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const export_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/bulkexports/v1/export.js [app-rsc] (ecmascript)");
const exportConfiguration_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/bulkexports/v1/exportConfiguration.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of Bulkexports
     *
     * @param domain - The Twilio (Twilio.Bulkexports) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for exports resource */ get exports() {
        this._exports = this._exports || (0, export_1.ExportListInstance)(this);
        return this._exports;
    }
    /** Getter for exportConfiguration resource */ get exportConfiguration() {
        this._exportConfiguration = this._exportConfiguration || (0, exportConfiguration_1.ExportConfigurationListInstance)(this);
        return this._exportConfiguration;
    }
}
exports.default = V1;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/BulkexportsBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/bulkexports/V1.js [app-rsc] (ecmascript)"));
class BulkexportsBase extends Domain_1.default {
    /**
     * Initialize bulkexports domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://bulkexports.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
}
module.exports = BulkexportsBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Bulkexports.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const BulkexportsBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/BulkexportsBase.js [app-rsc] (ecmascript)"));
class Bulkexports extends BulkexportsBase_1.default {
    /**
     * @deprecated - Use v1.exports instead
     */ get exports() {
        console.warn("exports is deprecated. Use v1.exports instead.");
        return this.v1.exports;
    }
    /**
     * @deprecated - Use v1.exportConfiguration instead
     */ get exportConfiguration() {
        console.warn("exportConfiguration is deprecated. Use v1.exportConfiguration instead.");
        return this.v1.exportConfiguration;
    }
}
module.exports = Bulkexports;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/ChatBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/chat/V1.js [app-rsc] (ecmascript)"));
const V2_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/chat/V2.js [app-rsc] (ecmascript)"));
const V3_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/chat/V3.js [app-rsc] (ecmascript)"));
class ChatBase extends Domain_1.default {
    /**
     * Initialize chat domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://chat.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
    get v2() {
        this._v2 = this._v2 || new V2_1.default(this);
        return this._v2;
    }
    get v3() {
        this._v3 = this._v3 || new V3_1.default(this);
        return this._v3;
    }
}
module.exports = ChatBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Chat.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const ChatBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/ChatBase.js [app-rsc] (ecmascript)"));
class Chat extends ChatBase_1.default {
    /**
     * @deprecated - Use v2.credentials instead
     */ get credentials() {
        console.warn("credentials is deprecated. Use v2.credentials instead.");
        return this.v2.credentials;
    }
    /**
     * @deprecated - Use v2.services instead
     */ get services() {
        console.warn("services is deprecated. Use v2.services instead.");
        return this.v2.services;
    }
    /**
     * @deprecated - Use v3.channels instead
     */ get channels() {
        console.warn("channels is deprecated. Use v3.channels instead.");
        return this.v3.channels;
    }
}
module.exports = Chat;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/content/v1/content/approvalCreate.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Content
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ApprovalCreateInstance = exports.ContentApprovalRequest = void 0;
exports.ApprovalCreateListInstance = ApprovalCreateListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
/**
 * Content approval request body
 */ class ContentApprovalRequest {
}
exports.ContentApprovalRequest = ContentApprovalRequest;
function ApprovalCreateListInstance(version, contentSid) {
    if (!(0, utility_1.isValidPathParam)(contentSid)) {
        throw new Error("Parameter 'contentSid' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        contentSid
    };
    instance._uri = `/Content/${contentSid}/ApprovalRequests/whatsapp`;
    instance.create = function create(params, headers, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ApprovalCreateInstance(operationVersion, payload, instance._solution.contentSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ApprovalCreateInstance {
    constructor(_version, payload, contentSid){
        this._version = _version;
        this.name = payload.name;
        this.category = payload.category;
        this.contentType = payload.content_type;
        this.status = payload.status;
        this.rejectionReason = payload.rejection_reason;
        this.allowCategoryChange = payload.allow_category_change;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            name: this.name,
            category: this.category,
            contentType: this.contentType,
            status: this.status,
            rejectionReason: this.rejectionReason,
            allowCategoryChange: this.allowCategoryChange
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ApprovalCreateInstance = ApprovalCreateInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/content/v1/content/approvalFetch.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Content
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ApprovalFetchInstance = exports.ApprovalFetchContextImpl = void 0;
exports.ApprovalFetchListInstance = ApprovalFetchListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class ApprovalFetchContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Content/${sid}/ApprovalRequests`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ApprovalFetchInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ApprovalFetchContextImpl = ApprovalFetchContextImpl;
class ApprovalFetchInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.whatsapp = payload.whatsapp;
        this.url = payload.url;
        this._solution = {
            sid
        };
    }
    get _proxy() {
        this._context = this._context || new ApprovalFetchContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a ApprovalFetchInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ApprovalFetchInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            whatsapp: this.whatsapp,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ApprovalFetchInstance = ApprovalFetchInstance;
function ApprovalFetchListInstance(version, sid) {
    if (!(0, utility_1.isValidPathParam)(sid)) {
        throw new Error("Parameter 'sid' is not valid.");
    }
    const instance = ()=>instance.get();
    instance.get = function get() {
        return new ApprovalFetchContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {
        sid
    };
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/content/v1/content.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Content
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ContentPage = exports.ContentInstance = exports.ContentContextImpl = exports.WhatsappFlows = exports.WhatsappCard = exports.WhatsappAuthentication = exports.Types = exports.TwilioText = exports.TwilioSchedule = exports.TwilioQuickReply = exports.TwilioMedia = exports.TwilioLocation = exports.TwilioListPicker = exports.TwilioFlows = exports.TwilioCatalog = exports.TwilioCarousel = exports.TwilioCard = exports.TwilioCallToAction = exports.QuickReplyAction = exports.ListItem = exports.FlowsPageComponent = exports.FlowsPage = exports.ContentCreateRequest = exports.CatalogItem = exports.CarouselCard = exports.CarouselAction = exports.CardAction = exports.CallToActionAction = exports.AuthenticationAction = void 0;
exports.ContentListInstance = ContentListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const approvalCreate_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/content/v1/content/approvalCreate.js [app-rsc] (ecmascript)");
const approvalFetch_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/content/v1/content/approvalFetch.js [app-rsc] (ecmascript)");
class AuthenticationAction {
}
exports.AuthenticationAction = AuthenticationAction;
class CallToActionAction {
}
exports.CallToActionAction = CallToActionAction;
class CardAction {
}
exports.CardAction = CardAction;
class CarouselAction {
}
exports.CarouselAction = CarouselAction;
class CarouselCard {
}
exports.CarouselCard = CarouselCard;
class CatalogItem {
}
exports.CatalogItem = CatalogItem;
/**
 * Content creation request body
 */ class ContentCreateRequest {
}
exports.ContentCreateRequest = ContentCreateRequest;
class FlowsPage {
}
exports.FlowsPage = FlowsPage;
class FlowsPageComponent {
}
exports.FlowsPageComponent = FlowsPageComponent;
class ListItem {
}
exports.ListItem = ListItem;
class QuickReplyAction {
}
exports.QuickReplyAction = QuickReplyAction;
/**
 * twilio/call-to-action buttons let recipients tap to trigger actions such as launching a website or making a phone call.
 */ class TwilioCallToAction {
}
exports.TwilioCallToAction = TwilioCallToAction;
/**
 * twilio/card is a structured template which can be used to send a series of related information. It must include a title and at least one additional field.
 */ class TwilioCard {
}
exports.TwilioCard = TwilioCard;
/**
 * twilio/carousel templates allow you to send a single text message accompanied by a set of up to 10 carousel cards in a horizontally scrollable view
 */ class TwilioCarousel {
}
exports.TwilioCarousel = TwilioCarousel;
/**
 * twilio/catalog type lets recipients view list of catalog products, ask questions about products, order products.
 */ class TwilioCatalog {
}
exports.TwilioCatalog = TwilioCatalog;
/**
 * twilio/flows templates allow you to send multiple messages in a set order with text or select options
 */ class TwilioFlows {
}
exports.TwilioFlows = TwilioFlows;
/**
 * twilio/list-picker includes a menu of up to 10 options, which offers a simple way for users to make a selection.
 */ class TwilioListPicker {
}
exports.TwilioListPicker = TwilioListPicker;
/**
 * twilio/location type contains a location pin and an optional label, which can be used to enhance delivery notifications or connect recipients to physical experiences you offer.
 */ class TwilioLocation {
}
exports.TwilioLocation = TwilioLocation;
/**
 * twilio/media is used to send file attachments, or to send long text via MMS in the US and Canada. As such, the twilio/media type must contain at least ONE of text or media content.
 */ class TwilioMedia {
}
exports.TwilioMedia = TwilioMedia;
/**
 * twilio/quick-reply templates let recipients tap, rather than type, to respond to the message.
 */ class TwilioQuickReply {
}
exports.TwilioQuickReply = TwilioQuickReply;
/**
 * twilio/schedule templates allow us to send a message with a schedule with different time slots
 */ class TwilioSchedule {
}
exports.TwilioSchedule = TwilioSchedule;
/**
 * Type containing only plain text-based content
 */ class TwilioText {
}
exports.TwilioText = TwilioText;
/**
 * Content types
 */ class Types {
}
exports.Types = Types;
/**
 * whatsApp/authentication templates let companies deliver WA approved one-time-password button.
 */ class WhatsappAuthentication {
}
exports.WhatsappAuthentication = WhatsappAuthentication;
/**
 * whatsapp/card is a structured template which can be used to send a series of related information. It must include a body and at least one additional field.
 */ class WhatsappCard {
}
exports.WhatsappCard = WhatsappCard;
/**
 * whatsapp/flows templates allow you to send multiple messages in a set order with text or select options
 */ class WhatsappFlows {
}
exports.WhatsappFlows = WhatsappFlows;
class ContentContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Content/${sid}`;
    }
    get approvalCreate() {
        this._approvalCreate = this._approvalCreate || (0, approvalCreate_1.ApprovalCreateListInstance)(this._version, this._solution.sid);
        return this._approvalCreate;
    }
    get approvalFetch() {
        this._approvalFetch = this._approvalFetch || (0, approvalFetch_1.ApprovalFetchListInstance)(this._version, this._solution.sid);
        return this._approvalFetch;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ContentInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ContentContextImpl = ContentContextImpl;
class ContentInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.language = payload.language;
        this.variables = payload.variables;
        this.types = payload.types;
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new ContentContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a ContentInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a ContentInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ContentInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Access the approvalCreate.
     */ approvalCreate() {
        return this._proxy.approvalCreate;
    }
    /**
     * Access the approvalFetch.
     */ approvalFetch() {
        return this._proxy.approvalFetch;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            sid: this.sid,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            language: this.language,
            variables: this.variables,
            types: this.types,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ContentInstance = ContentInstance;
function ContentListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new ContentContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Content`;
    instance.create = function create(params, headers, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ContentInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ContentPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ContentPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ContentPage extends Page_1.default {
    /**
     * Initialize the ContentPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ContentInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ContentInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ContentPage = ContentPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/content/v1/contentAndApprovals.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Content
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ContentAndApprovalsPage = exports.ContentAndApprovalsInstance = void 0;
exports.ContentAndApprovalsListInstance = ContentAndApprovalsListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function ContentAndApprovalsListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/ContentAndApprovals`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ContentAndApprovalsPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ContentAndApprovalsPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ContentAndApprovalsInstance {
    constructor(_version, payload){
        this._version = _version;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.language = payload.language;
        this.variables = payload.variables;
        this.types = payload.types;
        this.approvalRequests = payload.approval_requests;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            sid: this.sid,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            language: this.language,
            variables: this.variables,
            types: this.types,
            approvalRequests: this.approvalRequests
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ContentAndApprovalsInstance = ContentAndApprovalsInstance;
class ContentAndApprovalsPage extends Page_1.default {
    /**
     * Initialize the ContentAndApprovalsPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ContentAndApprovalsInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ContentAndApprovalsInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ContentAndApprovalsPage = ContentAndApprovalsPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/content/v1/legacyContent.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Content
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LegacyContentPage = exports.LegacyContentInstance = void 0;
exports.LegacyContentListInstance = LegacyContentListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function LegacyContentListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/LegacyContent`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new LegacyContentPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new LegacyContentPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class LegacyContentInstance {
    constructor(_version, payload){
        this._version = _version;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.language = payload.language;
        this.variables = payload.variables;
        this.types = payload.types;
        this.legacyTemplateName = payload.legacy_template_name;
        this.legacyBody = payload.legacy_body;
        this.url = payload.url;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            sid: this.sid,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            language: this.language,
            variables: this.variables,
            types: this.types,
            legacyTemplateName: this.legacyTemplateName,
            legacyBody: this.legacyBody,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.LegacyContentInstance = LegacyContentInstance;
class LegacyContentPage extends Page_1.default {
    /**
     * Initialize the LegacyContentPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of LegacyContentInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new LegacyContentInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.LegacyContentPage = LegacyContentPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/content/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Content
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const content_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/content/v1/content.js [app-rsc] (ecmascript)");
const contentAndApprovals_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/content/v1/contentAndApprovals.js [app-rsc] (ecmascript)");
const legacyContent_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/content/v1/legacyContent.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of Content
     *
     * @param domain - The Twilio (Twilio.Content) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for contents resource */ get contents() {
        this._contents = this._contents || (0, content_1.ContentListInstance)(this);
        return this._contents;
    }
    /** Getter for contentAndApprovals resource */ get contentAndApprovals() {
        this._contentAndApprovals = this._contentAndApprovals || (0, contentAndApprovals_1.ContentAndApprovalsListInstance)(this);
        return this._contentAndApprovals;
    }
    /** Getter for legacyContents resource */ get legacyContents() {
        this._legacyContents = this._legacyContents || (0, legacyContent_1.LegacyContentListInstance)(this);
        return this._legacyContents;
    }
}
exports.default = V1;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/content/v2/content.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Content
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ContentPage = exports.ContentInstance = void 0;
exports.ContentListInstance = ContentListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function ContentListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Content`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params["sortByDate"] !== undefined) data["SortByDate"] = params["sortByDate"];
        if (params["sortByContentName"] !== undefined) data["SortByContentName"] = params["sortByContentName"];
        if (params["dateCreatedAfter"] !== undefined) data["DateCreatedAfter"] = serialize.iso8601DateTime(params["dateCreatedAfter"]);
        if (params["dateCreatedBefore"] !== undefined) data["DateCreatedBefore"] = serialize.iso8601DateTime(params["dateCreatedBefore"]);
        if (params["contentName"] !== undefined) data["ContentName"] = params["contentName"];
        if (params["content"] !== undefined) data["Content"] = params["content"];
        if (params["language"] !== undefined) data["Language"] = serialize.map(params["language"], (e)=>e);
        if (params["contentType"] !== undefined) data["ContentType"] = serialize.map(params["contentType"], (e)=>e);
        if (params["channelEligibility"] !== undefined) data["ChannelEligibility"] = serialize.map(params["channelEligibility"], (e)=>e);
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ContentPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ContentPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ContentInstance {
    constructor(_version, payload){
        this._version = _version;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.language = payload.language;
        this.variables = payload.variables;
        this.types = payload.types;
        this.url = payload.url;
        this.links = payload.links;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            sid: this.sid,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            language: this.language,
            variables: this.variables,
            types: this.types,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ContentInstance = ContentInstance;
class ContentPage extends Page_1.default {
    /**
     * Initialize the ContentPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ContentInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ContentInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ContentPage = ContentPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/content/v2/contentAndApprovals.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Content
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ContentAndApprovalsPage = exports.ContentAndApprovalsInstance = void 0;
exports.ContentAndApprovalsListInstance = ContentAndApprovalsListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function ContentAndApprovalsListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/ContentAndApprovals`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params["sortByDate"] !== undefined) data["SortByDate"] = params["sortByDate"];
        if (params["sortByContentName"] !== undefined) data["SortByContentName"] = params["sortByContentName"];
        if (params["dateCreatedAfter"] !== undefined) data["DateCreatedAfter"] = serialize.iso8601DateTime(params["dateCreatedAfter"]);
        if (params["dateCreatedBefore"] !== undefined) data["DateCreatedBefore"] = serialize.iso8601DateTime(params["dateCreatedBefore"]);
        if (params["contentName"] !== undefined) data["ContentName"] = params["contentName"];
        if (params["content"] !== undefined) data["Content"] = params["content"];
        if (params["language"] !== undefined) data["Language"] = serialize.map(params["language"], (e)=>e);
        if (params["contentType"] !== undefined) data["ContentType"] = serialize.map(params["contentType"], (e)=>e);
        if (params["channelEligibility"] !== undefined) data["ChannelEligibility"] = serialize.map(params["channelEligibility"], (e)=>e);
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ContentAndApprovalsPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ContentAndApprovalsPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ContentAndApprovalsInstance {
    constructor(_version, payload){
        this._version = _version;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.language = payload.language;
        this.variables = payload.variables;
        this.types = payload.types;
        this.approvalRequests = payload.approval_requests;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            sid: this.sid,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            language: this.language,
            variables: this.variables,
            types: this.types,
            approvalRequests: this.approvalRequests
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ContentAndApprovalsInstance = ContentAndApprovalsInstance;
class ContentAndApprovalsPage extends Page_1.default {
    /**
     * Initialize the ContentAndApprovalsPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ContentAndApprovalsInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ContentAndApprovalsInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ContentAndApprovalsPage = ContentAndApprovalsPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/content/V2.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Content
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const content_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/content/v2/content.js [app-rsc] (ecmascript)");
const contentAndApprovals_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/content/v2/contentAndApprovals.js [app-rsc] (ecmascript)");
class V2 extends Version_1.default {
    /**
     * Initialize the V2 version of Content
     *
     * @param domain - The Twilio (Twilio.Content) domain
     */ constructor(domain){
        super(domain, "v2");
    }
    /** Getter for contents resource */ get contents() {
        this._contents = this._contents || (0, content_1.ContentListInstance)(this);
        return this._contents;
    }
    /** Getter for contentAndApprovals resource */ get contentAndApprovals() {
        this._contentAndApprovals = this._contentAndApprovals || (0, contentAndApprovals_1.ContentAndApprovalsListInstance)(this);
        return this._contentAndApprovals;
    }
}
exports.default = V2;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/ContentBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/content/V1.js [app-rsc] (ecmascript)"));
const V2_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/content/V2.js [app-rsc] (ecmascript)"));
class ContentBase extends Domain_1.default {
    /**
     * Initialize content domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://content.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
    get v2() {
        this._v2 = this._v2 || new V2_1.default(this);
        return this._v2;
    }
}
module.exports = ContentBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Content.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const ContentBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/ContentBase.js [app-rsc] (ecmascript)"));
class Content extends ContentBase_1.default {
    /**
     * @deprecated - Use v1.contents instead
     */ get contents() {
        console.warn("contents is deprecated. Use v1.contents instead.");
        return this.v1.contents;
    }
}
module.exports = Content;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/ConversationsBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/conversations/V1.js [app-rsc] (ecmascript)"));
class ConversationsBase extends Domain_1.default {
    /**
     * Initialize conversations domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://conversations.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
}
module.exports = ConversationsBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Conversations.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const ConversationsBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/ConversationsBase.js [app-rsc] (ecmascript)"));
class Conversations extends ConversationsBase_1.default {
    /**
     * @deprecated - Use v1.configuration instead
     */ get configuration() {
        console.warn("configuration is deprecated. Use v1.configuration instead.");
        return this.v1.configuration;
    }
    /**
     * @deprecated - Use v1.addressConfigurations instead
     */ get addressConfigurations() {
        console.warn("addressConfigurations is deprecated. Use v1.addressConfigurations instead.");
        return this.v1.addressConfigurations;
    }
    /**
     * @deprecated - Use v1.conversations instead
     */ get conversations() {
        console.warn("conversations is deprecated. Use v1.conversations instead.");
        return this.v1.conversations;
    }
    /**
     * @deprecated - Use v1.credentials instead
     */ get credentials() {
        console.warn("credentials is deprecated. Use v1.credentials instead.");
        return this.v1.credentials;
    }
    /**
     * @deprecated - Use v1.participantConversations instead
     */ get participantConversations() {
        console.warn("participantConversations is deprecated. Use v1.participantConversations instead.");
        return this.v1.participantConversations;
    }
    /**
     * @deprecated - Use v1.roles instead
     */ get roles() {
        console.warn("roles is deprecated. Use v1.roles instead.");
        return this.v1.roles;
    }
    /**
     * @deprecated - Use v1.services instead
     */ get services() {
        console.warn("services is deprecated. Use v1.services instead.");
        return this.v1.services;
    }
    /**
     * @deprecated - Use v1.users instead
     */ get users() {
        console.warn("users is deprecated. Use v1.users instead.");
        return this.v1.users;
    }
}
module.exports = Conversations;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/events/v1/eventType.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Events
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EventTypePage = exports.EventTypeInstance = exports.EventTypeContextImpl = void 0;
exports.EventTypeListInstance = EventTypeListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class EventTypeContextImpl {
    constructor(_version, type){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(type)) {
            throw new Error("Parameter 'type' is not valid.");
        }
        this._solution = {
            type
        };
        this._uri = `/Types/${type}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new EventTypeInstance(operationVersion, payload, instance._solution.type));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.EventTypeContextImpl = EventTypeContextImpl;
class EventTypeInstance {
    constructor(_version, payload, type){
        this._version = _version;
        this.type = payload.type;
        this.schemaId = payload.schema_id;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.description = payload.description;
        this.status = payload.status;
        this.documentationUrl = payload.documentation_url;
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            type: type || this.type
        };
    }
    get _proxy() {
        this._context = this._context || new EventTypeContextImpl(this._version, this._solution.type);
        return this._context;
    }
    /**
     * Fetch a EventTypeInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed EventTypeInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            type: this.type,
            schemaId: this.schemaId,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            description: this.description,
            status: this.status,
            documentationUrl: this.documentationUrl,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.EventTypeInstance = EventTypeInstance;
function EventTypeListInstance(version) {
    const instance = (type)=>instance.get(type);
    instance.get = function get(type) {
        return new EventTypeContextImpl(version, type);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Types`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["schemaId"] !== undefined) data["SchemaId"] = params["schemaId"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new EventTypePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new EventTypePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class EventTypePage extends Page_1.default {
    /**
     * Initialize the EventTypePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of EventTypeInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new EventTypeInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.EventTypePage = EventTypePage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/events/v1/schema/schemaVersion.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Events
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SchemaVersionPage = exports.SchemaVersionInstance = exports.SchemaVersionContextImpl = void 0;
exports.SchemaVersionListInstance = SchemaVersionListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class SchemaVersionContextImpl {
    constructor(_version, id, schemaVersion){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(id)) {
            throw new Error("Parameter 'id' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(schemaVersion)) {
            throw new Error("Parameter 'schemaVersion' is not valid.");
        }
        this._solution = {
            id,
            schemaVersion
        };
        this._uri = `/Schemas/${id}/Versions/${schemaVersion}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SchemaVersionInstance(operationVersion, payload, instance._solution.id, instance._solution.schemaVersion));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SchemaVersionContextImpl = SchemaVersionContextImpl;
class SchemaVersionInstance {
    constructor(_version, payload, id, schemaVersion){
        this._version = _version;
        this.id = payload.id;
        this.schemaVersion = deserialize.integer(payload.schema_version);
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.url = payload.url;
        this.raw = payload.raw;
        this._solution = {
            id,
            schemaVersion: schemaVersion || this.schemaVersion
        };
    }
    get _proxy() {
        this._context = this._context || new SchemaVersionContextImpl(this._version, this._solution.id, this._solution.schemaVersion);
        return this._context;
    }
    /**
     * Fetch a SchemaVersionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed SchemaVersionInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            id: this.id,
            schemaVersion: this.schemaVersion,
            dateCreated: this.dateCreated,
            url: this.url,
            raw: this.raw
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SchemaVersionInstance = SchemaVersionInstance;
function SchemaVersionListInstance(version, id) {
    if (!(0, utility_1.isValidPathParam)(id)) {
        throw new Error("Parameter 'id' is not valid.");
    }
    const instance = (schemaVersion)=>instance.get(schemaVersion);
    instance.get = function get(schemaVersion) {
        return new SchemaVersionContextImpl(version, id, schemaVersion);
    };
    instance._version = version;
    instance._solution = {
        id
    };
    instance._uri = `/Schemas/${id}/Versions`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SchemaVersionPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new SchemaVersionPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SchemaVersionPage extends Page_1.default {
    /**
     * Initialize the SchemaVersionPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of SchemaVersionInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new SchemaVersionInstance(this._version, payload, this._solution.id);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SchemaVersionPage = SchemaVersionPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/events/v1/schema.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Events
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SchemaInstance = exports.SchemaContextImpl = void 0;
exports.SchemaListInstance = SchemaListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const schemaVersion_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/events/v1/schema/schemaVersion.js [app-rsc] (ecmascript)");
class SchemaContextImpl {
    constructor(_version, id){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(id)) {
            throw new Error("Parameter 'id' is not valid.");
        }
        this._solution = {
            id
        };
        this._uri = `/Schemas/${id}`;
    }
    get versions() {
        this._versions = this._versions || (0, schemaVersion_1.SchemaVersionListInstance)(this._version, this._solution.id);
        return this._versions;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SchemaInstance(operationVersion, payload, instance._solution.id));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SchemaContextImpl = SchemaContextImpl;
class SchemaInstance {
    constructor(_version, payload, id){
        this._version = _version;
        this.id = payload.id;
        this.url = payload.url;
        this.links = payload.links;
        this.latestVersionDateCreated = deserialize.iso8601DateTime(payload.latest_version_date_created);
        this.latestVersion = deserialize.integer(payload.latest_version);
        this._solution = {
            id: id || this.id
        };
    }
    get _proxy() {
        this._context = this._context || new SchemaContextImpl(this._version, this._solution.id);
        return this._context;
    }
    /**
     * Fetch a SchemaInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed SchemaInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Access the versions.
     */ versions() {
        return this._proxy.versions;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            id: this.id,
            url: this.url,
            links: this.links,
            latestVersionDateCreated: this.latestVersionDateCreated,
            latestVersion: this.latestVersion
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SchemaInstance = SchemaInstance;
function SchemaListInstance(version) {
    const instance = (id)=>instance.get(id);
    instance.get = function get(id) {
        return new SchemaContextImpl(version, id);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/events/v1/sink/sinkTest.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Events
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SinkTestInstance = void 0;
exports.SinkTestListInstance = SinkTestListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
function SinkTestListInstance(version, sid) {
    if (!(0, utility_1.isValidPathParam)(sid)) {
        throw new Error("Parameter 'sid' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        sid
    };
    instance._uri = `/Sinks/${sid}/Test`;
    instance.create = function create(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SinkTestInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SinkTestInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.result = payload.result;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            result: this.result
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SinkTestInstance = SinkTestInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/events/v1/sink/sinkValidate.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Events
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SinkValidateInstance = void 0;
exports.SinkValidateListInstance = SinkValidateListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
function SinkValidateListInstance(version, sid) {
    if (!(0, utility_1.isValidPathParam)(sid)) {
        throw new Error("Parameter 'sid' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        sid
    };
    instance._uri = `/Sinks/${sid}/Validate`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["testId"] === null || params["testId"] === undefined) {
            throw new Error("Required parameter \"params['testId']\" missing.");
        }
        let data = {};
        data["TestId"] = params["testId"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SinkValidateInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SinkValidateInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.result = payload.result;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            result: this.result
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SinkValidateInstance = SinkValidateInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/events/v1/sink.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Events
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SinkPage = exports.SinkInstance = exports.SinkContextImpl = void 0;
exports.SinkListInstance = SinkListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const sinkTest_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/events/v1/sink/sinkTest.js [app-rsc] (ecmascript)");
const sinkValidate_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/events/v1/sink/sinkValidate.js [app-rsc] (ecmascript)");
class SinkContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Sinks/${sid}`;
    }
    get sinkTest() {
        this._sinkTest = this._sinkTest || (0, sinkTest_1.SinkTestListInstance)(this._version, this._solution.sid);
        return this._sinkTest;
    }
    get sinkValidate() {
        this._sinkValidate = this._sinkValidate || (0, sinkValidate_1.SinkValidateListInstance)(this._version, this._solution.sid);
        return this._sinkValidate;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SinkInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["description"] === null || params["description"] === undefined) {
            throw new Error("Required parameter \"params['description']\" missing.");
        }
        let data = {};
        data["Description"] = params["description"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SinkInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SinkContextImpl = SinkContextImpl;
class SinkInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.description = payload.description;
        this.sid = payload.sid;
        this.sinkConfiguration = payload.sink_configuration;
        this.sinkType = payload.sink_type;
        this.status = payload.status;
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new SinkContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a SinkInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a SinkInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed SinkInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the sinkTest.
     */ sinkTest() {
        return this._proxy.sinkTest;
    }
    /**
     * Access the sinkValidate.
     */ sinkValidate() {
        return this._proxy.sinkValidate;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            description: this.description,
            sid: this.sid,
            sinkConfiguration: this.sinkConfiguration,
            sinkType: this.sinkType,
            status: this.status,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SinkInstance = SinkInstance;
function SinkListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new SinkContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Sinks`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["description"] === null || params["description"] === undefined) {
            throw new Error("Required parameter \"params['description']\" missing.");
        }
        if (params["sinkConfiguration"] === null || params["sinkConfiguration"] === undefined) {
            throw new Error("Required parameter \"params['sinkConfiguration']\" missing.");
        }
        if (params["sinkType"] === null || params["sinkType"] === undefined) {
            throw new Error("Required parameter \"params['sinkType']\" missing.");
        }
        let data = {};
        data["Description"] = params["description"];
        data["SinkConfiguration"] = serialize.object(params["sinkConfiguration"]);
        data["SinkType"] = params["sinkType"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SinkInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["inUse"] !== undefined) data["InUse"] = serialize.bool(params["inUse"]);
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SinkPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new SinkPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SinkPage extends Page_1.default {
    /**
     * Initialize the SinkPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of SinkInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new SinkInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SinkPage = SinkPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/events/v1/subscription/subscribedEvent.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Events
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SubscribedEventPage = exports.SubscribedEventInstance = exports.SubscribedEventContextImpl = void 0;
exports.SubscribedEventListInstance = SubscribedEventListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class SubscribedEventContextImpl {
    constructor(_version, subscriptionSid, type){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(subscriptionSid)) {
            throw new Error("Parameter 'subscriptionSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(type)) {
            throw new Error("Parameter 'type' is not valid.");
        }
        this._solution = {
            subscriptionSid,
            type
        };
        this._uri = `/Subscriptions/${subscriptionSid}/SubscribedEvents/${type}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SubscribedEventInstance(operationVersion, payload, instance._solution.subscriptionSid, instance._solution.type));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["schemaVersion"] !== undefined) data["SchemaVersion"] = params["schemaVersion"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SubscribedEventInstance(operationVersion, payload, instance._solution.subscriptionSid, instance._solution.type));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SubscribedEventContextImpl = SubscribedEventContextImpl;
class SubscribedEventInstance {
    constructor(_version, payload, subscriptionSid, type){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.type = payload.type;
        this.schemaVersion = deserialize.integer(payload.schema_version);
        this.subscriptionSid = payload.subscription_sid;
        this.url = payload.url;
        this._solution = {
            subscriptionSid,
            type: type || this.type
        };
    }
    get _proxy() {
        this._context = this._context || new SubscribedEventContextImpl(this._version, this._solution.subscriptionSid, this._solution.type);
        return this._context;
    }
    /**
     * Remove a SubscribedEventInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a SubscribedEventInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed SubscribedEventInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            type: this.type,
            schemaVersion: this.schemaVersion,
            subscriptionSid: this.subscriptionSid,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SubscribedEventInstance = SubscribedEventInstance;
function SubscribedEventListInstance(version, subscriptionSid) {
    if (!(0, utility_1.isValidPathParam)(subscriptionSid)) {
        throw new Error("Parameter 'subscriptionSid' is not valid.");
    }
    const instance = (type)=>instance.get(type);
    instance.get = function get(type) {
        return new SubscribedEventContextImpl(version, subscriptionSid, type);
    };
    instance._version = version;
    instance._solution = {
        subscriptionSid
    };
    instance._uri = `/Subscriptions/${subscriptionSid}/SubscribedEvents`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["type"] === null || params["type"] === undefined) {
            throw new Error("Required parameter \"params['type']\" missing.");
        }
        let data = {};
        data["Type"] = params["type"];
        if (params["schemaVersion"] !== undefined) data["SchemaVersion"] = params["schemaVersion"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SubscribedEventInstance(operationVersion, payload, instance._solution.subscriptionSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SubscribedEventPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new SubscribedEventPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SubscribedEventPage extends Page_1.default {
    /**
     * Initialize the SubscribedEventPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of SubscribedEventInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new SubscribedEventInstance(this._version, payload, this._solution.subscriptionSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SubscribedEventPage = SubscribedEventPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/events/v1/subscription.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Events
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SubscriptionPage = exports.SubscriptionInstance = exports.SubscriptionContextImpl = void 0;
exports.SubscriptionListInstance = SubscriptionListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const subscribedEvent_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/events/v1/subscription/subscribedEvent.js [app-rsc] (ecmascript)");
class SubscriptionContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Subscriptions/${sid}`;
    }
    get subscribedEvents() {
        this._subscribedEvents = this._subscribedEvents || (0, subscribedEvent_1.SubscribedEventListInstance)(this._version, this._solution.sid);
        return this._subscribedEvents;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SubscriptionInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["description"] !== undefined) data["Description"] = params["description"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SubscriptionInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SubscriptionContextImpl = SubscriptionContextImpl;
class SubscriptionInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.sid = payload.sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.description = payload.description;
        this.sinkSid = payload.sink_sid;
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new SubscriptionContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a SubscriptionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a SubscriptionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed SubscriptionInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the subscribedEvents.
     */ subscribedEvents() {
        return this._proxy.subscribedEvents;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            sid: this.sid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            description: this.description,
            sinkSid: this.sinkSid,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SubscriptionInstance = SubscriptionInstance;
function SubscriptionListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new SubscriptionContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Subscriptions`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["description"] === null || params["description"] === undefined) {
            throw new Error("Required parameter \"params['description']\" missing.");
        }
        if (params["sinkSid"] === null || params["sinkSid"] === undefined) {
            throw new Error("Required parameter \"params['sinkSid']\" missing.");
        }
        if (params["types"] === null || params["types"] === undefined) {
            throw new Error("Required parameter \"params['types']\" missing.");
        }
        let data = {};
        data["Description"] = params["description"];
        data["SinkSid"] = params["sinkSid"];
        data["Types"] = serialize.map(params["types"], (e)=>serialize.object(e));
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SubscriptionInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["sinkSid"] !== undefined) data["SinkSid"] = params["sinkSid"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SubscriptionPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new SubscriptionPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SubscriptionPage extends Page_1.default {
    /**
     * Initialize the SubscriptionPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of SubscriptionInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new SubscriptionInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SubscriptionPage = SubscriptionPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/events/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Events
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const eventType_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/events/v1/eventType.js [app-rsc] (ecmascript)");
const schema_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/events/v1/schema.js [app-rsc] (ecmascript)");
const sink_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/events/v1/sink.js [app-rsc] (ecmascript)");
const subscription_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/events/v1/subscription.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of Events
     *
     * @param domain - The Twilio (Twilio.Events) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for eventTypes resource */ get eventTypes() {
        this._eventTypes = this._eventTypes || (0, eventType_1.EventTypeListInstance)(this);
        return this._eventTypes;
    }
    /** Getter for schemas resource */ get schemas() {
        this._schemas = this._schemas || (0, schema_1.SchemaListInstance)(this);
        return this._schemas;
    }
    /** Getter for sinks resource */ get sinks() {
        this._sinks = this._sinks || (0, sink_1.SinkListInstance)(this);
        return this._sinks;
    }
    /** Getter for subscriptions resource */ get subscriptions() {
        this._subscriptions = this._subscriptions || (0, subscription_1.SubscriptionListInstance)(this);
        return this._subscriptions;
    }
}
exports.default = V1;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/EventsBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/events/V1.js [app-rsc] (ecmascript)"));
class EventsBase extends Domain_1.default {
    /**
     * Initialize events domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://events.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
}
module.exports = EventsBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Events.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const EventsBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/EventsBase.js [app-rsc] (ecmascript)"));
class Events extends EventsBase_1.default {
    /**
     * @deprecated - Use v1.eventTypes instead
     */ get eventTypes() {
        console.warn("eventTypes is deprecated. Use v1.eventTypes instead.");
        return this.v1.eventTypes;
    }
    /**
     * @deprecated - Use v1.schemas instead
     */ get schemas() {
        console.warn("schemas is deprecated. Use v1.schemas instead.");
        return this.v1.schemas;
    }
    /**
     * @deprecated - Use v1.sinks instead
     */ get sinks() {
        console.warn("sinks is deprecated. Use v1.sinks instead.");
        return this.v1.sinks;
    }
    /**
     * @deprecated - Use v1.subscriptions instead
     */ get subscriptions() {
        console.warn("subscriptions is deprecated. Use v1.subscriptions instead.");
        return this.v1.subscriptions;
    }
}
module.exports = Events;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/FlexApiBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/V1.js [app-rsc] (ecmascript)"));
const V2_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/V2.js [app-rsc] (ecmascript)"));
class FlexApiBase extends Domain_1.default {
    /**
     * Initialize flexApi domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://flex-api.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
    get v2() {
        this._v2 = this._v2 || new V2_1.default(this);
        return this._v2;
    }
}
module.exports = FlexApiBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/FlexApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const FlexApiBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/FlexApiBase.js [app-rsc] (ecmascript)"));
class FlexApi extends FlexApiBase_1.default {
    /**
     * @deprecated - Use v1.assessments instead
     */ get assessments() {
        console.warn("assessments is deprecated. Use v1.assessments instead.");
        return this.v1.assessments;
    }
    /**
     * @deprecated - Use v1.channel instead
     */ get channel() {
        console.warn("channel is deprecated. Use v1.channel instead.");
        return this.v1.channel;
    }
    /**
     * @deprecated - Use v1.configuration instead
     */ get configuration() {
        console.warn("configuration is deprecated. Use v1.configuration instead.");
        return this.v1.configuration;
    }
    /**
     * @deprecated - Use v1.flexFlow instead
     */ get flexFlow() {
        console.warn("flexFlow is deprecated. Use v1.flexFlow instead.");
        return this.v1.flexFlow;
    }
    /**
     * @deprecated - Use v1.interaction instead
     */ get interaction() {
        console.warn("interaction is deprecated. Use v1.interaction instead.");
        return this.v1.interaction;
    }
    /**
     * @deprecated - Use v1.webChannel instead
     */ get webChannel() {
        console.warn("webChannel is deprecated. Use v1.webChannel instead.");
        return this.v1.webChannel;
    }
    /**
     * @deprecated - Use v2.webChannels instead
     */ get webChannels() {
        console.warn("webChannels is deprecated. Use v2.webChannels instead.");
        return this.v2.webChannels;
    }
}
module.exports = FlexApi;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/frontlineApi/v1/user.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Frontline
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UserInstance = exports.UserContextImpl = void 0;
exports.UserListInstance = UserListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class UserContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Users/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new UserInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["avatar"] !== undefined) data["Avatar"] = params["avatar"];
        if (params["state"] !== undefined) data["State"] = params["state"];
        if (params["isAvailable"] !== undefined) data["IsAvailable"] = serialize.bool(params["isAvailable"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new UserInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.UserContextImpl = UserContextImpl;
class UserInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.identity = payload.identity;
        this.friendlyName = payload.friendly_name;
        this.avatar = payload.avatar;
        this.state = payload.state;
        this.isAvailable = payload.is_available;
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new UserContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a UserInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed UserInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            identity: this.identity,
            friendlyName: this.friendlyName,
            avatar: this.avatar,
            state: this.state,
            isAvailable: this.isAvailable,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.UserInstance = UserInstance;
function UserListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new UserContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/frontlineApi/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Frontline
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const user_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/frontlineApi/v1/user.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of FrontlineApi
     *
     * @param domain - The Twilio (Twilio.FrontlineApi) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for users resource */ get users() {
        this._users = this._users || (0, user_1.UserListInstance)(this);
        return this._users;
    }
}
exports.default = V1;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/FrontlineApiBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/frontlineApi/V1.js [app-rsc] (ecmascript)"));
class FrontlineApiBase extends Domain_1.default {
    /**
     * Initialize frontlineApi domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://frontline-api.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
}
module.exports = FrontlineApiBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/FrontlineApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const FrontlineApiBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/FrontlineApiBase.js [app-rsc] (ecmascript)"));
class FrontlineApi extends FrontlineApiBase_1.default {
    /**
     * @deprecated - Use v1.users instead
     */ get users() {
        console.warn("users is deprecated. Use v1.users instead.");
        return this.v1.users;
    }
}
module.exports = FrontlineApi;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/previewIam/v1/authorize.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Organization Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AuthorizeInstance = void 0;
exports.AuthorizeListInstance = AuthorizeListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function AuthorizeListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/authorize`;
    instance.fetch = function fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["responseType"] !== undefined) data["response_type"] = params["responseType"];
        if (params["clientId"] !== undefined) data["client_id"] = params["clientId"];
        if (params["redirectUri"] !== undefined) data["redirect_uri"] = params["redirectUri"];
        if (params["scope"] !== undefined) data["scope"] = params["scope"];
        if (params["state"] !== undefined) data["state"] = params["state"];
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AuthorizeInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class AuthorizeInstance {
    constructor(_version, payload){
        this._version = _version;
        this.redirectTo = payload.redirect_to;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            redirectTo: this.redirectTo
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AuthorizeInstance = AuthorizeInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/previewIam/v1/token.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Organization Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TokenInstance = void 0;
exports.TokenListInstance = TokenListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function TokenListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/token`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["grantType"] === null || params["grantType"] === undefined) {
            throw new Error("Required parameter \"params['grantType']\" missing.");
        }
        if (params["clientId"] === null || params["clientId"] === undefined) {
            throw new Error("Required parameter \"params['clientId']\" missing.");
        }
        let data = {};
        data["grant_type"] = params["grantType"];
        data["client_id"] = params["clientId"];
        if (params["clientSecret"] !== undefined) data["client_secret"] = params["clientSecret"];
        if (params["code"] !== undefined) data["code"] = params["code"];
        if (params["redirectUri"] !== undefined) data["redirect_uri"] = params["redirectUri"];
        if (params["audience"] !== undefined) data["audience"] = params["audience"];
        if (params["refreshToken"] !== undefined) data["refresh_token"] = params["refreshToken"];
        if (params["scope"] !== undefined) data["scope"] = params["scope"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new TokenInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class TokenInstance {
    constructor(_version, payload){
        this._version = _version;
        this.accessToken = payload.access_token;
        this.refreshToken = payload.refresh_token;
        this.idToken = payload.id_token;
        this.tokenType = payload.token_type;
        this.expiresIn = payload.expires_in;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accessToken: this.accessToken,
            refreshToken: this.refreshToken,
            idToken: this.idToken,
            tokenType: this.tokenType,
            expiresIn: this.expiresIn
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.TokenInstance = TokenInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/previewIam/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Organization Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const authorize_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/previewIam/v1/authorize.js [app-rsc] (ecmascript)");
const token_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/previewIam/v1/token.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of PreviewIam
     *
     * @param domain - The Twilio (Twilio.PreviewIam) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for authorize resource */ get authorize() {
        this._authorize = this._authorize || (0, authorize_1.AuthorizeListInstance)(this);
        return this._authorize;
    }
    /** Getter for token resource */ get token() {
        this._token = this._token || (0, token_1.TokenListInstance)(this);
        return this._token;
    }
}
exports.default = V1;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/previewIam/versionless/organization/account.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Organization Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AccountPage = exports.AccountInstance = exports.AccountContextImpl = void 0;
exports.AccountListInstance = AccountListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class AccountContextImpl {
    constructor(_version, organizationSid, accountSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(organizationSid)) {
            throw new Error("Parameter 'organizationSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(accountSid)) {
            throw new Error("Parameter 'accountSid' is not valid.");
        }
        this._solution = {
            organizationSid,
            accountSid
        };
        this._uri = `/${organizationSid}/Accounts/${accountSid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AccountInstance(operationVersion, payload, instance._solution.organizationSid, instance._solution.accountSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AccountContextImpl = AccountContextImpl;
/**
 * Page content
 */ class AccountInstance {
    constructor(_version, payload, organizationSid, accountSid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.status = payload.status;
        this.ownerSid = payload.owner_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this._solution = {
            organizationSid,
            accountSid: accountSid || this.accountSid
        };
    }
    get _proxy() {
        this._context = this._context || new AccountContextImpl(this._version, this._solution.organizationSid, this._solution.accountSid);
        return this._context;
    }
    /**
     * Fetch a AccountInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed AccountInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            status: this.status,
            ownerSid: this.ownerSid,
            dateCreated: this.dateCreated
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AccountInstance = AccountInstance;
function AccountListInstance(version, organizationSid) {
    if (!(0, utility_1.isValidPathParam)(organizationSid)) {
        throw new Error("Parameter 'organizationSid' is not valid.");
    }
    const instance = (accountSid)=>instance.get(accountSid);
    instance.get = function get(accountSid) {
        return new AccountContextImpl(version, organizationSid, accountSid);
    };
    instance._version = version;
    instance._solution = {
        organizationSid
    };
    instance._uri = `/${organizationSid}/Accounts`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AccountPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new AccountPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class AccountPage extends Page_1.default {
    /**
     * Initialize the AccountPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of AccountInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new AccountInstance(this._version, payload, this._solution.organizationSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AccountPage = AccountPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/previewIam/versionless/organization/roleAssignment.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Organization Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RoleAssignmentPage = exports.RoleAssignmentInstance = exports.RoleAssignmentContextImpl = exports.PublicApiCreateRoleAssignmentRequest = void 0;
exports.RoleAssignmentListInstance = RoleAssignmentListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class PublicApiCreateRoleAssignmentRequest {
}
exports.PublicApiCreateRoleAssignmentRequest = PublicApiCreateRoleAssignmentRequest;
class RoleAssignmentContextImpl {
    constructor(_version, organizationSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(organizationSid)) {
            throw new Error("Parameter 'organizationSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            organizationSid,
            sid
        };
        this._uri = `/${organizationSid}/RoleAssignments/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.RoleAssignmentContextImpl = RoleAssignmentContextImpl;
class RoleAssignmentInstance {
    constructor(_version, payload, organizationSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.roleSid = payload.role_sid;
        this.scope = payload.scope;
        this.identity = payload.identity;
        this.code = payload.code;
        this.message = payload.message;
        this.moreInfo = payload.moreInfo;
        this.status = payload.status;
        this._solution = {
            organizationSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new RoleAssignmentContextImpl(this._version, this._solution.organizationSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a RoleAssignmentInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            roleSid: this.roleSid,
            scope: this.scope,
            identity: this.identity,
            code: this.code,
            message: this.message,
            moreInfo: this.moreInfo,
            status: this.status
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.RoleAssignmentInstance = RoleAssignmentInstance;
function RoleAssignmentListInstance(version, organizationSid) {
    if (!(0, utility_1.isValidPathParam)(organizationSid)) {
        throw new Error("Parameter 'organizationSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new RoleAssignmentContextImpl(version, organizationSid, sid);
    };
    instance._version = version;
    instance._solution = {
        organizationSid
    };
    instance._uri = `/${organizationSid}/RoleAssignments`;
    instance.create = function create(params, headers, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new RoleAssignmentInstance(operationVersion, payload, instance._solution.organizationSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params["identity"] !== undefined) data["Identity"] = params["identity"];
        if (params["scope"] !== undefined) data["Scope"] = params["scope"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new RoleAssignmentPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new RoleAssignmentPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class RoleAssignmentPage extends Page_1.default {
    /**
     * Initialize the RoleAssignmentPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of RoleAssignmentInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new RoleAssignmentInstance(this._version, payload, this._solution.organizationSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.RoleAssignmentPage = RoleAssignmentPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/previewIam/versionless/organization/user.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Organization Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UserPage = exports.UserInstance = exports.UserContextImpl = exports.ScimUser = exports.ScimName = exports.ScimMeta = exports.ScimEmailAddress = void 0;
exports.UserListInstance = UserListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
/**
 * Email address list of the user. Primary email must be defined if there are more than 1 email. Primary email must match the username.
 */ class ScimEmailAddress {
}
exports.ScimEmailAddress = ScimEmailAddress;
/**
 * Meta
 */ class ScimMeta {
}
exports.ScimMeta = ScimMeta;
/**
 * User\'s name
 */ class ScimName {
}
exports.ScimName = ScimName;
class ScimUser {
}
exports.ScimUser = ScimUser;
class UserContextImpl {
    constructor(_version, organizationSid, id){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(organizationSid)) {
            throw new Error("Parameter 'organizationSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(id)) {
            throw new Error("Parameter 'id' is not valid.");
        }
        this._solution = {
            organizationSid,
            id
        };
        this._uri = `/${organizationSid}/scim/Users/${id}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/scim+json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new UserInstance(operationVersion, payload, instance._solution.organizationSid, instance._solution.id));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, headers, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/scim+json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "put",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new UserInstance(operationVersion, payload, instance._solution.organizationSid, instance._solution.id));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.UserContextImpl = UserContextImpl;
class UserInstance {
    constructor(_version, payload, organizationSid, id){
        this._version = _version;
        this.id = payload.id;
        this.externalId = payload.externalId;
        this.userName = payload.userName;
        this.displayName = payload.displayName;
        this.name = payload.name;
        this.emails = payload.emails;
        this.active = payload.active;
        this.locale = payload.locale;
        this.timezone = payload.timezone;
        this.schemas = payload.schemas;
        this.meta = payload.meta;
        this.detail = payload.detail;
        this.scimType = payload.scimType;
        this.status = payload.status;
        this.code = payload.code;
        this.moreInfo = payload.moreInfo;
        this._solution = {
            organizationSid,
            id: id || this.id
        };
    }
    get _proxy() {
        this._context = this._context || new UserContextImpl(this._version, this._solution.organizationSid, this._solution.id);
        return this._context;
    }
    /**
     * Remove a UserInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a UserInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed UserInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            id: this.id,
            externalId: this.externalId,
            userName: this.userName,
            displayName: this.displayName,
            name: this.name,
            emails: this.emails,
            active: this.active,
            locale: this.locale,
            timezone: this.timezone,
            schemas: this.schemas,
            meta: this.meta,
            detail: this.detail,
            scimType: this.scimType,
            status: this.status,
            code: this.code,
            moreInfo: this.moreInfo
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.UserInstance = UserInstance;
function UserListInstance(version, organizationSid) {
    if (!(0, utility_1.isValidPathParam)(organizationSid)) {
        throw new Error("Parameter 'organizationSid' is not valid.");
    }
    const instance = (id)=>instance.get(id);
    instance.get = function get(id) {
        return new UserContextImpl(version, organizationSid, id);
    };
    instance._version = version;
    instance._solution = {
        organizationSid
    };
    instance._uri = `/${organizationSid}/scim/Users`;
    instance.create = function create(params, headers, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/scim+json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new UserInstance(operationVersion, payload, instance._solution.organizationSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["filter"] !== undefined) data["filter"] = params["filter"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/scim+json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new UserPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new UserPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class UserPage extends Page_1.default {
    /**
     * Initialize the UserPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of UserInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new UserInstance(this._version, payload, this._solution.organizationSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.UserPage = UserPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/previewIam/versionless/organization.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Organization Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OrganizationContextImpl = void 0;
exports.OrganizationListInstance = OrganizationListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const account_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/previewIam/versionless/organization/account.js [app-rsc] (ecmascript)");
const roleAssignment_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/previewIam/versionless/organization/roleAssignment.js [app-rsc] (ecmascript)");
const user_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/previewIam/versionless/organization/user.js [app-rsc] (ecmascript)");
class OrganizationContextImpl {
    constructor(_version, organizationSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(organizationSid)) {
            throw new Error("Parameter 'organizationSid' is not valid.");
        }
        this._solution = {
            organizationSid
        };
        this._uri = `/${organizationSid}`;
    }
    get accounts() {
        this._accounts = this._accounts || (0, account_1.AccountListInstance)(this._version, this._solution.organizationSid);
        return this._accounts;
    }
    get roleAssignments() {
        this._roleAssignments = this._roleAssignments || (0, roleAssignment_1.RoleAssignmentListInstance)(this._version, this._solution.organizationSid);
        return this._roleAssignments;
    }
    get users() {
        this._users = this._users || (0, user_1.UserListInstance)(this._version, this._solution.organizationSid);
        return this._users;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.OrganizationContextImpl = OrganizationContextImpl;
function OrganizationListInstance(version) {
    const instance = (organizationSid)=>instance.get(organizationSid);
    instance.get = function get(organizationSid) {
        return new OrganizationContextImpl(version, organizationSid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/previewIam/Versionless.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Organization Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const organization_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/previewIam/versionless/organization.js [app-rsc] (ecmascript)");
class Versionless extends Version_1.default {
    /**
     * Initialize the Versionless version of PreviewIam
     *
     * @param domain - The Twilio (Twilio.PreviewIam) domain
     */ constructor(domain){
        super(domain, "Organizations");
    }
    /** Getter for organization resource */ get organization() {
        this._organization = this._organization || (0, organization_1.OrganizationListInstance)(this);
        return this._organization;
    }
}
exports.default = Versionless;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/PreviewIamBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/previewIam/V1.js [app-rsc] (ecmascript)"));
class PreviewIamBase extends Domain_1.default {
    /**
     * Initialize previewIam domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://preview-iam.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
}
module.exports = PreviewIamBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/PreviewIam.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const PreviewIamBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/PreviewIamBase.js [app-rsc] (ecmascript)"));
const Versionless_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/previewIam/Versionless.js [app-rsc] (ecmascript)"));
class PreviewIam extends PreviewIamBase_1.default {
    /**
     * @deprecated - Use v1.tokens instead
     */ get tokens() {
        console.warn("tokens is deprecated. Use v1.tokens instead.");
        return this.v1.token;
    }
    /**
     * @deprecated - Use v1.authorize instead
     */ get authorize() {
        console.warn("authorize is deprecated. Use v1.authorize instead.");
        return this.v1.authorize;
    }
    /** Getter for organization resource */ get organization() {
        this._organization = this._organization || new Versionless_1.default(this).organization;
        return this._organization;
    }
}
module.exports = PreviewIam;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/iam/v1/apiKey.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Iam
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ApiKeyInstance = exports.ApiKeyContextImpl = void 0;
exports.ApiKeyListInstance = ApiKeyListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class ApiKeyContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Keys/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ApiKeyInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["policy"] !== undefined) data["Policy"] = serialize.object(params["policy"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ApiKeyInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ApiKeyContextImpl = ApiKeyContextImpl;
class ApiKeyInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.friendlyName = payload.friendly_name;
        this.dateCreated = deserialize.rfc2822DateTime(payload.date_created);
        this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated);
        this.policy = payload.policy;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new ApiKeyContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a ApiKeyInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a ApiKeyInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ApiKeyInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            friendlyName: this.friendlyName,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            policy: this.policy
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ApiKeyInstance = ApiKeyInstance;
function ApiKeyListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new ApiKeyContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/iam/v1/getApiKeys.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Iam
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.GetApiKeysPage = exports.GetApiKeysInstance = void 0;
exports.GetApiKeysListInstance = GetApiKeysListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function GetApiKeysListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Keys`;
    instance.page = function page(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["accountSid"] === null || params["accountSid"] === undefined) {
            throw new Error("Required parameter \"params['accountSid']\" missing.");
        }
        let data = {};
        data["AccountSid"] = params["accountSid"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new GetApiKeysPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new GetApiKeysPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class GetApiKeysInstance {
    constructor(_version, payload){
        this._version = _version;
        this.sid = payload.sid;
        this.friendlyName = payload.friendly_name;
        this.dateCreated = deserialize.rfc2822DateTime(payload.date_created);
        this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated);
        this.flags = payload.flags;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            friendlyName: this.friendlyName,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            flags: this.flags
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.GetApiKeysInstance = GetApiKeysInstance;
class GetApiKeysPage extends Page_1.default {
    /**
     * Initialize the GetApiKeysPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of GetApiKeysInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new GetApiKeysInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.GetApiKeysPage = GetApiKeysPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/iam/v1/newApiKey.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Iam
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NewApiKeyInstance = void 0;
exports.NewApiKeyListInstance = NewApiKeyListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function NewApiKeyListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Keys`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["accountSid"] === null || params["accountSid"] === undefined) {
            throw new Error("Required parameter \"params['accountSid']\" missing.");
        }
        let data = {};
        data["AccountSid"] = params["accountSid"];
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["keyType"] !== undefined) data["KeyType"] = params["keyType"];
        if (params["policy"] !== undefined) data["Policy"] = serialize.object(params["policy"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new NewApiKeyInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class NewApiKeyInstance {
    constructor(_version, payload){
        this._version = _version;
        this.sid = payload.sid;
        this.friendlyName = payload.friendly_name;
        this.dateCreated = deserialize.rfc2822DateTime(payload.date_created);
        this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated);
        this.secret = payload.secret;
        this.policy = payload.policy;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            friendlyName: this.friendlyName,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            secret: this.secret,
            policy: this.policy
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.NewApiKeyInstance = NewApiKeyInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/iam/v1/token.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Iam
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TokenInstance = void 0;
exports.TokenListInstance = TokenListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function TokenListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/token`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["grantType"] === null || params["grantType"] === undefined) {
            throw new Error("Required parameter \"params['grantType']\" missing.");
        }
        if (params["clientId"] === null || params["clientId"] === undefined) {
            throw new Error("Required parameter \"params['clientId']\" missing.");
        }
        let data = {};
        data["grant_type"] = params["grantType"];
        data["client_id"] = params["clientId"];
        if (params["clientSecret"] !== undefined) data["client_secret"] = params["clientSecret"];
        if (params["code"] !== undefined) data["code"] = params["code"];
        if (params["redirectUri"] !== undefined) data["redirect_uri"] = params["redirectUri"];
        if (params["audience"] !== undefined) data["audience"] = params["audience"];
        if (params["refreshToken"] !== undefined) data["refresh_token"] = params["refreshToken"];
        if (params["scope"] !== undefined) data["scope"] = params["scope"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new TokenInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class TokenInstance {
    constructor(_version, payload){
        this._version = _version;
        this.accessToken = payload.access_token;
        this.refreshToken = payload.refresh_token;
        this.idToken = payload.id_token;
        this.tokenType = payload.token_type;
        this.expiresIn = payload.expires_in;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accessToken: this.accessToken,
            refreshToken: this.refreshToken,
            idToken: this.idToken,
            tokenType: this.tokenType,
            expiresIn: this.expiresIn
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.TokenInstance = TokenInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/iam/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Iam
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const apiKey_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/iam/v1/apiKey.js [app-rsc] (ecmascript)");
const getApiKeys_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/iam/v1/getApiKeys.js [app-rsc] (ecmascript)");
const newApiKey_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/iam/v1/newApiKey.js [app-rsc] (ecmascript)");
const token_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/iam/v1/token.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of Iam
     *
     * @param domain - The Twilio (Twilio.Iam) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for apiKey resource */ get apiKey() {
        this._apiKey = this._apiKey || (0, apiKey_1.ApiKeyListInstance)(this);
        return this._apiKey;
    }
    /** Getter for getApiKeys resource */ get getApiKeys() {
        this._getApiKeys = this._getApiKeys || (0, getApiKeys_1.GetApiKeysListInstance)(this);
        return this._getApiKeys;
    }
    /** Getter for newApiKey resource */ get newApiKey() {
        this._newApiKey = this._newApiKey || (0, newApiKey_1.NewApiKeyListInstance)(this);
        return this._newApiKey;
    }
    /** Getter for token resource */ get token() {
        this._token = this._token || (0, token_1.TokenListInstance)(this);
        return this._token;
    }
}
exports.default = V1;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/IamBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/iam/V1.js [app-rsc] (ecmascript)"));
class IamBase extends Domain_1.default {
    /**
     * Initialize iam domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://iam.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
}
module.exports = IamBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Iam.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const IamBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/IamBase.js [app-rsc] (ecmascript)"));
class Iam extends IamBase_1.default {
}
module.exports = Iam;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/v1/call/annotation.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AnnotationInstance = exports.AnnotationContextImpl = void 0;
exports.AnnotationListInstance = AnnotationListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class AnnotationContextImpl {
    constructor(_version, callSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(callSid)) {
            throw new Error("Parameter 'callSid' is not valid.");
        }
        this._solution = {
            callSid
        };
        this._uri = `/Voice/${callSid}/Annotation`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AnnotationInstance(operationVersion, payload, instance._solution.callSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["answeredBy"] !== undefined) data["AnsweredBy"] = params["answeredBy"];
        if (params["connectivityIssue"] !== undefined) data["ConnectivityIssue"] = params["connectivityIssue"];
        if (params["qualityIssues"] !== undefined) data["QualityIssues"] = params["qualityIssues"];
        if (params["spam"] !== undefined) data["Spam"] = serialize.bool(params["spam"]);
        if (params["callScore"] !== undefined) data["CallScore"] = params["callScore"];
        if (params["comment"] !== undefined) data["Comment"] = params["comment"];
        if (params["incident"] !== undefined) data["Incident"] = params["incident"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AnnotationInstance(operationVersion, payload, instance._solution.callSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AnnotationContextImpl = AnnotationContextImpl;
class AnnotationInstance {
    constructor(_version, payload, callSid){
        this._version = _version;
        this.callSid = payload.call_sid;
        this.accountSid = payload.account_sid;
        this.answeredBy = payload.answered_by;
        this.connectivityIssue = payload.connectivity_issue;
        this.qualityIssues = payload.quality_issues;
        this.spam = payload.spam;
        this.callScore = deserialize.integer(payload.call_score);
        this.comment = payload.comment;
        this.incident = payload.incident;
        this.url = payload.url;
        this._solution = {
            callSid
        };
    }
    get _proxy() {
        this._context = this._context || new AnnotationContextImpl(this._version, this._solution.callSid);
        return this._context;
    }
    /**
     * Fetch a AnnotationInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed AnnotationInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            callSid: this.callSid,
            accountSid: this.accountSid,
            answeredBy: this.answeredBy,
            connectivityIssue: this.connectivityIssue,
            qualityIssues: this.qualityIssues,
            spam: this.spam,
            callScore: this.callScore,
            comment: this.comment,
            incident: this.incident,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AnnotationInstance = AnnotationInstance;
function AnnotationListInstance(version, callSid) {
    if (!(0, utility_1.isValidPathParam)(callSid)) {
        throw new Error("Parameter 'callSid' is not valid.");
    }
    const instance = ()=>instance.get();
    instance.get = function get() {
        return new AnnotationContextImpl(version, callSid);
    };
    instance._version = version;
    instance._solution = {
        callSid
    };
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/v1/call/callSummary.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CallSummaryInstance = exports.CallSummaryContextImpl = void 0;
exports.CallSummaryListInstance = CallSummaryListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class CallSummaryContextImpl {
    constructor(_version, callSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(callSid)) {
            throw new Error("Parameter 'callSid' is not valid.");
        }
        this._solution = {
            callSid
        };
        this._uri = `/Voice/${callSid}/Summary`;
    }
    fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["processingState"] !== undefined) data["ProcessingState"] = params["processingState"];
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CallSummaryInstance(operationVersion, payload, instance._solution.callSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CallSummaryContextImpl = CallSummaryContextImpl;
class CallSummaryInstance {
    constructor(_version, payload, callSid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.callSid = payload.call_sid;
        this.callType = payload.call_type;
        this.callState = payload.call_state;
        this.answeredBy = payload.answered_by;
        this.processingState = payload.processing_state;
        this.createdTime = deserialize.iso8601DateTime(payload.created_time);
        this.startTime = deserialize.iso8601DateTime(payload.start_time);
        this.endTime = deserialize.iso8601DateTime(payload.end_time);
        this.duration = deserialize.integer(payload.duration);
        this.connectDuration = deserialize.integer(payload.connect_duration);
        this.from = payload.from;
        this.to = payload.to;
        this.carrierEdge = payload.carrier_edge;
        this.clientEdge = payload.client_edge;
        this.sdkEdge = payload.sdk_edge;
        this.sipEdge = payload.sip_edge;
        this.tags = payload.tags;
        this.url = payload.url;
        this.attributes = payload.attributes;
        this.properties = payload.properties;
        this.trust = payload.trust;
        this.annotation = payload.annotation;
        this._solution = {
            callSid
        };
    }
    get _proxy() {
        this._context = this._context || new CallSummaryContextImpl(this._version, this._solution.callSid);
        return this._context;
    }
    fetch(params, callback) {
        return this._proxy.fetch(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            callSid: this.callSid,
            callType: this.callType,
            callState: this.callState,
            answeredBy: this.answeredBy,
            processingState: this.processingState,
            createdTime: this.createdTime,
            startTime: this.startTime,
            endTime: this.endTime,
            duration: this.duration,
            connectDuration: this.connectDuration,
            from: this.from,
            to: this.to,
            carrierEdge: this.carrierEdge,
            clientEdge: this.clientEdge,
            sdkEdge: this.sdkEdge,
            sipEdge: this.sipEdge,
            tags: this.tags,
            url: this.url,
            attributes: this.attributes,
            properties: this.properties,
            trust: this.trust,
            annotation: this.annotation
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CallSummaryInstance = CallSummaryInstance;
function CallSummaryListInstance(version, callSid) {
    if (!(0, utility_1.isValidPathParam)(callSid)) {
        throw new Error("Parameter 'callSid' is not valid.");
    }
    const instance = ()=>instance.get();
    instance.get = function get() {
        return new CallSummaryContextImpl(version, callSid);
    };
    instance._version = version;
    instance._solution = {
        callSid
    };
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/v1/call/event.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EventPage = exports.EventInstance = void 0;
exports.EventListInstance = EventListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
function EventListInstance(version, callSid) {
    if (!(0, utility_1.isValidPathParam)(callSid)) {
        throw new Error("Parameter 'callSid' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        callSid
    };
    instance._uri = `/Voice/${callSid}/Events`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["edge"] !== undefined) data["Edge"] = params["edge"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new EventPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new EventPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class EventInstance {
    constructor(_version, payload, callSid){
        this._version = _version;
        this.timestamp = payload.timestamp;
        this.callSid = payload.call_sid;
        this.accountSid = payload.account_sid;
        this.edge = payload.edge;
        this.group = payload.group;
        this.level = payload.level;
        this.name = payload.name;
        this.carrierEdge = payload.carrier_edge;
        this.sipEdge = payload.sip_edge;
        this.sdkEdge = payload.sdk_edge;
        this.clientEdge = payload.client_edge;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            timestamp: this.timestamp,
            callSid: this.callSid,
            accountSid: this.accountSid,
            edge: this.edge,
            group: this.group,
            level: this.level,
            name: this.name,
            carrierEdge: this.carrierEdge,
            sipEdge: this.sipEdge,
            sdkEdge: this.sdkEdge,
            clientEdge: this.clientEdge
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.EventInstance = EventInstance;
class EventPage extends Page_1.default {
    /**
     * Initialize the EventPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of EventInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new EventInstance(this._version, payload, this._solution.callSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.EventPage = EventPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/v1/call/metric.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MetricPage = exports.MetricInstance = void 0;
exports.MetricListInstance = MetricListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
function MetricListInstance(version, callSid) {
    if (!(0, utility_1.isValidPathParam)(callSid)) {
        throw new Error("Parameter 'callSid' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        callSid
    };
    instance._uri = `/Voice/${callSid}/Metrics`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["edge"] !== undefined) data["Edge"] = params["edge"];
        if (params["direction"] !== undefined) data["Direction"] = params["direction"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new MetricPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new MetricPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class MetricInstance {
    constructor(_version, payload, callSid){
        this._version = _version;
        this.timestamp = payload.timestamp;
        this.callSid = payload.call_sid;
        this.accountSid = payload.account_sid;
        this.edge = payload.edge;
        this.direction = payload.direction;
        this.carrierEdge = payload.carrier_edge;
        this.sipEdge = payload.sip_edge;
        this.sdkEdge = payload.sdk_edge;
        this.clientEdge = payload.client_edge;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            timestamp: this.timestamp,
            callSid: this.callSid,
            accountSid: this.accountSid,
            edge: this.edge,
            direction: this.direction,
            carrierEdge: this.carrierEdge,
            sipEdge: this.sipEdge,
            sdkEdge: this.sdkEdge,
            clientEdge: this.clientEdge
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.MetricInstance = MetricInstance;
class MetricPage extends Page_1.default {
    /**
     * Initialize the MetricPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of MetricInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new MetricInstance(this._version, payload, this._solution.callSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.MetricPage = MetricPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/v1/call.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CallInstance = exports.CallContextImpl = void 0;
exports.CallListInstance = CallListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const annotation_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/v1/call/annotation.js [app-rsc] (ecmascript)");
const callSummary_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/v1/call/callSummary.js [app-rsc] (ecmascript)");
const event_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/v1/call/event.js [app-rsc] (ecmascript)");
const metric_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/v1/call/metric.js [app-rsc] (ecmascript)");
class CallContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Voice/${sid}`;
    }
    get annotation() {
        this._annotation = this._annotation || (0, annotation_1.AnnotationListInstance)(this._version, this._solution.sid);
        return this._annotation;
    }
    get summary() {
        this._summary = this._summary || (0, callSummary_1.CallSummaryListInstance)(this._version, this._solution.sid);
        return this._summary;
    }
    get events() {
        this._events = this._events || (0, event_1.EventListInstance)(this._version, this._solution.sid);
        return this._events;
    }
    get metrics() {
        this._metrics = this._metrics || (0, metric_1.MetricListInstance)(this._version, this._solution.sid);
        return this._metrics;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CallInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CallContextImpl = CallContextImpl;
class CallInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new CallContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a CallInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed CallInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Access the annotation.
     */ annotation() {
        return this._proxy.annotation;
    }
    /**
     * Access the summary.
     */ summary() {
        return this._proxy.summary;
    }
    /**
     * Access the events.
     */ events() {
        return this._proxy.events;
    }
    /**
     * Access the metrics.
     */ metrics() {
        return this._proxy.metrics;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CallInstance = CallInstance;
function CallListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new CallContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/v1/callSummaries.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CallSummariesPage = exports.CallSummariesInstance = void 0;
exports.CallSummariesListInstance = CallSummariesListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function CallSummariesListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Voice/Summaries`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["from"] !== undefined) data["From"] = params["from"];
        if (params["to"] !== undefined) data["To"] = params["to"];
        if (params["fromCarrier"] !== undefined) data["FromCarrier"] = params["fromCarrier"];
        if (params["toCarrier"] !== undefined) data["ToCarrier"] = params["toCarrier"];
        if (params["fromCountryCode"] !== undefined) data["FromCountryCode"] = params["fromCountryCode"];
        if (params["toCountryCode"] !== undefined) data["ToCountryCode"] = params["toCountryCode"];
        if (params["verifiedCaller"] !== undefined) data["VerifiedCaller"] = serialize.bool(params["verifiedCaller"]);
        if (params["hasTag"] !== undefined) data["HasTag"] = serialize.bool(params["hasTag"]);
        if (params["startTime"] !== undefined) data["StartTime"] = params["startTime"];
        if (params["endTime"] !== undefined) data["EndTime"] = params["endTime"];
        if (params["callType"] !== undefined) data["CallType"] = params["callType"];
        if (params["callState"] !== undefined) data["CallState"] = params["callState"];
        if (params["direction"] !== undefined) data["Direction"] = params["direction"];
        if (params["processingState"] !== undefined) data["ProcessingState"] = params["processingState"];
        if (params["sortBy"] !== undefined) data["SortBy"] = params["sortBy"];
        if (params["subaccount"] !== undefined) data["Subaccount"] = params["subaccount"];
        if (params["abnormalSession"] !== undefined) data["AbnormalSession"] = serialize.bool(params["abnormalSession"]);
        if (params["answeredBy"] !== undefined) data["AnsweredBy"] = params["answeredBy"];
        if (params["answeredByAnnotation"] !== undefined) data["AnsweredByAnnotation"] = params["answeredByAnnotation"];
        if (params["connectivityIssueAnnotation"] !== undefined) data["ConnectivityIssueAnnotation"] = params["connectivityIssueAnnotation"];
        if (params["qualityIssueAnnotation"] !== undefined) data["QualityIssueAnnotation"] = params["qualityIssueAnnotation"];
        if (params["spamAnnotation"] !== undefined) data["SpamAnnotation"] = serialize.bool(params["spamAnnotation"]);
        if (params["callScoreAnnotation"] !== undefined) data["CallScoreAnnotation"] = params["callScoreAnnotation"];
        if (params["brandedEnabled"] !== undefined) data["BrandedEnabled"] = serialize.bool(params["brandedEnabled"]);
        if (params["voiceIntegrityEnabled"] !== undefined) data["VoiceIntegrityEnabled"] = serialize.bool(params["voiceIntegrityEnabled"]);
        if (params["brandedBundleSid"] !== undefined) data["BrandedBundleSid"] = params["brandedBundleSid"];
        if (params["brandedLogo"] !== undefined) data["BrandedLogo"] = serialize.bool(params["brandedLogo"]);
        if (params["brandedType"] !== undefined) data["BrandedType"] = params["brandedType"];
        if (params["brandedUseCase"] !== undefined) data["BrandedUseCase"] = params["brandedUseCase"];
        if (params["brandedCallReason"] !== undefined) data["BrandedCallReason"] = params["brandedCallReason"];
        if (params["voiceIntegrityBundleSid"] !== undefined) data["VoiceIntegrityBundleSid"] = params["voiceIntegrityBundleSid"];
        if (params["voiceIntegrityUseCase"] !== undefined) data["VoiceIntegrityUseCase"] = params["voiceIntegrityUseCase"];
        if (params["businessProfileIdentity"] !== undefined) data["BusinessProfileIdentity"] = params["businessProfileIdentity"];
        if (params["businessProfileIndustry"] !== undefined) data["BusinessProfileIndustry"] = params["businessProfileIndustry"];
        if (params["businessProfileBundleSid"] !== undefined) data["BusinessProfileBundleSid"] = params["businessProfileBundleSid"];
        if (params["businessProfileType"] !== undefined) data["BusinessProfileType"] = params["businessProfileType"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CallSummariesPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new CallSummariesPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class CallSummariesInstance {
    constructor(_version, payload){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.callSid = payload.call_sid;
        this.answeredBy = payload.answered_by;
        this.callType = payload.call_type;
        this.callState = payload.call_state;
        this.processingState = payload.processing_state;
        this.createdTime = deserialize.iso8601DateTime(payload.created_time);
        this.startTime = deserialize.iso8601DateTime(payload.start_time);
        this.endTime = deserialize.iso8601DateTime(payload.end_time);
        this.duration = deserialize.integer(payload.duration);
        this.connectDuration = deserialize.integer(payload.connect_duration);
        this.from = payload.from;
        this.to = payload.to;
        this.carrierEdge = payload.carrier_edge;
        this.clientEdge = payload.client_edge;
        this.sdkEdge = payload.sdk_edge;
        this.sipEdge = payload.sip_edge;
        this.tags = payload.tags;
        this.url = payload.url;
        this.attributes = payload.attributes;
        this.properties = payload.properties;
        this.trust = payload.trust;
        this.annotation = payload.annotation;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            callSid: this.callSid,
            answeredBy: this.answeredBy,
            callType: this.callType,
            callState: this.callState,
            processingState: this.processingState,
            createdTime: this.createdTime,
            startTime: this.startTime,
            endTime: this.endTime,
            duration: this.duration,
            connectDuration: this.connectDuration,
            from: this.from,
            to: this.to,
            carrierEdge: this.carrierEdge,
            clientEdge: this.clientEdge,
            sdkEdge: this.sdkEdge,
            sipEdge: this.sipEdge,
            tags: this.tags,
            url: this.url,
            attributes: this.attributes,
            properties: this.properties,
            trust: this.trust,
            annotation: this.annotation
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CallSummariesInstance = CallSummariesInstance;
class CallSummariesPage extends Page_1.default {
    /**
     * Initialize the CallSummariesPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of CallSummariesInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new CallSummariesInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CallSummariesPage = CallSummariesPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/v1/conference/conferenceParticipant.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ConferenceParticipantPage = exports.ConferenceParticipantInstance = exports.ConferenceParticipantContextImpl = void 0;
exports.ConferenceParticipantListInstance = ConferenceParticipantListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class ConferenceParticipantContextImpl {
    constructor(_version, conferenceSid, participantSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(conferenceSid)) {
            throw new Error("Parameter 'conferenceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(participantSid)) {
            throw new Error("Parameter 'participantSid' is not valid.");
        }
        this._solution = {
            conferenceSid,
            participantSid
        };
        this._uri = `/Conferences/${conferenceSid}/Participants/${participantSid}`;
    }
    fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["events"] !== undefined) data["Events"] = params["events"];
        if (params["metrics"] !== undefined) data["Metrics"] = params["metrics"];
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ConferenceParticipantInstance(operationVersion, payload, instance._solution.conferenceSid, instance._solution.participantSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ConferenceParticipantContextImpl = ConferenceParticipantContextImpl;
class ConferenceParticipantInstance {
    constructor(_version, payload, conferenceSid, participantSid){
        this._version = _version;
        this.participantSid = payload.participant_sid;
        this.label = payload.label;
        this.conferenceSid = payload.conference_sid;
        this.callSid = payload.call_sid;
        this.accountSid = payload.account_sid;
        this.callDirection = payload.call_direction;
        this.from = payload.from;
        this.to = payload.to;
        this.callStatus = payload.call_status;
        this.countryCode = payload.country_code;
        this.isModerator = payload.is_moderator;
        this.joinTime = deserialize.iso8601DateTime(payload.join_time);
        this.leaveTime = deserialize.iso8601DateTime(payload.leave_time);
        this.durationSeconds = deserialize.integer(payload.duration_seconds);
        this.outboundQueueLength = deserialize.integer(payload.outbound_queue_length);
        this.outboundTimeInQueue = deserialize.integer(payload.outbound_time_in_queue);
        this.jitterBufferSize = payload.jitter_buffer_size;
        this.isCoach = payload.is_coach;
        this.coachedParticipants = payload.coached_participants;
        this.participantRegion = payload.participant_region;
        this.conferenceRegion = payload.conference_region;
        this.callType = payload.call_type;
        this.processingState = payload.processing_state;
        this.properties = payload.properties;
        this.events = payload.events;
        this.metrics = payload.metrics;
        this.url = payload.url;
        this._solution = {
            conferenceSid,
            participantSid: participantSid || this.participantSid
        };
    }
    get _proxy() {
        this._context = this._context || new ConferenceParticipantContextImpl(this._version, this._solution.conferenceSid, this._solution.participantSid);
        return this._context;
    }
    fetch(params, callback) {
        return this._proxy.fetch(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            participantSid: this.participantSid,
            label: this.label,
            conferenceSid: this.conferenceSid,
            callSid: this.callSid,
            accountSid: this.accountSid,
            callDirection: this.callDirection,
            from: this.from,
            to: this.to,
            callStatus: this.callStatus,
            countryCode: this.countryCode,
            isModerator: this.isModerator,
            joinTime: this.joinTime,
            leaveTime: this.leaveTime,
            durationSeconds: this.durationSeconds,
            outboundQueueLength: this.outboundQueueLength,
            outboundTimeInQueue: this.outboundTimeInQueue,
            jitterBufferSize: this.jitterBufferSize,
            isCoach: this.isCoach,
            coachedParticipants: this.coachedParticipants,
            participantRegion: this.participantRegion,
            conferenceRegion: this.conferenceRegion,
            callType: this.callType,
            processingState: this.processingState,
            properties: this.properties,
            events: this.events,
            metrics: this.metrics,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ConferenceParticipantInstance = ConferenceParticipantInstance;
function ConferenceParticipantListInstance(version, conferenceSid) {
    if (!(0, utility_1.isValidPathParam)(conferenceSid)) {
        throw new Error("Parameter 'conferenceSid' is not valid.");
    }
    const instance = (participantSid)=>instance.get(participantSid);
    instance.get = function get(participantSid) {
        return new ConferenceParticipantContextImpl(version, conferenceSid, participantSid);
    };
    instance._version = version;
    instance._solution = {
        conferenceSid
    };
    instance._uri = `/Conferences/${conferenceSid}/Participants`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["participantSid"] !== undefined) data["ParticipantSid"] = params["participantSid"];
        if (params["label"] !== undefined) data["Label"] = params["label"];
        if (params["events"] !== undefined) data["Events"] = params["events"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ConferenceParticipantPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ConferenceParticipantPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ConferenceParticipantPage extends Page_1.default {
    /**
     * Initialize the ConferenceParticipantPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ConferenceParticipantInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ConferenceParticipantInstance(this._version, payload, this._solution.conferenceSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ConferenceParticipantPage = ConferenceParticipantPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/v1/conference.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ConferencePage = exports.ConferenceInstance = exports.ConferenceContextImpl = void 0;
exports.ConferenceListInstance = ConferenceListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const conferenceParticipant_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/v1/conference/conferenceParticipant.js [app-rsc] (ecmascript)");
class ConferenceContextImpl {
    constructor(_version, conferenceSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(conferenceSid)) {
            throw new Error("Parameter 'conferenceSid' is not valid.");
        }
        this._solution = {
            conferenceSid
        };
        this._uri = `/Conferences/${conferenceSid}`;
    }
    get conferenceParticipants() {
        this._conferenceParticipants = this._conferenceParticipants || (0, conferenceParticipant_1.ConferenceParticipantListInstance)(this._version, this._solution.conferenceSid);
        return this._conferenceParticipants;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ConferenceInstance(operationVersion, payload, instance._solution.conferenceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ConferenceContextImpl = ConferenceContextImpl;
class ConferenceInstance {
    constructor(_version, payload, conferenceSid){
        this._version = _version;
        this.conferenceSid = payload.conference_sid;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.createTime = deserialize.iso8601DateTime(payload.create_time);
        this.startTime = deserialize.iso8601DateTime(payload.start_time);
        this.endTime = deserialize.iso8601DateTime(payload.end_time);
        this.durationSeconds = deserialize.integer(payload.duration_seconds);
        this.connectDurationSeconds = deserialize.integer(payload.connect_duration_seconds);
        this.status = payload.status;
        this.maxParticipants = deserialize.integer(payload.max_participants);
        this.maxConcurrentParticipants = deserialize.integer(payload.max_concurrent_participants);
        this.uniqueParticipants = deserialize.integer(payload.unique_participants);
        this.endReason = payload.end_reason;
        this.endedBy = payload.ended_by;
        this.mixerRegion = payload.mixer_region;
        this.mixerRegionRequested = payload.mixer_region_requested;
        this.recordingEnabled = payload.recording_enabled;
        this.detectedIssues = payload.detected_issues;
        this.tags = payload.tags;
        this.tagInfo = payload.tag_info;
        this.processingState = payload.processing_state;
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            conferenceSid: conferenceSid || this.conferenceSid
        };
    }
    get _proxy() {
        this._context = this._context || new ConferenceContextImpl(this._version, this._solution.conferenceSid);
        return this._context;
    }
    /**
     * Fetch a ConferenceInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ConferenceInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Access the conferenceParticipants.
     */ conferenceParticipants() {
        return this._proxy.conferenceParticipants;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            conferenceSid: this.conferenceSid,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            createTime: this.createTime,
            startTime: this.startTime,
            endTime: this.endTime,
            durationSeconds: this.durationSeconds,
            connectDurationSeconds: this.connectDurationSeconds,
            status: this.status,
            maxParticipants: this.maxParticipants,
            maxConcurrentParticipants: this.maxConcurrentParticipants,
            uniqueParticipants: this.uniqueParticipants,
            endReason: this.endReason,
            endedBy: this.endedBy,
            mixerRegion: this.mixerRegion,
            mixerRegionRequested: this.mixerRegionRequested,
            recordingEnabled: this.recordingEnabled,
            detectedIssues: this.detectedIssues,
            tags: this.tags,
            tagInfo: this.tagInfo,
            processingState: this.processingState,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ConferenceInstance = ConferenceInstance;
function ConferenceListInstance(version) {
    const instance = (conferenceSid)=>instance.get(conferenceSid);
    instance.get = function get(conferenceSid) {
        return new ConferenceContextImpl(version, conferenceSid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Conferences`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["conferenceSid"] !== undefined) data["ConferenceSid"] = params["conferenceSid"];
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["createdAfter"] !== undefined) data["CreatedAfter"] = params["createdAfter"];
        if (params["createdBefore"] !== undefined) data["CreatedBefore"] = params["createdBefore"];
        if (params["mixerRegion"] !== undefined) data["MixerRegion"] = params["mixerRegion"];
        if (params["tags"] !== undefined) data["Tags"] = params["tags"];
        if (params["subaccount"] !== undefined) data["Subaccount"] = params["subaccount"];
        if (params["detectedIssues"] !== undefined) data["DetectedIssues"] = params["detectedIssues"];
        if (params["endReason"] !== undefined) data["EndReason"] = params["endReason"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ConferencePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ConferencePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ConferencePage extends Page_1.default {
    /**
     * Initialize the ConferencePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ConferenceInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ConferenceInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ConferencePage = ConferencePage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/v1/room/participant.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ParticipantPage = exports.ParticipantInstance = exports.ParticipantContextImpl = void 0;
exports.ParticipantListInstance = ParticipantListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class ParticipantContextImpl {
    constructor(_version, roomSid, participantSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(roomSid)) {
            throw new Error("Parameter 'roomSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(participantSid)) {
            throw new Error("Parameter 'participantSid' is not valid.");
        }
        this._solution = {
            roomSid,
            participantSid
        };
        this._uri = `/Video/Rooms/${roomSid}/Participants/${participantSid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ParticipantInstance(operationVersion, payload, instance._solution.roomSid, instance._solution.participantSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ParticipantContextImpl = ParticipantContextImpl;
class ParticipantInstance {
    constructor(_version, payload, roomSid, participantSid){
        this._version = _version;
        this.participantSid = payload.participant_sid;
        this.participantIdentity = payload.participant_identity;
        this.joinTime = deserialize.iso8601DateTime(payload.join_time);
        this.leaveTime = deserialize.iso8601DateTime(payload.leave_time);
        this.durationSec = payload.duration_sec;
        this.accountSid = payload.account_sid;
        this.roomSid = payload.room_sid;
        this.status = payload.status;
        this.codecs = payload.codecs;
        this.endReason = payload.end_reason;
        this.errorCode = deserialize.integer(payload.error_code);
        this.errorCodeUrl = payload.error_code_url;
        this.mediaRegion = payload.media_region;
        this.properties = payload.properties;
        this.edgeLocation = payload.edge_location;
        this.publisherInfo = payload.publisher_info;
        this.url = payload.url;
        this._solution = {
            roomSid,
            participantSid: participantSid || this.participantSid
        };
    }
    get _proxy() {
        this._context = this._context || new ParticipantContextImpl(this._version, this._solution.roomSid, this._solution.participantSid);
        return this._context;
    }
    /**
     * Fetch a ParticipantInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ParticipantInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            participantSid: this.participantSid,
            participantIdentity: this.participantIdentity,
            joinTime: this.joinTime,
            leaveTime: this.leaveTime,
            durationSec: this.durationSec,
            accountSid: this.accountSid,
            roomSid: this.roomSid,
            status: this.status,
            codecs: this.codecs,
            endReason: this.endReason,
            errorCode: this.errorCode,
            errorCodeUrl: this.errorCodeUrl,
            mediaRegion: this.mediaRegion,
            properties: this.properties,
            edgeLocation: this.edgeLocation,
            publisherInfo: this.publisherInfo,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ParticipantInstance = ParticipantInstance;
function ParticipantListInstance(version, roomSid) {
    if (!(0, utility_1.isValidPathParam)(roomSid)) {
        throw new Error("Parameter 'roomSid' is not valid.");
    }
    const instance = (participantSid)=>instance.get(participantSid);
    instance.get = function get(participantSid) {
        return new ParticipantContextImpl(version, roomSid, participantSid);
    };
    instance._version = version;
    instance._solution = {
        roomSid
    };
    instance._uri = `/Video/Rooms/${roomSid}/Participants`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ParticipantPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ParticipantPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ParticipantPage extends Page_1.default {
    /**
     * Initialize the ParticipantPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ParticipantInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ParticipantInstance(this._version, payload, this._solution.roomSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ParticipantPage = ParticipantPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/v1/room.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RoomPage = exports.RoomInstance = exports.RoomContextImpl = void 0;
exports.RoomListInstance = RoomListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const participant_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/v1/room/participant.js [app-rsc] (ecmascript)");
class RoomContextImpl {
    constructor(_version, roomSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(roomSid)) {
            throw new Error("Parameter 'roomSid' is not valid.");
        }
        this._solution = {
            roomSid
        };
        this._uri = `/Video/Rooms/${roomSid}`;
    }
    get participants() {
        this._participants = this._participants || (0, participant_1.ParticipantListInstance)(this._version, this._solution.roomSid);
        return this._participants;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new RoomInstance(operationVersion, payload, instance._solution.roomSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.RoomContextImpl = RoomContextImpl;
class RoomInstance {
    constructor(_version, payload, roomSid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.roomSid = payload.room_sid;
        this.roomName = payload.room_name;
        this.createTime = deserialize.iso8601DateTime(payload.create_time);
        this.endTime = deserialize.iso8601DateTime(payload.end_time);
        this.roomType = payload.room_type;
        this.roomStatus = payload.room_status;
        this.statusCallback = payload.status_callback;
        this.statusCallbackMethod = payload.status_callback_method;
        this.createdMethod = payload.created_method;
        this.endReason = payload.end_reason;
        this.maxParticipants = deserialize.integer(payload.max_participants);
        this.uniqueParticipants = deserialize.integer(payload.unique_participants);
        this.uniqueParticipantIdentities = deserialize.integer(payload.unique_participant_identities);
        this.concurrentParticipants = deserialize.integer(payload.concurrent_participants);
        this.maxConcurrentParticipants = deserialize.integer(payload.max_concurrent_participants);
        this.codecs = payload.codecs;
        this.mediaRegion = payload.media_region;
        this.durationSec = payload.duration_sec;
        this.totalParticipantDurationSec = payload.total_participant_duration_sec;
        this.totalRecordingDurationSec = payload.total_recording_duration_sec;
        this.processingState = payload.processing_state;
        this.recordingEnabled = payload.recording_enabled;
        this.edgeLocation = payload.edge_location;
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            roomSid: roomSid || this.roomSid
        };
    }
    get _proxy() {
        this._context = this._context || new RoomContextImpl(this._version, this._solution.roomSid);
        return this._context;
    }
    /**
     * Fetch a RoomInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed RoomInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Access the participants.
     */ participants() {
        return this._proxy.participants;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            roomSid: this.roomSid,
            roomName: this.roomName,
            createTime: this.createTime,
            endTime: this.endTime,
            roomType: this.roomType,
            roomStatus: this.roomStatus,
            statusCallback: this.statusCallback,
            statusCallbackMethod: this.statusCallbackMethod,
            createdMethod: this.createdMethod,
            endReason: this.endReason,
            maxParticipants: this.maxParticipants,
            uniqueParticipants: this.uniqueParticipants,
            uniqueParticipantIdentities: this.uniqueParticipantIdentities,
            concurrentParticipants: this.concurrentParticipants,
            maxConcurrentParticipants: this.maxConcurrentParticipants,
            codecs: this.codecs,
            mediaRegion: this.mediaRegion,
            durationSec: this.durationSec,
            totalParticipantDurationSec: this.totalParticipantDurationSec,
            totalRecordingDurationSec: this.totalRecordingDurationSec,
            processingState: this.processingState,
            recordingEnabled: this.recordingEnabled,
            edgeLocation: this.edgeLocation,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.RoomInstance = RoomInstance;
function RoomListInstance(version) {
    const instance = (roomSid)=>instance.get(roomSid);
    instance.get = function get(roomSid) {
        return new RoomContextImpl(version, roomSid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Video/Rooms`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["roomType"] !== undefined) data["RoomType"] = serialize.map(params["roomType"], (e)=>e);
        if (params["codec"] !== undefined) data["Codec"] = serialize.map(params["codec"], (e)=>e);
        if (params["roomName"] !== undefined) data["RoomName"] = params["roomName"];
        if (params["createdAfter"] !== undefined) data["CreatedAfter"] = serialize.iso8601DateTime(params["createdAfter"]);
        if (params["createdBefore"] !== undefined) data["CreatedBefore"] = serialize.iso8601DateTime(params["createdBefore"]);
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new RoomPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new RoomPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class RoomPage extends Page_1.default {
    /**
     * Initialize the RoomPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of RoomInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new RoomInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.RoomPage = RoomPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/v1/setting.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SettingInstance = exports.SettingContextImpl = void 0;
exports.SettingListInstance = SettingListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
class SettingContextImpl {
    constructor(_version){
        this._version = _version;
        this._solution = {};
        this._uri = `/Voice/Settings`;
    }
    fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["subaccountSid"] !== undefined) data["SubaccountSid"] = params["subaccountSid"];
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SettingInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["advancedFeatures"] !== undefined) data["AdvancedFeatures"] = serialize.bool(params["advancedFeatures"]);
        if (params["voiceTrace"] !== undefined) data["VoiceTrace"] = serialize.bool(params["voiceTrace"]);
        if (params["subaccountSid"] !== undefined) data["SubaccountSid"] = params["subaccountSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SettingInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SettingContextImpl = SettingContextImpl;
class SettingInstance {
    constructor(_version, payload){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.advancedFeatures = payload.advanced_features;
        this.voiceTrace = payload.voice_trace;
        this.url = payload.url;
        this._solution = {};
    }
    get _proxy() {
        this._context = this._context || new SettingContextImpl(this._version);
        return this._context;
    }
    fetch(params, callback) {
        return this._proxy.fetch(params, callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            advancedFeatures: this.advancedFeatures,
            voiceTrace: this.voiceTrace,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SettingInstance = SettingInstance;
function SettingListInstance(version) {
    const instance = ()=>instance.get();
    instance.get = function get() {
        return new SettingContextImpl(version);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Insights
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const call_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/v1/call.js [app-rsc] (ecmascript)");
const callSummaries_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/v1/callSummaries.js [app-rsc] (ecmascript)");
const conference_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/v1/conference.js [app-rsc] (ecmascript)");
const room_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/v1/room.js [app-rsc] (ecmascript)");
const setting_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/v1/setting.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of Insights
     *
     * @param domain - The Twilio (Twilio.Insights) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for calls resource */ get calls() {
        this._calls = this._calls || (0, call_1.CallListInstance)(this);
        return this._calls;
    }
    /** Getter for callSummaries resource */ get callSummaries() {
        this._callSummaries = this._callSummaries || (0, callSummaries_1.CallSummariesListInstance)(this);
        return this._callSummaries;
    }
    /** Getter for conferences resource */ get conferences() {
        this._conferences = this._conferences || (0, conference_1.ConferenceListInstance)(this);
        return this._conferences;
    }
    /** Getter for rooms resource */ get rooms() {
        this._rooms = this._rooms || (0, room_1.RoomListInstance)(this);
        return this._rooms;
    }
    /** Getter for settings resource */ get settings() {
        this._settings = this._settings || (0, setting_1.SettingListInstance)(this);
        return this._settings;
    }
}
exports.default = V1;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/InsightsBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/insights/V1.js [app-rsc] (ecmascript)"));
class InsightsBase extends Domain_1.default {
    /**
     * Initialize insights domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://insights.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
}
module.exports = InsightsBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Insights.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const InsightsBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/InsightsBase.js [app-rsc] (ecmascript)"));
class Insights extends InsightsBase_1.default {
    /**
     * @deprecated - Use v1.settings instead
     */ get settings() {
        console.warn("settings is deprecated. Use v1.settings instead.");
        return this.v1.settings;
    }
    /**
     * @deprecated - Use v1.calls instead
     */ get calls() {
        console.warn("calls is deprecated. Use v1.calls instead.");
        return this.v1.calls;
    }
    /**
     * @deprecated - Use v1.callSummaries instead
     */ get callSummaries() {
        console.warn("callSummaries is deprecated. Use v1.callSummaries instead.");
        return this.v1.callSummaries;
    }
    /**
     * @deprecated - Use v1.conferences instead
     */ get conferences() {
        console.warn("conferences is deprecated. Use v1.conferences instead.");
        return this.v1.conferences;
    }
    /**
     * @deprecated - Use v1.rooms instead
     */ get rooms() {
        console.warn("rooms is deprecated. Use v1.rooms instead.");
        return this.v1.rooms;
    }
}
module.exports = Insights;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/customOperator.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CustomOperatorPage = exports.CustomOperatorInstance = exports.CustomOperatorContextImpl = void 0;
exports.CustomOperatorListInstance = CustomOperatorListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class CustomOperatorContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Operators/Custom/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CustomOperatorInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["friendlyName"] === null || params["friendlyName"] === undefined) {
            throw new Error("Required parameter \"params['friendlyName']\" missing.");
        }
        if (params["config"] === null || params["config"] === undefined) {
            throw new Error("Required parameter \"params['config']\" missing.");
        }
        let data = {};
        data["FriendlyName"] = params["friendlyName"];
        data["Config"] = serialize.object(params["config"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        if (params["ifMatch"] !== undefined) headers["If-Match"] = params["ifMatch"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CustomOperatorInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CustomOperatorContextImpl = CustomOperatorContextImpl;
class CustomOperatorInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.sid = payload.sid;
        this.friendlyName = payload.friendly_name;
        this.description = payload.description;
        this.author = payload.author;
        this.operatorType = payload.operator_type;
        this.version = deserialize.integer(payload.version);
        this.availability = payload.availability;
        this.config = payload.config;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new CustomOperatorContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a CustomOperatorInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a CustomOperatorInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed CustomOperatorInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            sid: this.sid,
            friendlyName: this.friendlyName,
            description: this.description,
            author: this.author,
            operatorType: this.operatorType,
            version: this.version,
            availability: this.availability,
            config: this.config,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CustomOperatorInstance = CustomOperatorInstance;
function CustomOperatorListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new CustomOperatorContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Operators/Custom`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["friendlyName"] === null || params["friendlyName"] === undefined) {
            throw new Error("Required parameter \"params['friendlyName']\" missing.");
        }
        if (params["operatorType"] === null || params["operatorType"] === undefined) {
            throw new Error("Required parameter \"params['operatorType']\" missing.");
        }
        if (params["config"] === null || params["config"] === undefined) {
            throw new Error("Required parameter \"params['config']\" missing.");
        }
        let data = {};
        data["FriendlyName"] = params["friendlyName"];
        data["OperatorType"] = params["operatorType"];
        data["Config"] = serialize.object(params["config"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CustomOperatorInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["availability"] !== undefined) data["Availability"] = params["availability"];
        if (params["languageCode"] !== undefined) data["LanguageCode"] = params["languageCode"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CustomOperatorPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new CustomOperatorPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class CustomOperatorPage extends Page_1.default {
    /**
     * Initialize the CustomOperatorPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of CustomOperatorInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new CustomOperatorInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CustomOperatorPage = CustomOperatorPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/operator.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OperatorPage = exports.OperatorInstance = exports.OperatorContextImpl = void 0;
exports.OperatorListInstance = OperatorListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class OperatorContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Operators/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new OperatorInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.OperatorContextImpl = OperatorContextImpl;
class OperatorInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.sid = payload.sid;
        this.friendlyName = payload.friendly_name;
        this.description = payload.description;
        this.author = payload.author;
        this.operatorType = payload.operator_type;
        this.version = deserialize.integer(payload.version);
        this.availability = payload.availability;
        this.config = payload.config;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new OperatorContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a OperatorInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed OperatorInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            sid: this.sid,
            friendlyName: this.friendlyName,
            description: this.description,
            author: this.author,
            operatorType: this.operatorType,
            version: this.version,
            availability: this.availability,
            config: this.config,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.OperatorInstance = OperatorInstance;
function OperatorListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new OperatorContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Operators`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["availability"] !== undefined) data["Availability"] = params["availability"];
        if (params["languageCode"] !== undefined) data["LanguageCode"] = params["languageCode"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new OperatorPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new OperatorPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class OperatorPage extends Page_1.default {
    /**
     * Initialize the OperatorPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of OperatorInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new OperatorInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.OperatorPage = OperatorPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/operatorAttachment.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OperatorAttachmentInstance = exports.OperatorAttachmentContextImpl = void 0;
exports.OperatorAttachmentListInstance = OperatorAttachmentListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class OperatorAttachmentContextImpl {
    constructor(_version, serviceSid, operatorSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(operatorSid)) {
            throw new Error("Parameter 'operatorSid' is not valid.");
        }
        this._solution = {
            serviceSid,
            operatorSid
        };
        this._uri = `/Services/${serviceSid}/Operators/${operatorSid}`;
    }
    create(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new OperatorAttachmentInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.operatorSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.OperatorAttachmentContextImpl = OperatorAttachmentContextImpl;
class OperatorAttachmentInstance {
    constructor(_version, payload, serviceSid, operatorSid){
        this._version = _version;
        this.serviceSid = payload.service_sid;
        this.operatorSid = payload.operator_sid;
        this.url = payload.url;
        this._solution = {
            serviceSid: serviceSid || this.serviceSid,
            operatorSid: operatorSid || this.operatorSid
        };
    }
    get _proxy() {
        this._context = this._context || new OperatorAttachmentContextImpl(this._version, this._solution.serviceSid, this._solution.operatorSid);
        return this._context;
    }
    /**
     * Create a OperatorAttachmentInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed OperatorAttachmentInstance
     */ create(callback) {
        return this._proxy.create(callback);
    }
    /**
     * Remove a OperatorAttachmentInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            serviceSid: this.serviceSid,
            operatorSid: this.operatorSid,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.OperatorAttachmentInstance = OperatorAttachmentInstance;
function OperatorAttachmentListInstance(version) {
    const instance = (serviceSid, operatorSid)=>instance.get(serviceSid, operatorSid);
    instance.get = function get(serviceSid, operatorSid) {
        return new OperatorAttachmentContextImpl(version, serviceSid, operatorSid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/operatorAttachments.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OperatorAttachmentsInstance = exports.OperatorAttachmentsContextImpl = void 0;
exports.OperatorAttachmentsListInstance = OperatorAttachmentsListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class OperatorAttachmentsContextImpl {
    constructor(_version, serviceSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        this._solution = {
            serviceSid
        };
        this._uri = `/Services/${serviceSid}/Operators`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new OperatorAttachmentsInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.OperatorAttachmentsContextImpl = OperatorAttachmentsContextImpl;
class OperatorAttachmentsInstance {
    constructor(_version, payload, serviceSid){
        this._version = _version;
        this.serviceSid = payload.service_sid;
        this.operatorSids = payload.operator_sids;
        this.url = payload.url;
        this._solution = {
            serviceSid: serviceSid || this.serviceSid
        };
    }
    get _proxy() {
        this._context = this._context || new OperatorAttachmentsContextImpl(this._version, this._solution.serviceSid);
        return this._context;
    }
    /**
     * Fetch a OperatorAttachmentsInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed OperatorAttachmentsInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            serviceSid: this.serviceSid,
            operatorSids: this.operatorSids,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.OperatorAttachmentsInstance = OperatorAttachmentsInstance;
function OperatorAttachmentsListInstance(version) {
    const instance = (serviceSid)=>instance.get(serviceSid);
    instance.get = function get(serviceSid) {
        return new OperatorAttachmentsContextImpl(version, serviceSid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/operatorType.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OperatorTypePage = exports.OperatorTypeInstance = exports.OperatorTypeContextImpl = void 0;
exports.OperatorTypeListInstance = OperatorTypeListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class OperatorTypeContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/OperatorTypes/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new OperatorTypeInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.OperatorTypeContextImpl = OperatorTypeContextImpl;
class OperatorTypeInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.name = payload.name;
        this.sid = payload.sid;
        this.friendlyName = payload.friendly_name;
        this.description = payload.description;
        this.docsLink = payload.docs_link;
        this.outputType = payload.output_type;
        this.supportedLanguages = payload.supported_languages;
        this.provider = payload.provider;
        this.availability = payload.availability;
        this.configurable = payload.configurable;
        this.configSchema = payload.config_schema;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new OperatorTypeContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a OperatorTypeInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed OperatorTypeInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            name: this.name,
            sid: this.sid,
            friendlyName: this.friendlyName,
            description: this.description,
            docsLink: this.docsLink,
            outputType: this.outputType,
            supportedLanguages: this.supportedLanguages,
            provider: this.provider,
            availability: this.availability,
            configurable: this.configurable,
            configSchema: this.configSchema,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.OperatorTypeInstance = OperatorTypeInstance;
function OperatorTypeListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new OperatorTypeContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/OperatorTypes`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new OperatorTypePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new OperatorTypePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class OperatorTypePage extends Page_1.default {
    /**
     * Initialize the OperatorTypePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of OperatorTypeInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new OperatorTypeInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.OperatorTypePage = OperatorTypePage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/prebuiltOperator.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PrebuiltOperatorPage = exports.PrebuiltOperatorInstance = exports.PrebuiltOperatorContextImpl = void 0;
exports.PrebuiltOperatorListInstance = PrebuiltOperatorListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class PrebuiltOperatorContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Operators/PreBuilt/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PrebuiltOperatorInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PrebuiltOperatorContextImpl = PrebuiltOperatorContextImpl;
class PrebuiltOperatorInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.sid = payload.sid;
        this.friendlyName = payload.friendly_name;
        this.description = payload.description;
        this.author = payload.author;
        this.operatorType = payload.operator_type;
        this.version = deserialize.integer(payload.version);
        this.availability = payload.availability;
        this.config = payload.config;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new PrebuiltOperatorContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a PrebuiltOperatorInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed PrebuiltOperatorInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            sid: this.sid,
            friendlyName: this.friendlyName,
            description: this.description,
            author: this.author,
            operatorType: this.operatorType,
            version: this.version,
            availability: this.availability,
            config: this.config,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PrebuiltOperatorInstance = PrebuiltOperatorInstance;
function PrebuiltOperatorListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new PrebuiltOperatorContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Operators/PreBuilt`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["availability"] !== undefined) data["Availability"] = params["availability"];
        if (params["languageCode"] !== undefined) data["LanguageCode"] = params["languageCode"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PrebuiltOperatorPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new PrebuiltOperatorPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class PrebuiltOperatorPage extends Page_1.default {
    /**
     * Initialize the PrebuiltOperatorPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of PrebuiltOperatorInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new PrebuiltOperatorInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PrebuiltOperatorPage = PrebuiltOperatorPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/service.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ServicePage = exports.ServiceInstance = exports.ServiceContextImpl = void 0;
exports.ServiceListInstance = ServiceListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class ServiceContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Services/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServiceInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["autoTranscribe"] !== undefined) data["AutoTranscribe"] = serialize.bool(params["autoTranscribe"]);
        if (params["dataLogging"] !== undefined) data["DataLogging"] = serialize.bool(params["dataLogging"]);
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        if (params["autoRedaction"] !== undefined) data["AutoRedaction"] = serialize.bool(params["autoRedaction"]);
        if (params["mediaRedaction"] !== undefined) data["MediaRedaction"] = serialize.bool(params["mediaRedaction"]);
        if (params["webhookUrl"] !== undefined) data["WebhookUrl"] = params["webhookUrl"];
        if (params["webhookHttpMethod"] !== undefined) data["WebhookHttpMethod"] = params["webhookHttpMethod"];
        if (params["encryptionCredentialSid"] !== undefined) data["EncryptionCredentialSid"] = params["encryptionCredentialSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        if (params["ifMatch"] !== undefined) headers["If-Match"] = params["ifMatch"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServiceInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ServiceContextImpl = ServiceContextImpl;
class ServiceInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.autoRedaction = payload.auto_redaction;
        this.mediaRedaction = payload.media_redaction;
        this.autoTranscribe = payload.auto_transcribe;
        this.dataLogging = payload.data_logging;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.friendlyName = payload.friendly_name;
        this.languageCode = payload.language_code;
        this.sid = payload.sid;
        this.uniqueName = payload.unique_name;
        this.url = payload.url;
        this.webhookUrl = payload.webhook_url;
        this.webhookHttpMethod = payload.webhook_http_method;
        this.readOnlyAttachedOperatorSids = payload.read_only_attached_operator_sids;
        this.version = deserialize.integer(payload.version);
        this.encryptionCredentialSid = payload.encryption_credential_sid;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new ServiceContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a ServiceInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a ServiceInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ServiceInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            autoRedaction: this.autoRedaction,
            mediaRedaction: this.mediaRedaction,
            autoTranscribe: this.autoTranscribe,
            dataLogging: this.dataLogging,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            friendlyName: this.friendlyName,
            languageCode: this.languageCode,
            sid: this.sid,
            uniqueName: this.uniqueName,
            url: this.url,
            webhookUrl: this.webhookUrl,
            webhookHttpMethod: this.webhookHttpMethod,
            readOnlyAttachedOperatorSids: this.readOnlyAttachedOperatorSids,
            version: this.version,
            encryptionCredentialSid: this.encryptionCredentialSid
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ServiceInstance = ServiceInstance;
function ServiceListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new ServiceContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Services`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["uniqueName"] === null || params["uniqueName"] === undefined) {
            throw new Error("Required parameter \"params['uniqueName']\" missing.");
        }
        let data = {};
        data["UniqueName"] = params["uniqueName"];
        if (params["autoTranscribe"] !== undefined) data["AutoTranscribe"] = serialize.bool(params["autoTranscribe"]);
        if (params["dataLogging"] !== undefined) data["DataLogging"] = serialize.bool(params["dataLogging"]);
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["languageCode"] !== undefined) data["LanguageCode"] = params["languageCode"];
        if (params["autoRedaction"] !== undefined) data["AutoRedaction"] = serialize.bool(params["autoRedaction"]);
        if (params["mediaRedaction"] !== undefined) data["MediaRedaction"] = serialize.bool(params["mediaRedaction"]);
        if (params["webhookUrl"] !== undefined) data["WebhookUrl"] = params["webhookUrl"];
        if (params["webhookHttpMethod"] !== undefined) data["WebhookHttpMethod"] = params["webhookHttpMethod"];
        if (params["encryptionCredentialSid"] !== undefined) data["EncryptionCredentialSid"] = params["encryptionCredentialSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServiceInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServicePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ServicePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ServicePage extends Page_1.default {
    /**
     * Initialize the ServicePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ServiceInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ServiceInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ServicePage = ServicePage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/transcript/encryptedOperatorResults.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EncryptedOperatorResultsInstance = exports.EncryptedOperatorResultsContextImpl = void 0;
exports.EncryptedOperatorResultsListInstance = EncryptedOperatorResultsListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class EncryptedOperatorResultsContextImpl {
    constructor(_version, transcriptSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(transcriptSid)) {
            throw new Error("Parameter 'transcriptSid' is not valid.");
        }
        this._solution = {
            transcriptSid
        };
        this._uri = `/Transcripts/${transcriptSid}/OperatorResults/Encrypted`;
    }
    fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["redacted"] !== undefined) data["Redacted"] = serialize.bool(params["redacted"]);
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new EncryptedOperatorResultsInstance(operationVersion, payload, instance._solution.transcriptSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.EncryptedOperatorResultsContextImpl = EncryptedOperatorResultsContextImpl;
class EncryptedOperatorResultsInstance {
    constructor(_version, payload, transcriptSid){
        this._version = _version;
        this.locations = payload.locations;
        this.transcriptSid = payload.transcript_sid;
        this.url = payload.url;
        this._solution = {
            transcriptSid
        };
    }
    get _proxy() {
        this._context = this._context || new EncryptedOperatorResultsContextImpl(this._version, this._solution.transcriptSid);
        return this._context;
    }
    fetch(params, callback) {
        return this._proxy.fetch(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            locations: this.locations,
            transcriptSid: this.transcriptSid,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.EncryptedOperatorResultsInstance = EncryptedOperatorResultsInstance;
function EncryptedOperatorResultsListInstance(version, transcriptSid) {
    if (!(0, utility_1.isValidPathParam)(transcriptSid)) {
        throw new Error("Parameter 'transcriptSid' is not valid.");
    }
    const instance = ()=>instance.get();
    instance.get = function get() {
        return new EncryptedOperatorResultsContextImpl(version, transcriptSid);
    };
    instance._version = version;
    instance._solution = {
        transcriptSid
    };
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/transcript/encryptedSentences.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EncryptedSentencesInstance = exports.EncryptedSentencesContextImpl = void 0;
exports.EncryptedSentencesListInstance = EncryptedSentencesListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class EncryptedSentencesContextImpl {
    constructor(_version, transcriptSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(transcriptSid)) {
            throw new Error("Parameter 'transcriptSid' is not valid.");
        }
        this._solution = {
            transcriptSid
        };
        this._uri = `/Transcripts/${transcriptSid}/Sentences/Encrypted`;
    }
    fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["redacted"] !== undefined) data["Redacted"] = serialize.bool(params["redacted"]);
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new EncryptedSentencesInstance(operationVersion, payload, instance._solution.transcriptSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.EncryptedSentencesContextImpl = EncryptedSentencesContextImpl;
class EncryptedSentencesInstance {
    constructor(_version, payload, transcriptSid){
        this._version = _version;
        this.location = payload.location;
        this.transcriptSid = payload.transcript_sid;
        this.url = payload.url;
        this._solution = {
            transcriptSid
        };
    }
    get _proxy() {
        this._context = this._context || new EncryptedSentencesContextImpl(this._version, this._solution.transcriptSid);
        return this._context;
    }
    fetch(params, callback) {
        return this._proxy.fetch(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            location: this.location,
            transcriptSid: this.transcriptSid,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.EncryptedSentencesInstance = EncryptedSentencesInstance;
function EncryptedSentencesListInstance(version, transcriptSid) {
    if (!(0, utility_1.isValidPathParam)(transcriptSid)) {
        throw new Error("Parameter 'transcriptSid' is not valid.");
    }
    const instance = ()=>instance.get();
    instance.get = function get() {
        return new EncryptedSentencesContextImpl(version, transcriptSid);
    };
    instance._version = version;
    instance._solution = {
        transcriptSid
    };
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/transcript/media.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MediaInstance = exports.MediaContextImpl = void 0;
exports.MediaListInstance = MediaListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class MediaContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Transcripts/${sid}/Media`;
    }
    fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["redacted"] !== undefined) data["Redacted"] = serialize.bool(params["redacted"]);
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new MediaInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.MediaContextImpl = MediaContextImpl;
class MediaInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.mediaUrl = payload.media_url;
        this.serviceSid = payload.service_sid;
        this.sid = payload.sid;
        this.url = payload.url;
        this._solution = {
            sid
        };
    }
    get _proxy() {
        this._context = this._context || new MediaContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    fetch(params, callback) {
        return this._proxy.fetch(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            mediaUrl: this.mediaUrl,
            serviceSid: this.serviceSid,
            sid: this.sid,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.MediaInstance = MediaInstance;
function MediaListInstance(version, sid) {
    if (!(0, utility_1.isValidPathParam)(sid)) {
        throw new Error("Parameter 'sid' is not valid.");
    }
    const instance = ()=>instance.get();
    instance.get = function get() {
        return new MediaContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {
        sid
    };
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/transcript/operatorResult.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OperatorResultPage = exports.OperatorResultInstance = exports.OperatorResultContextImpl = void 0;
exports.OperatorResultListInstance = OperatorResultListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class OperatorResultContextImpl {
    constructor(_version, transcriptSid, operatorSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(transcriptSid)) {
            throw new Error("Parameter 'transcriptSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(operatorSid)) {
            throw new Error("Parameter 'operatorSid' is not valid.");
        }
        this._solution = {
            transcriptSid,
            operatorSid
        };
        this._uri = `/Transcripts/${transcriptSid}/OperatorResults/${operatorSid}`;
    }
    fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["redacted"] !== undefined) data["Redacted"] = serialize.bool(params["redacted"]);
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new OperatorResultInstance(operationVersion, payload, instance._solution.transcriptSid, instance._solution.operatorSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.OperatorResultContextImpl = OperatorResultContextImpl;
class OperatorResultInstance {
    constructor(_version, payload, transcriptSid, operatorSid){
        this._version = _version;
        this.operatorType = payload.operator_type;
        this.name = payload.name;
        this.operatorSid = payload.operator_sid;
        this.extractMatch = payload.extract_match;
        this.matchProbability = payload.match_probability;
        this.normalizedResult = payload.normalized_result;
        this.utteranceResults = payload.utterance_results;
        this.utteranceMatch = payload.utterance_match;
        this.predictedLabel = payload.predicted_label;
        this.predictedProbability = payload.predicted_probability;
        this.labelProbabilities = payload.label_probabilities;
        this.extractResults = payload.extract_results;
        this.textGenerationResults = payload.text_generation_results;
        this.jsonResults = payload.json_results;
        this.transcriptSid = payload.transcript_sid;
        this.url = payload.url;
        this._solution = {
            transcriptSid,
            operatorSid: operatorSid || this.operatorSid
        };
    }
    get _proxy() {
        this._context = this._context || new OperatorResultContextImpl(this._version, this._solution.transcriptSid, this._solution.operatorSid);
        return this._context;
    }
    fetch(params, callback) {
        return this._proxy.fetch(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            operatorType: this.operatorType,
            name: this.name,
            operatorSid: this.operatorSid,
            extractMatch: this.extractMatch,
            matchProbability: this.matchProbability,
            normalizedResult: this.normalizedResult,
            utteranceResults: this.utteranceResults,
            utteranceMatch: this.utteranceMatch,
            predictedLabel: this.predictedLabel,
            predictedProbability: this.predictedProbability,
            labelProbabilities: this.labelProbabilities,
            extractResults: this.extractResults,
            textGenerationResults: this.textGenerationResults,
            jsonResults: this.jsonResults,
            transcriptSid: this.transcriptSid,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.OperatorResultInstance = OperatorResultInstance;
function OperatorResultListInstance(version, transcriptSid) {
    if (!(0, utility_1.isValidPathParam)(transcriptSid)) {
        throw new Error("Parameter 'transcriptSid' is not valid.");
    }
    const instance = (operatorSid)=>instance.get(operatorSid);
    instance.get = function get(operatorSid) {
        return new OperatorResultContextImpl(version, transcriptSid, operatorSid);
    };
    instance._version = version;
    instance._solution = {
        transcriptSid
    };
    instance._uri = `/Transcripts/${transcriptSid}/OperatorResults`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["redacted"] !== undefined) data["Redacted"] = serialize.bool(params["redacted"]);
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new OperatorResultPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new OperatorResultPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class OperatorResultPage extends Page_1.default {
    /**
     * Initialize the OperatorResultPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of OperatorResultInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new OperatorResultInstance(this._version, payload, this._solution.transcriptSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.OperatorResultPage = OperatorResultPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/transcript/sentence.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SentencePage = exports.SentenceInstance = void 0;
exports.SentenceListInstance = SentenceListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
function SentenceListInstance(version, transcriptSid) {
    if (!(0, utility_1.isValidPathParam)(transcriptSid)) {
        throw new Error("Parameter 'transcriptSid' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        transcriptSid
    };
    instance._uri = `/Transcripts/${transcriptSid}/Sentences`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["redacted"] !== undefined) data["Redacted"] = serialize.bool(params["redacted"]);
        if (params["wordTimestamps"] !== undefined) data["WordTimestamps"] = serialize.bool(params["wordTimestamps"]);
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SentencePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new SentencePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SentenceInstance {
    constructor(_version, payload, transcriptSid){
        this._version = _version;
        this.mediaChannel = deserialize.integer(payload.media_channel);
        this.sentenceIndex = deserialize.integer(payload.sentence_index);
        this.startTime = payload.start_time;
        this.endTime = payload.end_time;
        this.transcript = payload.transcript;
        this.sid = payload.sid;
        this.confidence = payload.confidence;
        this.words = payload.words;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            mediaChannel: this.mediaChannel,
            sentenceIndex: this.sentenceIndex,
            startTime: this.startTime,
            endTime: this.endTime,
            transcript: this.transcript,
            sid: this.sid,
            confidence: this.confidence,
            words: this.words
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SentenceInstance = SentenceInstance;
class SentencePage extends Page_1.default {
    /**
     * Initialize the SentencePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of SentenceInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new SentenceInstance(this._version, payload, this._solution.transcriptSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SentencePage = SentencePage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/transcript.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TranscriptPage = exports.TranscriptInstance = exports.TranscriptContextImpl = void 0;
exports.TranscriptListInstance = TranscriptListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const encryptedOperatorResults_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/transcript/encryptedOperatorResults.js [app-rsc] (ecmascript)");
const encryptedSentences_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/transcript/encryptedSentences.js [app-rsc] (ecmascript)");
const media_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/transcript/media.js [app-rsc] (ecmascript)");
const operatorResult_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/transcript/operatorResult.js [app-rsc] (ecmascript)");
const sentence_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/transcript/sentence.js [app-rsc] (ecmascript)");
class TranscriptContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Transcripts/${sid}`;
    }
    get encryptedOperatorResults() {
        this._encryptedOperatorResults = this._encryptedOperatorResults || (0, encryptedOperatorResults_1.EncryptedOperatorResultsListInstance)(this._version, this._solution.sid);
        return this._encryptedOperatorResults;
    }
    get encryptedSentences() {
        this._encryptedSentences = this._encryptedSentences || (0, encryptedSentences_1.EncryptedSentencesListInstance)(this._version, this._solution.sid);
        return this._encryptedSentences;
    }
    get media() {
        this._media = this._media || (0, media_1.MediaListInstance)(this._version, this._solution.sid);
        return this._media;
    }
    get operatorResults() {
        this._operatorResults = this._operatorResults || (0, operatorResult_1.OperatorResultListInstance)(this._version, this._solution.sid);
        return this._operatorResults;
    }
    get sentences() {
        this._sentences = this._sentences || (0, sentence_1.SentenceListInstance)(this._version, this._solution.sid);
        return this._sentences;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new TranscriptInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.TranscriptContextImpl = TranscriptContextImpl;
class TranscriptInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.sid = payload.sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.status = payload.status;
        this.channel = payload.channel;
        this.dataLogging = payload.data_logging;
        this.languageCode = payload.language_code;
        this.customerKey = payload.customer_key;
        this.mediaStartTime = deserialize.iso8601DateTime(payload.media_start_time);
        this.duration = deserialize.integer(payload.duration);
        this.url = payload.url;
        this.redaction = payload.redaction;
        this.encryptionCredentialSid = payload.encryption_credential_sid;
        this.links = payload.links;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new TranscriptContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a TranscriptInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a TranscriptInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed TranscriptInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Access the encryptedOperatorResults.
     */ encryptedOperatorResults() {
        return this._proxy.encryptedOperatorResults;
    }
    /**
     * Access the encryptedSentences.
     */ encryptedSentences() {
        return this._proxy.encryptedSentences;
    }
    /**
     * Access the media.
     */ media() {
        return this._proxy.media;
    }
    /**
     * Access the operatorResults.
     */ operatorResults() {
        return this._proxy.operatorResults;
    }
    /**
     * Access the sentences.
     */ sentences() {
        return this._proxy.sentences;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            sid: this.sid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            status: this.status,
            channel: this.channel,
            dataLogging: this.dataLogging,
            languageCode: this.languageCode,
            customerKey: this.customerKey,
            mediaStartTime: this.mediaStartTime,
            duration: this.duration,
            url: this.url,
            redaction: this.redaction,
            encryptionCredentialSid: this.encryptionCredentialSid,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.TranscriptInstance = TranscriptInstance;
function TranscriptListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new TranscriptContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Transcripts`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["serviceSid"] === null || params["serviceSid"] === undefined) {
            throw new Error("Required parameter \"params['serviceSid']\" missing.");
        }
        if (params["channel"] === null || params["channel"] === undefined) {
            throw new Error("Required parameter \"params['channel']\" missing.");
        }
        let data = {};
        data["ServiceSid"] = params["serviceSid"];
        data["Channel"] = serialize.object(params["channel"]);
        if (params["customerKey"] !== undefined) data["CustomerKey"] = params["customerKey"];
        if (params["mediaStartTime"] !== undefined) data["MediaStartTime"] = serialize.iso8601DateTime(params["mediaStartTime"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new TranscriptInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["serviceSid"] !== undefined) data["ServiceSid"] = params["serviceSid"];
        if (params["beforeStartTime"] !== undefined) data["BeforeStartTime"] = params["beforeStartTime"];
        if (params["afterStartTime"] !== undefined) data["AfterStartTime"] = params["afterStartTime"];
        if (params["beforeDateCreated"] !== undefined) data["BeforeDateCreated"] = params["beforeDateCreated"];
        if (params["afterDateCreated"] !== undefined) data["AfterDateCreated"] = params["afterDateCreated"];
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["languageCode"] !== undefined) data["LanguageCode"] = params["languageCode"];
        if (params["sourceSid"] !== undefined) data["SourceSid"] = params["sourceSid"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new TranscriptPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new TranscriptPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class TranscriptPage extends Page_1.default {
    /**
     * Initialize the TranscriptPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of TranscriptInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new TranscriptInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.TranscriptPage = TranscriptPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/V2.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Intelligence
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const customOperator_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/customOperator.js [app-rsc] (ecmascript)");
const operator_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/operator.js [app-rsc] (ecmascript)");
const operatorAttachment_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/operatorAttachment.js [app-rsc] (ecmascript)");
const operatorAttachments_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/operatorAttachments.js [app-rsc] (ecmascript)");
const operatorType_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/operatorType.js [app-rsc] (ecmascript)");
const prebuiltOperator_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/prebuiltOperator.js [app-rsc] (ecmascript)");
const service_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/service.js [app-rsc] (ecmascript)");
const transcript_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/v2/transcript.js [app-rsc] (ecmascript)");
class V2 extends Version_1.default {
    /**
     * Initialize the V2 version of Intelligence
     *
     * @param domain - The Twilio (Twilio.Intelligence) domain
     */ constructor(domain){
        super(domain, "v2");
    }
    /** Getter for customOperators resource */ get customOperators() {
        this._customOperators = this._customOperators || (0, customOperator_1.CustomOperatorListInstance)(this);
        return this._customOperators;
    }
    /** Getter for operators resource */ get operators() {
        this._operators = this._operators || (0, operator_1.OperatorListInstance)(this);
        return this._operators;
    }
    /** Getter for operatorAttachment resource */ get operatorAttachment() {
        this._operatorAttachment = this._operatorAttachment || (0, operatorAttachment_1.OperatorAttachmentListInstance)(this);
        return this._operatorAttachment;
    }
    /** Getter for operatorAttachments resource */ get operatorAttachments() {
        this._operatorAttachments = this._operatorAttachments || (0, operatorAttachments_1.OperatorAttachmentsListInstance)(this);
        return this._operatorAttachments;
    }
    /** Getter for operatorType resource */ get operatorType() {
        this._operatorType = this._operatorType || (0, operatorType_1.OperatorTypeListInstance)(this);
        return this._operatorType;
    }
    /** Getter for prebuiltOperators resource */ get prebuiltOperators() {
        this._prebuiltOperators = this._prebuiltOperators || (0, prebuiltOperator_1.PrebuiltOperatorListInstance)(this);
        return this._prebuiltOperators;
    }
    /** Getter for services resource */ get services() {
        this._services = this._services || (0, service_1.ServiceListInstance)(this);
        return this._services;
    }
    /** Getter for transcripts resource */ get transcripts() {
        this._transcripts = this._transcripts || (0, transcript_1.TranscriptListInstance)(this);
        return this._transcripts;
    }
}
exports.default = V2;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/IntelligenceBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V2_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/intelligence/V2.js [app-rsc] (ecmascript)"));
class IntelligenceBase extends Domain_1.default {
    /**
     * Initialize intelligence domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://intelligence.twilio.com");
    }
    get v2() {
        this._v2 = this._v2 || new V2_1.default(this);
        return this._v2;
    }
}
module.exports = IntelligenceBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Intelligence.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const IntelligenceBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/IntelligenceBase.js [app-rsc] (ecmascript)"));
class Intelligence extends IntelligenceBase_1.default {
}
module.exports = Intelligence;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/IpMessagingBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/ipMessaging/V1.js [app-rsc] (ecmascript)"));
const V2_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/ipMessaging/V2.js [app-rsc] (ecmascript)"));
class IpMessagingBase extends Domain_1.default {
    /**
     * Initialize ipMessaging domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://ip-messaging.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
    get v2() {
        this._v2 = this._v2 || new V2_1.default(this);
        return this._v2;
    }
}
module.exports = IpMessagingBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/IpMessaging.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const IpMessagingBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/IpMessagingBase.js [app-rsc] (ecmascript)"));
class IpMessaging extends IpMessagingBase_1.default {
    /**
     * @deprecated - Use v2.credentials instead
     */ get credentials() {
        console.warn("credentials is deprecated. Use v2.credentials instead.");
        return this.v2.credentials;
    }
    /**
     * @deprecated - Use v2.services instead
     */ get services() {
        console.warn("services is deprecated. Use v2.services instead.");
        return this.v2.services;
    }
}
module.exports = IpMessaging;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/knowledge/v1/knowledge/chunk.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Knowledge
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ChunkPage = exports.ChunkInstance = void 0;
exports.ChunkListInstance = ChunkListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
function ChunkListInstance(version, id) {
    if (!(0, utility_1.isValidPathParam)(id)) {
        throw new Error("Parameter 'id' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        id
    };
    instance._uri = `/Knowledge/${id}/Chunks`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ChunkPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ChunkPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ChunkInstance {
    constructor(_version, payload, id){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.content = payload.content;
        this.metadata = payload.metadata;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            content: this.content,
            metadata: this.metadata,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ChunkInstance = ChunkInstance;
class ChunkPage extends Page_1.default {
    /**
     * Initialize the ChunkPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ChunkInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ChunkInstance(this._version, payload, this._solution.id);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ChunkPage = ChunkPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/knowledge/v1/knowledge/knowledgeStatus.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Knowledge
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.KnowledgeStatusInstance = exports.KnowledgeStatusContextImpl = void 0;
exports.KnowledgeStatusListInstance = KnowledgeStatusListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class KnowledgeStatusContextImpl {
    constructor(_version, id){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(id)) {
            throw new Error("Parameter 'id' is not valid.");
        }
        this._solution = {
            id
        };
        this._uri = `/Knowledge/${id}/Status`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new KnowledgeStatusInstance(operationVersion, payload, instance._solution.id));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.KnowledgeStatusContextImpl = KnowledgeStatusContextImpl;
class KnowledgeStatusInstance {
    constructor(_version, payload, id){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.status = payload.status;
        this.lastStatus = payload.last_status;
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this._solution = {
            id
        };
    }
    get _proxy() {
        this._context = this._context || new KnowledgeStatusContextImpl(this._version, this._solution.id);
        return this._context;
    }
    /**
     * Fetch a KnowledgeStatusInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed KnowledgeStatusInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            status: this.status,
            lastStatus: this.lastStatus,
            dateUpdated: this.dateUpdated
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.KnowledgeStatusInstance = KnowledgeStatusInstance;
function KnowledgeStatusListInstance(version, id) {
    if (!(0, utility_1.isValidPathParam)(id)) {
        throw new Error("Parameter 'id' is not valid.");
    }
    const instance = ()=>instance.get();
    instance.get = function get() {
        return new KnowledgeStatusContextImpl(version, id);
    };
    instance._version = version;
    instance._solution = {
        id
    };
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/knowledge/v1/knowledge.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Knowledge
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.KnowledgePage = exports.KnowledgeInstance = exports.KnowledgeContextImpl = exports.KnowledgeV1ServiceUpdateKnowledgeRequest = exports.KnowledgeV1ServiceCreatePolicyRequest = exports.KnowledgeV1ServiceCreateKnowledgeRequest = void 0;
exports.KnowledgeListInstance = KnowledgeListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const chunk_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/knowledge/v1/knowledge/chunk.js [app-rsc] (ecmascript)");
const knowledgeStatus_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/knowledge/v1/knowledge/knowledgeStatus.js [app-rsc] (ecmascript)");
class KnowledgeV1ServiceCreateKnowledgeRequest {
}
exports.KnowledgeV1ServiceCreateKnowledgeRequest = KnowledgeV1ServiceCreateKnowledgeRequest;
class KnowledgeV1ServiceCreatePolicyRequest {
}
exports.KnowledgeV1ServiceCreatePolicyRequest = KnowledgeV1ServiceCreatePolicyRequest;
class KnowledgeV1ServiceUpdateKnowledgeRequest {
}
exports.KnowledgeV1ServiceUpdateKnowledgeRequest = KnowledgeV1ServiceUpdateKnowledgeRequest;
class KnowledgeContextImpl {
    constructor(_version, id){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(id)) {
            throw new Error("Parameter 'id' is not valid.");
        }
        this._solution = {
            id
        };
        this._uri = `/Knowledge/${id}`;
    }
    get chunks() {
        this._chunks = this._chunks || (0, chunk_1.ChunkListInstance)(this._version, this._solution.id);
        return this._chunks;
    }
    get knowledgeStatus() {
        this._knowledgeStatus = this._knowledgeStatus || (0, knowledgeStatus_1.KnowledgeStatusListInstance)(this._version, this._solution.id);
        return this._knowledgeStatus;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new KnowledgeInstance(operationVersion, payload, instance._solution.id));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, headers, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "put",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new KnowledgeInstance(operationVersion, payload, instance._solution.id));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.KnowledgeContextImpl = KnowledgeContextImpl;
class KnowledgeInstance {
    constructor(_version, payload, id){
        this._version = _version;
        this.description = payload.description;
        this.id = payload.id;
        this.accountSid = payload.account_sid;
        this.knowledgeSourceDetails = payload.knowledge_source_details;
        this.name = payload.name;
        this.status = payload.status;
        this.type = payload.type;
        this.url = payload.url;
        this.embeddingModel = payload.embedding_model;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this._solution = {
            id: id || this.id
        };
    }
    get _proxy() {
        this._context = this._context || new KnowledgeContextImpl(this._version, this._solution.id);
        return this._context;
    }
    /**
     * Remove a KnowledgeInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a KnowledgeInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed KnowledgeInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the chunks.
     */ chunks() {
        return this._proxy.chunks;
    }
    /**
     * Access the knowledgeStatus.
     */ knowledgeStatus() {
        return this._proxy.knowledgeStatus;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            description: this.description,
            id: this.id,
            accountSid: this.accountSid,
            knowledgeSourceDetails: this.knowledgeSourceDetails,
            name: this.name,
            status: this.status,
            type: this.type,
            url: this.url,
            embeddingModel: this.embeddingModel,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.KnowledgeInstance = KnowledgeInstance;
function KnowledgeListInstance(version) {
    const instance = (id)=>instance.get(id);
    instance.get = function get(id) {
        return new KnowledgeContextImpl(version, id);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Knowledge`;
    instance.create = function create(params, headers, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new KnowledgeInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params["tags"] !== undefined) data["Tags"] = params["tags"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new KnowledgePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new KnowledgePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class KnowledgePage extends Page_1.default {
    /**
     * Initialize the KnowledgePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of KnowledgeInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new KnowledgeInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.KnowledgePage = KnowledgePage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/knowledge/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Knowledge
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const knowledge_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/knowledge/v1/knowledge.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of Knowledge
     *
     * @param domain - The Twilio (Twilio.Knowledge) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for knowledge resource */ get knowledge() {
        this._knowledge = this._knowledge || (0, knowledge_1.KnowledgeListInstance)(this);
        return this._knowledge;
    }
}
exports.default = V1;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/KnowledgeBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/knowledge/V1.js [app-rsc] (ecmascript)"));
class KnowledgeBase extends Domain_1.default {
    /**
     * Initialize knowledge domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://knowledge.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
}
module.exports = KnowledgeBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Knowledge.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const KnowledgeBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/KnowledgeBase.js [app-rsc] (ecmascript)"));
class Knowledge extends KnowledgeBase_1.default {
}
module.exports = Knowledge;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/lookups/v1/phoneNumber.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Lookups
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PhoneNumberInstance = exports.PhoneNumberContextImpl = void 0;
exports.PhoneNumberListInstance = PhoneNumberListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class PhoneNumberContextImpl {
    constructor(_version, phoneNumber){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(phoneNumber)) {
            throw new Error("Parameter 'phoneNumber' is not valid.");
        }
        this._solution = {
            phoneNumber
        };
        this._uri = `/PhoneNumbers/${phoneNumber}`;
    }
    fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["countryCode"] !== undefined) data["CountryCode"] = params["countryCode"];
        if (params["type"] !== undefined) data["Type"] = serialize.map(params["type"], (e)=>e);
        if (params["addOns"] !== undefined) data["AddOns"] = serialize.map(params["addOns"], (e)=>e);
        if (params["addOnsData"] !== undefined) data = {
            ...data,
            ...serialize.prefixedCollapsibleMap(params["addOnsData"], "AddOns")
        };
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PhoneNumberInstance(operationVersion, payload, instance._solution.phoneNumber));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PhoneNumberContextImpl = PhoneNumberContextImpl;
class PhoneNumberInstance {
    constructor(_version, payload, phoneNumber){
        this._version = _version;
        this.callerName = payload.caller_name;
        this.countryCode = payload.country_code;
        this.phoneNumber = payload.phone_number;
        this.nationalFormat = payload.national_format;
        this.carrier = payload.carrier;
        this.addOns = payload.add_ons;
        this.url = payload.url;
        this._solution = {
            phoneNumber: phoneNumber || this.phoneNumber
        };
    }
    get _proxy() {
        this._context = this._context || new PhoneNumberContextImpl(this._version, this._solution.phoneNumber);
        return this._context;
    }
    fetch(params, callback) {
        return this._proxy.fetch(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            callerName: this.callerName,
            countryCode: this.countryCode,
            phoneNumber: this.phoneNumber,
            nationalFormat: this.nationalFormat,
            carrier: this.carrier,
            addOns: this.addOns,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PhoneNumberInstance = PhoneNumberInstance;
function PhoneNumberListInstance(version) {
    const instance = (phoneNumber)=>instance.get(phoneNumber);
    instance.get = function get(phoneNumber) {
        return new PhoneNumberContextImpl(version, phoneNumber);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/lookups/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Lookups
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const phoneNumber_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/lookups/v1/phoneNumber.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of Lookups
     *
     * @param domain - The Twilio (Twilio.Lookups) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for phoneNumbers resource */ get phoneNumbers() {
        this._phoneNumbers = this._phoneNumbers || (0, phoneNumber_1.PhoneNumberListInstance)(this);
        return this._phoneNumbers;
    }
}
exports.default = V1;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/lookups/v2/bucket.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Lookups
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BucketInstance = exports.BucketContextImpl = exports.RateLimitRequest = void 0;
exports.BucketListInstance = BucketListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
/**
 * Rate limit request schema
 */ class RateLimitRequest {
}
exports.RateLimitRequest = RateLimitRequest;
class BucketContextImpl {
    constructor(_version, field, bucket){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(field)) {
            throw new Error("Parameter 'field' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(bucket)) {
            throw new Error("Parameter 'bucket' is not valid.");
        }
        this._solution = {
            field,
            bucket
        };
        this._uri = `/RateLimits/Fields/${field}/Bucket/${bucket}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BucketInstance(operationVersion, payload, instance._solution.field, instance._solution.bucket));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, headers, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "put",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BucketInstance(operationVersion, payload, instance._solution.field, instance._solution.bucket));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BucketContextImpl = BucketContextImpl;
class BucketInstance {
    constructor(_version, payload, field, bucket){
        this._version = _version;
        this.code = payload.code;
        this.message = payload.message;
        this.moreInfo = payload.more_info;
        this.status = payload.status;
        this.field = payload.field;
        this.limit = payload.limit;
        this.bucket = payload.bucket;
        this.owner = payload.owner;
        this.ttl = payload.ttl;
        this._solution = {
            field: field || this.field,
            bucket: bucket || this.bucket
        };
    }
    get _proxy() {
        this._context = this._context || new BucketContextImpl(this._version, this._solution.field, this._solution.bucket);
        return this._context;
    }
    /**
     * Remove a BucketInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a BucketInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed BucketInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            code: this.code,
            message: this.message,
            moreInfo: this.moreInfo,
            status: this.status,
            field: this.field,
            limit: this.limit,
            bucket: this.bucket,
            owner: this.owner,
            ttl: this.ttl
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BucketInstance = BucketInstance;
function BucketListInstance(version) {
    const instance = (field, bucket)=>instance.get(field, bucket);
    instance.get = function get(field, bucket) {
        return new BucketContextImpl(version, field, bucket);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/lookups/v2/lookupOverride.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Lookups
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LookupOverrideInstance = exports.LookupOverrideContextImpl = exports.OverridesRequest = void 0;
exports.LookupOverrideListInstance = LookupOverrideListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class OverridesRequest {
}
exports.OverridesRequest = OverridesRequest;
class LookupOverrideContextImpl {
    constructor(_version, field, phoneNumber){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(field)) {
            throw new Error("Parameter 'field' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(phoneNumber)) {
            throw new Error("Parameter 'phoneNumber' is not valid.");
        }
        this._solution = {
            field,
            phoneNumber
        };
        this._uri = `/PhoneNumbers/${phoneNumber}/Overrides/${field}`;
    }
    create(params, headers, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new LookupOverrideInstance(operationVersion, payload, instance._solution.field, instance._solution.phoneNumber));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new LookupOverrideInstance(operationVersion, payload, instance._solution.field, instance._solution.phoneNumber));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, headers, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "put",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new LookupOverrideInstance(operationVersion, payload, instance._solution.field, instance._solution.phoneNumber));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.LookupOverrideContextImpl = LookupOverrideContextImpl;
class LookupOverrideInstance {
    constructor(_version, payload, field, phoneNumber){
        this._version = _version;
        this.phoneNumber = payload.phone_number;
        this.originalLineType = payload.original_line_type;
        this.overriddenLineType = payload.overridden_line_type;
        this.overrideReason = payload.override_reason;
        this.overrideTimestamp = deserialize.iso8601DateTime(payload.override_timestamp);
        this.overriddenByAccountSid = payload.overridden_by_account_sid;
        this.code = payload.code;
        this.message = payload.message;
        this.moreInfo = payload.more_info;
        this.status = payload.status;
        this.field = payload.field;
        this.limit = payload.limit;
        this.bucket = payload.bucket;
        this.owner = payload.owner;
        this.ttl = payload.ttl;
        this._solution = {
            field: field || this.field,
            phoneNumber: phoneNumber || this.phoneNumber
        };
    }
    get _proxy() {
        this._context = this._context || new LookupOverrideContextImpl(this._version, this._solution.field, this._solution.phoneNumber);
        return this._context;
    }
    create(params, callback) {
        return this._proxy.create(params, callback);
    }
    /**
     * Remove a LookupOverrideInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a LookupOverrideInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed LookupOverrideInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            phoneNumber: this.phoneNumber,
            originalLineType: this.originalLineType,
            overriddenLineType: this.overriddenLineType,
            overrideReason: this.overrideReason,
            overrideTimestamp: this.overrideTimestamp,
            overriddenByAccountSid: this.overriddenByAccountSid,
            code: this.code,
            message: this.message,
            moreInfo: this.moreInfo,
            status: this.status,
            field: this.field,
            limit: this.limit,
            bucket: this.bucket,
            owner: this.owner,
            ttl: this.ttl
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.LookupOverrideInstance = LookupOverrideInstance;
function LookupOverrideListInstance(version) {
    const instance = (field, phoneNumber)=>instance.get(field, phoneNumber);
    instance.get = function get(field, phoneNumber) {
        return new LookupOverrideContextImpl(version, field, phoneNumber);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/lookups/v2/phoneNumber.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Lookups
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PhoneNumberInstance = exports.PhoneNumberContextImpl = exports.SmsPumpingRisk = exports.SimSwap = exports.ReassignedNumber = exports.LineTypeIntelligence = exports.LineStatus = exports.LastSimSwap = exports.IdentityMatch = exports.CallerName = exports.CallForwarding = void 0;
exports.PhoneNumberListInstance = PhoneNumberListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class CallForwarding {
}
exports.CallForwarding = CallForwarding;
class CallerName {
}
exports.CallerName = CallerName;
class IdentityMatch {
}
exports.IdentityMatch = IdentityMatch;
class LastSimSwap {
}
exports.LastSimSwap = LastSimSwap;
class LineStatus {
}
exports.LineStatus = LineStatus;
class LineTypeIntelligence {
}
exports.LineTypeIntelligence = LineTypeIntelligence;
class ReassignedNumber {
}
exports.ReassignedNumber = ReassignedNumber;
class SimSwap {
}
exports.SimSwap = SimSwap;
class SmsPumpingRisk {
}
exports.SmsPumpingRisk = SmsPumpingRisk;
class PhoneNumberContextImpl {
    constructor(_version, phoneNumber){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(phoneNumber)) {
            throw new Error("Parameter 'phoneNumber' is not valid.");
        }
        this._solution = {
            phoneNumber
        };
        this._uri = `/PhoneNumbers/${phoneNumber}`;
    }
    fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["fields"] !== undefined) data["Fields"] = params["fields"];
        if (params["countryCode"] !== undefined) data["CountryCode"] = params["countryCode"];
        if (params["firstName"] !== undefined) data["FirstName"] = params["firstName"];
        if (params["lastName"] !== undefined) data["LastName"] = params["lastName"];
        if (params["addressLine1"] !== undefined) data["AddressLine1"] = params["addressLine1"];
        if (params["addressLine2"] !== undefined) data["AddressLine2"] = params["addressLine2"];
        if (params["city"] !== undefined) data["City"] = params["city"];
        if (params["state"] !== undefined) data["State"] = params["state"];
        if (params["postalCode"] !== undefined) data["PostalCode"] = params["postalCode"];
        if (params["addressCountryCode"] !== undefined) data["AddressCountryCode"] = params["addressCountryCode"];
        if (params["nationalId"] !== undefined) data["NationalId"] = params["nationalId"];
        if (params["dateOfBirth"] !== undefined) data["DateOfBirth"] = params["dateOfBirth"];
        if (params["lastVerifiedDate"] !== undefined) data["LastVerifiedDate"] = params["lastVerifiedDate"];
        if (params["verificationSid"] !== undefined) data["VerificationSid"] = params["verificationSid"];
        if (params["partnerSubId"] !== undefined) data["PartnerSubId"] = params["partnerSubId"];
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PhoneNumberInstance(operationVersion, payload, instance._solution.phoneNumber));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PhoneNumberContextImpl = PhoneNumberContextImpl;
class PhoneNumberInstance {
    constructor(_version, payload, phoneNumber){
        this._version = _version;
        this.callingCountryCode = payload.calling_country_code;
        this.countryCode = payload.country_code;
        this.phoneNumber = payload.phone_number;
        this.nationalFormat = payload.national_format;
        this.valid = payload.valid;
        this.validationErrors = payload.validation_errors;
        this.callerName = payload.caller_name;
        this.simSwap = payload.sim_swap;
        this.callForwarding = payload.call_forwarding;
        this.lineTypeIntelligence = payload.line_type_intelligence;
        this.lineStatus = payload.line_status;
        this.identityMatch = payload.identity_match;
        this.reassignedNumber = payload.reassigned_number;
        this.smsPumpingRisk = payload.sms_pumping_risk;
        this.phoneNumberQualityScore = payload.phone_number_quality_score;
        this.preFill = payload.pre_fill;
        this.url = payload.url;
        this._solution = {
            phoneNumber: phoneNumber || this.phoneNumber
        };
    }
    get _proxy() {
        this._context = this._context || new PhoneNumberContextImpl(this._version, this._solution.phoneNumber);
        return this._context;
    }
    fetch(params, callback) {
        return this._proxy.fetch(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            callingCountryCode: this.callingCountryCode,
            countryCode: this.countryCode,
            phoneNumber: this.phoneNumber,
            nationalFormat: this.nationalFormat,
            valid: this.valid,
            validationErrors: this.validationErrors,
            callerName: this.callerName,
            simSwap: this.simSwap,
            callForwarding: this.callForwarding,
            lineTypeIntelligence: this.lineTypeIntelligence,
            lineStatus: this.lineStatus,
            identityMatch: this.identityMatch,
            reassignedNumber: this.reassignedNumber,
            smsPumpingRisk: this.smsPumpingRisk,
            phoneNumberQualityScore: this.phoneNumberQualityScore,
            preFill: this.preFill,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PhoneNumberInstance = PhoneNumberInstance;
function PhoneNumberListInstance(version) {
    const instance = (phoneNumber)=>instance.get(phoneNumber);
    instance.get = function get(phoneNumber) {
        return new PhoneNumberContextImpl(version, phoneNumber);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/lookups/v2/query.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Lookups
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.QueryInstance = exports.SmsPumpingRisk = exports.SimSwap = exports.RiskParameters = exports.ReassignedNumberParameters = exports.ReassignedNumber = exports.LookupRequest = exports.LookupBatchResponse = exports.LookupBatchRequest = exports.LineTypeIntelligence = exports.LineStatus = exports.LastSimSwap = exports.IdentityMatchParameters = exports.IdentityMatch = exports.CallerName = exports.CallForwarding = void 0;
exports.QueryListInstance = QueryListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
class CallForwarding {
}
exports.CallForwarding = CallForwarding;
class CallerName {
}
exports.CallerName = CallerName;
class IdentityMatch {
}
exports.IdentityMatch = IdentityMatch;
class IdentityMatchParameters {
}
exports.IdentityMatchParameters = IdentityMatchParameters;
class LastSimSwap {
}
exports.LastSimSwap = LastSimSwap;
class LineStatus {
}
exports.LineStatus = LineStatus;
class LineTypeIntelligence {
}
exports.LineTypeIntelligence = LineTypeIntelligence;
class LookupBatchRequest {
}
exports.LookupBatchRequest = LookupBatchRequest;
class LookupBatchResponse {
}
exports.LookupBatchResponse = LookupBatchResponse;
class LookupRequest {
}
exports.LookupRequest = LookupRequest;
class ReassignedNumber {
}
exports.ReassignedNumber = ReassignedNumber;
class ReassignedNumberParameters {
}
exports.ReassignedNumberParameters = ReassignedNumberParameters;
class RiskParameters {
}
exports.RiskParameters = RiskParameters;
class SimSwap {
}
exports.SimSwap = SimSwap;
class SmsPumpingRisk {
}
exports.SmsPumpingRisk = SmsPumpingRisk;
function QueryListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/batch/query`;
    instance.create = function create(params, headers, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new QueryInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class QueryInstance {
    constructor(_version, payload){
        this._version = _version;
        this.phoneNumbers = payload.phone_numbers;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            phoneNumbers: this.phoneNumbers
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.QueryInstance = QueryInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/lookups/v2/rateLimit.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Lookups
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RateLimitInstance = exports.RateLimitResponse = void 0;
exports.RateLimitListInstance = RateLimitListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
/**
 * Rate limit response schema
 */ class RateLimitResponse {
}
exports.RateLimitResponse = RateLimitResponse;
function RateLimitListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/RateLimits`;
    instance.fetch = function fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["fields"] !== undefined) data["Fields"] = serialize.map(params["fields"], (e)=>e);
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new RateLimitInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class RateLimitInstance {
    constructor(_version, payload){
        this._version = _version;
        this.rateLimits = payload.rate_limits;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            rateLimits: this.rateLimits
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.RateLimitInstance = RateLimitInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/lookups/V2.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Lookups
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const bucket_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/lookups/v2/bucket.js [app-rsc] (ecmascript)");
const lookupOverride_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/lookups/v2/lookupOverride.js [app-rsc] (ecmascript)");
const phoneNumber_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/lookups/v2/phoneNumber.js [app-rsc] (ecmascript)");
const query_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/lookups/v2/query.js [app-rsc] (ecmascript)");
const rateLimit_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/lookups/v2/rateLimit.js [app-rsc] (ecmascript)");
class V2 extends Version_1.default {
    /**
     * Initialize the V2 version of Lookups
     *
     * @param domain - The Twilio (Twilio.Lookups) domain
     */ constructor(domain){
        super(domain, "v2");
    }
    /** Getter for bucket resource */ get bucket() {
        this._bucket = this._bucket || (0, bucket_1.BucketListInstance)(this);
        return this._bucket;
    }
    /** Getter for lookupOverrides resource */ get lookupOverrides() {
        this._lookupOverrides = this._lookupOverrides || (0, lookupOverride_1.LookupOverrideListInstance)(this);
        return this._lookupOverrides;
    }
    /** Getter for phoneNumbers resource */ get phoneNumbers() {
        this._phoneNumbers = this._phoneNumbers || (0, phoneNumber_1.PhoneNumberListInstance)(this);
        return this._phoneNumbers;
    }
    /** Getter for query resource */ get query() {
        this._query = this._query || (0, query_1.QueryListInstance)(this);
        return this._query;
    }
    /** Getter for rateLimits resource */ get rateLimits() {
        this._rateLimits = this._rateLimits || (0, rateLimit_1.RateLimitListInstance)(this);
        return this._rateLimits;
    }
}
exports.default = V2;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/LookupsBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/lookups/V1.js [app-rsc] (ecmascript)"));
const V2_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/lookups/V2.js [app-rsc] (ecmascript)"));
class LookupsBase extends Domain_1.default {
    /**
     * Initialize lookups domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://lookups.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
    get v2() {
        this._v2 = this._v2 || new V2_1.default(this);
        return this._v2;
    }
}
module.exports = LookupsBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Lookups.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const LookupsBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/LookupsBase.js [app-rsc] (ecmascript)"));
class Lookups extends LookupsBase_1.default {
    /**
     * @deprecated - Use v1.phoneNumbers instead
     */ get phoneNumbers() {
        console.warn("phoneNumbers is deprecated. Use v1.phoneNumbers instead.");
        return this.v1.phoneNumbers;
    }
}
module.exports = Lookups;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/marketplace/v1/availableAddOn/availableAddOnExtension.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Marketplace
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AvailableAddOnExtensionPage = exports.AvailableAddOnExtensionInstance = exports.AvailableAddOnExtensionContextImpl = void 0;
exports.AvailableAddOnExtensionListInstance = AvailableAddOnExtensionListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class AvailableAddOnExtensionContextImpl {
    constructor(_version, availableAddOnSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(availableAddOnSid)) {
            throw new Error("Parameter 'availableAddOnSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            availableAddOnSid,
            sid
        };
        this._uri = `/AvailableAddOns/${availableAddOnSid}/Extensions/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AvailableAddOnExtensionInstance(operationVersion, payload, instance._solution.availableAddOnSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AvailableAddOnExtensionContextImpl = AvailableAddOnExtensionContextImpl;
class AvailableAddOnExtensionInstance {
    constructor(_version, payload, availableAddOnSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.availableAddOnSid = payload.available_add_on_sid;
        this.friendlyName = payload.friendly_name;
        this.productName = payload.product_name;
        this.uniqueName = payload.unique_name;
        this.url = payload.url;
        this._solution = {
            availableAddOnSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new AvailableAddOnExtensionContextImpl(this._version, this._solution.availableAddOnSid, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a AvailableAddOnExtensionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed AvailableAddOnExtensionInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            availableAddOnSid: this.availableAddOnSid,
            friendlyName: this.friendlyName,
            productName: this.productName,
            uniqueName: this.uniqueName,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AvailableAddOnExtensionInstance = AvailableAddOnExtensionInstance;
function AvailableAddOnExtensionListInstance(version, availableAddOnSid) {
    if (!(0, utility_1.isValidPathParam)(availableAddOnSid)) {
        throw new Error("Parameter 'availableAddOnSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new AvailableAddOnExtensionContextImpl(version, availableAddOnSid, sid);
    };
    instance._version = version;
    instance._solution = {
        availableAddOnSid
    };
    instance._uri = `/AvailableAddOns/${availableAddOnSid}/Extensions`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AvailableAddOnExtensionPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new AvailableAddOnExtensionPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class AvailableAddOnExtensionPage extends Page_1.default {
    /**
     * Initialize the AvailableAddOnExtensionPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of AvailableAddOnExtensionInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new AvailableAddOnExtensionInstance(this._version, payload, this._solution.availableAddOnSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AvailableAddOnExtensionPage = AvailableAddOnExtensionPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/marketplace/v1/availableAddOn.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Marketplace
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AvailableAddOnPage = exports.AvailableAddOnInstance = exports.AvailableAddOnContextImpl = void 0;
exports.AvailableAddOnListInstance = AvailableAddOnListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const availableAddOnExtension_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/marketplace/v1/availableAddOn/availableAddOnExtension.js [app-rsc] (ecmascript)");
class AvailableAddOnContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/AvailableAddOns/${sid}`;
    }
    get extensions() {
        this._extensions = this._extensions || (0, availableAddOnExtension_1.AvailableAddOnExtensionListInstance)(this._version, this._solution.sid);
        return this._extensions;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AvailableAddOnInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AvailableAddOnContextImpl = AvailableAddOnContextImpl;
class AvailableAddOnInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.friendlyName = payload.friendly_name;
        this.description = payload.description;
        this.pricingType = payload.pricing_type;
        this.configurationSchema = payload.configuration_schema;
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new AvailableAddOnContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a AvailableAddOnInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed AvailableAddOnInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Access the extensions.
     */ extensions() {
        return this._proxy.extensions;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            friendlyName: this.friendlyName,
            description: this.description,
            pricingType: this.pricingType,
            configurationSchema: this.configurationSchema,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AvailableAddOnInstance = AvailableAddOnInstance;
function AvailableAddOnListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new AvailableAddOnContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/AvailableAddOns`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AvailableAddOnPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new AvailableAddOnPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class AvailableAddOnPage extends Page_1.default {
    /**
     * Initialize the AvailableAddOnPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of AvailableAddOnInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new AvailableAddOnInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AvailableAddOnPage = AvailableAddOnPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/marketplace/v1/installedAddOn/installedAddOnExtension.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Marketplace
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InstalledAddOnExtensionPage = exports.InstalledAddOnExtensionInstance = exports.InstalledAddOnExtensionContextImpl = void 0;
exports.InstalledAddOnExtensionListInstance = InstalledAddOnExtensionListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class InstalledAddOnExtensionContextImpl {
    constructor(_version, installedAddOnSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(installedAddOnSid)) {
            throw new Error("Parameter 'installedAddOnSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            installedAddOnSid,
            sid
        };
        this._uri = `/InstalledAddOns/${installedAddOnSid}/Extensions/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InstalledAddOnExtensionInstance(operationVersion, payload, instance._solution.installedAddOnSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["enabled"] === null || params["enabled"] === undefined) {
            throw new Error("Required parameter \"params['enabled']\" missing.");
        }
        let data = {};
        data["Enabled"] = serialize.bool(params["enabled"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InstalledAddOnExtensionInstance(operationVersion, payload, instance._solution.installedAddOnSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InstalledAddOnExtensionContextImpl = InstalledAddOnExtensionContextImpl;
class InstalledAddOnExtensionInstance {
    constructor(_version, payload, installedAddOnSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.installedAddOnSid = payload.installed_add_on_sid;
        this.friendlyName = payload.friendly_name;
        this.productName = payload.product_name;
        this.uniqueName = payload.unique_name;
        this.enabled = payload.enabled;
        this.url = payload.url;
        this._solution = {
            installedAddOnSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new InstalledAddOnExtensionContextImpl(this._version, this._solution.installedAddOnSid, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a InstalledAddOnExtensionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed InstalledAddOnExtensionInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            installedAddOnSid: this.installedAddOnSid,
            friendlyName: this.friendlyName,
            productName: this.productName,
            uniqueName: this.uniqueName,
            enabled: this.enabled,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InstalledAddOnExtensionInstance = InstalledAddOnExtensionInstance;
function InstalledAddOnExtensionListInstance(version, installedAddOnSid) {
    if (!(0, utility_1.isValidPathParam)(installedAddOnSid)) {
        throw new Error("Parameter 'installedAddOnSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new InstalledAddOnExtensionContextImpl(version, installedAddOnSid, sid);
    };
    instance._version = version;
    instance._solution = {
        installedAddOnSid
    };
    instance._uri = `/InstalledAddOns/${installedAddOnSid}/Extensions`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InstalledAddOnExtensionPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new InstalledAddOnExtensionPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class InstalledAddOnExtensionPage extends Page_1.default {
    /**
     * Initialize the InstalledAddOnExtensionPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of InstalledAddOnExtensionInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new InstalledAddOnExtensionInstance(this._version, payload, this._solution.installedAddOnSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InstalledAddOnExtensionPage = InstalledAddOnExtensionPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/marketplace/v1/installedAddOn/installedAddOnUsage.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Marketplace
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InstalledAddOnUsageInstance = exports.MarketplaceV1InstalledAddOnInstalledAddOnUsageBillableItems = exports.MarketplaceV1InstalledAddOnInstalledAddOnUsage = void 0;
exports.InstalledAddOnUsageListInstance = InstalledAddOnUsageListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class MarketplaceV1InstalledAddOnInstalledAddOnUsage {
}
exports.MarketplaceV1InstalledAddOnInstalledAddOnUsage = MarketplaceV1InstalledAddOnInstalledAddOnUsage;
class MarketplaceV1InstalledAddOnInstalledAddOnUsageBillableItems {
}
exports.MarketplaceV1InstalledAddOnInstalledAddOnUsageBillableItems = MarketplaceV1InstalledAddOnInstalledAddOnUsageBillableItems;
function InstalledAddOnUsageListInstance(version, installedAddOnSid) {
    if (!(0, utility_1.isValidPathParam)(installedAddOnSid)) {
        throw new Error("Parameter 'installedAddOnSid' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        installedAddOnSid
    };
    instance._uri = `/InstalledAddOns/${installedAddOnSid}/Usage`;
    instance.create = function create(params, headers, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InstalledAddOnUsageInstance(operationVersion, payload, instance._solution.installedAddOnSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class InstalledAddOnUsageInstance {
    constructor(_version, payload, installedAddOnSid){
        this._version = _version;
        this.totalSubmitted = payload.total_submitted;
        this.billableItems = payload.billable_items;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            totalSubmitted: this.totalSubmitted,
            billableItems: this.billableItems
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InstalledAddOnUsageInstance = InstalledAddOnUsageInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/marketplace/v1/installedAddOn.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Marketplace
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InstalledAddOnPage = exports.InstalledAddOnInstance = exports.InstalledAddOnContextImpl = void 0;
exports.InstalledAddOnListInstance = InstalledAddOnListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const installedAddOnExtension_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/marketplace/v1/installedAddOn/installedAddOnExtension.js [app-rsc] (ecmascript)");
const installedAddOnUsage_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/marketplace/v1/installedAddOn/installedAddOnUsage.js [app-rsc] (ecmascript)");
class InstalledAddOnContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/InstalledAddOns/${sid}`;
    }
    get extensions() {
        this._extensions = this._extensions || (0, installedAddOnExtension_1.InstalledAddOnExtensionListInstance)(this._version, this._solution.sid);
        return this._extensions;
    }
    get usage() {
        this._usage = this._usage || (0, installedAddOnUsage_1.InstalledAddOnUsageListInstance)(this._version, this._solution.sid);
        return this._usage;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InstalledAddOnInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["configuration"] !== undefined) data["Configuration"] = serialize.object(params["configuration"]);
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InstalledAddOnInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InstalledAddOnContextImpl = InstalledAddOnContextImpl;
class InstalledAddOnInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.description = payload.description;
        this.configuration = payload.configuration;
        this.uniqueName = payload.unique_name;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new InstalledAddOnContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a InstalledAddOnInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a InstalledAddOnInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed InstalledAddOnInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the extensions.
     */ extensions() {
        return this._proxy.extensions;
    }
    /**
     * Access the usage.
     */ usage() {
        return this._proxy.usage;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            description: this.description,
            configuration: this.configuration,
            uniqueName: this.uniqueName,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InstalledAddOnInstance = InstalledAddOnInstance;
function InstalledAddOnListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new InstalledAddOnContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/InstalledAddOns`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["availableAddOnSid"] === null || params["availableAddOnSid"] === undefined) {
            throw new Error("Required parameter \"params['availableAddOnSid']\" missing.");
        }
        if (params["acceptTermsOfService"] === null || params["acceptTermsOfService"] === undefined) {
            throw new Error("Required parameter \"params['acceptTermsOfService']\" missing.");
        }
        let data = {};
        data["AvailableAddOnSid"] = params["availableAddOnSid"];
        data["AcceptTermsOfService"] = serialize.bool(params["acceptTermsOfService"]);
        if (params["configuration"] !== undefined) data["Configuration"] = serialize.object(params["configuration"]);
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InstalledAddOnInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InstalledAddOnPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new InstalledAddOnPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class InstalledAddOnPage extends Page_1.default {
    /**
     * Initialize the InstalledAddOnPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of InstalledAddOnInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new InstalledAddOnInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InstalledAddOnPage = InstalledAddOnPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/marketplace/v1/moduleData.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Marketplace
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ModuleDataInstance = void 0;
exports.ModuleDataListInstance = ModuleDataListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function ModuleDataListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Listings`;
    instance.create = function create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["moduleInfo"] !== undefined) data["ModuleInfo"] = params["moduleInfo"];
        if (params["configuration"] !== undefined) data["Configuration"] = params["configuration"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ModuleDataInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.fetch = function fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ModuleDataInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ModuleDataInstance {
    constructor(_version, payload){
        this._version = _version;
        this.url = payload.url;
        this.sid = payload.sid;
        this.description = payload.description;
        this.support = payload.support;
        this.policies = payload.policies;
        this.moduleInfo = payload.module_info;
        this.documentation = payload.documentation;
        this.configuration = payload.configuration;
        this.pricing = payload.pricing;
        this.listings = payload.listings;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            url: this.url,
            sid: this.sid,
            description: this.description,
            support: this.support,
            policies: this.policies,
            moduleInfo: this.moduleInfo,
            documentation: this.documentation,
            configuration: this.configuration,
            pricing: this.pricing,
            listings: this.listings
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ModuleDataInstance = ModuleDataInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/marketplace/v1/moduleDataManagement.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Marketplace
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ModuleDataManagementInstance = exports.ModuleDataManagementContextImpl = void 0;
exports.ModuleDataManagementListInstance = ModuleDataManagementListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class ModuleDataManagementContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Listing/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ModuleDataManagementInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["moduleInfo"] !== undefined) data["ModuleInfo"] = params["moduleInfo"];
        if (params["description"] !== undefined) data["Description"] = params["description"];
        if (params["documentation"] !== undefined) data["Documentation"] = params["documentation"];
        if (params["policies"] !== undefined) data["Policies"] = params["policies"];
        if (params["support"] !== undefined) data["Support"] = params["support"];
        if (params["configuration"] !== undefined) data["Configuration"] = params["configuration"];
        if (params["pricing"] !== undefined) data["Pricing"] = params["pricing"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ModuleDataManagementInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ModuleDataManagementContextImpl = ModuleDataManagementContextImpl;
class ModuleDataManagementInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.url = payload.url;
        this.sid = payload.sid;
        this.description = payload.description;
        this.support = payload.support;
        this.policies = payload.policies;
        this.moduleInfo = payload.module_info;
        this.documentation = payload.documentation;
        this.configuration = payload.configuration;
        this.pricing = payload.pricing;
        this.listings = payload.listings;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new ModuleDataManagementContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a ModuleDataManagementInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ModuleDataManagementInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            url: this.url,
            sid: this.sid,
            description: this.description,
            support: this.support,
            policies: this.policies,
            moduleInfo: this.moduleInfo,
            documentation: this.documentation,
            configuration: this.configuration,
            pricing: this.pricing,
            listings: this.listings
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ModuleDataManagementInstance = ModuleDataManagementInstance;
function ModuleDataManagementListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new ModuleDataManagementContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/marketplace/v1/referralConversion.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Marketplace
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ReferralConversionInstance = exports.CreateReferralConversionRequest = void 0;
exports.ReferralConversionListInstance = ReferralConversionListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
class CreateReferralConversionRequest {
}
exports.CreateReferralConversionRequest = CreateReferralConversionRequest;
function ReferralConversionListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/ReferralConversion`;
    instance.create = function create(params, headers, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ReferralConversionInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ReferralConversionInstance {
    constructor(_version, payload){
        this._version = _version;
        this.convertedAccountSid = payload.converted_account_sid;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            convertedAccountSid: this.convertedAccountSid
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ReferralConversionInstance = ReferralConversionInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/marketplace/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Marketplace
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const availableAddOn_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/marketplace/v1/availableAddOn.js [app-rsc] (ecmascript)");
const installedAddOn_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/marketplace/v1/installedAddOn.js [app-rsc] (ecmascript)");
const moduleData_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/marketplace/v1/moduleData.js [app-rsc] (ecmascript)");
const moduleDataManagement_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/marketplace/v1/moduleDataManagement.js [app-rsc] (ecmascript)");
const referralConversion_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/marketplace/v1/referralConversion.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of Marketplace
     *
     * @param domain - The Twilio (Twilio.Marketplace) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for availableAddOns resource */ get availableAddOns() {
        this._availableAddOns = this._availableAddOns || (0, availableAddOn_1.AvailableAddOnListInstance)(this);
        return this._availableAddOns;
    }
    /** Getter for installedAddOns resource */ get installedAddOns() {
        this._installedAddOns = this._installedAddOns || (0, installedAddOn_1.InstalledAddOnListInstance)(this);
        return this._installedAddOns;
    }
    /** Getter for moduleData resource */ get moduleData() {
        this._moduleData = this._moduleData || (0, moduleData_1.ModuleDataListInstance)(this);
        return this._moduleData;
    }
    /** Getter for moduleDataManagement resource */ get moduleDataManagement() {
        this._moduleDataManagement = this._moduleDataManagement || (0, moduleDataManagement_1.ModuleDataManagementListInstance)(this);
        return this._moduleDataManagement;
    }
    /** Getter for referralConversion resource */ get referralConversion() {
        this._referralConversion = this._referralConversion || (0, referralConversion_1.ReferralConversionListInstance)(this);
        return this._referralConversion;
    }
}
exports.default = V1;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/MarketplaceBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/marketplace/V1.js [app-rsc] (ecmascript)"));
class MarketplaceBase extends Domain_1.default {
    /**
     * Initialize marketplace domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://marketplace.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
}
module.exports = MarketplaceBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Marketplace.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const MarketplaceBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/MarketplaceBase.js [app-rsc] (ecmascript)"));
class Marketplace extends MarketplaceBase_1.default {
}
module.exports = Marketplace;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/MessagingBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/V1.js [app-rsc] (ecmascript)"));
const V2_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/V2.js [app-rsc] (ecmascript)"));
class MessagingBase extends Domain_1.default {
    /**
     * Initialize messaging domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://messaging.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
    get v2() {
        this._v2 = this._v2 || new V2_1.default(this);
        return this._v2;
    }
}
module.exports = MessagingBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Messaging.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const MessagingBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/MessagingBase.js [app-rsc] (ecmascript)"));
class Messaging extends MessagingBase_1.default {
    /**
     * @deprecated - Use v1.brandRegistrations instead
     */ get brandRegistrations() {
        console.warn("brandRegistrations is deprecated. Use v1.brandRegistrations instead.");
        return this.v1.brandRegistrations;
    }
    /**
     * @deprecated - Use v1.deactivations instead
     */ get deactivations() {
        console.warn("deactivations is deprecated. Use v1.deactivations instead.");
        return this.v1.deactivations;
    }
    /**
     * @deprecated - Use v1.domainCerts instead
     */ get domainCerts() {
        console.warn("domainCerts is deprecated. Use v1.domainCerts instead.");
        return this.v1.domainCerts;
    }
    /**
     * @deprecated - Use v1.domainConfig instead
     */ get domainConfig() {
        console.warn("domainConfig is deprecated. Use v1.domainConfig instead.");
        return this.v1.domainConfig;
    }
    /**
     * @deprecated - Use v1.externalCampaign instead
     */ get externalCampaign() {
        console.warn("externalCampaign is deprecated. Use v1.externalCampaign instead.");
        return this.v1.externalCampaign;
    }
    /**
     * @deprecated - Use v1.services instead
     */ get services() {
        console.warn("services is deprecated. Use v1.services instead.");
        return this.v1.services;
    }
    /**
     * @deprecated - Use v1.usecases instead
     */ get usecases() {
        console.warn("usecases is deprecated. Use v1.usecases instead.");
        return this.v1.usecases;
    }
}
module.exports = Messaging;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/monitor/v1/alert.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Monitor
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AlertPage = exports.AlertInstance = exports.AlertContextImpl = void 0;
exports.AlertListInstance = AlertListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class AlertContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Alerts/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AlertInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AlertContextImpl = AlertContextImpl;
class AlertInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.alertText = payload.alert_text;
        this.apiVersion = payload.api_version;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateGenerated = deserialize.iso8601DateTime(payload.date_generated);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.errorCode = payload.error_code;
        this.logLevel = payload.log_level;
        this.moreInfo = payload.more_info;
        this.requestMethod = payload.request_method;
        this.requestUrl = payload.request_url;
        this.requestVariables = payload.request_variables;
        this.resourceSid = payload.resource_sid;
        this.responseBody = payload.response_body;
        this.responseHeaders = payload.response_headers;
        this.sid = payload.sid;
        this.url = payload.url;
        this.requestHeaders = payload.request_headers;
        this.serviceSid = payload.service_sid;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new AlertContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a AlertInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed AlertInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            alertText: this.alertText,
            apiVersion: this.apiVersion,
            dateCreated: this.dateCreated,
            dateGenerated: this.dateGenerated,
            dateUpdated: this.dateUpdated,
            errorCode: this.errorCode,
            logLevel: this.logLevel,
            moreInfo: this.moreInfo,
            requestMethod: this.requestMethod,
            requestUrl: this.requestUrl,
            requestVariables: this.requestVariables,
            resourceSid: this.resourceSid,
            responseBody: this.responseBody,
            responseHeaders: this.responseHeaders,
            sid: this.sid,
            url: this.url,
            requestHeaders: this.requestHeaders,
            serviceSid: this.serviceSid
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AlertInstance = AlertInstance;
function AlertListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new AlertContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Alerts`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["logLevel"] !== undefined) data["LogLevel"] = params["logLevel"];
        if (params["startDate"] !== undefined) data["StartDate"] = serialize.iso8601DateTime(params["startDate"]);
        if (params["endDate"] !== undefined) data["EndDate"] = serialize.iso8601DateTime(params["endDate"]);
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AlertPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new AlertPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class AlertPage extends Page_1.default {
    /**
     * Initialize the AlertPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of AlertInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new AlertInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AlertPage = AlertPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/monitor/v1/event.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Monitor
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EventPage = exports.EventInstance = exports.EventContextImpl = void 0;
exports.EventListInstance = EventListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class EventContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Events/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new EventInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.EventContextImpl = EventContextImpl;
class EventInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.actorSid = payload.actor_sid;
        this.actorType = payload.actor_type;
        this.description = payload.description;
        this.eventData = payload.event_data;
        this.eventDate = deserialize.iso8601DateTime(payload.event_date);
        this.eventType = payload.event_type;
        this.resourceSid = payload.resource_sid;
        this.resourceType = payload.resource_type;
        this.sid = payload.sid;
        this.source = payload.source;
        this.sourceIpAddress = payload.source_ip_address;
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new EventContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a EventInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed EventInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            actorSid: this.actorSid,
            actorType: this.actorType,
            description: this.description,
            eventData: this.eventData,
            eventDate: this.eventDate,
            eventType: this.eventType,
            resourceSid: this.resourceSid,
            resourceType: this.resourceType,
            sid: this.sid,
            source: this.source,
            sourceIpAddress: this.sourceIpAddress,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.EventInstance = EventInstance;
function EventListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new EventContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Events`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["actorSid"] !== undefined) data["ActorSid"] = params["actorSid"];
        if (params["eventType"] !== undefined) data["EventType"] = params["eventType"];
        if (params["resourceSid"] !== undefined) data["ResourceSid"] = params["resourceSid"];
        if (params["sourceIpAddress"] !== undefined) data["SourceIpAddress"] = params["sourceIpAddress"];
        if (params["startDate"] !== undefined) data["StartDate"] = serialize.iso8601DateTime(params["startDate"]);
        if (params["endDate"] !== undefined) data["EndDate"] = serialize.iso8601DateTime(params["endDate"]);
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new EventPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new EventPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class EventPage extends Page_1.default {
    /**
     * Initialize the EventPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of EventInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new EventInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.EventPage = EventPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/monitor/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Monitor
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const alert_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/monitor/v1/alert.js [app-rsc] (ecmascript)");
const event_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/monitor/v1/event.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of Monitor
     *
     * @param domain - The Twilio (Twilio.Monitor) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for alerts resource */ get alerts() {
        this._alerts = this._alerts || (0, alert_1.AlertListInstance)(this);
        return this._alerts;
    }
    /** Getter for events resource */ get events() {
        this._events = this._events || (0, event_1.EventListInstance)(this);
        return this._events;
    }
}
exports.default = V1;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/MonitorBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/monitor/V1.js [app-rsc] (ecmascript)"));
class MonitorBase extends Domain_1.default {
    /**
     * Initialize monitor domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://monitor.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
}
module.exports = MonitorBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Monitor.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const MonitorBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/MonitorBase.js [app-rsc] (ecmascript)"));
class Monitor extends MonitorBase_1.default {
    /**
     * @deprecated - Use v1.alerts instead
     */ get alerts() {
        console.warn("alerts is deprecated. Use v1.alerts instead.");
        return this.v1.alerts;
    }
    /**
     * @deprecated - Use v1.events instead
     */ get events() {
        console.warn("events is deprecated. Use v1.events instead.");
        return this.v1.events;
    }
}
module.exports = Monitor;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/notify/v1/credential.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Notify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CredentialPage = exports.CredentialInstance = exports.CredentialContextImpl = void 0;
exports.CredentialListInstance = CredentialListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class CredentialContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Credentials/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CredentialInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["certificate"] !== undefined) data["Certificate"] = params["certificate"];
        if (params["privateKey"] !== undefined) data["PrivateKey"] = params["privateKey"];
        if (params["sandbox"] !== undefined) data["Sandbox"] = serialize.bool(params["sandbox"]);
        if (params["apiKey"] !== undefined) data["ApiKey"] = params["apiKey"];
        if (params["secret"] !== undefined) data["Secret"] = params["secret"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CredentialInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CredentialContextImpl = CredentialContextImpl;
class CredentialInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.type = payload.type;
        this.sandbox = payload.sandbox;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new CredentialContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a CredentialInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a CredentialInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed CredentialInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            type: this.type,
            sandbox: this.sandbox,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CredentialInstance = CredentialInstance;
function CredentialListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new CredentialContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Credentials`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["type"] === null || params["type"] === undefined) {
            throw new Error("Required parameter \"params['type']\" missing.");
        }
        let data = {};
        data["Type"] = params["type"];
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["certificate"] !== undefined) data["Certificate"] = params["certificate"];
        if (params["privateKey"] !== undefined) data["PrivateKey"] = params["privateKey"];
        if (params["sandbox"] !== undefined) data["Sandbox"] = serialize.bool(params["sandbox"]);
        if (params["apiKey"] !== undefined) data["ApiKey"] = params["apiKey"];
        if (params["secret"] !== undefined) data["Secret"] = params["secret"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CredentialInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CredentialPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new CredentialPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class CredentialPage extends Page_1.default {
    /**
     * Initialize the CredentialPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of CredentialInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new CredentialInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CredentialPage = CredentialPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/notify/v1/service/binding.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Notify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BindingPage = exports.BindingInstance = exports.BindingContextImpl = void 0;
exports.BindingListInstance = BindingListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class BindingContextImpl {
    constructor(_version, serviceSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/Bindings/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BindingInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BindingContextImpl = BindingContextImpl;
class BindingInstance {
    constructor(_version, payload, serviceSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.credentialSid = payload.credential_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.notificationProtocolVersion = payload.notification_protocol_version;
        this.endpoint = payload.endpoint;
        this.identity = payload.identity;
        this.bindingType = payload.binding_type;
        this.address = payload.address;
        this.tags = payload.tags;
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            serviceSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new BindingContextImpl(this._version, this._solution.serviceSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a BindingInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a BindingInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed BindingInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            credentialSid: this.credentialSid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            notificationProtocolVersion: this.notificationProtocolVersion,
            endpoint: this.endpoint,
            identity: this.identity,
            bindingType: this.bindingType,
            address: this.address,
            tags: this.tags,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BindingInstance = BindingInstance;
function BindingListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new BindingContextImpl(version, serviceSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/Bindings`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["identity"] === null || params["identity"] === undefined) {
            throw new Error("Required parameter \"params['identity']\" missing.");
        }
        if (params["bindingType"] === null || params["bindingType"] === undefined) {
            throw new Error("Required parameter \"params['bindingType']\" missing.");
        }
        if (params["address"] === null || params["address"] === undefined) {
            throw new Error("Required parameter \"params['address']\" missing.");
        }
        let data = {};
        data["Identity"] = params["identity"];
        data["BindingType"] = params["bindingType"];
        data["Address"] = params["address"];
        if (params["tag"] !== undefined) data["Tag"] = serialize.map(params["tag"], (e)=>e);
        if (params["notificationProtocolVersion"] !== undefined) data["NotificationProtocolVersion"] = params["notificationProtocolVersion"];
        if (params["credentialSid"] !== undefined) data["CredentialSid"] = params["credentialSid"];
        if (params["endpoint"] !== undefined) data["Endpoint"] = params["endpoint"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BindingInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["startDate"] !== undefined) data["StartDate"] = serialize.iso8601Date(params["startDate"]);
        if (params["endDate"] !== undefined) data["EndDate"] = serialize.iso8601Date(params["endDate"]);
        if (params["identity"] !== undefined) data["Identity"] = serialize.map(params["identity"], (e)=>e);
        if (params["tag"] !== undefined) data["Tag"] = serialize.map(params["tag"], (e)=>e);
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BindingPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new BindingPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class BindingPage extends Page_1.default {
    /**
     * Initialize the BindingPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of BindingInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new BindingInstance(this._version, payload, this._solution.serviceSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BindingPage = BindingPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/notify/v1/service/notification.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Notify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NotificationInstance = void 0;
exports.NotificationListInstance = NotificationListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
function NotificationListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/Notifications`;
    instance.create = function create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["body"] !== undefined) data["Body"] = params["body"];
        if (params["priority"] !== undefined) data["Priority"] = params["priority"];
        if (params["ttl"] !== undefined) data["Ttl"] = params["ttl"];
        if (params["title"] !== undefined) data["Title"] = params["title"];
        if (params["sound"] !== undefined) data["Sound"] = params["sound"];
        if (params["action"] !== undefined) data["Action"] = params["action"];
        if (params["data"] !== undefined) data["Data"] = serialize.object(params["data"]);
        if (params["apn"] !== undefined) data["Apn"] = serialize.object(params["apn"]);
        if (params["gcm"] !== undefined) data["Gcm"] = serialize.object(params["gcm"]);
        if (params["sms"] !== undefined) data["Sms"] = serialize.object(params["sms"]);
        if (params["facebookMessenger"] !== undefined) data["FacebookMessenger"] = serialize.object(params["facebookMessenger"]);
        if (params["fcm"] !== undefined) data["Fcm"] = serialize.object(params["fcm"]);
        if (params["segment"] !== undefined) data["Segment"] = serialize.map(params["segment"], (e)=>e);
        if (params["alexa"] !== undefined) data["Alexa"] = serialize.object(params["alexa"]);
        if (params["toBinding"] !== undefined) data["ToBinding"] = serialize.map(params["toBinding"], (e)=>e);
        if (params["deliveryCallbackUrl"] !== undefined) data["DeliveryCallbackUrl"] = params["deliveryCallbackUrl"];
        if (params["identity"] !== undefined) data["Identity"] = serialize.map(params["identity"], (e)=>e);
        if (params["tag"] !== undefined) data["Tag"] = serialize.map(params["tag"], (e)=>e);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new NotificationInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class NotificationInstance {
    constructor(_version, payload, serviceSid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.identities = payload.identities;
        this.tags = payload.tags;
        this.segments = payload.segments;
        this.priority = payload.priority;
        this.ttl = deserialize.integer(payload.ttl);
        this.title = payload.title;
        this.body = payload.body;
        this.sound = payload.sound;
        this.action = payload.action;
        this.data = payload.data;
        this.apn = payload.apn;
        this.gcm = payload.gcm;
        this.fcm = payload.fcm;
        this.sms = payload.sms;
        this.facebookMessenger = payload.facebook_messenger;
        this.alexa = payload.alexa;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            dateCreated: this.dateCreated,
            identities: this.identities,
            tags: this.tags,
            segments: this.segments,
            priority: this.priority,
            ttl: this.ttl,
            title: this.title,
            body: this.body,
            sound: this.sound,
            action: this.action,
            data: this.data,
            apn: this.apn,
            gcm: this.gcm,
            fcm: this.fcm,
            sms: this.sms,
            facebookMessenger: this.facebookMessenger,
            alexa: this.alexa
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.NotificationInstance = NotificationInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/notify/v1/service.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Notify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ServicePage = exports.ServiceInstance = exports.ServiceContextImpl = void 0;
exports.ServiceListInstance = ServiceListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const binding_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/notify/v1/service/binding.js [app-rsc] (ecmascript)");
const notification_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/notify/v1/service/notification.js [app-rsc] (ecmascript)");
class ServiceContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Services/${sid}`;
    }
    get bindings() {
        this._bindings = this._bindings || (0, binding_1.BindingListInstance)(this._version, this._solution.sid);
        return this._bindings;
    }
    get notifications() {
        this._notifications = this._notifications || (0, notification_1.NotificationListInstance)(this._version, this._solution.sid);
        return this._notifications;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServiceInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["apnCredentialSid"] !== undefined) data["ApnCredentialSid"] = params["apnCredentialSid"];
        if (params["gcmCredentialSid"] !== undefined) data["GcmCredentialSid"] = params["gcmCredentialSid"];
        if (params["messagingServiceSid"] !== undefined) data["MessagingServiceSid"] = params["messagingServiceSid"];
        if (params["facebookMessengerPageId"] !== undefined) data["FacebookMessengerPageId"] = params["facebookMessengerPageId"];
        if (params["defaultApnNotificationProtocolVersion"] !== undefined) data["DefaultApnNotificationProtocolVersion"] = params["defaultApnNotificationProtocolVersion"];
        if (params["defaultGcmNotificationProtocolVersion"] !== undefined) data["DefaultGcmNotificationProtocolVersion"] = params["defaultGcmNotificationProtocolVersion"];
        if (params["fcmCredentialSid"] !== undefined) data["FcmCredentialSid"] = params["fcmCredentialSid"];
        if (params["defaultFcmNotificationProtocolVersion"] !== undefined) data["DefaultFcmNotificationProtocolVersion"] = params["defaultFcmNotificationProtocolVersion"];
        if (params["logEnabled"] !== undefined) data["LogEnabled"] = serialize.bool(params["logEnabled"]);
        if (params["alexaSkillId"] !== undefined) data["AlexaSkillId"] = params["alexaSkillId"];
        if (params["defaultAlexaNotificationProtocolVersion"] !== undefined) data["DefaultAlexaNotificationProtocolVersion"] = params["defaultAlexaNotificationProtocolVersion"];
        if (params["deliveryCallbackUrl"] !== undefined) data["DeliveryCallbackUrl"] = params["deliveryCallbackUrl"];
        if (params["deliveryCallbackEnabled"] !== undefined) data["DeliveryCallbackEnabled"] = serialize.bool(params["deliveryCallbackEnabled"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServiceInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ServiceContextImpl = ServiceContextImpl;
class ServiceInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.apnCredentialSid = payload.apn_credential_sid;
        this.gcmCredentialSid = payload.gcm_credential_sid;
        this.fcmCredentialSid = payload.fcm_credential_sid;
        this.messagingServiceSid = payload.messaging_service_sid;
        this.facebookMessengerPageId = payload.facebook_messenger_page_id;
        this.defaultApnNotificationProtocolVersion = payload.default_apn_notification_protocol_version;
        this.defaultGcmNotificationProtocolVersion = payload.default_gcm_notification_protocol_version;
        this.defaultFcmNotificationProtocolVersion = payload.default_fcm_notification_protocol_version;
        this.logEnabled = payload.log_enabled;
        this.url = payload.url;
        this.links = payload.links;
        this.alexaSkillId = payload.alexa_skill_id;
        this.defaultAlexaNotificationProtocolVersion = payload.default_alexa_notification_protocol_version;
        this.deliveryCallbackUrl = payload.delivery_callback_url;
        this.deliveryCallbackEnabled = payload.delivery_callback_enabled;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new ServiceContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a ServiceInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a ServiceInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ServiceInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the bindings.
     */ bindings() {
        return this._proxy.bindings;
    }
    /**
     * Access the notifications.
     */ notifications() {
        return this._proxy.notifications;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            apnCredentialSid: this.apnCredentialSid,
            gcmCredentialSid: this.gcmCredentialSid,
            fcmCredentialSid: this.fcmCredentialSid,
            messagingServiceSid: this.messagingServiceSid,
            facebookMessengerPageId: this.facebookMessengerPageId,
            defaultApnNotificationProtocolVersion: this.defaultApnNotificationProtocolVersion,
            defaultGcmNotificationProtocolVersion: this.defaultGcmNotificationProtocolVersion,
            defaultFcmNotificationProtocolVersion: this.defaultFcmNotificationProtocolVersion,
            logEnabled: this.logEnabled,
            url: this.url,
            links: this.links,
            alexaSkillId: this.alexaSkillId,
            defaultAlexaNotificationProtocolVersion: this.defaultAlexaNotificationProtocolVersion,
            deliveryCallbackUrl: this.deliveryCallbackUrl,
            deliveryCallbackEnabled: this.deliveryCallbackEnabled
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ServiceInstance = ServiceInstance;
function ServiceListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new ServiceContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Services`;
    instance.create = function create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["apnCredentialSid"] !== undefined) data["ApnCredentialSid"] = params["apnCredentialSid"];
        if (params["gcmCredentialSid"] !== undefined) data["GcmCredentialSid"] = params["gcmCredentialSid"];
        if (params["messagingServiceSid"] !== undefined) data["MessagingServiceSid"] = params["messagingServiceSid"];
        if (params["facebookMessengerPageId"] !== undefined) data["FacebookMessengerPageId"] = params["facebookMessengerPageId"];
        if (params["defaultApnNotificationProtocolVersion"] !== undefined) data["DefaultApnNotificationProtocolVersion"] = params["defaultApnNotificationProtocolVersion"];
        if (params["defaultGcmNotificationProtocolVersion"] !== undefined) data["DefaultGcmNotificationProtocolVersion"] = params["defaultGcmNotificationProtocolVersion"];
        if (params["fcmCredentialSid"] !== undefined) data["FcmCredentialSid"] = params["fcmCredentialSid"];
        if (params["defaultFcmNotificationProtocolVersion"] !== undefined) data["DefaultFcmNotificationProtocolVersion"] = params["defaultFcmNotificationProtocolVersion"];
        if (params["logEnabled"] !== undefined) data["LogEnabled"] = serialize.bool(params["logEnabled"]);
        if (params["alexaSkillId"] !== undefined) data["AlexaSkillId"] = params["alexaSkillId"];
        if (params["defaultAlexaNotificationProtocolVersion"] !== undefined) data["DefaultAlexaNotificationProtocolVersion"] = params["defaultAlexaNotificationProtocolVersion"];
        if (params["deliveryCallbackUrl"] !== undefined) data["DeliveryCallbackUrl"] = params["deliveryCallbackUrl"];
        if (params["deliveryCallbackEnabled"] !== undefined) data["DeliveryCallbackEnabled"] = serialize.bool(params["deliveryCallbackEnabled"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServiceInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServicePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ServicePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ServicePage extends Page_1.default {
    /**
     * Initialize the ServicePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ServiceInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ServiceInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ServicePage = ServicePage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/notify/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Notify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const credential_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/notify/v1/credential.js [app-rsc] (ecmascript)");
const service_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/notify/v1/service.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of Notify
     *
     * @param domain - The Twilio (Twilio.Notify) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for credentials resource */ get credentials() {
        this._credentials = this._credentials || (0, credential_1.CredentialListInstance)(this);
        return this._credentials;
    }
    /** Getter for services resource */ get services() {
        this._services = this._services || (0, service_1.ServiceListInstance)(this);
        return this._services;
    }
}
exports.default = V1;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/NotifyBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/notify/V1.js [app-rsc] (ecmascript)"));
class NotifyBase extends Domain_1.default {
    /**
     * Initialize notify domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://notify.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
}
module.exports = NotifyBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Notify.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const NotifyBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/NotifyBase.js [app-rsc] (ecmascript)"));
class Notify extends NotifyBase_1.default {
    /**
     * @deprecated - Use v1.credentials instead
     */ get credentials() {
        console.warn("credentials is deprecated. Use v1.credentials instead.");
        return this.v1.credentials;
    }
    /**
     * @deprecated - Use v1.services instead
     */ get services() {
        console.warn("services is deprecated. Use v1.services instead.");
        return this.v1.services;
    }
}
module.exports = Notify;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/NumbersBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/numbers/V1.js [app-rsc] (ecmascript)"));
const V2_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/numbers/V2.js [app-rsc] (ecmascript)"));
const V3_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/numbers/V3.js [app-rsc] (ecmascript)"));
class NumbersBase extends Domain_1.default {
    /**
     * Initialize numbers domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://numbers.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
    get v2() {
        this._v2 = this._v2 || new V2_1.default(this);
        return this._v2;
    }
    get v3() {
        this._v3 = this._v3 || new V3_1.default(this);
        return this._v3;
    }
}
module.exports = NumbersBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Numbers.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const NumbersBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/NumbersBase.js [app-rsc] (ecmascript)"));
class Numbers extends NumbersBase_1.default {
    /**
     * @deprecated - Use v2.regulatoryCompliance instead
     */ get regulatoryCompliance() {
        console.warn("regulatoryCompliance is deprecated. Use v2.regulatoryCompliance instead.");
        return this.v2.regulatoryCompliance;
    }
}
module.exports = Numbers;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/oauth/v1/authorize.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Oauth
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AuthorizeInstance = void 0;
exports.AuthorizeListInstance = AuthorizeListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function AuthorizeListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/authorize`;
    instance.fetch = function fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["responseType"] !== undefined) data["ResponseType"] = params["responseType"];
        if (params["clientId"] !== undefined) data["ClientId"] = params["clientId"];
        if (params["redirectUri"] !== undefined) data["RedirectUri"] = params["redirectUri"];
        if (params["scope"] !== undefined) data["Scope"] = params["scope"];
        if (params["state"] !== undefined) data["State"] = params["state"];
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AuthorizeInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class AuthorizeInstance {
    constructor(_version, payload){
        this._version = _version;
        this.redirectTo = payload.redirect_to;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            redirectTo: this.redirectTo
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AuthorizeInstance = AuthorizeInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/oauth/v1/token.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Oauth
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TokenInstance = void 0;
exports.TokenListInstance = TokenListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function TokenListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/token`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["grantType"] === null || params["grantType"] === undefined) {
            throw new Error("Required parameter \"params['grantType']\" missing.");
        }
        if (params["clientId"] === null || params["clientId"] === undefined) {
            throw new Error("Required parameter \"params['clientId']\" missing.");
        }
        let data = {};
        data["GrantType"] = params["grantType"];
        data["ClientId"] = params["clientId"];
        if (params["clientSecret"] !== undefined) data["ClientSecret"] = params["clientSecret"];
        if (params["code"] !== undefined) data["Code"] = params["code"];
        if (params["redirectUri"] !== undefined) data["RedirectUri"] = params["redirectUri"];
        if (params["audience"] !== undefined) data["Audience"] = params["audience"];
        if (params["refreshToken"] !== undefined) data["RefreshToken"] = params["refreshToken"];
        if (params["scope"] !== undefined) data["Scope"] = params["scope"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new TokenInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class TokenInstance {
    constructor(_version, payload){
        this._version = _version;
        this.accessToken = payload.access_token;
        this.refreshToken = payload.refresh_token;
        this.idToken = payload.id_token;
        this.tokenType = payload.token_type;
        this.expiresIn = payload.expires_in;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accessToken: this.accessToken,
            refreshToken: this.refreshToken,
            idToken: this.idToken,
            tokenType: this.tokenType,
            expiresIn: this.expiresIn
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.TokenInstance = TokenInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/oauth/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Oauth
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const authorize_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/oauth/v1/authorize.js [app-rsc] (ecmascript)");
const token_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/oauth/v1/token.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of Oauth
     *
     * @param domain - The Twilio (Twilio.Oauth) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for authorize resource */ get authorize() {
        this._authorize = this._authorize || (0, authorize_1.AuthorizeListInstance)(this);
        return this._authorize;
    }
    /** Getter for token resource */ get token() {
        this._token = this._token || (0, token_1.TokenListInstance)(this);
        return this._token;
    }
}
exports.default = V1;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/oauth/v2/token.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * User OAuth API
 * User OAuth API
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TokenInstance = void 0;
exports.TokenListInstance = TokenListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function TokenListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/token`;
    instance.create = function create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["grantType"] !== undefined) data["grant_type"] = params["grantType"];
        if (params["clientId"] !== undefined) data["client_id"] = params["clientId"];
        if (params["clientSecret"] !== undefined) data["client_secret"] = params["clientSecret"];
        if (params["code"] !== undefined) data["code"] = params["code"];
        if (params["redirectUri"] !== undefined) data["redirect_uri"] = params["redirectUri"];
        if (params["audience"] !== undefined) data["audience"] = params["audience"];
        if (params["refreshToken"] !== undefined) data["refresh_token"] = params["refreshToken"];
        if (params["scope"] !== undefined) data["scope"] = params["scope"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new TokenInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class TokenInstance {
    constructor(_version, payload){
        this._version = _version;
        this.accessToken = payload.access_token;
        this.refreshToken = payload.refresh_token;
        this.idToken = payload.id_token;
        this.tokenType = payload.token_type;
        this.expiresIn = payload.expires_in;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accessToken: this.accessToken,
            refreshToken: this.refreshToken,
            idToken: this.idToken,
            tokenType: this.tokenType,
            expiresIn: this.expiresIn
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.TokenInstance = TokenInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/oauth/V2.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * User OAuth API
 * User OAuth API
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const token_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/oauth/v2/token.js [app-rsc] (ecmascript)");
class V2 extends Version_1.default {
    /**
     * Initialize the V2 version of Oauth
     *
     * @param domain - The Twilio (Twilio.Oauth) domain
     */ constructor(domain){
        super(domain, "v2");
    }
    /** Getter for token resource */ get token() {
        this._token = this._token || (0, token_1.TokenListInstance)(this);
        return this._token;
    }
}
exports.default = V2;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/OauthBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/oauth/V1.js [app-rsc] (ecmascript)"));
const V2_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/oauth/V2.js [app-rsc] (ecmascript)"));
class OauthBase extends Domain_1.default {
    /**
     * Initialize oauth domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://oauth.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
    get v2() {
        this._v2 = this._v2 || new V2_1.default(this);
        return this._v2;
    }
}
module.exports = OauthBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Oauth.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const OauthBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/OauthBase.js [app-rsc] (ecmascript)"));
class Oauth extends OauthBase_1.default {
}
module.exports = Oauth;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/hosted_numbers/authorizationDocument/dependentHostedNumberOrder.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DependentHostedNumberOrderPage = exports.DependentHostedNumberOrderInstance = void 0;
exports.DependentHostedNumberOrderListInstance = DependentHostedNumberOrderListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
function DependentHostedNumberOrderListInstance(version, signingDocumentSid) {
    if (!(0, utility_1.isValidPathParam)(signingDocumentSid)) {
        throw new Error("Parameter 'signingDocumentSid' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        signingDocumentSid
    };
    instance._uri = `/AuthorizationDocuments/${signingDocumentSid}/DependentHostedNumberOrders`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["phoneNumber"] !== undefined) data["PhoneNumber"] = params["phoneNumber"];
        if (params["incomingPhoneNumberSid"] !== undefined) data["IncomingPhoneNumberSid"] = params["incomingPhoneNumberSid"];
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new DependentHostedNumberOrderPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new DependentHostedNumberOrderPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class DependentHostedNumberOrderInstance {
    constructor(_version, payload, signingDocumentSid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.incomingPhoneNumberSid = payload.incoming_phone_number_sid;
        this.addressSid = payload.address_sid;
        this.signingDocumentSid = payload.signing_document_sid;
        this.phoneNumber = payload.phone_number;
        this.capabilities = payload.capabilities;
        this.friendlyName = payload.friendly_name;
        this.uniqueName = payload.unique_name;
        this.status = payload.status;
        this.failureReason = payload.failure_reason;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.verificationAttempts = deserialize.integer(payload.verification_attempts);
        this.email = payload.email;
        this.ccEmails = payload.cc_emails;
        this.verificationType = payload.verification_type;
        this.verificationDocumentSid = payload.verification_document_sid;
        this.extension = payload.extension;
        this.callDelay = deserialize.integer(payload.call_delay);
        this.verificationCode = payload.verification_code;
        this.verificationCallSids = payload.verification_call_sids;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            incomingPhoneNumberSid: this.incomingPhoneNumberSid,
            addressSid: this.addressSid,
            signingDocumentSid: this.signingDocumentSid,
            phoneNumber: this.phoneNumber,
            capabilities: this.capabilities,
            friendlyName: this.friendlyName,
            uniqueName: this.uniqueName,
            status: this.status,
            failureReason: this.failureReason,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            verificationAttempts: this.verificationAttempts,
            email: this.email,
            ccEmails: this.ccEmails,
            verificationType: this.verificationType,
            verificationDocumentSid: this.verificationDocumentSid,
            extension: this.extension,
            callDelay: this.callDelay,
            verificationCode: this.verificationCode,
            verificationCallSids: this.verificationCallSids
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DependentHostedNumberOrderInstance = DependentHostedNumberOrderInstance;
class DependentHostedNumberOrderPage extends Page_1.default {
    /**
     * Initialize the DependentHostedNumberOrderPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of DependentHostedNumberOrderInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new DependentHostedNumberOrderInstance(this._version, payload, this._solution.signingDocumentSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DependentHostedNumberOrderPage = DependentHostedNumberOrderPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/hosted_numbers/authorizationDocument.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AuthorizationDocumentPage = exports.AuthorizationDocumentInstance = exports.AuthorizationDocumentContextImpl = void 0;
exports.AuthorizationDocumentListInstance = AuthorizationDocumentListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const dependentHostedNumberOrder_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/hosted_numbers/authorizationDocument/dependentHostedNumberOrder.js [app-rsc] (ecmascript)");
class AuthorizationDocumentContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/AuthorizationDocuments/${sid}`;
    }
    get dependentHostedNumberOrders() {
        this._dependentHostedNumberOrders = this._dependentHostedNumberOrders || (0, dependentHostedNumberOrder_1.DependentHostedNumberOrderListInstance)(this._version, this._solution.sid);
        return this._dependentHostedNumberOrders;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AuthorizationDocumentInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["hostedNumberOrderSids"] !== undefined) data["HostedNumberOrderSids"] = serialize.map(params["hostedNumberOrderSids"], (e)=>e);
        if (params["addressSid"] !== undefined) data["AddressSid"] = params["addressSid"];
        if (params["email"] !== undefined) data["Email"] = params["email"];
        if (params["ccEmails"] !== undefined) data["CcEmails"] = serialize.map(params["ccEmails"], (e)=>e);
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["contactTitle"] !== undefined) data["ContactTitle"] = params["contactTitle"];
        if (params["contactPhoneNumber"] !== undefined) data["ContactPhoneNumber"] = params["contactPhoneNumber"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AuthorizationDocumentInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AuthorizationDocumentContextImpl = AuthorizationDocumentContextImpl;
class AuthorizationDocumentInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.addressSid = payload.address_sid;
        this.status = payload.status;
        this.email = payload.email;
        this.ccEmails = payload.cc_emails;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new AuthorizationDocumentContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a AuthorizationDocumentInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed AuthorizationDocumentInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the dependentHostedNumberOrders.
     */ dependentHostedNumberOrders() {
        return this._proxy.dependentHostedNumberOrders;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            addressSid: this.addressSid,
            status: this.status,
            email: this.email,
            ccEmails: this.ccEmails,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AuthorizationDocumentInstance = AuthorizationDocumentInstance;
function AuthorizationDocumentListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new AuthorizationDocumentContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/AuthorizationDocuments`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["hostedNumberOrderSids"] === null || params["hostedNumberOrderSids"] === undefined) {
            throw new Error("Required parameter \"params['hostedNumberOrderSids']\" missing.");
        }
        if (params["addressSid"] === null || params["addressSid"] === undefined) {
            throw new Error("Required parameter \"params['addressSid']\" missing.");
        }
        if (params["email"] === null || params["email"] === undefined) {
            throw new Error("Required parameter \"params['email']\" missing.");
        }
        if (params["contactTitle"] === null || params["contactTitle"] === undefined) {
            throw new Error("Required parameter \"params['contactTitle']\" missing.");
        }
        if (params["contactPhoneNumber"] === null || params["contactPhoneNumber"] === undefined) {
            throw new Error("Required parameter \"params['contactPhoneNumber']\" missing.");
        }
        let data = {};
        data["HostedNumberOrderSids"] = serialize.map(params["hostedNumberOrderSids"], (e)=>e);
        data["AddressSid"] = params["addressSid"];
        data["Email"] = params["email"];
        data["ContactTitle"] = params["contactTitle"];
        data["ContactPhoneNumber"] = params["contactPhoneNumber"];
        if (params["ccEmails"] !== undefined) data["CcEmails"] = serialize.map(params["ccEmails"], (e)=>e);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AuthorizationDocumentInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["email"] !== undefined) data["Email"] = params["email"];
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AuthorizationDocumentPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new AuthorizationDocumentPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class AuthorizationDocumentPage extends Page_1.default {
    /**
     * Initialize the AuthorizationDocumentPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of AuthorizationDocumentInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new AuthorizationDocumentInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AuthorizationDocumentPage = AuthorizationDocumentPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/hosted_numbers/hostedNumberOrder.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.HostedNumberOrderPage = exports.HostedNumberOrderInstance = exports.HostedNumberOrderContextImpl = void 0;
exports.HostedNumberOrderListInstance = HostedNumberOrderListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class HostedNumberOrderContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/HostedNumberOrders/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new HostedNumberOrderInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        if (params["email"] !== undefined) data["Email"] = params["email"];
        if (params["ccEmails"] !== undefined) data["CcEmails"] = serialize.map(params["ccEmails"], (e)=>e);
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["verificationCode"] !== undefined) data["VerificationCode"] = params["verificationCode"];
        if (params["verificationType"] !== undefined) data["VerificationType"] = params["verificationType"];
        if (params["verificationDocumentSid"] !== undefined) data["VerificationDocumentSid"] = params["verificationDocumentSid"];
        if (params["extension"] !== undefined) data["Extension"] = params["extension"];
        if (params["callDelay"] !== undefined) data["CallDelay"] = params["callDelay"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new HostedNumberOrderInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.HostedNumberOrderContextImpl = HostedNumberOrderContextImpl;
class HostedNumberOrderInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.incomingPhoneNumberSid = payload.incoming_phone_number_sid;
        this.addressSid = payload.address_sid;
        this.signingDocumentSid = payload.signing_document_sid;
        this.phoneNumber = payload.phone_number;
        this.capabilities = payload.capabilities;
        this.friendlyName = payload.friendly_name;
        this.uniqueName = payload.unique_name;
        this.status = payload.status;
        this.failureReason = payload.failure_reason;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.verificationAttempts = deserialize.integer(payload.verification_attempts);
        this.email = payload.email;
        this.ccEmails = payload.cc_emails;
        this.url = payload.url;
        this.verificationType = payload.verification_type;
        this.verificationDocumentSid = payload.verification_document_sid;
        this.extension = payload.extension;
        this.callDelay = deserialize.integer(payload.call_delay);
        this.verificationCode = payload.verification_code;
        this.verificationCallSids = payload.verification_call_sids;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new HostedNumberOrderContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a HostedNumberOrderInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a HostedNumberOrderInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed HostedNumberOrderInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            incomingPhoneNumberSid: this.incomingPhoneNumberSid,
            addressSid: this.addressSid,
            signingDocumentSid: this.signingDocumentSid,
            phoneNumber: this.phoneNumber,
            capabilities: this.capabilities,
            friendlyName: this.friendlyName,
            uniqueName: this.uniqueName,
            status: this.status,
            failureReason: this.failureReason,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            verificationAttempts: this.verificationAttempts,
            email: this.email,
            ccEmails: this.ccEmails,
            url: this.url,
            verificationType: this.verificationType,
            verificationDocumentSid: this.verificationDocumentSid,
            extension: this.extension,
            callDelay: this.callDelay,
            verificationCode: this.verificationCode,
            verificationCallSids: this.verificationCallSids
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.HostedNumberOrderInstance = HostedNumberOrderInstance;
function HostedNumberOrderListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new HostedNumberOrderContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/HostedNumberOrders`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["phoneNumber"] === null || params["phoneNumber"] === undefined) {
            throw new Error("Required parameter \"params['phoneNumber']\" missing.");
        }
        if (params["smsCapability"] === null || params["smsCapability"] === undefined) {
            throw new Error("Required parameter \"params['smsCapability']\" missing.");
        }
        let data = {};
        data["PhoneNumber"] = params["phoneNumber"];
        data["SmsCapability"] = serialize.bool(params["smsCapability"]);
        if (params["accountSid"] !== undefined) data["AccountSid"] = params["accountSid"];
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        if (params["ccEmails"] !== undefined) data["CcEmails"] = serialize.map(params["ccEmails"], (e)=>e);
        if (params["smsUrl"] !== undefined) data["SmsUrl"] = params["smsUrl"];
        if (params["smsMethod"] !== undefined) data["SmsMethod"] = params["smsMethod"];
        if (params["smsFallbackUrl"] !== undefined) data["SmsFallbackUrl"] = params["smsFallbackUrl"];
        if (params["smsFallbackMethod"] !== undefined) data["SmsFallbackMethod"] = params["smsFallbackMethod"];
        if (params["statusCallbackUrl"] !== undefined) data["StatusCallbackUrl"] = params["statusCallbackUrl"];
        if (params["statusCallbackMethod"] !== undefined) data["StatusCallbackMethod"] = params["statusCallbackMethod"];
        if (params["smsApplicationSid"] !== undefined) data["SmsApplicationSid"] = params["smsApplicationSid"];
        if (params["addressSid"] !== undefined) data["AddressSid"] = params["addressSid"];
        if (params["email"] !== undefined) data["Email"] = params["email"];
        if (params["verificationType"] !== undefined) data["VerificationType"] = params["verificationType"];
        if (params["verificationDocumentSid"] !== undefined) data["VerificationDocumentSid"] = params["verificationDocumentSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new HostedNumberOrderInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["phoneNumber"] !== undefined) data["PhoneNumber"] = params["phoneNumber"];
        if (params["incomingPhoneNumberSid"] !== undefined) data["IncomingPhoneNumberSid"] = params["incomingPhoneNumberSid"];
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new HostedNumberOrderPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new HostedNumberOrderPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class HostedNumberOrderPage extends Page_1.default {
    /**
     * Initialize the HostedNumberOrderPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of HostedNumberOrderInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new HostedNumberOrderInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.HostedNumberOrderPage = HostedNumberOrderPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/HostedNumbers.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const authorizationDocument_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/hosted_numbers/authorizationDocument.js [app-rsc] (ecmascript)");
const hostedNumberOrder_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/hosted_numbers/hostedNumberOrder.js [app-rsc] (ecmascript)");
class HostedNumbers extends Version_1.default {
    /**
     * Initialize the HostedNumbers version of Preview
     *
     * @param domain - The Twilio (Twilio.Preview) domain
     */ constructor(domain){
        super(domain, "HostedNumbers");
    }
    /** Getter for authorizationDocuments resource */ get authorizationDocuments() {
        this._authorizationDocuments = this._authorizationDocuments || (0, authorizationDocument_1.AuthorizationDocumentListInstance)(this);
        return this._authorizationDocuments;
    }
    /** Getter for hostedNumberOrders resource */ get hostedNumberOrders() {
        this._hostedNumberOrders = this._hostedNumberOrders || (0, hostedNumberOrder_1.HostedNumberOrderListInstance)(this);
        return this._hostedNumberOrders;
    }
}
exports.default = HostedNumbers;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/marketplace/availableAddOn/availableAddOnExtension.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AvailableAddOnExtensionPage = exports.AvailableAddOnExtensionInstance = exports.AvailableAddOnExtensionContextImpl = void 0;
exports.AvailableAddOnExtensionListInstance = AvailableAddOnExtensionListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class AvailableAddOnExtensionContextImpl {
    constructor(_version, availableAddOnSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(availableAddOnSid)) {
            throw new Error("Parameter 'availableAddOnSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            availableAddOnSid,
            sid
        };
        this._uri = `/AvailableAddOns/${availableAddOnSid}/Extensions/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AvailableAddOnExtensionInstance(operationVersion, payload, instance._solution.availableAddOnSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AvailableAddOnExtensionContextImpl = AvailableAddOnExtensionContextImpl;
class AvailableAddOnExtensionInstance {
    constructor(_version, payload, availableAddOnSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.availableAddOnSid = payload.available_add_on_sid;
        this.friendlyName = payload.friendly_name;
        this.productName = payload.product_name;
        this.uniqueName = payload.unique_name;
        this.url = payload.url;
        this._solution = {
            availableAddOnSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new AvailableAddOnExtensionContextImpl(this._version, this._solution.availableAddOnSid, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a AvailableAddOnExtensionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed AvailableAddOnExtensionInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            availableAddOnSid: this.availableAddOnSid,
            friendlyName: this.friendlyName,
            productName: this.productName,
            uniqueName: this.uniqueName,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AvailableAddOnExtensionInstance = AvailableAddOnExtensionInstance;
function AvailableAddOnExtensionListInstance(version, availableAddOnSid) {
    if (!(0, utility_1.isValidPathParam)(availableAddOnSid)) {
        throw new Error("Parameter 'availableAddOnSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new AvailableAddOnExtensionContextImpl(version, availableAddOnSid, sid);
    };
    instance._version = version;
    instance._solution = {
        availableAddOnSid
    };
    instance._uri = `/AvailableAddOns/${availableAddOnSid}/Extensions`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AvailableAddOnExtensionPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new AvailableAddOnExtensionPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class AvailableAddOnExtensionPage extends Page_1.default {
    /**
     * Initialize the AvailableAddOnExtensionPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of AvailableAddOnExtensionInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new AvailableAddOnExtensionInstance(this._version, payload, this._solution.availableAddOnSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AvailableAddOnExtensionPage = AvailableAddOnExtensionPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/marketplace/availableAddOn.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AvailableAddOnPage = exports.AvailableAddOnInstance = exports.AvailableAddOnContextImpl = void 0;
exports.AvailableAddOnListInstance = AvailableAddOnListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const availableAddOnExtension_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/marketplace/availableAddOn/availableAddOnExtension.js [app-rsc] (ecmascript)");
class AvailableAddOnContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/AvailableAddOns/${sid}`;
    }
    get extensions() {
        this._extensions = this._extensions || (0, availableAddOnExtension_1.AvailableAddOnExtensionListInstance)(this._version, this._solution.sid);
        return this._extensions;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AvailableAddOnInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AvailableAddOnContextImpl = AvailableAddOnContextImpl;
class AvailableAddOnInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.friendlyName = payload.friendly_name;
        this.description = payload.description;
        this.pricingType = payload.pricing_type;
        this.configurationSchema = payload.configuration_schema;
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new AvailableAddOnContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a AvailableAddOnInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed AvailableAddOnInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Access the extensions.
     */ extensions() {
        return this._proxy.extensions;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            friendlyName: this.friendlyName,
            description: this.description,
            pricingType: this.pricingType,
            configurationSchema: this.configurationSchema,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AvailableAddOnInstance = AvailableAddOnInstance;
function AvailableAddOnListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new AvailableAddOnContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/AvailableAddOns`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AvailableAddOnPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new AvailableAddOnPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class AvailableAddOnPage extends Page_1.default {
    /**
     * Initialize the AvailableAddOnPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of AvailableAddOnInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new AvailableAddOnInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AvailableAddOnPage = AvailableAddOnPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/marketplace/installedAddOn/installedAddOnExtension.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InstalledAddOnExtensionPage = exports.InstalledAddOnExtensionInstance = exports.InstalledAddOnExtensionContextImpl = void 0;
exports.InstalledAddOnExtensionListInstance = InstalledAddOnExtensionListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class InstalledAddOnExtensionContextImpl {
    constructor(_version, installedAddOnSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(installedAddOnSid)) {
            throw new Error("Parameter 'installedAddOnSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            installedAddOnSid,
            sid
        };
        this._uri = `/InstalledAddOns/${installedAddOnSid}/Extensions/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InstalledAddOnExtensionInstance(operationVersion, payload, instance._solution.installedAddOnSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["enabled"] === null || params["enabled"] === undefined) {
            throw new Error("Required parameter \"params['enabled']\" missing.");
        }
        let data = {};
        data["Enabled"] = serialize.bool(params["enabled"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InstalledAddOnExtensionInstance(operationVersion, payload, instance._solution.installedAddOnSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InstalledAddOnExtensionContextImpl = InstalledAddOnExtensionContextImpl;
class InstalledAddOnExtensionInstance {
    constructor(_version, payload, installedAddOnSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.installedAddOnSid = payload.installed_add_on_sid;
        this.friendlyName = payload.friendly_name;
        this.productName = payload.product_name;
        this.uniqueName = payload.unique_name;
        this.enabled = payload.enabled;
        this.url = payload.url;
        this._solution = {
            installedAddOnSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new InstalledAddOnExtensionContextImpl(this._version, this._solution.installedAddOnSid, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a InstalledAddOnExtensionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed InstalledAddOnExtensionInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            installedAddOnSid: this.installedAddOnSid,
            friendlyName: this.friendlyName,
            productName: this.productName,
            uniqueName: this.uniqueName,
            enabled: this.enabled,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InstalledAddOnExtensionInstance = InstalledAddOnExtensionInstance;
function InstalledAddOnExtensionListInstance(version, installedAddOnSid) {
    if (!(0, utility_1.isValidPathParam)(installedAddOnSid)) {
        throw new Error("Parameter 'installedAddOnSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new InstalledAddOnExtensionContextImpl(version, installedAddOnSid, sid);
    };
    instance._version = version;
    instance._solution = {
        installedAddOnSid
    };
    instance._uri = `/InstalledAddOns/${installedAddOnSid}/Extensions`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InstalledAddOnExtensionPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new InstalledAddOnExtensionPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class InstalledAddOnExtensionPage extends Page_1.default {
    /**
     * Initialize the InstalledAddOnExtensionPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of InstalledAddOnExtensionInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new InstalledAddOnExtensionInstance(this._version, payload, this._solution.installedAddOnSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InstalledAddOnExtensionPage = InstalledAddOnExtensionPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/marketplace/installedAddOn.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InstalledAddOnPage = exports.InstalledAddOnInstance = exports.InstalledAddOnContextImpl = void 0;
exports.InstalledAddOnListInstance = InstalledAddOnListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const installedAddOnExtension_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/marketplace/installedAddOn/installedAddOnExtension.js [app-rsc] (ecmascript)");
class InstalledAddOnContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/InstalledAddOns/${sid}`;
    }
    get extensions() {
        this._extensions = this._extensions || (0, installedAddOnExtension_1.InstalledAddOnExtensionListInstance)(this._version, this._solution.sid);
        return this._extensions;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InstalledAddOnInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["configuration"] !== undefined) data["Configuration"] = serialize.object(params["configuration"]);
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InstalledAddOnInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InstalledAddOnContextImpl = InstalledAddOnContextImpl;
class InstalledAddOnInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.description = payload.description;
        this.configuration = payload.configuration;
        this.uniqueName = payload.unique_name;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new InstalledAddOnContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a InstalledAddOnInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a InstalledAddOnInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed InstalledAddOnInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the extensions.
     */ extensions() {
        return this._proxy.extensions;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            description: this.description,
            configuration: this.configuration,
            uniqueName: this.uniqueName,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InstalledAddOnInstance = InstalledAddOnInstance;
function InstalledAddOnListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new InstalledAddOnContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/InstalledAddOns`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["availableAddOnSid"] === null || params["availableAddOnSid"] === undefined) {
            throw new Error("Required parameter \"params['availableAddOnSid']\" missing.");
        }
        if (params["acceptTermsOfService"] === null || params["acceptTermsOfService"] === undefined) {
            throw new Error("Required parameter \"params['acceptTermsOfService']\" missing.");
        }
        let data = {};
        data["AvailableAddOnSid"] = params["availableAddOnSid"];
        data["AcceptTermsOfService"] = serialize.bool(params["acceptTermsOfService"]);
        if (params["configuration"] !== undefined) data["Configuration"] = serialize.object(params["configuration"]);
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InstalledAddOnInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InstalledAddOnPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new InstalledAddOnPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class InstalledAddOnPage extends Page_1.default {
    /**
     * Initialize the InstalledAddOnPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of InstalledAddOnInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new InstalledAddOnInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InstalledAddOnPage = InstalledAddOnPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/Marketplace.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const availableAddOn_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/marketplace/availableAddOn.js [app-rsc] (ecmascript)");
const installedAddOn_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/marketplace/installedAddOn.js [app-rsc] (ecmascript)");
class Marketplace extends Version_1.default {
    /**
     * Initialize the Marketplace version of Preview
     *
     * @param domain - The Twilio (Twilio.Preview) domain
     */ constructor(domain){
        super(domain, "marketplace");
    }
    /** Getter for availableAddOns resource */ get availableAddOns() {
        this._availableAddOns = this._availableAddOns || (0, availableAddOn_1.AvailableAddOnListInstance)(this);
        return this._availableAddOns;
    }
    /** Getter for installedAddOns resource */ get installedAddOns() {
        this._installedAddOns = this._installedAddOns || (0, installedAddOn_1.InstalledAddOnListInstance)(this);
        return this._installedAddOns;
    }
}
exports.default = Marketplace;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/wireless/command.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CommandPage = exports.CommandInstance = exports.CommandContextImpl = void 0;
exports.CommandListInstance = CommandListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class CommandContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Commands/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CommandInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CommandContextImpl = CommandContextImpl;
class CommandInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.deviceSid = payload.device_sid;
        this.simSid = payload.sim_sid;
        this.command = payload.command;
        this.commandMode = payload.command_mode;
        this.status = payload.status;
        this.direction = payload.direction;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new CommandContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a CommandInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed CommandInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            deviceSid: this.deviceSid,
            simSid: this.simSid,
            command: this.command,
            commandMode: this.commandMode,
            status: this.status,
            direction: this.direction,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CommandInstance = CommandInstance;
function CommandListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new CommandContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Commands`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["command"] === null || params["command"] === undefined) {
            throw new Error("Required parameter \"params['command']\" missing.");
        }
        let data = {};
        data["Command"] = params["command"];
        if (params["device"] !== undefined) data["Device"] = params["device"];
        if (params["sim"] !== undefined) data["Sim"] = params["sim"];
        if (params["callbackMethod"] !== undefined) data["CallbackMethod"] = params["callbackMethod"];
        if (params["callbackUrl"] !== undefined) data["CallbackUrl"] = params["callbackUrl"];
        if (params["commandMode"] !== undefined) data["CommandMode"] = params["commandMode"];
        if (params["includeSid"] !== undefined) data["IncludeSid"] = params["includeSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CommandInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["device"] !== undefined) data["Device"] = params["device"];
        if (params["sim"] !== undefined) data["Sim"] = params["sim"];
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["direction"] !== undefined) data["Direction"] = params["direction"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CommandPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new CommandPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class CommandPage extends Page_1.default {
    /**
     * Initialize the CommandPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of CommandInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new CommandInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CommandPage = CommandPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/wireless/ratePlan.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RatePlanPage = exports.RatePlanInstance = exports.RatePlanContextImpl = void 0;
exports.RatePlanListInstance = RatePlanListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class RatePlanContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/RatePlans/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new RatePlanInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new RatePlanInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.RatePlanContextImpl = RatePlanContextImpl;
class RatePlanInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.uniqueName = payload.unique_name;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.dataEnabled = payload.data_enabled;
        this.dataMetering = payload.data_metering;
        this.dataLimit = deserialize.integer(payload.data_limit);
        this.messagingEnabled = payload.messaging_enabled;
        this.voiceEnabled = payload.voice_enabled;
        this.nationalRoamingEnabled = payload.national_roaming_enabled;
        this.internationalRoaming = payload.international_roaming;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new RatePlanContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a RatePlanInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a RatePlanInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed RatePlanInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            uniqueName: this.uniqueName,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            dataEnabled: this.dataEnabled,
            dataMetering: this.dataMetering,
            dataLimit: this.dataLimit,
            messagingEnabled: this.messagingEnabled,
            voiceEnabled: this.voiceEnabled,
            nationalRoamingEnabled: this.nationalRoamingEnabled,
            internationalRoaming: this.internationalRoaming,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.RatePlanInstance = RatePlanInstance;
function RatePlanListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new RatePlanContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/RatePlans`;
    instance.create = function create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["dataEnabled"] !== undefined) data["DataEnabled"] = serialize.bool(params["dataEnabled"]);
        if (params["dataLimit"] !== undefined) data["DataLimit"] = params["dataLimit"];
        if (params["dataMetering"] !== undefined) data["DataMetering"] = params["dataMetering"];
        if (params["messagingEnabled"] !== undefined) data["MessagingEnabled"] = serialize.bool(params["messagingEnabled"]);
        if (params["voiceEnabled"] !== undefined) data["VoiceEnabled"] = serialize.bool(params["voiceEnabled"]);
        if (params["commandsEnabled"] !== undefined) data["CommandsEnabled"] = serialize.bool(params["commandsEnabled"]);
        if (params["nationalRoamingEnabled"] !== undefined) data["NationalRoamingEnabled"] = serialize.bool(params["nationalRoamingEnabled"]);
        if (params["internationalRoaming"] !== undefined) data["InternationalRoaming"] = serialize.map(params["internationalRoaming"], (e)=>e);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new RatePlanInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new RatePlanPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new RatePlanPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class RatePlanPage extends Page_1.default {
    /**
     * Initialize the RatePlanPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of RatePlanInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new RatePlanInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.RatePlanPage = RatePlanPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/wireless/sim/usage.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UsageInstance = exports.UsageContextImpl = void 0;
exports.UsageListInstance = UsageListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class UsageContextImpl {
    constructor(_version, simSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(simSid)) {
            throw new Error("Parameter 'simSid' is not valid.");
        }
        this._solution = {
            simSid
        };
        this._uri = `/Sims/${simSid}/Usage`;
    }
    fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["end"] !== undefined) data["End"] = params["end"];
        if (params["start"] !== undefined) data["Start"] = params["start"];
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new UsageInstance(operationVersion, payload, instance._solution.simSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.UsageContextImpl = UsageContextImpl;
class UsageInstance {
    constructor(_version, payload, simSid){
        this._version = _version;
        this.simSid = payload.sim_sid;
        this.simUniqueName = payload.sim_unique_name;
        this.accountSid = payload.account_sid;
        this.period = payload.period;
        this.commandsUsage = payload.commands_usage;
        this.commandsCosts = payload.commands_costs;
        this.dataUsage = payload.data_usage;
        this.dataCosts = payload.data_costs;
        this.url = payload.url;
        this._solution = {
            simSid
        };
    }
    get _proxy() {
        this._context = this._context || new UsageContextImpl(this._version, this._solution.simSid);
        return this._context;
    }
    fetch(params, callback) {
        return this._proxy.fetch(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            simSid: this.simSid,
            simUniqueName: this.simUniqueName,
            accountSid: this.accountSid,
            period: this.period,
            commandsUsage: this.commandsUsage,
            commandsCosts: this.commandsCosts,
            dataUsage: this.dataUsage,
            dataCosts: this.dataCosts,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.UsageInstance = UsageInstance;
function UsageListInstance(version, simSid) {
    if (!(0, utility_1.isValidPathParam)(simSid)) {
        throw new Error("Parameter 'simSid' is not valid.");
    }
    const instance = ()=>instance.get();
    instance.get = function get() {
        return new UsageContextImpl(version, simSid);
    };
    instance._version = version;
    instance._solution = {
        simSid
    };
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/wireless/sim.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SimPage = exports.SimInstance = exports.SimContextImpl = void 0;
exports.SimListInstance = SimListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const usage_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/wireless/sim/usage.js [app-rsc] (ecmascript)");
class SimContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Sims/${sid}`;
    }
    get usage() {
        this._usage = this._usage || (0, usage_1.UsageListInstance)(this._version, this._solution.sid);
        return this._usage;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SimInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        if (params["callbackMethod"] !== undefined) data["CallbackMethod"] = params["callbackMethod"];
        if (params["callbackUrl"] !== undefined) data["CallbackUrl"] = params["callbackUrl"];
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["ratePlan"] !== undefined) data["RatePlan"] = params["ratePlan"];
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["commandsCallbackMethod"] !== undefined) data["CommandsCallbackMethod"] = params["commandsCallbackMethod"];
        if (params["commandsCallbackUrl"] !== undefined) data["CommandsCallbackUrl"] = params["commandsCallbackUrl"];
        if (params["smsFallbackMethod"] !== undefined) data["SmsFallbackMethod"] = params["smsFallbackMethod"];
        if (params["smsFallbackUrl"] !== undefined) data["SmsFallbackUrl"] = params["smsFallbackUrl"];
        if (params["smsMethod"] !== undefined) data["SmsMethod"] = params["smsMethod"];
        if (params["smsUrl"] !== undefined) data["SmsUrl"] = params["smsUrl"];
        if (params["voiceFallbackMethod"] !== undefined) data["VoiceFallbackMethod"] = params["voiceFallbackMethod"];
        if (params["voiceFallbackUrl"] !== undefined) data["VoiceFallbackUrl"] = params["voiceFallbackUrl"];
        if (params["voiceMethod"] !== undefined) data["VoiceMethod"] = params["voiceMethod"];
        if (params["voiceUrl"] !== undefined) data["VoiceUrl"] = params["voiceUrl"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SimInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SimContextImpl = SimContextImpl;
class SimInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.uniqueName = payload.unique_name;
        this.accountSid = payload.account_sid;
        this.ratePlanSid = payload.rate_plan_sid;
        this.friendlyName = payload.friendly_name;
        this.iccid = payload.iccid;
        this.eId = payload.e_id;
        this.status = payload.status;
        this.commandsCallbackUrl = payload.commands_callback_url;
        this.commandsCallbackMethod = payload.commands_callback_method;
        this.smsFallbackMethod = payload.sms_fallback_method;
        this.smsFallbackUrl = payload.sms_fallback_url;
        this.smsMethod = payload.sms_method;
        this.smsUrl = payload.sms_url;
        this.voiceFallbackMethod = payload.voice_fallback_method;
        this.voiceFallbackUrl = payload.voice_fallback_url;
        this.voiceMethod = payload.voice_method;
        this.voiceUrl = payload.voice_url;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new SimContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a SimInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed SimInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the usage.
     */ usage() {
        return this._proxy.usage;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            uniqueName: this.uniqueName,
            accountSid: this.accountSid,
            ratePlanSid: this.ratePlanSid,
            friendlyName: this.friendlyName,
            iccid: this.iccid,
            eId: this.eId,
            status: this.status,
            commandsCallbackUrl: this.commandsCallbackUrl,
            commandsCallbackMethod: this.commandsCallbackMethod,
            smsFallbackMethod: this.smsFallbackMethod,
            smsFallbackUrl: this.smsFallbackUrl,
            smsMethod: this.smsMethod,
            smsUrl: this.smsUrl,
            voiceFallbackMethod: this.voiceFallbackMethod,
            voiceFallbackUrl: this.voiceFallbackUrl,
            voiceMethod: this.voiceMethod,
            voiceUrl: this.voiceUrl,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SimInstance = SimInstance;
function SimListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new SimContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Sims`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["iccid"] !== undefined) data["Iccid"] = params["iccid"];
        if (params["ratePlan"] !== undefined) data["RatePlan"] = params["ratePlan"];
        if (params["eId"] !== undefined) data["EId"] = params["eId"];
        if (params["simRegistrationCode"] !== undefined) data["SimRegistrationCode"] = params["simRegistrationCode"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SimPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new SimPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SimPage extends Page_1.default {
    /**
     * Initialize the SimPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of SimInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new SimInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SimPage = SimPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/Wireless.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Preview
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const command_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/wireless/command.js [app-rsc] (ecmascript)");
const ratePlan_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/wireless/ratePlan.js [app-rsc] (ecmascript)");
const sim_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/wireless/sim.js [app-rsc] (ecmascript)");
class Wireless extends Version_1.default {
    /**
     * Initialize the Wireless version of Preview
     *
     * @param domain - The Twilio (Twilio.Preview) domain
     */ constructor(domain){
        super(domain, "wireless");
    }
    /** Getter for commands resource */ get commands() {
        this._commands = this._commands || (0, command_1.CommandListInstance)(this);
        return this._commands;
    }
    /** Getter for ratePlans resource */ get ratePlans() {
        this._ratePlans = this._ratePlans || (0, ratePlan_1.RatePlanListInstance)(this);
        return this._ratePlans;
    }
    /** Getter for sims resource */ get sims() {
        this._sims = this._sims || (0, sim_1.SimListInstance)(this);
        return this._sims;
    }
}
exports.default = Wireless;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/PreviewBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const HostedNumbers_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/HostedNumbers.js [app-rsc] (ecmascript)"));
const Marketplace_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/Marketplace.js [app-rsc] (ecmascript)"));
const Wireless_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/preview/Wireless.js [app-rsc] (ecmascript)"));
class PreviewBase extends Domain_1.default {
    /**
     * Initialize preview domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://preview.twilio.com");
    }
    get hosted_numbers() {
        this._hosted_numbers = this._hosted_numbers || new HostedNumbers_1.default(this);
        return this._hosted_numbers;
    }
    get marketplace() {
        this._marketplace = this._marketplace || new Marketplace_1.default(this);
        return this._marketplace;
    }
    get wireless() {
        this._wireless = this._wireless || new Wireless_1.default(this);
        return this._wireless;
    }
}
module.exports = PreviewBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Preview.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const PreviewBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/PreviewBase.js [app-rsc] (ecmascript)"));
class Preview extends PreviewBase_1.default {
    /**
     * @deprecated - Use hosted_numbers.authorizationDocuments instead
     */ get authorizationDocuments() {
        console.warn("authorizationDocuments is deprecated. Use hosted_numbers.authorizationDocuments instead.");
        return this.hosted_numbers.authorizationDocuments;
    }
    /**
     * @deprecated - Use hosted_numbers.hostedNumberOrders instead
     */ get hostedNumberOrders() {
        console.warn("hostedNumberOrders is deprecated. Use hosted_numbers.hostedNumberOrders instead.");
        return this.hosted_numbers.hostedNumberOrders;
    }
    /**
     * @deprecated - Use marketplace.availableAddOns instead
     */ get availableAddOns() {
        console.warn("availableAddOns is deprecated. Use marketplace.availableAddOns instead.");
        return this.marketplace.availableAddOns;
    }
    /**
     * @deprecated - Use marketplace.installedAddOns instead
     */ get installedAddOns() {
        console.warn("installedAddOns is deprecated. Use marketplace.installedAddOns instead.");
        return this.marketplace.installedAddOns;
    }
    /**
     * @deprecated - Use wireless.commands instead
     */ get commands() {
        console.warn("commands is deprecated. Use wireless.commands instead.");
        return this.wireless.commands;
    }
    /**
     * @deprecated - Use wireless.ratePlans instead
     */ get ratePlans() {
        console.warn("ratePlans is deprecated. Use wireless.ratePlans instead.");
        return this.wireless.ratePlans;
    }
    /**
     * @deprecated - Use wireless.sims instead
     */ get sims() {
        console.warn("sims is deprecated. Use wireless.sims instead.");
        return this.wireless.sims;
    }
}
module.exports = Preview;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v1/messaging/country.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Pricing
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CountryPage = exports.CountryInstance = exports.CountryContextImpl = exports.PricingV1MessagingMessagingCountryInstanceOutboundSmsPricesPrices = exports.PricingV1MessagingMessagingCountryInstanceOutboundSmsPrices = exports.PricingV1MessagingMessagingCountryInstanceInboundSmsPrices = void 0;
exports.CountryListInstance = CountryListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class PricingV1MessagingMessagingCountryInstanceInboundSmsPrices {
}
exports.PricingV1MessagingMessagingCountryInstanceInboundSmsPrices = PricingV1MessagingMessagingCountryInstanceInboundSmsPrices;
class PricingV1MessagingMessagingCountryInstanceOutboundSmsPrices {
}
exports.PricingV1MessagingMessagingCountryInstanceOutboundSmsPrices = PricingV1MessagingMessagingCountryInstanceOutboundSmsPrices;
class PricingV1MessagingMessagingCountryInstanceOutboundSmsPricesPrices {
}
exports.PricingV1MessagingMessagingCountryInstanceOutboundSmsPricesPrices = PricingV1MessagingMessagingCountryInstanceOutboundSmsPricesPrices;
class CountryContextImpl {
    constructor(_version, isoCountry){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(isoCountry)) {
            throw new Error("Parameter 'isoCountry' is not valid.");
        }
        this._solution = {
            isoCountry
        };
        this._uri = `/Messaging/Countries/${isoCountry}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CountryInstance(operationVersion, payload, instance._solution.isoCountry));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CountryContextImpl = CountryContextImpl;
class CountryInstance {
    constructor(_version, payload, isoCountry){
        this._version = _version;
        this.country = payload.country;
        this.isoCountry = payload.iso_country;
        this.outboundSmsPrices = payload.outbound_sms_prices;
        this.inboundSmsPrices = payload.inbound_sms_prices;
        this.priceUnit = payload.price_unit;
        this.url = payload.url;
        this._solution = {
            isoCountry: isoCountry || this.isoCountry
        };
    }
    get _proxy() {
        this._context = this._context || new CountryContextImpl(this._version, this._solution.isoCountry);
        return this._context;
    }
    /**
     * Fetch a CountryInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed CountryInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            country: this.country,
            isoCountry: this.isoCountry,
            outboundSmsPrices: this.outboundSmsPrices,
            inboundSmsPrices: this.inboundSmsPrices,
            priceUnit: this.priceUnit,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CountryInstance = CountryInstance;
function CountryListInstance(version) {
    const instance = (isoCountry)=>instance.get(isoCountry);
    instance.get = function get(isoCountry) {
        return new CountryContextImpl(version, isoCountry);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Messaging/Countries`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CountryPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new CountryPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class CountryPage extends Page_1.default {
    /**
     * Initialize the CountryPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of CountryInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new CountryInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CountryPage = CountryPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v1/messaging.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Pricing
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MessagingListInstance = MessagingListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const country_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v1/messaging/country.js [app-rsc] (ecmascript)");
function MessagingListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Messaging`;
    Object.defineProperty(instance, "countries", {
        get: function countries() {
            if (!instance._countries) {
                instance._countries = (0, country_1.CountryListInstance)(instance._version);
            }
            return instance._countries;
        }
    });
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v1/phoneNumber/country.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Pricing
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CountryPage = exports.CountryInstance = exports.CountryContextImpl = exports.PricingV1PhoneNumberPhoneNumberCountryInstancePhoneNumberPrices = void 0;
exports.CountryListInstance = CountryListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class PricingV1PhoneNumberPhoneNumberCountryInstancePhoneNumberPrices {
}
exports.PricingV1PhoneNumberPhoneNumberCountryInstancePhoneNumberPrices = PricingV1PhoneNumberPhoneNumberCountryInstancePhoneNumberPrices;
class CountryContextImpl {
    constructor(_version, isoCountry){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(isoCountry)) {
            throw new Error("Parameter 'isoCountry' is not valid.");
        }
        this._solution = {
            isoCountry
        };
        this._uri = `/PhoneNumbers/Countries/${isoCountry}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CountryInstance(operationVersion, payload, instance._solution.isoCountry));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CountryContextImpl = CountryContextImpl;
class CountryInstance {
    constructor(_version, payload, isoCountry){
        this._version = _version;
        this.country = payload.country;
        this.isoCountry = payload.iso_country;
        this.phoneNumberPrices = payload.phone_number_prices;
        this.priceUnit = payload.price_unit;
        this.url = payload.url;
        this._solution = {
            isoCountry: isoCountry || this.isoCountry
        };
    }
    get _proxy() {
        this._context = this._context || new CountryContextImpl(this._version, this._solution.isoCountry);
        return this._context;
    }
    /**
     * Fetch a CountryInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed CountryInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            country: this.country,
            isoCountry: this.isoCountry,
            phoneNumberPrices: this.phoneNumberPrices,
            priceUnit: this.priceUnit,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CountryInstance = CountryInstance;
function CountryListInstance(version) {
    const instance = (isoCountry)=>instance.get(isoCountry);
    instance.get = function get(isoCountry) {
        return new CountryContextImpl(version, isoCountry);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/PhoneNumbers/Countries`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CountryPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new CountryPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class CountryPage extends Page_1.default {
    /**
     * Initialize the CountryPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of CountryInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new CountryInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CountryPage = CountryPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v1/phoneNumber.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Pricing
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PhoneNumberListInstance = PhoneNumberListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const country_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v1/phoneNumber/country.js [app-rsc] (ecmascript)");
function PhoneNumberListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/PhoneNumbers`;
    Object.defineProperty(instance, "countries", {
        get: function countries() {
            if (!instance._countries) {
                instance._countries = (0, country_1.CountryListInstance)(instance._version);
            }
            return instance._countries;
        }
    });
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v1/voice/country.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Pricing
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CountryPage = exports.CountryInstance = exports.CountryContextImpl = exports.PricingV1VoiceVoiceCountryInstanceOutboundPrefixPrices = exports.PricingV1VoiceVoiceCountryInstanceInboundCallPrices = void 0;
exports.CountryListInstance = CountryListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class PricingV1VoiceVoiceCountryInstanceInboundCallPrices {
}
exports.PricingV1VoiceVoiceCountryInstanceInboundCallPrices = PricingV1VoiceVoiceCountryInstanceInboundCallPrices;
class PricingV1VoiceVoiceCountryInstanceOutboundPrefixPrices {
}
exports.PricingV1VoiceVoiceCountryInstanceOutboundPrefixPrices = PricingV1VoiceVoiceCountryInstanceOutboundPrefixPrices;
class CountryContextImpl {
    constructor(_version, isoCountry){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(isoCountry)) {
            throw new Error("Parameter 'isoCountry' is not valid.");
        }
        this._solution = {
            isoCountry
        };
        this._uri = `/Voice/Countries/${isoCountry}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CountryInstance(operationVersion, payload, instance._solution.isoCountry));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CountryContextImpl = CountryContextImpl;
class CountryInstance {
    constructor(_version, payload, isoCountry){
        this._version = _version;
        this.country = payload.country;
        this.isoCountry = payload.iso_country;
        this.outboundPrefixPrices = payload.outbound_prefix_prices;
        this.inboundCallPrices = payload.inbound_call_prices;
        this.priceUnit = payload.price_unit;
        this.url = payload.url;
        this._solution = {
            isoCountry: isoCountry || this.isoCountry
        };
    }
    get _proxy() {
        this._context = this._context || new CountryContextImpl(this._version, this._solution.isoCountry);
        return this._context;
    }
    /**
     * Fetch a CountryInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed CountryInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            country: this.country,
            isoCountry: this.isoCountry,
            outboundPrefixPrices: this.outboundPrefixPrices,
            inboundCallPrices: this.inboundCallPrices,
            priceUnit: this.priceUnit,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CountryInstance = CountryInstance;
function CountryListInstance(version) {
    const instance = (isoCountry)=>instance.get(isoCountry);
    instance.get = function get(isoCountry) {
        return new CountryContextImpl(version, isoCountry);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Voice/Countries`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CountryPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new CountryPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class CountryPage extends Page_1.default {
    /**
     * Initialize the CountryPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of CountryInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new CountryInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CountryPage = CountryPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v1/voice/number.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Pricing
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NumberInstance = exports.NumberContextImpl = exports.PricingV1VoiceVoiceNumberOutboundCallPrice = exports.PricingV1VoiceVoiceNumberInboundCallPrice = void 0;
exports.NumberListInstance = NumberListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
/**
 * The [InboundCallPrice](https://www.twilio.com/docs/voice/pricing#inbound-call-price) record. If `null`, the Phone Number is not a Twilio number owned by this account.
 */ class PricingV1VoiceVoiceNumberInboundCallPrice {
}
exports.PricingV1VoiceVoiceNumberInboundCallPrice = PricingV1VoiceVoiceNumberInboundCallPrice;
/**
 * The OutboundCallPrice record, which includes a list of `origination_prefixes` and the `base_price` and `current_price` for those prefixes.
 */ class PricingV1VoiceVoiceNumberOutboundCallPrice {
}
exports.PricingV1VoiceVoiceNumberOutboundCallPrice = PricingV1VoiceVoiceNumberOutboundCallPrice;
class NumberContextImpl {
    constructor(_version, number){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(number)) {
            throw new Error("Parameter 'number' is not valid.");
        }
        this._solution = {
            number
        };
        this._uri = `/Voice/Numbers/${number}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new NumberInstance(operationVersion, payload, instance._solution.number));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.NumberContextImpl = NumberContextImpl;
class NumberInstance {
    constructor(_version, payload, number){
        this._version = _version;
        this.number = payload.number;
        this.country = payload.country;
        this.isoCountry = payload.iso_country;
        this.outboundCallPrice = payload.outbound_call_price;
        this.inboundCallPrice = payload.inbound_call_price;
        this.priceUnit = payload.price_unit;
        this.url = payload.url;
        this._solution = {
            number: number || this.number
        };
    }
    get _proxy() {
        this._context = this._context || new NumberContextImpl(this._version, this._solution.number);
        return this._context;
    }
    /**
     * Fetch a NumberInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed NumberInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            number: this.number,
            country: this.country,
            isoCountry: this.isoCountry,
            outboundCallPrice: this.outboundCallPrice,
            inboundCallPrice: this.inboundCallPrice,
            priceUnit: this.priceUnit,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.NumberInstance = NumberInstance;
function NumberListInstance(version) {
    const instance = (number)=>instance.get(number);
    instance.get = function get(number) {
        return new NumberContextImpl(version, number);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v1/voice.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Pricing
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.VoiceListInstance = VoiceListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const country_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v1/voice/country.js [app-rsc] (ecmascript)");
const number_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v1/voice/number.js [app-rsc] (ecmascript)");
function VoiceListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Voice`;
    Object.defineProperty(instance, "countries", {
        get: function countries() {
            if (!instance._countries) {
                instance._countries = (0, country_1.CountryListInstance)(instance._version);
            }
            return instance._countries;
        }
    });
    Object.defineProperty(instance, "numbers", {
        get: function numbers() {
            if (!instance._numbers) {
                instance._numbers = (0, number_1.NumberListInstance)(instance._version);
            }
            return instance._numbers;
        }
    });
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Pricing
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const messaging_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v1/messaging.js [app-rsc] (ecmascript)");
const phoneNumber_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v1/phoneNumber.js [app-rsc] (ecmascript)");
const voice_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v1/voice.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of Pricing
     *
     * @param domain - The Twilio (Twilio.Pricing) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for messaging resource */ get messaging() {
        this._messaging = this._messaging || (0, messaging_1.MessagingListInstance)(this);
        return this._messaging;
    }
    /** Getter for phoneNumbers resource */ get phoneNumbers() {
        this._phoneNumbers = this._phoneNumbers || (0, phoneNumber_1.PhoneNumberListInstance)(this);
        return this._phoneNumbers;
    }
    /** Getter for voice resource */ get voice() {
        this._voice = this._voice || (0, voice_1.VoiceListInstance)(this);
        return this._voice;
    }
}
exports.default = V1;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v2/country.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Pricing
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CountryPage = exports.CountryInstance = exports.CountryContextImpl = exports.PricingV2TrunkingCountryInstanceTerminatingPrefixPrices = exports.PricingV2TrunkingCountryInstanceOriginatingCallPrices = void 0;
exports.CountryListInstance = CountryListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class PricingV2TrunkingCountryInstanceOriginatingCallPrices {
}
exports.PricingV2TrunkingCountryInstanceOriginatingCallPrices = PricingV2TrunkingCountryInstanceOriginatingCallPrices;
class PricingV2TrunkingCountryInstanceTerminatingPrefixPrices {
}
exports.PricingV2TrunkingCountryInstanceTerminatingPrefixPrices = PricingV2TrunkingCountryInstanceTerminatingPrefixPrices;
class CountryContextImpl {
    constructor(_version, isoCountry){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(isoCountry)) {
            throw new Error("Parameter 'isoCountry' is not valid.");
        }
        this._solution = {
            isoCountry
        };
        this._uri = `/Trunking/Countries/${isoCountry}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CountryInstance(operationVersion, payload, instance._solution.isoCountry));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CountryContextImpl = CountryContextImpl;
class CountryInstance {
    constructor(_version, payload, isoCountry){
        this._version = _version;
        this.country = payload.country;
        this.isoCountry = payload.iso_country;
        this.terminatingPrefixPrices = payload.terminating_prefix_prices;
        this.originatingCallPrices = payload.originating_call_prices;
        this.priceUnit = payload.price_unit;
        this.url = payload.url;
        this._solution = {
            isoCountry: isoCountry || this.isoCountry
        };
    }
    get _proxy() {
        this._context = this._context || new CountryContextImpl(this._version, this._solution.isoCountry);
        return this._context;
    }
    /**
     * Fetch a CountryInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed CountryInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            country: this.country,
            isoCountry: this.isoCountry,
            terminatingPrefixPrices: this.terminatingPrefixPrices,
            originatingCallPrices: this.originatingCallPrices,
            priceUnit: this.priceUnit,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CountryInstance = CountryInstance;
function CountryListInstance(version) {
    const instance = (isoCountry)=>instance.get(isoCountry);
    instance.get = function get(isoCountry) {
        return new CountryContextImpl(version, isoCountry);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Trunking/Countries`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CountryPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new CountryPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class CountryPage extends Page_1.default {
    /**
     * Initialize the CountryPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of CountryInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new CountryInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CountryPage = CountryPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v2/number.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Pricing
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NumberInstance = exports.NumberContextImpl = exports.PricingV2TrunkingNumberOriginatingCallPrice = exports.PricingV2TrunkingCountryInstanceTerminatingPrefixPrices = void 0;
exports.NumberListInstance = NumberListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class PricingV2TrunkingCountryInstanceTerminatingPrefixPrices {
}
exports.PricingV2TrunkingCountryInstanceTerminatingPrefixPrices = PricingV2TrunkingCountryInstanceTerminatingPrefixPrices;
/**
 * The [OriginatingCallPrice](https://www.twilio.com/docs/voice/pricing#inbound-call-price) record.
 */ class PricingV2TrunkingNumberOriginatingCallPrice {
}
exports.PricingV2TrunkingNumberOriginatingCallPrice = PricingV2TrunkingNumberOriginatingCallPrice;
class NumberContextImpl {
    constructor(_version, destinationNumber){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(destinationNumber)) {
            throw new Error("Parameter 'destinationNumber' is not valid.");
        }
        this._solution = {
            destinationNumber
        };
        this._uri = `/Trunking/Numbers/${destinationNumber}`;
    }
    fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["originationNumber"] !== undefined) data["OriginationNumber"] = params["originationNumber"];
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new NumberInstance(operationVersion, payload, instance._solution.destinationNumber));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.NumberContextImpl = NumberContextImpl;
class NumberInstance {
    constructor(_version, payload, destinationNumber){
        this._version = _version;
        this.destinationNumber = payload.destination_number;
        this.originationNumber = payload.origination_number;
        this.country = payload.country;
        this.isoCountry = payload.iso_country;
        this.terminatingPrefixPrices = payload.terminating_prefix_prices;
        this.originatingCallPrice = payload.originating_call_price;
        this.priceUnit = payload.price_unit;
        this.url = payload.url;
        this._solution = {
            destinationNumber: destinationNumber || this.destinationNumber
        };
    }
    get _proxy() {
        this._context = this._context || new NumberContextImpl(this._version, this._solution.destinationNumber);
        return this._context;
    }
    fetch(params, callback) {
        return this._proxy.fetch(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            destinationNumber: this.destinationNumber,
            originationNumber: this.originationNumber,
            country: this.country,
            isoCountry: this.isoCountry,
            terminatingPrefixPrices: this.terminatingPrefixPrices,
            originatingCallPrice: this.originatingCallPrice,
            priceUnit: this.priceUnit,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.NumberInstance = NumberInstance;
function NumberListInstance(version) {
    const instance = (destinationNumber)=>instance.get(destinationNumber);
    instance.get = function get(destinationNumber) {
        return new NumberContextImpl(version, destinationNumber);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v2/voice/country.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Pricing
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CountryPage = exports.CountryInstance = exports.CountryContextImpl = exports.PricingV2TrunkingCountryInstanceTerminatingPrefixPrices = exports.PricingV2TrunkingCountryInstanceOriginatingCallPrices = void 0;
exports.CountryListInstance = CountryListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class PricingV2TrunkingCountryInstanceOriginatingCallPrices {
}
exports.PricingV2TrunkingCountryInstanceOriginatingCallPrices = PricingV2TrunkingCountryInstanceOriginatingCallPrices;
class PricingV2TrunkingCountryInstanceTerminatingPrefixPrices {
}
exports.PricingV2TrunkingCountryInstanceTerminatingPrefixPrices = PricingV2TrunkingCountryInstanceTerminatingPrefixPrices;
class CountryContextImpl {
    constructor(_version, isoCountry){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(isoCountry)) {
            throw new Error("Parameter 'isoCountry' is not valid.");
        }
        this._solution = {
            isoCountry
        };
        this._uri = `/Voice/Countries/${isoCountry}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CountryInstance(operationVersion, payload, instance._solution.isoCountry));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CountryContextImpl = CountryContextImpl;
class CountryInstance {
    constructor(_version, payload, isoCountry){
        this._version = _version;
        this.country = payload.country;
        this.isoCountry = payload.iso_country;
        this.outboundPrefixPrices = payload.outbound_prefix_prices;
        this.inboundCallPrices = payload.inbound_call_prices;
        this.priceUnit = payload.price_unit;
        this.url = payload.url;
        this._solution = {
            isoCountry: isoCountry || this.isoCountry
        };
    }
    get _proxy() {
        this._context = this._context || new CountryContextImpl(this._version, this._solution.isoCountry);
        return this._context;
    }
    /**
     * Fetch a CountryInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed CountryInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            country: this.country,
            isoCountry: this.isoCountry,
            outboundPrefixPrices: this.outboundPrefixPrices,
            inboundCallPrices: this.inboundCallPrices,
            priceUnit: this.priceUnit,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CountryInstance = CountryInstance;
function CountryListInstance(version) {
    const instance = (isoCountry)=>instance.get(isoCountry);
    instance.get = function get(isoCountry) {
        return new CountryContextImpl(version, isoCountry);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Voice/Countries`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CountryPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new CountryPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class CountryPage extends Page_1.default {
    /**
     * Initialize the CountryPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of CountryInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new CountryInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CountryPage = CountryPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v2/voice/number.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Pricing
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NumberInstance = exports.NumberContextImpl = exports.PricingV2VoiceVoiceNumberOutboundCallPrices = exports.PricingV2VoiceVoiceNumberInboundCallPrice = void 0;
exports.NumberListInstance = NumberListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
/**
 * The [InboundCallPrice](https://www.twilio.com/docs/voice/pricing#inbound-call-price) record.
 */ class PricingV2VoiceVoiceNumberInboundCallPrice {
}
exports.PricingV2VoiceVoiceNumberInboundCallPrice = PricingV2VoiceVoiceNumberInboundCallPrice;
class PricingV2VoiceVoiceNumberOutboundCallPrices {
}
exports.PricingV2VoiceVoiceNumberOutboundCallPrices = PricingV2VoiceVoiceNumberOutboundCallPrices;
class NumberContextImpl {
    constructor(_version, destinationNumber){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(destinationNumber)) {
            throw new Error("Parameter 'destinationNumber' is not valid.");
        }
        this._solution = {
            destinationNumber
        };
        this._uri = `/Voice/Numbers/${destinationNumber}`;
    }
    fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["originationNumber"] !== undefined) data["OriginationNumber"] = params["originationNumber"];
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new NumberInstance(operationVersion, payload, instance._solution.destinationNumber));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.NumberContextImpl = NumberContextImpl;
class NumberInstance {
    constructor(_version, payload, destinationNumber){
        this._version = _version;
        this.destinationNumber = payload.destination_number;
        this.originationNumber = payload.origination_number;
        this.country = payload.country;
        this.isoCountry = payload.iso_country;
        this.outboundCallPrices = payload.outbound_call_prices;
        this.inboundCallPrice = payload.inbound_call_price;
        this.priceUnit = payload.price_unit;
        this.url = payload.url;
        this._solution = {
            destinationNumber: destinationNumber || this.destinationNumber
        };
    }
    get _proxy() {
        this._context = this._context || new NumberContextImpl(this._version, this._solution.destinationNumber);
        return this._context;
    }
    fetch(params, callback) {
        return this._proxy.fetch(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            destinationNumber: this.destinationNumber,
            originationNumber: this.originationNumber,
            country: this.country,
            isoCountry: this.isoCountry,
            outboundCallPrices: this.outboundCallPrices,
            inboundCallPrice: this.inboundCallPrice,
            priceUnit: this.priceUnit,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.NumberInstance = NumberInstance;
function NumberListInstance(version) {
    const instance = (destinationNumber)=>instance.get(destinationNumber);
    instance.get = function get(destinationNumber) {
        return new NumberContextImpl(version, destinationNumber);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v2/voice.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Pricing
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.VoiceListInstance = VoiceListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const country_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v2/voice/country.js [app-rsc] (ecmascript)");
const number_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v2/voice/number.js [app-rsc] (ecmascript)");
function VoiceListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Voice`;
    Object.defineProperty(instance, "countries", {
        get: function countries() {
            if (!instance._countries) {
                instance._countries = (0, country_1.CountryListInstance)(instance._version);
            }
            return instance._countries;
        }
    });
    Object.defineProperty(instance, "numbers", {
        get: function numbers() {
            if (!instance._numbers) {
                instance._numbers = (0, number_1.NumberListInstance)(instance._version);
            }
            return instance._numbers;
        }
    });
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/V2.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Pricing
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const country_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v2/country.js [app-rsc] (ecmascript)");
const number_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v2/number.js [app-rsc] (ecmascript)");
const voice_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/v2/voice.js [app-rsc] (ecmascript)");
class V2 extends Version_1.default {
    /**
     * Initialize the V2 version of Pricing
     *
     * @param domain - The Twilio (Twilio.Pricing) domain
     */ constructor(domain){
        super(domain, "v2");
    }
    /** Getter for countries resource */ get countries() {
        this._countries = this._countries || (0, country_1.CountryListInstance)(this);
        return this._countries;
    }
    /** Getter for numbers resource */ get numbers() {
        this._numbers = this._numbers || (0, number_1.NumberListInstance)(this);
        return this._numbers;
    }
    /** Getter for voice resource */ get voice() {
        this._voice = this._voice || (0, voice_1.VoiceListInstance)(this);
        return this._voice;
    }
}
exports.default = V2;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/PricingBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/V1.js [app-rsc] (ecmascript)"));
const V2_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/pricing/V2.js [app-rsc] (ecmascript)"));
class PricingBase extends Domain_1.default {
    /**
     * Initialize pricing domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://pricing.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
    get v2() {
        this._v2 = this._v2 || new V2_1.default(this);
        return this._v2;
    }
}
module.exports = PricingBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Pricing.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const PricingBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/PricingBase.js [app-rsc] (ecmascript)"));
class Pricing extends PricingBase_1.default {
    /**
     * @deprecated - Use v1.messaging instead
     */ get messaging() {
        console.warn("messaging is deprecated. Use v1.messaging instead.");
        return this.v1.messaging;
    }
    /**
     * @deprecated - Use v1.phoneNumbers instead
     */ get phoneNumbers() {
        console.warn("phoneNumbers is deprecated. Use v1.phoneNumbers instead.");
        return this.v1.phoneNumbers;
    }
    /**
     * @deprecated - Use v2.voice instead
     */ get voice() {
        console.warn("voice is deprecated. Use v2.voice instead.");
        return this.v2.voice;
    }
    /**
     * @deprecated - Use v2.countries instead
     */ get countries() {
        console.warn("countries is deprecated. Use v2.countries instead.");
        return this.v2.countries;
    }
    /**
     * @deprecated - Use v2.numbers instead
     */ get numbers() {
        console.warn("numbers is deprecated. Use v2.numbers instead.");
        return this.v2.numbers;
    }
}
module.exports = Pricing;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/proxy/v1/service/phoneNumber.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Proxy
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PhoneNumberPage = exports.PhoneNumberInstance = exports.PhoneNumberContextImpl = void 0;
exports.PhoneNumberListInstance = PhoneNumberListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class PhoneNumberContextImpl {
    constructor(_version, serviceSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/PhoneNumbers/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PhoneNumberInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["isReserved"] !== undefined) data["IsReserved"] = serialize.bool(params["isReserved"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PhoneNumberInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PhoneNumberContextImpl = PhoneNumberContextImpl;
class PhoneNumberInstance {
    constructor(_version, payload, serviceSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.phoneNumber = payload.phone_number;
        this.friendlyName = payload.friendly_name;
        this.isoCountry = payload.iso_country;
        this.capabilities = payload.capabilities;
        this.url = payload.url;
        this.isReserved = payload.is_reserved;
        this.inUse = deserialize.integer(payload.in_use);
        this._solution = {
            serviceSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new PhoneNumberContextImpl(this._version, this._solution.serviceSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a PhoneNumberInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a PhoneNumberInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed PhoneNumberInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            phoneNumber: this.phoneNumber,
            friendlyName: this.friendlyName,
            isoCountry: this.isoCountry,
            capabilities: this.capabilities,
            url: this.url,
            isReserved: this.isReserved,
            inUse: this.inUse
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PhoneNumberInstance = PhoneNumberInstance;
function PhoneNumberListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new PhoneNumberContextImpl(version, serviceSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/PhoneNumbers`;
    instance.create = function create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["sid"] !== undefined) data["Sid"] = params["sid"];
        if (params["phoneNumber"] !== undefined) data["PhoneNumber"] = params["phoneNumber"];
        if (params["isReserved"] !== undefined) data["IsReserved"] = serialize.bool(params["isReserved"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PhoneNumberInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PhoneNumberPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new PhoneNumberPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class PhoneNumberPage extends Page_1.default {
    /**
     * Initialize the PhoneNumberPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of PhoneNumberInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new PhoneNumberInstance(this._version, payload, this._solution.serviceSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PhoneNumberPage = PhoneNumberPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/proxy/v1/service/session/interaction.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Proxy
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InteractionPage = exports.InteractionInstance = exports.InteractionContextImpl = void 0;
exports.InteractionListInstance = InteractionListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class InteractionContextImpl {
    constructor(_version, serviceSid, sessionSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sessionSid)) {
            throw new Error("Parameter 'sessionSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            sessionSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/Sessions/${sessionSid}/Interactions/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InteractionInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sessionSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InteractionContextImpl = InteractionContextImpl;
class InteractionInstance {
    constructor(_version, payload, serviceSid, sessionSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.sessionSid = payload.session_sid;
        this.serviceSid = payload.service_sid;
        this.accountSid = payload.account_sid;
        this.data = payload.data;
        this.type = payload.type;
        this.inboundParticipantSid = payload.inbound_participant_sid;
        this.inboundResourceSid = payload.inbound_resource_sid;
        this.inboundResourceStatus = payload.inbound_resource_status;
        this.inboundResourceType = payload.inbound_resource_type;
        this.inboundResourceUrl = payload.inbound_resource_url;
        this.outboundParticipantSid = payload.outbound_participant_sid;
        this.outboundResourceSid = payload.outbound_resource_sid;
        this.outboundResourceStatus = payload.outbound_resource_status;
        this.outboundResourceType = payload.outbound_resource_type;
        this.outboundResourceUrl = payload.outbound_resource_url;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            serviceSid,
            sessionSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new InteractionContextImpl(this._version, this._solution.serviceSid, this._solution.sessionSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a InteractionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a InteractionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed InteractionInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            sessionSid: this.sessionSid,
            serviceSid: this.serviceSid,
            accountSid: this.accountSid,
            data: this.data,
            type: this.type,
            inboundParticipantSid: this.inboundParticipantSid,
            inboundResourceSid: this.inboundResourceSid,
            inboundResourceStatus: this.inboundResourceStatus,
            inboundResourceType: this.inboundResourceType,
            inboundResourceUrl: this.inboundResourceUrl,
            outboundParticipantSid: this.outboundParticipantSid,
            outboundResourceSid: this.outboundResourceSid,
            outboundResourceStatus: this.outboundResourceStatus,
            outboundResourceType: this.outboundResourceType,
            outboundResourceUrl: this.outboundResourceUrl,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InteractionInstance = InteractionInstance;
function InteractionListInstance(version, serviceSid, sessionSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(sessionSid)) {
        throw new Error("Parameter 'sessionSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new InteractionContextImpl(version, serviceSid, sessionSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid,
        sessionSid
    };
    instance._uri = `/Services/${serviceSid}/Sessions/${sessionSid}/Interactions`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InteractionPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new InteractionPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class InteractionPage extends Page_1.default {
    /**
     * Initialize the InteractionPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of InteractionInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new InteractionInstance(this._version, payload, this._solution.serviceSid, this._solution.sessionSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InteractionPage = InteractionPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/proxy/v1/service/session/participant/messageInteraction.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Proxy
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MessageInteractionPage = exports.MessageInteractionInstance = exports.MessageInteractionContextImpl = void 0;
exports.MessageInteractionListInstance = MessageInteractionListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class MessageInteractionContextImpl {
    constructor(_version, serviceSid, sessionSid, participantSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sessionSid)) {
            throw new Error("Parameter 'sessionSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(participantSid)) {
            throw new Error("Parameter 'participantSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            sessionSid,
            participantSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/Sessions/${sessionSid}/Participants/${participantSid}/MessageInteractions/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new MessageInteractionInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sessionSid, instance._solution.participantSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.MessageInteractionContextImpl = MessageInteractionContextImpl;
class MessageInteractionInstance {
    constructor(_version, payload, serviceSid, sessionSid, participantSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.sessionSid = payload.session_sid;
        this.serviceSid = payload.service_sid;
        this.accountSid = payload.account_sid;
        this.data = payload.data;
        this.type = payload.type;
        this.participantSid = payload.participant_sid;
        this.inboundParticipantSid = payload.inbound_participant_sid;
        this.inboundResourceSid = payload.inbound_resource_sid;
        this.inboundResourceStatus = payload.inbound_resource_status;
        this.inboundResourceType = payload.inbound_resource_type;
        this.inboundResourceUrl = payload.inbound_resource_url;
        this.outboundParticipantSid = payload.outbound_participant_sid;
        this.outboundResourceSid = payload.outbound_resource_sid;
        this.outboundResourceStatus = payload.outbound_resource_status;
        this.outboundResourceType = payload.outbound_resource_type;
        this.outboundResourceUrl = payload.outbound_resource_url;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            serviceSid,
            sessionSid,
            participantSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new MessageInteractionContextImpl(this._version, this._solution.serviceSid, this._solution.sessionSid, this._solution.participantSid, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a MessageInteractionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed MessageInteractionInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            sessionSid: this.sessionSid,
            serviceSid: this.serviceSid,
            accountSid: this.accountSid,
            data: this.data,
            type: this.type,
            participantSid: this.participantSid,
            inboundParticipantSid: this.inboundParticipantSid,
            inboundResourceSid: this.inboundResourceSid,
            inboundResourceStatus: this.inboundResourceStatus,
            inboundResourceType: this.inboundResourceType,
            inboundResourceUrl: this.inboundResourceUrl,
            outboundParticipantSid: this.outboundParticipantSid,
            outboundResourceSid: this.outboundResourceSid,
            outboundResourceStatus: this.outboundResourceStatus,
            outboundResourceType: this.outboundResourceType,
            outboundResourceUrl: this.outboundResourceUrl,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.MessageInteractionInstance = MessageInteractionInstance;
function MessageInteractionListInstance(version, serviceSid, sessionSid, participantSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(sessionSid)) {
        throw new Error("Parameter 'sessionSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(participantSid)) {
        throw new Error("Parameter 'participantSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new MessageInteractionContextImpl(version, serviceSid, sessionSid, participantSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid,
        sessionSid,
        participantSid
    };
    instance._uri = `/Services/${serviceSid}/Sessions/${sessionSid}/Participants/${participantSid}/MessageInteractions`;
    instance.create = function create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["body"] !== undefined) data["Body"] = params["body"];
        if (params["mediaUrl"] !== undefined) data["MediaUrl"] = serialize.map(params["mediaUrl"], (e)=>e);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new MessageInteractionInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sessionSid, instance._solution.participantSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new MessageInteractionPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new MessageInteractionPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class MessageInteractionPage extends Page_1.default {
    /**
     * Initialize the MessageInteractionPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of MessageInteractionInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new MessageInteractionInstance(this._version, payload, this._solution.serviceSid, this._solution.sessionSid, this._solution.participantSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.MessageInteractionPage = MessageInteractionPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/proxy/v1/service/session/participant.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Proxy
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ParticipantPage = exports.ParticipantInstance = exports.ParticipantContextImpl = void 0;
exports.ParticipantListInstance = ParticipantListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const messageInteraction_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/proxy/v1/service/session/participant/messageInteraction.js [app-rsc] (ecmascript)");
class ParticipantContextImpl {
    constructor(_version, serviceSid, sessionSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sessionSid)) {
            throw new Error("Parameter 'sessionSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            sessionSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/Sessions/${sessionSid}/Participants/${sid}`;
    }
    get messageInteractions() {
        this._messageInteractions = this._messageInteractions || (0, messageInteraction_1.MessageInteractionListInstance)(this._version, this._solution.serviceSid, this._solution.sessionSid, this._solution.sid);
        return this._messageInteractions;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ParticipantInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sessionSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ParticipantContextImpl = ParticipantContextImpl;
class ParticipantInstance {
    constructor(_version, payload, serviceSid, sessionSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.sessionSid = payload.session_sid;
        this.serviceSid = payload.service_sid;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.identifier = payload.identifier;
        this.proxyIdentifier = payload.proxy_identifier;
        this.proxyIdentifierSid = payload.proxy_identifier_sid;
        this.dateDeleted = deserialize.iso8601DateTime(payload.date_deleted);
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            serviceSid,
            sessionSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new ParticipantContextImpl(this._version, this._solution.serviceSid, this._solution.sessionSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a ParticipantInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a ParticipantInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ParticipantInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Access the messageInteractions.
     */ messageInteractions() {
        return this._proxy.messageInteractions;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            sessionSid: this.sessionSid,
            serviceSid: this.serviceSid,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            identifier: this.identifier,
            proxyIdentifier: this.proxyIdentifier,
            proxyIdentifierSid: this.proxyIdentifierSid,
            dateDeleted: this.dateDeleted,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ParticipantInstance = ParticipantInstance;
function ParticipantListInstance(version, serviceSid, sessionSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(sessionSid)) {
        throw new Error("Parameter 'sessionSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new ParticipantContextImpl(version, serviceSid, sessionSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid,
        sessionSid
    };
    instance._uri = `/Services/${serviceSid}/Sessions/${sessionSid}/Participants`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["identifier"] === null || params["identifier"] === undefined) {
            throw new Error("Required parameter \"params['identifier']\" missing.");
        }
        let data = {};
        data["Identifier"] = params["identifier"];
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["proxyIdentifier"] !== undefined) data["ProxyIdentifier"] = params["proxyIdentifier"];
        if (params["proxyIdentifierSid"] !== undefined) data["ProxyIdentifierSid"] = params["proxyIdentifierSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ParticipantInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sessionSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ParticipantPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ParticipantPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ParticipantPage extends Page_1.default {
    /**
     * Initialize the ParticipantPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ParticipantInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ParticipantInstance(this._version, payload, this._solution.serviceSid, this._solution.sessionSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ParticipantPage = ParticipantPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/proxy/v1/service/session.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Proxy
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SessionPage = exports.SessionInstance = exports.SessionContextImpl = void 0;
exports.SessionListInstance = SessionListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const interaction_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/proxy/v1/service/session/interaction.js [app-rsc] (ecmascript)");
const participant_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/proxy/v1/service/session/participant.js [app-rsc] (ecmascript)");
class SessionContextImpl {
    constructor(_version, serviceSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/Sessions/${sid}`;
    }
    get interactions() {
        this._interactions = this._interactions || (0, interaction_1.InteractionListInstance)(this._version, this._solution.serviceSid, this._solution.sid);
        return this._interactions;
    }
    get participants() {
        this._participants = this._participants || (0, participant_1.ParticipantListInstance)(this._version, this._solution.serviceSid, this._solution.sid);
        return this._participants;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SessionInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["dateExpiry"] !== undefined) data["DateExpiry"] = serialize.iso8601DateTime(params["dateExpiry"]);
        if (params["ttl"] !== undefined) data["Ttl"] = params["ttl"];
        if (params["status"] !== undefined) data["Status"] = params["status"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SessionInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SessionContextImpl = SessionContextImpl;
class SessionInstance {
    constructor(_version, payload, serviceSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.serviceSid = payload.service_sid;
        this.accountSid = payload.account_sid;
        this.dateStarted = deserialize.iso8601DateTime(payload.date_started);
        this.dateEnded = deserialize.iso8601DateTime(payload.date_ended);
        this.dateLastInteraction = deserialize.iso8601DateTime(payload.date_last_interaction);
        this.dateExpiry = deserialize.iso8601DateTime(payload.date_expiry);
        this.uniqueName = payload.unique_name;
        this.status = payload.status;
        this.closedReason = payload.closed_reason;
        this.ttl = deserialize.integer(payload.ttl);
        this.mode = payload.mode;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            serviceSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new SessionContextImpl(this._version, this._solution.serviceSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a SessionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a SessionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed SessionInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the interactions.
     */ interactions() {
        return this._proxy.interactions;
    }
    /**
     * Access the participants.
     */ participants() {
        return this._proxy.participants;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            serviceSid: this.serviceSid,
            accountSid: this.accountSid,
            dateStarted: this.dateStarted,
            dateEnded: this.dateEnded,
            dateLastInteraction: this.dateLastInteraction,
            dateExpiry: this.dateExpiry,
            uniqueName: this.uniqueName,
            status: this.status,
            closedReason: this.closedReason,
            ttl: this.ttl,
            mode: this.mode,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SessionInstance = SessionInstance;
function SessionListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new SessionContextImpl(version, serviceSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/Sessions`;
    instance.create = function create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        if (params["dateExpiry"] !== undefined) data["DateExpiry"] = serialize.iso8601DateTime(params["dateExpiry"]);
        if (params["ttl"] !== undefined) data["Ttl"] = params["ttl"];
        if (params["mode"] !== undefined) data["Mode"] = params["mode"];
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["participants"] !== undefined) data["Participants"] = serialize.map(params["participants"], (e)=>serialize.object(e));
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SessionInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SessionPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new SessionPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SessionPage extends Page_1.default {
    /**
     * Initialize the SessionPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of SessionInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new SessionInstance(this._version, payload, this._solution.serviceSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SessionPage = SessionPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/proxy/v1/service.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Proxy
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ServicePage = exports.ServiceInstance = exports.ServiceContextImpl = void 0;
exports.ServiceListInstance = ServiceListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const phoneNumber_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/proxy/v1/service/phoneNumber.js [app-rsc] (ecmascript)");
const session_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/proxy/v1/service/session.js [app-rsc] (ecmascript)");
class ServiceContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Services/${sid}`;
    }
    get phoneNumbers() {
        this._phoneNumbers = this._phoneNumbers || (0, phoneNumber_1.PhoneNumberListInstance)(this._version, this._solution.sid);
        return this._phoneNumbers;
    }
    get sessions() {
        this._sessions = this._sessions || (0, session_1.SessionListInstance)(this._version, this._solution.sid);
        return this._sessions;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServiceInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        if (params["defaultTtl"] !== undefined) data["DefaultTtl"] = params["defaultTtl"];
        if (params["callbackUrl"] !== undefined) data["CallbackUrl"] = params["callbackUrl"];
        if (params["geoMatchLevel"] !== undefined) data["GeoMatchLevel"] = params["geoMatchLevel"];
        if (params["numberSelectionBehavior"] !== undefined) data["NumberSelectionBehavior"] = params["numberSelectionBehavior"];
        if (params["interceptCallbackUrl"] !== undefined) data["InterceptCallbackUrl"] = params["interceptCallbackUrl"];
        if (params["outOfSessionCallbackUrl"] !== undefined) data["OutOfSessionCallbackUrl"] = params["outOfSessionCallbackUrl"];
        if (params["chatInstanceSid"] !== undefined) data["ChatInstanceSid"] = params["chatInstanceSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServiceInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ServiceContextImpl = ServiceContextImpl;
class ServiceInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.uniqueName = payload.unique_name;
        this.accountSid = payload.account_sid;
        this.chatInstanceSid = payload.chat_instance_sid;
        this.callbackUrl = payload.callback_url;
        this.defaultTtl = deserialize.integer(payload.default_ttl);
        this.numberSelectionBehavior = payload.number_selection_behavior;
        this.geoMatchLevel = payload.geo_match_level;
        this.interceptCallbackUrl = payload.intercept_callback_url;
        this.outOfSessionCallbackUrl = payload.out_of_session_callback_url;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new ServiceContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a ServiceInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a ServiceInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ServiceInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the phoneNumbers.
     */ phoneNumbers() {
        return this._proxy.phoneNumbers;
    }
    /**
     * Access the sessions.
     */ sessions() {
        return this._proxy.sessions;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            uniqueName: this.uniqueName,
            accountSid: this.accountSid,
            chatInstanceSid: this.chatInstanceSid,
            callbackUrl: this.callbackUrl,
            defaultTtl: this.defaultTtl,
            numberSelectionBehavior: this.numberSelectionBehavior,
            geoMatchLevel: this.geoMatchLevel,
            interceptCallbackUrl: this.interceptCallbackUrl,
            outOfSessionCallbackUrl: this.outOfSessionCallbackUrl,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ServiceInstance = ServiceInstance;
function ServiceListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new ServiceContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Services`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["uniqueName"] === null || params["uniqueName"] === undefined) {
            throw new Error("Required parameter \"params['uniqueName']\" missing.");
        }
        let data = {};
        data["UniqueName"] = params["uniqueName"];
        if (params["defaultTtl"] !== undefined) data["DefaultTtl"] = params["defaultTtl"];
        if (params["callbackUrl"] !== undefined) data["CallbackUrl"] = params["callbackUrl"];
        if (params["geoMatchLevel"] !== undefined) data["GeoMatchLevel"] = params["geoMatchLevel"];
        if (params["numberSelectionBehavior"] !== undefined) data["NumberSelectionBehavior"] = params["numberSelectionBehavior"];
        if (params["interceptCallbackUrl"] !== undefined) data["InterceptCallbackUrl"] = params["interceptCallbackUrl"];
        if (params["outOfSessionCallbackUrl"] !== undefined) data["OutOfSessionCallbackUrl"] = params["outOfSessionCallbackUrl"];
        if (params["chatInstanceSid"] !== undefined) data["ChatInstanceSid"] = params["chatInstanceSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServiceInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServicePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ServicePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ServicePage extends Page_1.default {
    /**
     * Initialize the ServicePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ServiceInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ServiceInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ServicePage = ServicePage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/proxy/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Proxy
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const service_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/proxy/v1/service.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of Proxy
     *
     * @param domain - The Twilio (Twilio.Proxy) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for services resource */ get services() {
        this._services = this._services || (0, service_1.ServiceListInstance)(this);
        return this._services;
    }
}
exports.default = V1;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/ProxyBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/proxy/V1.js [app-rsc] (ecmascript)"));
class ProxyBase extends Domain_1.default {
    /**
     * Initialize proxy domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://proxy.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
}
module.exports = ProxyBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Proxy.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const ProxyBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/ProxyBase.js [app-rsc] (ecmascript)"));
class Proxy extends ProxyBase_1.default {
    /**
     * @deprecated - Use v1.services instead
     */ get services() {
        console.warn("services is deprecated. Use v1.services instead.");
        return this.v1.services;
    }
}
module.exports = Proxy;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/routes/v2/phoneNumber.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Routes
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PhoneNumberInstance = exports.PhoneNumberContextImpl = void 0;
exports.PhoneNumberListInstance = PhoneNumberListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class PhoneNumberContextImpl {
    constructor(_version, phoneNumber){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(phoneNumber)) {
            throw new Error("Parameter 'phoneNumber' is not valid.");
        }
        this._solution = {
            phoneNumber
        };
        this._uri = `/PhoneNumbers/${phoneNumber}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PhoneNumberInstance(operationVersion, payload, instance._solution.phoneNumber));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["voiceRegion"] !== undefined) data["VoiceRegion"] = params["voiceRegion"];
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PhoneNumberInstance(operationVersion, payload, instance._solution.phoneNumber));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PhoneNumberContextImpl = PhoneNumberContextImpl;
class PhoneNumberInstance {
    constructor(_version, payload, phoneNumber){
        this._version = _version;
        this.phoneNumber = payload.phone_number;
        this.url = payload.url;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.voiceRegion = payload.voice_region;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this._solution = {
            phoneNumber: phoneNumber || this.phoneNumber
        };
    }
    get _proxy() {
        this._context = this._context || new PhoneNumberContextImpl(this._version, this._solution.phoneNumber);
        return this._context;
    }
    /**
     * Fetch a PhoneNumberInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed PhoneNumberInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            phoneNumber: this.phoneNumber,
            url: this.url,
            sid: this.sid,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            voiceRegion: this.voiceRegion,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PhoneNumberInstance = PhoneNumberInstance;
function PhoneNumberListInstance(version) {
    const instance = (phoneNumber)=>instance.get(phoneNumber);
    instance.get = function get(phoneNumber) {
        return new PhoneNumberContextImpl(version, phoneNumber);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/routes/v2/sipDomain.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Routes
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SipDomainInstance = exports.SipDomainContextImpl = void 0;
exports.SipDomainListInstance = SipDomainListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class SipDomainContextImpl {
    constructor(_version, sipDomain){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sipDomain)) {
            throw new Error("Parameter 'sipDomain' is not valid.");
        }
        this._solution = {
            sipDomain
        };
        this._uri = `/SipDomains/${sipDomain}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SipDomainInstance(operationVersion, payload, instance._solution.sipDomain));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["voiceRegion"] !== undefined) data["VoiceRegion"] = params["voiceRegion"];
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SipDomainInstance(operationVersion, payload, instance._solution.sipDomain));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SipDomainContextImpl = SipDomainContextImpl;
class SipDomainInstance {
    constructor(_version, payload, sipDomain){
        this._version = _version;
        this.sipDomain = payload.sip_domain;
        this.url = payload.url;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.voiceRegion = payload.voice_region;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this._solution = {
            sipDomain: sipDomain || this.sipDomain
        };
    }
    get _proxy() {
        this._context = this._context || new SipDomainContextImpl(this._version, this._solution.sipDomain);
        return this._context;
    }
    /**
     * Fetch a SipDomainInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed SipDomainInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sipDomain: this.sipDomain,
            url: this.url,
            sid: this.sid,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            voiceRegion: this.voiceRegion,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SipDomainInstance = SipDomainInstance;
function SipDomainListInstance(version) {
    const instance = (sipDomain)=>instance.get(sipDomain);
    instance.get = function get(sipDomain) {
        return new SipDomainContextImpl(version, sipDomain);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/routes/v2/trunk.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Routes
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TrunkInstance = exports.TrunkContextImpl = void 0;
exports.TrunkListInstance = TrunkListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class TrunkContextImpl {
    constructor(_version, sipTrunkDomain){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sipTrunkDomain)) {
            throw new Error("Parameter 'sipTrunkDomain' is not valid.");
        }
        this._solution = {
            sipTrunkDomain
        };
        this._uri = `/Trunks/${sipTrunkDomain}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new TrunkInstance(operationVersion, payload, instance._solution.sipTrunkDomain));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["voiceRegion"] !== undefined) data["VoiceRegion"] = params["voiceRegion"];
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new TrunkInstance(operationVersion, payload, instance._solution.sipTrunkDomain));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.TrunkContextImpl = TrunkContextImpl;
class TrunkInstance {
    constructor(_version, payload, sipTrunkDomain){
        this._version = _version;
        this.sipTrunkDomain = payload.sip_trunk_domain;
        this.url = payload.url;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.voiceRegion = payload.voice_region;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this._solution = {
            sipTrunkDomain: sipTrunkDomain || this.sipTrunkDomain
        };
    }
    get _proxy() {
        this._context = this._context || new TrunkContextImpl(this._version, this._solution.sipTrunkDomain);
        return this._context;
    }
    /**
     * Fetch a TrunkInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed TrunkInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sipTrunkDomain: this.sipTrunkDomain,
            url: this.url,
            sid: this.sid,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            voiceRegion: this.voiceRegion,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.TrunkInstance = TrunkInstance;
function TrunkListInstance(version) {
    const instance = (sipTrunkDomain)=>instance.get(sipTrunkDomain);
    instance.get = function get(sipTrunkDomain) {
        return new TrunkContextImpl(version, sipTrunkDomain);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/routes/V2.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Routes
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const phoneNumber_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/routes/v2/phoneNumber.js [app-rsc] (ecmascript)");
const sipDomain_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/routes/v2/sipDomain.js [app-rsc] (ecmascript)");
const trunk_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/routes/v2/trunk.js [app-rsc] (ecmascript)");
class V2 extends Version_1.default {
    /**
     * Initialize the V2 version of Routes
     *
     * @param domain - The Twilio (Twilio.Routes) domain
     */ constructor(domain){
        super(domain, "v2");
    }
    /** Getter for phoneNumbers resource */ get phoneNumbers() {
        this._phoneNumbers = this._phoneNumbers || (0, phoneNumber_1.PhoneNumberListInstance)(this);
        return this._phoneNumbers;
    }
    /** Getter for sipDomains resource */ get sipDomains() {
        this._sipDomains = this._sipDomains || (0, sipDomain_1.SipDomainListInstance)(this);
        return this._sipDomains;
    }
    /** Getter for trunks resource */ get trunks() {
        this._trunks = this._trunks || (0, trunk_1.TrunkListInstance)(this);
        return this._trunks;
    }
}
exports.default = V2;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/RoutesBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V2_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/routes/V2.js [app-rsc] (ecmascript)"));
class RoutesBase extends Domain_1.default {
    /**
     * Initialize routes domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://routes.twilio.com");
    }
    get v2() {
        this._v2 = this._v2 || new V2_1.default(this);
        return this._v2;
    }
}
module.exports = RoutesBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Routes.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const RoutesBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/RoutesBase.js [app-rsc] (ecmascript)"));
class Routes extends RoutesBase_1.default {
    /**
     * @deprecated - Use v1.phoneNumbers instead
     */ get phoneNumbers() {
        console.warn("phoneNumbers is deprecated. Use v1.phoneNumbers instead.");
        return this.v2.phoneNumbers;
    }
    /**
     * @deprecated - Use v1.sipDomains instead
     */ get sipDomains() {
        console.warn("sipDomains is deprecated. Use v1.sipDomains instead.");
        return this.v2.sipDomains;
    }
    /**
     * @deprecated - Use v1.trunks instead
     */ get trunks() {
        console.warn("trunks is deprecated. Use v1.trunks instead.");
        return this.v2.trunks;
    }
}
module.exports = Routes;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service/asset/assetVersion.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Serverless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AssetVersionPage = exports.AssetVersionInstance = exports.AssetVersionContextImpl = void 0;
exports.AssetVersionListInstance = AssetVersionListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class AssetVersionContextImpl {
    constructor(_version, serviceSid, assetSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(assetSid)) {
            throw new Error("Parameter 'assetSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            assetSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/Assets/${assetSid}/Versions/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AssetVersionInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.assetSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AssetVersionContextImpl = AssetVersionContextImpl;
class AssetVersionInstance {
    constructor(_version, payload, serviceSid, assetSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.assetSid = payload.asset_sid;
        this.path = payload.path;
        this.visibility = payload.visibility;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.url = payload.url;
        this._solution = {
            serviceSid,
            assetSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new AssetVersionContextImpl(this._version, this._solution.serviceSid, this._solution.assetSid, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a AssetVersionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed AssetVersionInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            assetSid: this.assetSid,
            path: this.path,
            visibility: this.visibility,
            dateCreated: this.dateCreated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AssetVersionInstance = AssetVersionInstance;
function AssetVersionListInstance(version, serviceSid, assetSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(assetSid)) {
        throw new Error("Parameter 'assetSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new AssetVersionContextImpl(version, serviceSid, assetSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid,
        assetSid
    };
    instance._uri = `/Services/${serviceSid}/Assets/${assetSid}/Versions`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AssetVersionPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new AssetVersionPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class AssetVersionPage extends Page_1.default {
    /**
     * Initialize the AssetVersionPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of AssetVersionInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new AssetVersionInstance(this._version, payload, this._solution.serviceSid, this._solution.assetSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AssetVersionPage = AssetVersionPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service/asset.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Serverless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AssetPage = exports.AssetInstance = exports.AssetContextImpl = void 0;
exports.AssetListInstance = AssetListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const assetVersion_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service/asset/assetVersion.js [app-rsc] (ecmascript)");
class AssetContextImpl {
    constructor(_version, serviceSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/Assets/${sid}`;
    }
    get assetVersions() {
        this._assetVersions = this._assetVersions || (0, assetVersion_1.AssetVersionListInstance)(this._version, this._solution.serviceSid, this._solution.sid);
        return this._assetVersions;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AssetInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["friendlyName"] === null || params["friendlyName"] === undefined) {
            throw new Error("Required parameter \"params['friendlyName']\" missing.");
        }
        let data = {};
        data["FriendlyName"] = params["friendlyName"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AssetInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AssetContextImpl = AssetContextImpl;
class AssetInstance {
    constructor(_version, payload, serviceSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.friendlyName = payload.friendly_name;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            serviceSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new AssetContextImpl(this._version, this._solution.serviceSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a AssetInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a AssetInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed AssetInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the assetVersions.
     */ assetVersions() {
        return this._proxy.assetVersions;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            friendlyName: this.friendlyName,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AssetInstance = AssetInstance;
function AssetListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new AssetContextImpl(version, serviceSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/Assets`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["friendlyName"] === null || params["friendlyName"] === undefined) {
            throw new Error("Required parameter \"params['friendlyName']\" missing.");
        }
        let data = {};
        data["FriendlyName"] = params["friendlyName"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AssetInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AssetPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new AssetPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class AssetPage extends Page_1.default {
    /**
     * Initialize the AssetPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of AssetInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new AssetInstance(this._version, payload, this._solution.serviceSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AssetPage = AssetPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service/build/buildStatus.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Serverless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BuildStatusInstance = exports.BuildStatusContextImpl = void 0;
exports.BuildStatusListInstance = BuildStatusListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class BuildStatusContextImpl {
    constructor(_version, serviceSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/Builds/${sid}/Status`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BuildStatusInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BuildStatusContextImpl = BuildStatusContextImpl;
class BuildStatusInstance {
    constructor(_version, payload, serviceSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.status = payload.status;
        this.url = payload.url;
        this._solution = {
            serviceSid,
            sid
        };
    }
    get _proxy() {
        this._context = this._context || new BuildStatusContextImpl(this._version, this._solution.serviceSid, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a BuildStatusInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed BuildStatusInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            status: this.status,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BuildStatusInstance = BuildStatusInstance;
function BuildStatusListInstance(version, serviceSid, sid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(sid)) {
        throw new Error("Parameter 'sid' is not valid.");
    }
    const instance = ()=>instance.get();
    instance.get = function get() {
        return new BuildStatusContextImpl(version, serviceSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid,
        sid
    };
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service/build.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Serverless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BuildPage = exports.BuildInstance = exports.BuildContextImpl = void 0;
exports.BuildListInstance = BuildListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const buildStatus_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service/build/buildStatus.js [app-rsc] (ecmascript)");
class BuildContextImpl {
    constructor(_version, serviceSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/Builds/${sid}`;
    }
    get buildStatus() {
        this._buildStatus = this._buildStatus || (0, buildStatus_1.BuildStatusListInstance)(this._version, this._solution.serviceSid, this._solution.sid);
        return this._buildStatus;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BuildInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BuildContextImpl = BuildContextImpl;
class BuildInstance {
    constructor(_version, payload, serviceSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.status = payload.status;
        this.assetVersions = payload.asset_versions;
        this.functionVersions = payload.function_versions;
        this.dependencies = payload.dependencies;
        this.runtime = payload.runtime;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            serviceSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new BuildContextImpl(this._version, this._solution.serviceSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a BuildInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a BuildInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed BuildInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Access the buildStatus.
     */ buildStatus() {
        return this._proxy.buildStatus;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            status: this.status,
            assetVersions: this.assetVersions,
            functionVersions: this.functionVersions,
            dependencies: this.dependencies,
            runtime: this.runtime,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BuildInstance = BuildInstance;
function BuildListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new BuildContextImpl(version, serviceSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/Builds`;
    instance.create = function create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["assetVersions"] !== undefined) data["AssetVersions"] = serialize.map(params["assetVersions"], (e)=>e);
        if (params["functionVersions"] !== undefined) data["FunctionVersions"] = serialize.map(params["functionVersions"], (e)=>e);
        if (params["dependencies"] !== undefined) data["Dependencies"] = params["dependencies"];
        if (params["runtime"] !== undefined) data["Runtime"] = params["runtime"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BuildInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BuildPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new BuildPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class BuildPage extends Page_1.default {
    /**
     * Initialize the BuildPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of BuildInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new BuildInstance(this._version, payload, this._solution.serviceSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BuildPage = BuildPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service/environment/deployment.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Serverless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DeploymentPage = exports.DeploymentInstance = exports.DeploymentContextImpl = void 0;
exports.DeploymentListInstance = DeploymentListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class DeploymentContextImpl {
    constructor(_version, serviceSid, environmentSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(environmentSid)) {
            throw new Error("Parameter 'environmentSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            environmentSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/Environments/${environmentSid}/Deployments/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new DeploymentInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.environmentSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DeploymentContextImpl = DeploymentContextImpl;
class DeploymentInstance {
    constructor(_version, payload, serviceSid, environmentSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.environmentSid = payload.environment_sid;
        this.buildSid = payload.build_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            serviceSid,
            environmentSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new DeploymentContextImpl(this._version, this._solution.serviceSid, this._solution.environmentSid, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a DeploymentInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed DeploymentInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            environmentSid: this.environmentSid,
            buildSid: this.buildSid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DeploymentInstance = DeploymentInstance;
function DeploymentListInstance(version, serviceSid, environmentSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(environmentSid)) {
        throw new Error("Parameter 'environmentSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new DeploymentContextImpl(version, serviceSid, environmentSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid,
        environmentSid
    };
    instance._uri = `/Services/${serviceSid}/Environments/${environmentSid}/Deployments`;
    instance.create = function create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["buildSid"] !== undefined) data["BuildSid"] = params["buildSid"];
        if (params["isPlugin"] !== undefined) data["IsPlugin"] = serialize.bool(params["isPlugin"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new DeploymentInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.environmentSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new DeploymentPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new DeploymentPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class DeploymentPage extends Page_1.default {
    /**
     * Initialize the DeploymentPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of DeploymentInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new DeploymentInstance(this._version, payload, this._solution.serviceSid, this._solution.environmentSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DeploymentPage = DeploymentPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service/environment/log.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Serverless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LogPage = exports.LogInstance = exports.LogContextImpl = void 0;
exports.LogListInstance = LogListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class LogContextImpl {
    constructor(_version, serviceSid, environmentSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(environmentSid)) {
            throw new Error("Parameter 'environmentSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            environmentSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/Environments/${environmentSid}/Logs/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new LogInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.environmentSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.LogContextImpl = LogContextImpl;
class LogInstance {
    constructor(_version, payload, serviceSid, environmentSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.environmentSid = payload.environment_sid;
        this.buildSid = payload.build_sid;
        this.deploymentSid = payload.deployment_sid;
        this.functionSid = payload.function_sid;
        this.requestSid = payload.request_sid;
        this.level = payload.level;
        this.message = payload.message;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.url = payload.url;
        this._solution = {
            serviceSid,
            environmentSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new LogContextImpl(this._version, this._solution.serviceSid, this._solution.environmentSid, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a LogInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed LogInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            environmentSid: this.environmentSid,
            buildSid: this.buildSid,
            deploymentSid: this.deploymentSid,
            functionSid: this.functionSid,
            requestSid: this.requestSid,
            level: this.level,
            message: this.message,
            dateCreated: this.dateCreated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.LogInstance = LogInstance;
function LogListInstance(version, serviceSid, environmentSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(environmentSid)) {
        throw new Error("Parameter 'environmentSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new LogContextImpl(version, serviceSid, environmentSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid,
        environmentSid
    };
    instance._uri = `/Services/${serviceSid}/Environments/${environmentSid}/Logs`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["functionSid"] !== undefined) data["FunctionSid"] = params["functionSid"];
        if (params["startDate"] !== undefined) data["StartDate"] = serialize.iso8601DateTime(params["startDate"]);
        if (params["endDate"] !== undefined) data["EndDate"] = serialize.iso8601DateTime(params["endDate"]);
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new LogPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new LogPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class LogPage extends Page_1.default {
    /**
     * Initialize the LogPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of LogInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new LogInstance(this._version, payload, this._solution.serviceSid, this._solution.environmentSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.LogPage = LogPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service/environment/variable.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Serverless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.VariablePage = exports.VariableInstance = exports.VariableContextImpl = void 0;
exports.VariableListInstance = VariableListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class VariableContextImpl {
    constructor(_version, serviceSid, environmentSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(environmentSid)) {
            throw new Error("Parameter 'environmentSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            environmentSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/Environments/${environmentSid}/Variables/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new VariableInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.environmentSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["key"] !== undefined) data["Key"] = params["key"];
        if (params["value"] !== undefined) data["Value"] = params["value"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new VariableInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.environmentSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.VariableContextImpl = VariableContextImpl;
class VariableInstance {
    constructor(_version, payload, serviceSid, environmentSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.environmentSid = payload.environment_sid;
        this.key = payload.key;
        this.value = payload.value;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            serviceSid,
            environmentSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new VariableContextImpl(this._version, this._solution.serviceSid, this._solution.environmentSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a VariableInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a VariableInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed VariableInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            environmentSid: this.environmentSid,
            key: this.key,
            value: this.value,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.VariableInstance = VariableInstance;
function VariableListInstance(version, serviceSid, environmentSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(environmentSid)) {
        throw new Error("Parameter 'environmentSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new VariableContextImpl(version, serviceSid, environmentSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid,
        environmentSid
    };
    instance._uri = `/Services/${serviceSid}/Environments/${environmentSid}/Variables`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["key"] === null || params["key"] === undefined) {
            throw new Error("Required parameter \"params['key']\" missing.");
        }
        if (params["value"] === null || params["value"] === undefined) {
            throw new Error("Required parameter \"params['value']\" missing.");
        }
        let data = {};
        data["Key"] = params["key"];
        data["Value"] = params["value"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new VariableInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.environmentSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new VariablePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new VariablePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class VariablePage extends Page_1.default {
    /**
     * Initialize the VariablePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of VariableInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new VariableInstance(this._version, payload, this._solution.serviceSid, this._solution.environmentSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.VariablePage = VariablePage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service/environment.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Serverless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EnvironmentPage = exports.EnvironmentInstance = exports.EnvironmentContextImpl = void 0;
exports.EnvironmentListInstance = EnvironmentListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const deployment_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service/environment/deployment.js [app-rsc] (ecmascript)");
const log_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service/environment/log.js [app-rsc] (ecmascript)");
const variable_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service/environment/variable.js [app-rsc] (ecmascript)");
class EnvironmentContextImpl {
    constructor(_version, serviceSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/Environments/${sid}`;
    }
    get deployments() {
        this._deployments = this._deployments || (0, deployment_1.DeploymentListInstance)(this._version, this._solution.serviceSid, this._solution.sid);
        return this._deployments;
    }
    get logs() {
        this._logs = this._logs || (0, log_1.LogListInstance)(this._version, this._solution.serviceSid, this._solution.sid);
        return this._logs;
    }
    get variables() {
        this._variables = this._variables || (0, variable_1.VariableListInstance)(this._version, this._solution.serviceSid, this._solution.sid);
        return this._variables;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new EnvironmentInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.EnvironmentContextImpl = EnvironmentContextImpl;
class EnvironmentInstance {
    constructor(_version, payload, serviceSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.buildSid = payload.build_sid;
        this.uniqueName = payload.unique_name;
        this.domainSuffix = payload.domain_suffix;
        this.domainName = payload.domain_name;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            serviceSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new EnvironmentContextImpl(this._version, this._solution.serviceSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a EnvironmentInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a EnvironmentInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed EnvironmentInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Access the deployments.
     */ deployments() {
        return this._proxy.deployments;
    }
    /**
     * Access the logs.
     */ logs() {
        return this._proxy.logs;
    }
    /**
     * Access the variables.
     */ variables() {
        return this._proxy.variables;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            buildSid: this.buildSid,
            uniqueName: this.uniqueName,
            domainSuffix: this.domainSuffix,
            domainName: this.domainName,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.EnvironmentInstance = EnvironmentInstance;
function EnvironmentListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new EnvironmentContextImpl(version, serviceSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/Environments`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["uniqueName"] === null || params["uniqueName"] === undefined) {
            throw new Error("Required parameter \"params['uniqueName']\" missing.");
        }
        let data = {};
        data["UniqueName"] = params["uniqueName"];
        if (params["domainSuffix"] !== undefined) data["DomainSuffix"] = params["domainSuffix"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new EnvironmentInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new EnvironmentPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new EnvironmentPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class EnvironmentPage extends Page_1.default {
    /**
     * Initialize the EnvironmentPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of EnvironmentInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new EnvironmentInstance(this._version, payload, this._solution.serviceSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.EnvironmentPage = EnvironmentPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service/function/functionVersion/functionVersionContent.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Serverless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FunctionVersionContentInstance = exports.FunctionVersionContentContextImpl = void 0;
exports.FunctionVersionContentListInstance = FunctionVersionContentListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class FunctionVersionContentContextImpl {
    constructor(_version, serviceSid, functionSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(functionSid)) {
            throw new Error("Parameter 'functionSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            functionSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/Functions/${functionSid}/Versions/${sid}/Content`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new FunctionVersionContentInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.functionSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.FunctionVersionContentContextImpl = FunctionVersionContentContextImpl;
class FunctionVersionContentInstance {
    constructor(_version, payload, serviceSid, functionSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.functionSid = payload.function_sid;
        this.content = payload.content;
        this.url = payload.url;
        this._solution = {
            serviceSid,
            functionSid,
            sid
        };
    }
    get _proxy() {
        this._context = this._context || new FunctionVersionContentContextImpl(this._version, this._solution.serviceSid, this._solution.functionSid, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a FunctionVersionContentInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed FunctionVersionContentInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            functionSid: this.functionSid,
            content: this.content,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.FunctionVersionContentInstance = FunctionVersionContentInstance;
function FunctionVersionContentListInstance(version, serviceSid, functionSid, sid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(functionSid)) {
        throw new Error("Parameter 'functionSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(sid)) {
        throw new Error("Parameter 'sid' is not valid.");
    }
    const instance = ()=>instance.get();
    instance.get = function get() {
        return new FunctionVersionContentContextImpl(version, serviceSid, functionSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid,
        functionSid,
        sid
    };
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service/function/functionVersion.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Serverless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FunctionVersionPage = exports.FunctionVersionInstance = exports.FunctionVersionContextImpl = void 0;
exports.FunctionVersionListInstance = FunctionVersionListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const functionVersionContent_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service/function/functionVersion/functionVersionContent.js [app-rsc] (ecmascript)");
class FunctionVersionContextImpl {
    constructor(_version, serviceSid, functionSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(functionSid)) {
            throw new Error("Parameter 'functionSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            functionSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/Functions/${functionSid}/Versions/${sid}`;
    }
    get functionVersionContent() {
        this._functionVersionContent = this._functionVersionContent || (0, functionVersionContent_1.FunctionVersionContentListInstance)(this._version, this._solution.serviceSid, this._solution.functionSid, this._solution.sid);
        return this._functionVersionContent;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new FunctionVersionInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.functionSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.FunctionVersionContextImpl = FunctionVersionContextImpl;
class FunctionVersionInstance {
    constructor(_version, payload, serviceSid, functionSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.functionSid = payload.function_sid;
        this.path = payload.path;
        this.visibility = payload.visibility;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            serviceSid,
            functionSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new FunctionVersionContextImpl(this._version, this._solution.serviceSid, this._solution.functionSid, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a FunctionVersionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed FunctionVersionInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Access the functionVersionContent.
     */ functionVersionContent() {
        return this._proxy.functionVersionContent;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            functionSid: this.functionSid,
            path: this.path,
            visibility: this.visibility,
            dateCreated: this.dateCreated,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.FunctionVersionInstance = FunctionVersionInstance;
function FunctionVersionListInstance(version, serviceSid, functionSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(functionSid)) {
        throw new Error("Parameter 'functionSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new FunctionVersionContextImpl(version, serviceSid, functionSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid,
        functionSid
    };
    instance._uri = `/Services/${serviceSid}/Functions/${functionSid}/Versions`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new FunctionVersionPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new FunctionVersionPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class FunctionVersionPage extends Page_1.default {
    /**
     * Initialize the FunctionVersionPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of FunctionVersionInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new FunctionVersionInstance(this._version, payload, this._solution.serviceSid, this._solution.functionSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.FunctionVersionPage = FunctionVersionPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service/function.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Serverless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FunctionPage = exports.FunctionInstance = exports.FunctionContextImpl = void 0;
exports.FunctionListInstance = FunctionListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const functionVersion_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service/function/functionVersion.js [app-rsc] (ecmascript)");
class FunctionContextImpl {
    constructor(_version, serviceSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/Functions/${sid}`;
    }
    get functionVersions() {
        this._functionVersions = this._functionVersions || (0, functionVersion_1.FunctionVersionListInstance)(this._version, this._solution.serviceSid, this._solution.sid);
        return this._functionVersions;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new FunctionInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["friendlyName"] === null || params["friendlyName"] === undefined) {
            throw new Error("Required parameter \"params['friendlyName']\" missing.");
        }
        let data = {};
        data["FriendlyName"] = params["friendlyName"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new FunctionInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.FunctionContextImpl = FunctionContextImpl;
class FunctionInstance {
    constructor(_version, payload, serviceSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.friendlyName = payload.friendly_name;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            serviceSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new FunctionContextImpl(this._version, this._solution.serviceSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a FunctionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a FunctionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed FunctionInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the functionVersions.
     */ functionVersions() {
        return this._proxy.functionVersions;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            friendlyName: this.friendlyName,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.FunctionInstance = FunctionInstance;
function FunctionListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new FunctionContextImpl(version, serviceSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/Functions`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["friendlyName"] === null || params["friendlyName"] === undefined) {
            throw new Error("Required parameter \"params['friendlyName']\" missing.");
        }
        let data = {};
        data["FriendlyName"] = params["friendlyName"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new FunctionInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new FunctionPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new FunctionPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class FunctionPage extends Page_1.default {
    /**
     * Initialize the FunctionPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of FunctionInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new FunctionInstance(this._version, payload, this._solution.serviceSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.FunctionPage = FunctionPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Serverless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ServicePage = exports.ServiceInstance = exports.ServiceContextImpl = void 0;
exports.ServiceListInstance = ServiceListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const asset_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service/asset.js [app-rsc] (ecmascript)");
const build_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service/build.js [app-rsc] (ecmascript)");
const environment_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service/environment.js [app-rsc] (ecmascript)");
const function_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service/function.js [app-rsc] (ecmascript)");
class ServiceContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Services/${sid}`;
    }
    get assets() {
        this._assets = this._assets || (0, asset_1.AssetListInstance)(this._version, this._solution.sid);
        return this._assets;
    }
    get builds() {
        this._builds = this._builds || (0, build_1.BuildListInstance)(this._version, this._solution.sid);
        return this._builds;
    }
    get environments() {
        this._environments = this._environments || (0, environment_1.EnvironmentListInstance)(this._version, this._solution.sid);
        return this._environments;
    }
    get functions() {
        this._functions = this._functions || (0, function_1.FunctionListInstance)(this._version, this._solution.sid);
        return this._functions;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServiceInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["includeCredentials"] !== undefined) data["IncludeCredentials"] = serialize.bool(params["includeCredentials"]);
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["uiEditable"] !== undefined) data["UiEditable"] = serialize.bool(params["uiEditable"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServiceInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ServiceContextImpl = ServiceContextImpl;
class ServiceInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.uniqueName = payload.unique_name;
        this.includeCredentials = payload.include_credentials;
        this.uiEditable = payload.ui_editable;
        this.domainBase = payload.domain_base;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new ServiceContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a ServiceInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a ServiceInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ServiceInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the assets.
     */ assets() {
        return this._proxy.assets;
    }
    /**
     * Access the builds.
     */ builds() {
        return this._proxy.builds;
    }
    /**
     * Access the environments.
     */ environments() {
        return this._proxy.environments;
    }
    /**
     * Access the functions.
     */ functions() {
        return this._proxy.functions;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            uniqueName: this.uniqueName,
            includeCredentials: this.includeCredentials,
            uiEditable: this.uiEditable,
            domainBase: this.domainBase,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ServiceInstance = ServiceInstance;
function ServiceListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new ServiceContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Services`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["uniqueName"] === null || params["uniqueName"] === undefined) {
            throw new Error("Required parameter \"params['uniqueName']\" missing.");
        }
        if (params["friendlyName"] === null || params["friendlyName"] === undefined) {
            throw new Error("Required parameter \"params['friendlyName']\" missing.");
        }
        let data = {};
        data["UniqueName"] = params["uniqueName"];
        data["FriendlyName"] = params["friendlyName"];
        if (params["includeCredentials"] !== undefined) data["IncludeCredentials"] = serialize.bool(params["includeCredentials"]);
        if (params["uiEditable"] !== undefined) data["UiEditable"] = serialize.bool(params["uiEditable"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServiceInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServicePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ServicePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ServicePage extends Page_1.default {
    /**
     * Initialize the ServicePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ServiceInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ServiceInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ServicePage = ServicePage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Serverless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const service_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/v1/service.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of Serverless
     *
     * @param domain - The Twilio (Twilio.Serverless) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for services resource */ get services() {
        this._services = this._services || (0, service_1.ServiceListInstance)(this);
        return this._services;
    }
}
exports.default = V1;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/ServerlessBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/serverless/V1.js [app-rsc] (ecmascript)"));
class ServerlessBase extends Domain_1.default {
    /**
     * Initialize serverless domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://serverless.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
}
module.exports = ServerlessBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Serverless.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const ServerlessBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/ServerlessBase.js [app-rsc] (ecmascript)"));
class Serverless extends ServerlessBase_1.default {
    /**
     * @deprecated - Use v1.services instead
     */ get services() {
        console.warn("services is deprecated. Use v1.services instead.");
        return this.v1.services;
    }
}
module.exports = Serverless;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/StudioBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/studio/V1.js [app-rsc] (ecmascript)"));
const V2_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/studio/V2.js [app-rsc] (ecmascript)"));
class StudioBase extends Domain_1.default {
    /**
     * Initialize studio domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://studio.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
    get v2() {
        this._v2 = this._v2 || new V2_1.default(this);
        return this._v2;
    }
}
module.exports = StudioBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Studio.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const StudioBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/StudioBase.js [app-rsc] (ecmascript)"));
class Studio extends StudioBase_1.default {
    /**
     * @deprecated - Use v2.flows instead
     */ get flows() {
        console.warn("flows is deprecated. Use v2.flows instead.");
        return this.v2.flows;
    }
    /**
     * @deprecated - Use v2.flowValidate instead
     */ get flowValidate() {
        console.warn("flowValidate is deprecated. Use v2.flowValidate instead.");
        return this.v2.flowValidate;
    }
}
module.exports = Studio;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/esimProfile.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EsimProfilePage = exports.EsimProfileInstance = exports.EsimProfileContextImpl = void 0;
exports.EsimProfileListInstance = EsimProfileListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class EsimProfileContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/ESimProfiles/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new EsimProfileInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.EsimProfileContextImpl = EsimProfileContextImpl;
class EsimProfileInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.iccid = payload.iccid;
        this.simSid = payload.sim_sid;
        this.status = payload.status;
        this.eid = payload.eid;
        this.smdpPlusAddress = payload.smdp_plus_address;
        this.matchingId = payload.matching_id;
        this.activationCode = payload.activation_code;
        this.errorCode = payload.error_code;
        this.errorMessage = payload.error_message;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new EsimProfileContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a EsimProfileInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed EsimProfileInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            iccid: this.iccid,
            simSid: this.simSid,
            status: this.status,
            eid: this.eid,
            smdpPlusAddress: this.smdpPlusAddress,
            matchingId: this.matchingId,
            activationCode: this.activationCode,
            errorCode: this.errorCode,
            errorMessage: this.errorMessage,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.EsimProfileInstance = EsimProfileInstance;
function EsimProfileListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new EsimProfileContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/ESimProfiles`;
    instance.create = function create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["callbackUrl"] !== undefined) data["CallbackUrl"] = params["callbackUrl"];
        if (params["callbackMethod"] !== undefined) data["CallbackMethod"] = params["callbackMethod"];
        if (params["generateMatchingId"] !== undefined) data["GenerateMatchingId"] = serialize.bool(params["generateMatchingId"]);
        if (params["eid"] !== undefined) data["Eid"] = params["eid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new EsimProfileInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["eid"] !== undefined) data["Eid"] = params["eid"];
        if (params["simSid"] !== undefined) data["SimSid"] = params["simSid"];
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new EsimProfilePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new EsimProfilePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class EsimProfilePage extends Page_1.default {
    /**
     * Initialize the EsimProfilePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of EsimProfileInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new EsimProfileInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.EsimProfilePage = EsimProfilePage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/fleet.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FleetPage = exports.FleetInstance = exports.FleetContextImpl = void 0;
exports.FleetListInstance = FleetListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class FleetContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Fleets/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new FleetInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        if (params["networkAccessProfile"] !== undefined) data["NetworkAccessProfile"] = params["networkAccessProfile"];
        if (params["ipCommandsUrl"] !== undefined) data["IpCommandsUrl"] = params["ipCommandsUrl"];
        if (params["ipCommandsMethod"] !== undefined) data["IpCommandsMethod"] = params["ipCommandsMethod"];
        if (params["smsCommandsUrl"] !== undefined) data["SmsCommandsUrl"] = params["smsCommandsUrl"];
        if (params["smsCommandsMethod"] !== undefined) data["SmsCommandsMethod"] = params["smsCommandsMethod"];
        if (params["dataLimit"] !== undefined) data["DataLimit"] = params["dataLimit"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new FleetInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.FleetContextImpl = FleetContextImpl;
class FleetInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.sid = payload.sid;
        this.uniqueName = payload.unique_name;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.dataEnabled = payload.data_enabled;
        this.dataLimit = deserialize.integer(payload.data_limit);
        this.dataMetering = payload.data_metering;
        this.smsCommandsEnabled = payload.sms_commands_enabled;
        this.smsCommandsUrl = payload.sms_commands_url;
        this.smsCommandsMethod = payload.sms_commands_method;
        this.networkAccessProfileSid = payload.network_access_profile_sid;
        this.ipCommandsUrl = payload.ip_commands_url;
        this.ipCommandsMethod = payload.ip_commands_method;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new FleetContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a FleetInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed FleetInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            sid: this.sid,
            uniqueName: this.uniqueName,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            dataEnabled: this.dataEnabled,
            dataLimit: this.dataLimit,
            dataMetering: this.dataMetering,
            smsCommandsEnabled: this.smsCommandsEnabled,
            smsCommandsUrl: this.smsCommandsUrl,
            smsCommandsMethod: this.smsCommandsMethod,
            networkAccessProfileSid: this.networkAccessProfileSid,
            ipCommandsUrl: this.ipCommandsUrl,
            ipCommandsMethod: this.ipCommandsMethod
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.FleetInstance = FleetInstance;
function FleetListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new FleetContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Fleets`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["networkAccessProfile"] === null || params["networkAccessProfile"] === undefined) {
            throw new Error("Required parameter \"params['networkAccessProfile']\" missing.");
        }
        let data = {};
        data["NetworkAccessProfile"] = params["networkAccessProfile"];
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        if (params["dataEnabled"] !== undefined) data["DataEnabled"] = serialize.bool(params["dataEnabled"]);
        if (params["dataLimit"] !== undefined) data["DataLimit"] = params["dataLimit"];
        if (params["ipCommandsUrl"] !== undefined) data["IpCommandsUrl"] = params["ipCommandsUrl"];
        if (params["ipCommandsMethod"] !== undefined) data["IpCommandsMethod"] = params["ipCommandsMethod"];
        if (params["smsCommandsEnabled"] !== undefined) data["SmsCommandsEnabled"] = serialize.bool(params["smsCommandsEnabled"]);
        if (params["smsCommandsUrl"] !== undefined) data["SmsCommandsUrl"] = params["smsCommandsUrl"];
        if (params["smsCommandsMethod"] !== undefined) data["SmsCommandsMethod"] = params["smsCommandsMethod"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new FleetInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["networkAccessProfile"] !== undefined) data["NetworkAccessProfile"] = params["networkAccessProfile"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new FleetPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new FleetPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class FleetPage extends Page_1.default {
    /**
     * Initialize the FleetPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of FleetInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new FleetInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.FleetPage = FleetPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/ipCommand.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IpCommandPage = exports.IpCommandInstance = exports.IpCommandContextImpl = void 0;
exports.IpCommandListInstance = IpCommandListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class IpCommandContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/IpCommands/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new IpCommandInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.IpCommandContextImpl = IpCommandContextImpl;
class IpCommandInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.simSid = payload.sim_sid;
        this.simIccid = payload.sim_iccid;
        this.status = payload.status;
        this.direction = payload.direction;
        this.deviceIp = payload.device_ip;
        this.devicePort = deserialize.integer(payload.device_port);
        this.payloadType = payload.payload_type;
        this.payload = payload.payload;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new IpCommandContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a IpCommandInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed IpCommandInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            simSid: this.simSid,
            simIccid: this.simIccid,
            status: this.status,
            direction: this.direction,
            deviceIp: this.deviceIp,
            devicePort: this.devicePort,
            payloadType: this.payloadType,
            payload: this.payload,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.IpCommandInstance = IpCommandInstance;
function IpCommandListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new IpCommandContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/IpCommands`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["sim"] === null || params["sim"] === undefined) {
            throw new Error("Required parameter \"params['sim']\" missing.");
        }
        if (params["payload"] === null || params["payload"] === undefined) {
            throw new Error("Required parameter \"params['payload']\" missing.");
        }
        if (params["devicePort"] === null || params["devicePort"] === undefined) {
            throw new Error("Required parameter \"params['devicePort']\" missing.");
        }
        let data = {};
        data["Sim"] = params["sim"];
        data["Payload"] = params["payload"];
        data["DevicePort"] = params["devicePort"];
        if (params["payloadType"] !== undefined) data["PayloadType"] = params["payloadType"];
        if (params["callbackUrl"] !== undefined) data["CallbackUrl"] = params["callbackUrl"];
        if (params["callbackMethod"] !== undefined) data["CallbackMethod"] = params["callbackMethod"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new IpCommandInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["sim"] !== undefined) data["Sim"] = params["sim"];
        if (params["simIccid"] !== undefined) data["SimIccid"] = params["simIccid"];
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["direction"] !== undefined) data["Direction"] = params["direction"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new IpCommandPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new IpCommandPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class IpCommandPage extends Page_1.default {
    /**
     * Initialize the IpCommandPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of IpCommandInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new IpCommandInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.IpCommandPage = IpCommandPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/network.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NetworkPage = exports.NetworkInstance = exports.NetworkContextImpl = void 0;
exports.NetworkListInstance = NetworkListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class NetworkContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Networks/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new NetworkInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.NetworkContextImpl = NetworkContextImpl;
class NetworkInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.friendlyName = payload.friendly_name;
        this.url = payload.url;
        this.isoCountry = payload.iso_country;
        this.identifiers = payload.identifiers;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new NetworkContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a NetworkInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed NetworkInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            friendlyName: this.friendlyName,
            url: this.url,
            isoCountry: this.isoCountry,
            identifiers: this.identifiers
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.NetworkInstance = NetworkInstance;
function NetworkListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new NetworkContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Networks`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["isoCountry"] !== undefined) data["IsoCountry"] = params["isoCountry"];
        if (params["mcc"] !== undefined) data["Mcc"] = params["mcc"];
        if (params["mnc"] !== undefined) data["Mnc"] = params["mnc"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new NetworkPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new NetworkPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class NetworkPage extends Page_1.default {
    /**
     * Initialize the NetworkPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of NetworkInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new NetworkInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.NetworkPage = NetworkPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/networkAccessProfile/networkAccessProfileNetwork.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NetworkAccessProfileNetworkPage = exports.NetworkAccessProfileNetworkInstance = exports.NetworkAccessProfileNetworkContextImpl = void 0;
exports.NetworkAccessProfileNetworkListInstance = NetworkAccessProfileNetworkListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class NetworkAccessProfileNetworkContextImpl {
    constructor(_version, networkAccessProfileSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(networkAccessProfileSid)) {
            throw new Error("Parameter 'networkAccessProfileSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            networkAccessProfileSid,
            sid
        };
        this._uri = `/NetworkAccessProfiles/${networkAccessProfileSid}/Networks/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new NetworkAccessProfileNetworkInstance(operationVersion, payload, instance._solution.networkAccessProfileSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.NetworkAccessProfileNetworkContextImpl = NetworkAccessProfileNetworkContextImpl;
class NetworkAccessProfileNetworkInstance {
    constructor(_version, payload, networkAccessProfileSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.networkAccessProfileSid = payload.network_access_profile_sid;
        this.friendlyName = payload.friendly_name;
        this.isoCountry = payload.iso_country;
        this.identifiers = payload.identifiers;
        this.url = payload.url;
        this._solution = {
            networkAccessProfileSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new NetworkAccessProfileNetworkContextImpl(this._version, this._solution.networkAccessProfileSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a NetworkAccessProfileNetworkInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a NetworkAccessProfileNetworkInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed NetworkAccessProfileNetworkInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            networkAccessProfileSid: this.networkAccessProfileSid,
            friendlyName: this.friendlyName,
            isoCountry: this.isoCountry,
            identifiers: this.identifiers,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.NetworkAccessProfileNetworkInstance = NetworkAccessProfileNetworkInstance;
function NetworkAccessProfileNetworkListInstance(version, networkAccessProfileSid) {
    if (!(0, utility_1.isValidPathParam)(networkAccessProfileSid)) {
        throw new Error("Parameter 'networkAccessProfileSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new NetworkAccessProfileNetworkContextImpl(version, networkAccessProfileSid, sid);
    };
    instance._version = version;
    instance._solution = {
        networkAccessProfileSid
    };
    instance._uri = `/NetworkAccessProfiles/${networkAccessProfileSid}/Networks`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["network"] === null || params["network"] === undefined) {
            throw new Error("Required parameter \"params['network']\" missing.");
        }
        let data = {};
        data["Network"] = params["network"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new NetworkAccessProfileNetworkInstance(operationVersion, payload, instance._solution.networkAccessProfileSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new NetworkAccessProfileNetworkPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new NetworkAccessProfileNetworkPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class NetworkAccessProfileNetworkPage extends Page_1.default {
    /**
     * Initialize the NetworkAccessProfileNetworkPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of NetworkAccessProfileNetworkInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new NetworkAccessProfileNetworkInstance(this._version, payload, this._solution.networkAccessProfileSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.NetworkAccessProfileNetworkPage = NetworkAccessProfileNetworkPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/networkAccessProfile.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NetworkAccessProfilePage = exports.NetworkAccessProfileInstance = exports.NetworkAccessProfileContextImpl = void 0;
exports.NetworkAccessProfileListInstance = NetworkAccessProfileListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const networkAccessProfileNetwork_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/networkAccessProfile/networkAccessProfileNetwork.js [app-rsc] (ecmascript)");
class NetworkAccessProfileContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/NetworkAccessProfiles/${sid}`;
    }
    get networks() {
        this._networks = this._networks || (0, networkAccessProfileNetwork_1.NetworkAccessProfileNetworkListInstance)(this._version, this._solution.sid);
        return this._networks;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new NetworkAccessProfileInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new NetworkAccessProfileInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.NetworkAccessProfileContextImpl = NetworkAccessProfileContextImpl;
class NetworkAccessProfileInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.uniqueName = payload.unique_name;
        this.accountSid = payload.account_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new NetworkAccessProfileContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a NetworkAccessProfileInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed NetworkAccessProfileInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the networks.
     */ networks() {
        return this._proxy.networks;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            uniqueName: this.uniqueName,
            accountSid: this.accountSid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.NetworkAccessProfileInstance = NetworkAccessProfileInstance;
function NetworkAccessProfileListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new NetworkAccessProfileContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/NetworkAccessProfiles`;
    instance.create = function create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        if (params["networks"] !== undefined) data["Networks"] = serialize.map(params["networks"], (e)=>e);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new NetworkAccessProfileInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new NetworkAccessProfilePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new NetworkAccessProfilePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class NetworkAccessProfilePage extends Page_1.default {
    /**
     * Initialize the NetworkAccessProfilePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of NetworkAccessProfileInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new NetworkAccessProfileInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.NetworkAccessProfilePage = NetworkAccessProfilePage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/settingsUpdate.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SettingsUpdatePage = exports.SettingsUpdateInstance = void 0;
exports.SettingsUpdateListInstance = SettingsUpdateListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function SettingsUpdateListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/SettingsUpdates`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["sim"] !== undefined) data["Sim"] = params["sim"];
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SettingsUpdatePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new SettingsUpdatePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SettingsUpdateInstance {
    constructor(_version, payload){
        this._version = _version;
        this.sid = payload.sid;
        this.iccid = payload.iccid;
        this.simSid = payload.sim_sid;
        this.status = payload.status;
        this.packages = payload.packages;
        this.dateCompleted = deserialize.iso8601DateTime(payload.date_completed);
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            iccid: this.iccid,
            simSid: this.simSid,
            status: this.status,
            packages: this.packages,
            dateCompleted: this.dateCompleted,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SettingsUpdateInstance = SettingsUpdateInstance;
class SettingsUpdatePage extends Page_1.default {
    /**
     * Initialize the SettingsUpdatePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of SettingsUpdateInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new SettingsUpdateInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SettingsUpdatePage = SettingsUpdatePage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/sim/billingPeriod.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BillingPeriodPage = exports.BillingPeriodInstance = void 0;
exports.BillingPeriodListInstance = BillingPeriodListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
function BillingPeriodListInstance(version, simSid) {
    if (!(0, utility_1.isValidPathParam)(simSid)) {
        throw new Error("Parameter 'simSid' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        simSid
    };
    instance._uri = `/Sims/${simSid}/BillingPeriods`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BillingPeriodPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new BillingPeriodPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class BillingPeriodInstance {
    constructor(_version, payload, simSid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.simSid = payload.sim_sid;
        this.startTime = deserialize.iso8601DateTime(payload.start_time);
        this.endTime = deserialize.iso8601DateTime(payload.end_time);
        this.periodType = payload.period_type;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            simSid: this.simSid,
            startTime: this.startTime,
            endTime: this.endTime,
            periodType: this.periodType,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BillingPeriodInstance = BillingPeriodInstance;
class BillingPeriodPage extends Page_1.default {
    /**
     * Initialize the BillingPeriodPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of BillingPeriodInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new BillingPeriodInstance(this._version, payload, this._solution.simSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BillingPeriodPage = BillingPeriodPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/sim/simIpAddress.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SimIpAddressPage = exports.SimIpAddressInstance = void 0;
exports.SimIpAddressListInstance = SimIpAddressListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
function SimIpAddressListInstance(version, simSid) {
    if (!(0, utility_1.isValidPathParam)(simSid)) {
        throw new Error("Parameter 'simSid' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        simSid
    };
    instance._uri = `/Sims/${simSid}/IpAddresses`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SimIpAddressPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new SimIpAddressPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SimIpAddressInstance {
    constructor(_version, payload, simSid){
        this._version = _version;
        this.ipAddress = payload.ip_address;
        this.ipAddressVersion = payload.ip_address_version;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            ipAddress: this.ipAddress,
            ipAddressVersion: this.ipAddressVersion
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SimIpAddressInstance = SimIpAddressInstance;
class SimIpAddressPage extends Page_1.default {
    /**
     * Initialize the SimIpAddressPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of SimIpAddressInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new SimIpAddressInstance(this._version, payload, this._solution.simSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SimIpAddressPage = SimIpAddressPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/sim.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SimPage = exports.SimInstance = exports.SimContextImpl = void 0;
exports.SimListInstance = SimListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const billingPeriod_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/sim/billingPeriod.js [app-rsc] (ecmascript)");
const simIpAddress_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/sim/simIpAddress.js [app-rsc] (ecmascript)");
class SimContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Sims/${sid}`;
    }
    get billingPeriods() {
        this._billingPeriods = this._billingPeriods || (0, billingPeriod_1.BillingPeriodListInstance)(this._version, this._solution.sid);
        return this._billingPeriods;
    }
    get simIpAddresses() {
        this._simIpAddresses = this._simIpAddresses || (0, simIpAddress_1.SimIpAddressListInstance)(this._version, this._solution.sid);
        return this._simIpAddresses;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SimInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["fleet"] !== undefined) data["Fleet"] = params["fleet"];
        if (params["callbackUrl"] !== undefined) data["CallbackUrl"] = params["callbackUrl"];
        if (params["callbackMethod"] !== undefined) data["CallbackMethod"] = params["callbackMethod"];
        if (params["accountSid"] !== undefined) data["AccountSid"] = params["accountSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SimInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SimContextImpl = SimContextImpl;
class SimInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.uniqueName = payload.unique_name;
        this.accountSid = payload.account_sid;
        this.iccid = payload.iccid;
        this.status = payload.status;
        this.fleetSid = payload.fleet_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new SimContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a SimInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed SimInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the billingPeriods.
     */ billingPeriods() {
        return this._proxy.billingPeriods;
    }
    /**
     * Access the simIpAddresses.
     */ simIpAddresses() {
        return this._proxy.simIpAddresses;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            uniqueName: this.uniqueName,
            accountSid: this.accountSid,
            iccid: this.iccid,
            status: this.status,
            fleetSid: this.fleetSid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SimInstance = SimInstance;
function SimListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new SimContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Sims`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["iccid"] === null || params["iccid"] === undefined) {
            throw new Error("Required parameter \"params['iccid']\" missing.");
        }
        if (params["registrationCode"] === null || params["registrationCode"] === undefined) {
            throw new Error("Required parameter \"params['registrationCode']\" missing.");
        }
        let data = {};
        data["Iccid"] = params["iccid"];
        data["RegistrationCode"] = params["registrationCode"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SimInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["fleet"] !== undefined) data["Fleet"] = params["fleet"];
        if (params["iccid"] !== undefined) data["Iccid"] = params["iccid"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SimPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new SimPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SimPage extends Page_1.default {
    /**
     * Initialize the SimPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of SimInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new SimInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SimPage = SimPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/smsCommand.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SmsCommandPage = exports.SmsCommandInstance = exports.SmsCommandContextImpl = void 0;
exports.SmsCommandListInstance = SmsCommandListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class SmsCommandContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/SmsCommands/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SmsCommandInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SmsCommandContextImpl = SmsCommandContextImpl;
class SmsCommandInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.simSid = payload.sim_sid;
        this.payload = payload.payload;
        this.status = payload.status;
        this.direction = payload.direction;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new SmsCommandContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a SmsCommandInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed SmsCommandInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            simSid: this.simSid,
            payload: this.payload,
            status: this.status,
            direction: this.direction,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SmsCommandInstance = SmsCommandInstance;
function SmsCommandListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new SmsCommandContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/SmsCommands`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["sim"] === null || params["sim"] === undefined) {
            throw new Error("Required parameter \"params['sim']\" missing.");
        }
        if (params["payload"] === null || params["payload"] === undefined) {
            throw new Error("Required parameter \"params['payload']\" missing.");
        }
        let data = {};
        data["Sim"] = params["sim"];
        data["Payload"] = params["payload"];
        if (params["callbackMethod"] !== undefined) data["CallbackMethod"] = params["callbackMethod"];
        if (params["callbackUrl"] !== undefined) data["CallbackUrl"] = params["callbackUrl"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SmsCommandInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["sim"] !== undefined) data["Sim"] = params["sim"];
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["direction"] !== undefined) data["Direction"] = params["direction"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SmsCommandPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new SmsCommandPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SmsCommandPage extends Page_1.default {
    /**
     * Initialize the SmsCommandPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of SmsCommandInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new SmsCommandInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SmsCommandPage = SmsCommandPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/usageRecord.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UsageRecordPage = exports.UsageRecordInstance = void 0;
exports.UsageRecordListInstance = UsageRecordListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function UsageRecordListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/UsageRecords`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["sim"] !== undefined) data["Sim"] = params["sim"];
        if (params["fleet"] !== undefined) data["Fleet"] = params["fleet"];
        if (params["network"] !== undefined) data["Network"] = params["network"];
        if (params["isoCountry"] !== undefined) data["IsoCountry"] = params["isoCountry"];
        if (params["group"] !== undefined) data["Group"] = params["group"];
        if (params["granularity"] !== undefined) data["Granularity"] = params["granularity"];
        if (params["startTime"] !== undefined) data["StartTime"] = serialize.iso8601DateTime(params["startTime"]);
        if (params["endTime"] !== undefined) data["EndTime"] = serialize.iso8601DateTime(params["endTime"]);
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new UsageRecordPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new UsageRecordPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class UsageRecordInstance {
    constructor(_version, payload){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.simSid = payload.sim_sid;
        this.networkSid = payload.network_sid;
        this.fleetSid = payload.fleet_sid;
        this.isoCountry = payload.iso_country;
        this.period = payload.period;
        this.dataUpload = payload.data_upload;
        this.dataDownload = payload.data_download;
        this.dataTotal = payload.data_total;
        this.dataTotalBilled = payload.data_total_billed;
        this.billedUnit = payload.billed_unit;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            simSid: this.simSid,
            networkSid: this.networkSid,
            fleetSid: this.fleetSid,
            isoCountry: this.isoCountry,
            period: this.period,
            dataUpload: this.dataUpload,
            dataDownload: this.dataDownload,
            dataTotal: this.dataTotal,
            dataTotalBilled: this.dataTotalBilled,
            billedUnit: this.billedUnit
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.UsageRecordInstance = UsageRecordInstance;
class UsageRecordPage extends Page_1.default {
    /**
     * Initialize the UsageRecordPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of UsageRecordInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new UsageRecordInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.UsageRecordPage = UsageRecordPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const esimProfile_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/esimProfile.js [app-rsc] (ecmascript)");
const fleet_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/fleet.js [app-rsc] (ecmascript)");
const ipCommand_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/ipCommand.js [app-rsc] (ecmascript)");
const network_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/network.js [app-rsc] (ecmascript)");
const networkAccessProfile_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/networkAccessProfile.js [app-rsc] (ecmascript)");
const settingsUpdate_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/settingsUpdate.js [app-rsc] (ecmascript)");
const sim_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/sim.js [app-rsc] (ecmascript)");
const smsCommand_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/smsCommand.js [app-rsc] (ecmascript)");
const usageRecord_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/v1/usageRecord.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of Supersim
     *
     * @param domain - The Twilio (Twilio.Supersim) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for esimProfiles resource */ get esimProfiles() {
        this._esimProfiles = this._esimProfiles || (0, esimProfile_1.EsimProfileListInstance)(this);
        return this._esimProfiles;
    }
    /** Getter for fleets resource */ get fleets() {
        this._fleets = this._fleets || (0, fleet_1.FleetListInstance)(this);
        return this._fleets;
    }
    /** Getter for ipCommands resource */ get ipCommands() {
        this._ipCommands = this._ipCommands || (0, ipCommand_1.IpCommandListInstance)(this);
        return this._ipCommands;
    }
    /** Getter for networks resource */ get networks() {
        this._networks = this._networks || (0, network_1.NetworkListInstance)(this);
        return this._networks;
    }
    /** Getter for networkAccessProfiles resource */ get networkAccessProfiles() {
        this._networkAccessProfiles = this._networkAccessProfiles || (0, networkAccessProfile_1.NetworkAccessProfileListInstance)(this);
        return this._networkAccessProfiles;
    }
    /** Getter for settingsUpdates resource */ get settingsUpdates() {
        this._settingsUpdates = this._settingsUpdates || (0, settingsUpdate_1.SettingsUpdateListInstance)(this);
        return this._settingsUpdates;
    }
    /** Getter for sims resource */ get sims() {
        this._sims = this._sims || (0, sim_1.SimListInstance)(this);
        return this._sims;
    }
    /** Getter for smsCommands resource */ get smsCommands() {
        this._smsCommands = this._smsCommands || (0, smsCommand_1.SmsCommandListInstance)(this);
        return this._smsCommands;
    }
    /** Getter for usageRecords resource */ get usageRecords() {
        this._usageRecords = this._usageRecords || (0, usageRecord_1.UsageRecordListInstance)(this);
        return this._usageRecords;
    }
}
exports.default = V1;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/SupersimBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/supersim/V1.js [app-rsc] (ecmascript)"));
class SupersimBase extends Domain_1.default {
    /**
     * Initialize supersim domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://supersim.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
}
module.exports = SupersimBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Supersim.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const SupersimBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/SupersimBase.js [app-rsc] (ecmascript)"));
class Supersim extends SupersimBase_1.default {
    /**
     * @deprecated - Use v1.esimProfiles instead
     */ get esimProfiles() {
        console.warn("esimProfiles is deprecated. Use v1.esimProfiles instead.");
        return this.v1.esimProfiles;
    }
    /**
     * @deprecated - Use v1.fleets instead
     */ get fleets() {
        console.warn("fleets is deprecated. Use v1.fleets instead.");
        return this.v1.fleets;
    }
    /**
     * @deprecated - Use v1.ipCommands instead
     */ get ipCommands() {
        console.warn("ipCommands is deprecated. Use v1.ipCommands instead.");
        return this.v1.ipCommands;
    }
    /**
     * @deprecated - Use v1.networks instead
     */ get networks() {
        console.warn("networks is deprecated. Use v1.networks instead.");
        return this.v1.networks;
    }
    /**
     * @deprecated - Use v1.settingsUpdates instead
     */ get settingsUpdates() {
        console.warn("settingsUpdates is deprecated. Use v1.settingsUpdates instead.");
        return this.v1.settingsUpdates;
    }
    /**
     * @deprecated - Use v1.networkAccessProfiles instead
     */ get networkAccessProfiles() {
        console.warn("networkAccessProfiles is deprecated. Use v1.networkAccessProfiles instead.");
        return this.v1.networkAccessProfiles;
    }
    /**
     * @deprecated - Use v1.sims instead
     */ get sims() {
        console.warn("sims is deprecated. Use v1.sims instead.");
        return this.v1.sims;
    }
    /**
     * @deprecated - Use v1.smsCommands instead
     */ get smsCommands() {
        console.warn("smsCommands is deprecated. Use v1.smsCommands instead.");
        return this.v1.smsCommands;
    }
    /**
     * @deprecated - Use v1.usageRecords instead
     */ get usageRecords() {
        console.warn("usageRecords is deprecated. Use v1.usageRecords instead.");
        return this.v1.usageRecords;
    }
}
module.exports = Supersim;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/v1/service/document/documentPermission.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Sync
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DocumentPermissionPage = exports.DocumentPermissionInstance = exports.DocumentPermissionContextImpl = void 0;
exports.DocumentPermissionListInstance = DocumentPermissionListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class DocumentPermissionContextImpl {
    constructor(_version, serviceSid, documentSid, identity){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(documentSid)) {
            throw new Error("Parameter 'documentSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(identity)) {
            throw new Error("Parameter 'identity' is not valid.");
        }
        this._solution = {
            serviceSid,
            documentSid,
            identity
        };
        this._uri = `/Services/${serviceSid}/Documents/${documentSid}/Permissions/${identity}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new DocumentPermissionInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.documentSid, instance._solution.identity));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["read"] === null || params["read"] === undefined) {
            throw new Error("Required parameter \"params['read']\" missing.");
        }
        if (params["write"] === null || params["write"] === undefined) {
            throw new Error("Required parameter \"params['write']\" missing.");
        }
        if (params["manage"] === null || params["manage"] === undefined) {
            throw new Error("Required parameter \"params['manage']\" missing.");
        }
        let data = {};
        data["Read"] = serialize.bool(params["read"]);
        data["Write"] = serialize.bool(params["write"]);
        data["Manage"] = serialize.bool(params["manage"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new DocumentPermissionInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.documentSid, instance._solution.identity));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DocumentPermissionContextImpl = DocumentPermissionContextImpl;
class DocumentPermissionInstance {
    constructor(_version, payload, serviceSid, documentSid, identity){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.documentSid = payload.document_sid;
        this.identity = payload.identity;
        this.read = payload.read;
        this.write = payload.write;
        this.manage = payload.manage;
        this.url = payload.url;
        this._solution = {
            serviceSid,
            documentSid,
            identity: identity || this.identity
        };
    }
    get _proxy() {
        this._context = this._context || new DocumentPermissionContextImpl(this._version, this._solution.serviceSid, this._solution.documentSid, this._solution.identity);
        return this._context;
    }
    /**
     * Remove a DocumentPermissionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a DocumentPermissionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed DocumentPermissionInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            documentSid: this.documentSid,
            identity: this.identity,
            read: this.read,
            write: this.write,
            manage: this.manage,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DocumentPermissionInstance = DocumentPermissionInstance;
function DocumentPermissionListInstance(version, serviceSid, documentSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(documentSid)) {
        throw new Error("Parameter 'documentSid' is not valid.");
    }
    const instance = (identity)=>instance.get(identity);
    instance.get = function get(identity) {
        return new DocumentPermissionContextImpl(version, serviceSid, documentSid, identity);
    };
    instance._version = version;
    instance._solution = {
        serviceSid,
        documentSid
    };
    instance._uri = `/Services/${serviceSid}/Documents/${documentSid}/Permissions`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new DocumentPermissionPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new DocumentPermissionPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class DocumentPermissionPage extends Page_1.default {
    /**
     * Initialize the DocumentPermissionPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of DocumentPermissionInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new DocumentPermissionInstance(this._version, payload, this._solution.serviceSid, this._solution.documentSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DocumentPermissionPage = DocumentPermissionPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/v1/service/document.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Sync
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DocumentPage = exports.DocumentInstance = exports.DocumentContextImpl = void 0;
exports.DocumentListInstance = DocumentListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const documentPermission_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/v1/service/document/documentPermission.js [app-rsc] (ecmascript)");
class DocumentContextImpl {
    constructor(_version, serviceSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/Documents/${sid}`;
    }
    get documentPermissions() {
        this._documentPermissions = this._documentPermissions || (0, documentPermission_1.DocumentPermissionListInstance)(this._version, this._solution.serviceSid, this._solution.sid);
        return this._documentPermissions;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new DocumentInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["data"] !== undefined) data["Data"] = serialize.object(params["data"]);
        if (params["ttl"] !== undefined) data["Ttl"] = params["ttl"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        if (params["ifMatch"] !== undefined) headers["If-Match"] = params["ifMatch"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new DocumentInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DocumentContextImpl = DocumentContextImpl;
class DocumentInstance {
    constructor(_version, payload, serviceSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.uniqueName = payload.unique_name;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.url = payload.url;
        this.links = payload.links;
        this.revision = payload.revision;
        this.data = payload.data;
        this.dateExpires = deserialize.iso8601DateTime(payload.date_expires);
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.createdBy = payload.created_by;
        this._solution = {
            serviceSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new DocumentContextImpl(this._version, this._solution.serviceSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a DocumentInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a DocumentInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed DocumentInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the documentPermissions.
     */ documentPermissions() {
        return this._proxy.documentPermissions;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            uniqueName: this.uniqueName,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            url: this.url,
            links: this.links,
            revision: this.revision,
            data: this.data,
            dateExpires: this.dateExpires,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            createdBy: this.createdBy
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DocumentInstance = DocumentInstance;
function DocumentListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new DocumentContextImpl(version, serviceSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/Documents`;
    instance.create = function create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        if (params["data"] !== undefined) data["Data"] = serialize.object(params["data"]);
        if (params["ttl"] !== undefined) data["Ttl"] = params["ttl"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new DocumentInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new DocumentPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new DocumentPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class DocumentPage extends Page_1.default {
    /**
     * Initialize the DocumentPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of DocumentInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new DocumentInstance(this._version, payload, this._solution.serviceSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DocumentPage = DocumentPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/v1/service/syncList/syncListItem.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Sync
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SyncListItemPage = exports.SyncListItemInstance = exports.SyncListItemContextImpl = void 0;
exports.SyncListItemListInstance = SyncListItemListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class SyncListItemContextImpl {
    constructor(_version, serviceSid, listSid, index){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(listSid)) {
            throw new Error("Parameter 'listSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(index)) {
            throw new Error("Parameter 'index' is not valid.");
        }
        this._solution = {
            serviceSid,
            listSid,
            index
        };
        this._uri = `/Services/${serviceSid}/Lists/${listSid}/Items/${index}`;
    }
    remove(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        const headers = {};
        if (params["ifMatch"] !== undefined) headers["If-Match"] = params["ifMatch"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            params: data,
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncListItemInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.listSid, instance._solution.index));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["data"] !== undefined) data["Data"] = serialize.object(params["data"]);
        if (params["ttl"] !== undefined) data["Ttl"] = params["ttl"];
        if (params["itemTtl"] !== undefined) data["ItemTtl"] = params["itemTtl"];
        if (params["collectionTtl"] !== undefined) data["CollectionTtl"] = params["collectionTtl"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        if (params["ifMatch"] !== undefined) headers["If-Match"] = params["ifMatch"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncListItemInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.listSid, instance._solution.index));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SyncListItemContextImpl = SyncListItemContextImpl;
class SyncListItemInstance {
    constructor(_version, payload, serviceSid, listSid, index){
        this._version = _version;
        this.index = deserialize.integer(payload.index);
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.listSid = payload.list_sid;
        this.url = payload.url;
        this.revision = payload.revision;
        this.data = payload.data;
        this.dateExpires = deserialize.iso8601DateTime(payload.date_expires);
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.createdBy = payload.created_by;
        this._solution = {
            serviceSid,
            listSid,
            index: index || this.index
        };
    }
    get _proxy() {
        this._context = this._context || new SyncListItemContextImpl(this._version, this._solution.serviceSid, this._solution.listSid, this._solution.index);
        return this._context;
    }
    remove(params, callback) {
        return this._proxy.remove(params, callback);
    }
    /**
     * Fetch a SyncListItemInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed SyncListItemInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            index: this.index,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            listSid: this.listSid,
            url: this.url,
            revision: this.revision,
            data: this.data,
            dateExpires: this.dateExpires,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            createdBy: this.createdBy
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SyncListItemInstance = SyncListItemInstance;
function SyncListItemListInstance(version, serviceSid, listSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(listSid)) {
        throw new Error("Parameter 'listSid' is not valid.");
    }
    const instance = (index)=>instance.get(index);
    instance.get = function get(index) {
        return new SyncListItemContextImpl(version, serviceSid, listSid, index);
    };
    instance._version = version;
    instance._solution = {
        serviceSid,
        listSid
    };
    instance._uri = `/Services/${serviceSid}/Lists/${listSid}/Items`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["data"] === null || params["data"] === undefined) {
            throw new Error("Required parameter \"params['data']\" missing.");
        }
        let data = {};
        data["Data"] = serialize.object(params["data"]);
        if (params["ttl"] !== undefined) data["Ttl"] = params["ttl"];
        if (params["itemTtl"] !== undefined) data["ItemTtl"] = params["itemTtl"];
        if (params["collectionTtl"] !== undefined) data["CollectionTtl"] = params["collectionTtl"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncListItemInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.listSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["order"] !== undefined) data["Order"] = params["order"];
        if (params["from"] !== undefined) data["From"] = params["from"];
        if (params["bounds"] !== undefined) data["Bounds"] = params["bounds"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncListItemPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new SyncListItemPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SyncListItemPage extends Page_1.default {
    /**
     * Initialize the SyncListItemPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of SyncListItemInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new SyncListItemInstance(this._version, payload, this._solution.serviceSid, this._solution.listSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SyncListItemPage = SyncListItemPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/v1/service/syncList/syncListPermission.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Sync
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SyncListPermissionPage = exports.SyncListPermissionInstance = exports.SyncListPermissionContextImpl = void 0;
exports.SyncListPermissionListInstance = SyncListPermissionListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class SyncListPermissionContextImpl {
    constructor(_version, serviceSid, listSid, identity){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(listSid)) {
            throw new Error("Parameter 'listSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(identity)) {
            throw new Error("Parameter 'identity' is not valid.");
        }
        this._solution = {
            serviceSid,
            listSid,
            identity
        };
        this._uri = `/Services/${serviceSid}/Lists/${listSid}/Permissions/${identity}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncListPermissionInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.listSid, instance._solution.identity));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["read"] === null || params["read"] === undefined) {
            throw new Error("Required parameter \"params['read']\" missing.");
        }
        if (params["write"] === null || params["write"] === undefined) {
            throw new Error("Required parameter \"params['write']\" missing.");
        }
        if (params["manage"] === null || params["manage"] === undefined) {
            throw new Error("Required parameter \"params['manage']\" missing.");
        }
        let data = {};
        data["Read"] = serialize.bool(params["read"]);
        data["Write"] = serialize.bool(params["write"]);
        data["Manage"] = serialize.bool(params["manage"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncListPermissionInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.listSid, instance._solution.identity));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SyncListPermissionContextImpl = SyncListPermissionContextImpl;
class SyncListPermissionInstance {
    constructor(_version, payload, serviceSid, listSid, identity){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.listSid = payload.list_sid;
        this.identity = payload.identity;
        this.read = payload.read;
        this.write = payload.write;
        this.manage = payload.manage;
        this.url = payload.url;
        this._solution = {
            serviceSid,
            listSid,
            identity: identity || this.identity
        };
    }
    get _proxy() {
        this._context = this._context || new SyncListPermissionContextImpl(this._version, this._solution.serviceSid, this._solution.listSid, this._solution.identity);
        return this._context;
    }
    /**
     * Remove a SyncListPermissionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a SyncListPermissionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed SyncListPermissionInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            listSid: this.listSid,
            identity: this.identity,
            read: this.read,
            write: this.write,
            manage: this.manage,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SyncListPermissionInstance = SyncListPermissionInstance;
function SyncListPermissionListInstance(version, serviceSid, listSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(listSid)) {
        throw new Error("Parameter 'listSid' is not valid.");
    }
    const instance = (identity)=>instance.get(identity);
    instance.get = function get(identity) {
        return new SyncListPermissionContextImpl(version, serviceSid, listSid, identity);
    };
    instance._version = version;
    instance._solution = {
        serviceSid,
        listSid
    };
    instance._uri = `/Services/${serviceSid}/Lists/${listSid}/Permissions`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncListPermissionPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new SyncListPermissionPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SyncListPermissionPage extends Page_1.default {
    /**
     * Initialize the SyncListPermissionPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of SyncListPermissionInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new SyncListPermissionInstance(this._version, payload, this._solution.serviceSid, this._solution.listSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SyncListPermissionPage = SyncListPermissionPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/v1/service/syncList.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Sync
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SyncListPage = exports.SyncListInstance = exports.SyncListContextImpl = void 0;
exports.SyncListListInstance = SyncListListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const syncListItem_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/v1/service/syncList/syncListItem.js [app-rsc] (ecmascript)");
const syncListPermission_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/v1/service/syncList/syncListPermission.js [app-rsc] (ecmascript)");
class SyncListContextImpl {
    constructor(_version, serviceSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/Lists/${sid}`;
    }
    get syncListItems() {
        this._syncListItems = this._syncListItems || (0, syncListItem_1.SyncListItemListInstance)(this._version, this._solution.serviceSid, this._solution.sid);
        return this._syncListItems;
    }
    get syncListPermissions() {
        this._syncListPermissions = this._syncListPermissions || (0, syncListPermission_1.SyncListPermissionListInstance)(this._version, this._solution.serviceSid, this._solution.sid);
        return this._syncListPermissions;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncListInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["ttl"] !== undefined) data["Ttl"] = params["ttl"];
        if (params["collectionTtl"] !== undefined) data["CollectionTtl"] = params["collectionTtl"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncListInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SyncListContextImpl = SyncListContextImpl;
class SyncListInstance {
    constructor(_version, payload, serviceSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.uniqueName = payload.unique_name;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.url = payload.url;
        this.links = payload.links;
        this.revision = payload.revision;
        this.dateExpires = deserialize.iso8601DateTime(payload.date_expires);
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.createdBy = payload.created_by;
        this._solution = {
            serviceSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new SyncListContextImpl(this._version, this._solution.serviceSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a SyncListInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a SyncListInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed SyncListInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the syncListItems.
     */ syncListItems() {
        return this._proxy.syncListItems;
    }
    /**
     * Access the syncListPermissions.
     */ syncListPermissions() {
        return this._proxy.syncListPermissions;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            uniqueName: this.uniqueName,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            url: this.url,
            links: this.links,
            revision: this.revision,
            dateExpires: this.dateExpires,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            createdBy: this.createdBy
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SyncListInstance = SyncListInstance;
function SyncListListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new SyncListContextImpl(version, serviceSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/Lists`;
    instance.create = function create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        if (params["ttl"] !== undefined) data["Ttl"] = params["ttl"];
        if (params["collectionTtl"] !== undefined) data["CollectionTtl"] = params["collectionTtl"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncListInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncListPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new SyncListPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SyncListPage extends Page_1.default {
    /**
     * Initialize the SyncListPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of SyncListInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new SyncListInstance(this._version, payload, this._solution.serviceSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SyncListPage = SyncListPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/v1/service/syncMap/syncMapItem.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Sync
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SyncMapItemPage = exports.SyncMapItemInstance = exports.SyncMapItemContextImpl = void 0;
exports.SyncMapItemListInstance = SyncMapItemListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class SyncMapItemContextImpl {
    constructor(_version, serviceSid, mapSid, key){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(mapSid)) {
            throw new Error("Parameter 'mapSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(key)) {
            throw new Error("Parameter 'key' is not valid.");
        }
        this._solution = {
            serviceSid,
            mapSid,
            key
        };
        this._uri = `/Services/${serviceSid}/Maps/${mapSid}/Items/${key}`;
    }
    remove(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        const headers = {};
        if (params["ifMatch"] !== undefined) headers["If-Match"] = params["ifMatch"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            params: data,
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncMapItemInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.mapSid, instance._solution.key));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["data"] !== undefined) data["Data"] = serialize.object(params["data"]);
        if (params["ttl"] !== undefined) data["Ttl"] = params["ttl"];
        if (params["itemTtl"] !== undefined) data["ItemTtl"] = params["itemTtl"];
        if (params["collectionTtl"] !== undefined) data["CollectionTtl"] = params["collectionTtl"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        if (params["ifMatch"] !== undefined) headers["If-Match"] = params["ifMatch"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncMapItemInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.mapSid, instance._solution.key));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SyncMapItemContextImpl = SyncMapItemContextImpl;
class SyncMapItemInstance {
    constructor(_version, payload, serviceSid, mapSid, key){
        this._version = _version;
        this.key = payload.key;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.mapSid = payload.map_sid;
        this.url = payload.url;
        this.revision = payload.revision;
        this.data = payload.data;
        this.dateExpires = deserialize.iso8601DateTime(payload.date_expires);
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.createdBy = payload.created_by;
        this._solution = {
            serviceSid,
            mapSid,
            key: key || this.key
        };
    }
    get _proxy() {
        this._context = this._context || new SyncMapItemContextImpl(this._version, this._solution.serviceSid, this._solution.mapSid, this._solution.key);
        return this._context;
    }
    remove(params, callback) {
        return this._proxy.remove(params, callback);
    }
    /**
     * Fetch a SyncMapItemInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed SyncMapItemInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            key: this.key,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            mapSid: this.mapSid,
            url: this.url,
            revision: this.revision,
            data: this.data,
            dateExpires: this.dateExpires,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            createdBy: this.createdBy
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SyncMapItemInstance = SyncMapItemInstance;
function SyncMapItemListInstance(version, serviceSid, mapSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(mapSid)) {
        throw new Error("Parameter 'mapSid' is not valid.");
    }
    const instance = (key)=>instance.get(key);
    instance.get = function get(key) {
        return new SyncMapItemContextImpl(version, serviceSid, mapSid, key);
    };
    instance._version = version;
    instance._solution = {
        serviceSid,
        mapSid
    };
    instance._uri = `/Services/${serviceSid}/Maps/${mapSid}/Items`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["key"] === null || params["key"] === undefined) {
            throw new Error("Required parameter \"params['key']\" missing.");
        }
        if (params["data"] === null || params["data"] === undefined) {
            throw new Error("Required parameter \"params['data']\" missing.");
        }
        let data = {};
        data["Key"] = params["key"];
        data["Data"] = serialize.object(params["data"]);
        if (params["ttl"] !== undefined) data["Ttl"] = params["ttl"];
        if (params["itemTtl"] !== undefined) data["ItemTtl"] = params["itemTtl"];
        if (params["collectionTtl"] !== undefined) data["CollectionTtl"] = params["collectionTtl"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncMapItemInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.mapSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["order"] !== undefined) data["Order"] = params["order"];
        if (params["from"] !== undefined) data["From"] = params["from"];
        if (params["bounds"] !== undefined) data["Bounds"] = params["bounds"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncMapItemPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new SyncMapItemPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SyncMapItemPage extends Page_1.default {
    /**
     * Initialize the SyncMapItemPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of SyncMapItemInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new SyncMapItemInstance(this._version, payload, this._solution.serviceSid, this._solution.mapSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SyncMapItemPage = SyncMapItemPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/v1/service/syncMap/syncMapPermission.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Sync
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SyncMapPermissionPage = exports.SyncMapPermissionInstance = exports.SyncMapPermissionContextImpl = void 0;
exports.SyncMapPermissionListInstance = SyncMapPermissionListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class SyncMapPermissionContextImpl {
    constructor(_version, serviceSid, mapSid, identity){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(mapSid)) {
            throw new Error("Parameter 'mapSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(identity)) {
            throw new Error("Parameter 'identity' is not valid.");
        }
        this._solution = {
            serviceSid,
            mapSid,
            identity
        };
        this._uri = `/Services/${serviceSid}/Maps/${mapSid}/Permissions/${identity}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncMapPermissionInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.mapSid, instance._solution.identity));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["read"] === null || params["read"] === undefined) {
            throw new Error("Required parameter \"params['read']\" missing.");
        }
        if (params["write"] === null || params["write"] === undefined) {
            throw new Error("Required parameter \"params['write']\" missing.");
        }
        if (params["manage"] === null || params["manage"] === undefined) {
            throw new Error("Required parameter \"params['manage']\" missing.");
        }
        let data = {};
        data["Read"] = serialize.bool(params["read"]);
        data["Write"] = serialize.bool(params["write"]);
        data["Manage"] = serialize.bool(params["manage"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncMapPermissionInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.mapSid, instance._solution.identity));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SyncMapPermissionContextImpl = SyncMapPermissionContextImpl;
class SyncMapPermissionInstance {
    constructor(_version, payload, serviceSid, mapSid, identity){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.mapSid = payload.map_sid;
        this.identity = payload.identity;
        this.read = payload.read;
        this.write = payload.write;
        this.manage = payload.manage;
        this.url = payload.url;
        this._solution = {
            serviceSid,
            mapSid,
            identity: identity || this.identity
        };
    }
    get _proxy() {
        this._context = this._context || new SyncMapPermissionContextImpl(this._version, this._solution.serviceSid, this._solution.mapSid, this._solution.identity);
        return this._context;
    }
    /**
     * Remove a SyncMapPermissionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a SyncMapPermissionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed SyncMapPermissionInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            mapSid: this.mapSid,
            identity: this.identity,
            read: this.read,
            write: this.write,
            manage: this.manage,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SyncMapPermissionInstance = SyncMapPermissionInstance;
function SyncMapPermissionListInstance(version, serviceSid, mapSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(mapSid)) {
        throw new Error("Parameter 'mapSid' is not valid.");
    }
    const instance = (identity)=>instance.get(identity);
    instance.get = function get(identity) {
        return new SyncMapPermissionContextImpl(version, serviceSid, mapSid, identity);
    };
    instance._version = version;
    instance._solution = {
        serviceSid,
        mapSid
    };
    instance._uri = `/Services/${serviceSid}/Maps/${mapSid}/Permissions`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncMapPermissionPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new SyncMapPermissionPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SyncMapPermissionPage extends Page_1.default {
    /**
     * Initialize the SyncMapPermissionPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of SyncMapPermissionInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new SyncMapPermissionInstance(this._version, payload, this._solution.serviceSid, this._solution.mapSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SyncMapPermissionPage = SyncMapPermissionPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/v1/service/syncMap.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Sync
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SyncMapPage = exports.SyncMapInstance = exports.SyncMapContextImpl = void 0;
exports.SyncMapListInstance = SyncMapListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const syncMapItem_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/v1/service/syncMap/syncMapItem.js [app-rsc] (ecmascript)");
const syncMapPermission_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/v1/service/syncMap/syncMapPermission.js [app-rsc] (ecmascript)");
class SyncMapContextImpl {
    constructor(_version, serviceSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/Maps/${sid}`;
    }
    get syncMapItems() {
        this._syncMapItems = this._syncMapItems || (0, syncMapItem_1.SyncMapItemListInstance)(this._version, this._solution.serviceSid, this._solution.sid);
        return this._syncMapItems;
    }
    get syncMapPermissions() {
        this._syncMapPermissions = this._syncMapPermissions || (0, syncMapPermission_1.SyncMapPermissionListInstance)(this._version, this._solution.serviceSid, this._solution.sid);
        return this._syncMapPermissions;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncMapInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["ttl"] !== undefined) data["Ttl"] = params["ttl"];
        if (params["collectionTtl"] !== undefined) data["CollectionTtl"] = params["collectionTtl"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncMapInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SyncMapContextImpl = SyncMapContextImpl;
class SyncMapInstance {
    constructor(_version, payload, serviceSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.uniqueName = payload.unique_name;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.url = payload.url;
        this.links = payload.links;
        this.revision = payload.revision;
        this.dateExpires = deserialize.iso8601DateTime(payload.date_expires);
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.createdBy = payload.created_by;
        this._solution = {
            serviceSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new SyncMapContextImpl(this._version, this._solution.serviceSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a SyncMapInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a SyncMapInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed SyncMapInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the syncMapItems.
     */ syncMapItems() {
        return this._proxy.syncMapItems;
    }
    /**
     * Access the syncMapPermissions.
     */ syncMapPermissions() {
        return this._proxy.syncMapPermissions;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            uniqueName: this.uniqueName,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            url: this.url,
            links: this.links,
            revision: this.revision,
            dateExpires: this.dateExpires,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            createdBy: this.createdBy
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SyncMapInstance = SyncMapInstance;
function SyncMapListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new SyncMapContextImpl(version, serviceSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/Maps`;
    instance.create = function create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        if (params["ttl"] !== undefined) data["Ttl"] = params["ttl"];
        if (params["collectionTtl"] !== undefined) data["CollectionTtl"] = params["collectionTtl"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncMapInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncMapPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new SyncMapPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SyncMapPage extends Page_1.default {
    /**
     * Initialize the SyncMapPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of SyncMapInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new SyncMapInstance(this._version, payload, this._solution.serviceSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SyncMapPage = SyncMapPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/v1/service/syncStream/streamMessage.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Sync
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.StreamMessageInstance = void 0;
exports.StreamMessageListInstance = StreamMessageListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
function StreamMessageListInstance(version, serviceSid, streamSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(streamSid)) {
        throw new Error("Parameter 'streamSid' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        serviceSid,
        streamSid
    };
    instance._uri = `/Services/${serviceSid}/Streams/${streamSid}/Messages`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["data"] === null || params["data"] === undefined) {
            throw new Error("Required parameter \"params['data']\" missing.");
        }
        let data = {};
        data["Data"] = serialize.object(params["data"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new StreamMessageInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.streamSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class StreamMessageInstance {
    constructor(_version, payload, serviceSid, streamSid){
        this._version = _version;
        this.sid = payload.sid;
        this.data = payload.data;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            data: this.data
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.StreamMessageInstance = StreamMessageInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/v1/service/syncStream.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Sync
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SyncStreamPage = exports.SyncStreamInstance = exports.SyncStreamContextImpl = void 0;
exports.SyncStreamListInstance = SyncStreamListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const streamMessage_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/v1/service/syncStream/streamMessage.js [app-rsc] (ecmascript)");
class SyncStreamContextImpl {
    constructor(_version, serviceSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/Streams/${sid}`;
    }
    get streamMessages() {
        this._streamMessages = this._streamMessages || (0, streamMessage_1.StreamMessageListInstance)(this._version, this._solution.serviceSid, this._solution.sid);
        return this._streamMessages;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncStreamInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["ttl"] !== undefined) data["Ttl"] = params["ttl"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncStreamInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SyncStreamContextImpl = SyncStreamContextImpl;
class SyncStreamInstance {
    constructor(_version, payload, serviceSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.uniqueName = payload.unique_name;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.url = payload.url;
        this.links = payload.links;
        this.dateExpires = deserialize.iso8601DateTime(payload.date_expires);
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.createdBy = payload.created_by;
        this._solution = {
            serviceSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new SyncStreamContextImpl(this._version, this._solution.serviceSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a SyncStreamInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a SyncStreamInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed SyncStreamInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the streamMessages.
     */ streamMessages() {
        return this._proxy.streamMessages;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            uniqueName: this.uniqueName,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            url: this.url,
            links: this.links,
            dateExpires: this.dateExpires,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            createdBy: this.createdBy
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SyncStreamInstance = SyncStreamInstance;
function SyncStreamListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new SyncStreamContextImpl(version, serviceSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/Streams`;
    instance.create = function create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        if (params["ttl"] !== undefined) data["Ttl"] = params["ttl"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncStreamInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SyncStreamPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new SyncStreamPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SyncStreamPage extends Page_1.default {
    /**
     * Initialize the SyncStreamPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of SyncStreamInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new SyncStreamInstance(this._version, payload, this._solution.serviceSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SyncStreamPage = SyncStreamPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/v1/service.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Sync
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ServicePage = exports.ServiceInstance = exports.ServiceContextImpl = void 0;
exports.ServiceListInstance = ServiceListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const document_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/v1/service/document.js [app-rsc] (ecmascript)");
const syncList_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/v1/service/syncList.js [app-rsc] (ecmascript)");
const syncMap_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/v1/service/syncMap.js [app-rsc] (ecmascript)");
const syncStream_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/v1/service/syncStream.js [app-rsc] (ecmascript)");
class ServiceContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Services/${sid}`;
    }
    get documents() {
        this._documents = this._documents || (0, document_1.DocumentListInstance)(this._version, this._solution.sid);
        return this._documents;
    }
    get syncLists() {
        this._syncLists = this._syncLists || (0, syncList_1.SyncListListInstance)(this._version, this._solution.sid);
        return this._syncLists;
    }
    get syncMaps() {
        this._syncMaps = this._syncMaps || (0, syncMap_1.SyncMapListInstance)(this._version, this._solution.sid);
        return this._syncMaps;
    }
    get syncStreams() {
        this._syncStreams = this._syncStreams || (0, syncStream_1.SyncStreamListInstance)(this._version, this._solution.sid);
        return this._syncStreams;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServiceInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["webhookUrl"] !== undefined) data["WebhookUrl"] = params["webhookUrl"];
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["reachabilityWebhooksEnabled"] !== undefined) data["ReachabilityWebhooksEnabled"] = serialize.bool(params["reachabilityWebhooksEnabled"]);
        if (params["aclEnabled"] !== undefined) data["AclEnabled"] = serialize.bool(params["aclEnabled"]);
        if (params["reachabilityDebouncingEnabled"] !== undefined) data["ReachabilityDebouncingEnabled"] = serialize.bool(params["reachabilityDebouncingEnabled"]);
        if (params["reachabilityDebouncingWindow"] !== undefined) data["ReachabilityDebouncingWindow"] = params["reachabilityDebouncingWindow"];
        if (params["webhooksFromRestEnabled"] !== undefined) data["WebhooksFromRestEnabled"] = serialize.bool(params["webhooksFromRestEnabled"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServiceInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ServiceContextImpl = ServiceContextImpl;
class ServiceInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.uniqueName = payload.unique_name;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.webhookUrl = payload.webhook_url;
        this.webhooksFromRestEnabled = payload.webhooks_from_rest_enabled;
        this.reachabilityWebhooksEnabled = payload.reachability_webhooks_enabled;
        this.aclEnabled = payload.acl_enabled;
        this.reachabilityDebouncingEnabled = payload.reachability_debouncing_enabled;
        this.reachabilityDebouncingWindow = deserialize.integer(payload.reachability_debouncing_window);
        this.links = payload.links;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new ServiceContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a ServiceInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a ServiceInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ServiceInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the documents.
     */ documents() {
        return this._proxy.documents;
    }
    /**
     * Access the syncLists.
     */ syncLists() {
        return this._proxy.syncLists;
    }
    /**
     * Access the syncMaps.
     */ syncMaps() {
        return this._proxy.syncMaps;
    }
    /**
     * Access the syncStreams.
     */ syncStreams() {
        return this._proxy.syncStreams;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            uniqueName: this.uniqueName,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            webhookUrl: this.webhookUrl,
            webhooksFromRestEnabled: this.webhooksFromRestEnabled,
            reachabilityWebhooksEnabled: this.reachabilityWebhooksEnabled,
            aclEnabled: this.aclEnabled,
            reachabilityDebouncingEnabled: this.reachabilityDebouncingEnabled,
            reachabilityDebouncingWindow: this.reachabilityDebouncingWindow,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ServiceInstance = ServiceInstance;
function ServiceListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new ServiceContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Services`;
    instance.create = function create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["webhookUrl"] !== undefined) data["WebhookUrl"] = params["webhookUrl"];
        if (params["reachabilityWebhooksEnabled"] !== undefined) data["ReachabilityWebhooksEnabled"] = serialize.bool(params["reachabilityWebhooksEnabled"]);
        if (params["aclEnabled"] !== undefined) data["AclEnabled"] = serialize.bool(params["aclEnabled"]);
        if (params["reachabilityDebouncingEnabled"] !== undefined) data["ReachabilityDebouncingEnabled"] = serialize.bool(params["reachabilityDebouncingEnabled"]);
        if (params["reachabilityDebouncingWindow"] !== undefined) data["ReachabilityDebouncingWindow"] = params["reachabilityDebouncingWindow"];
        if (params["webhooksFromRestEnabled"] !== undefined) data["WebhooksFromRestEnabled"] = serialize.bool(params["webhooksFromRestEnabled"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServiceInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServicePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ServicePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ServicePage extends Page_1.default {
    /**
     * Initialize the ServicePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ServiceInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ServiceInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ServicePage = ServicePage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Sync
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const service_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/v1/service.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of Sync
     *
     * @param domain - The Twilio (Twilio.Sync) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for services resource */ get services() {
        this._services = this._services || (0, service_1.ServiceListInstance)(this);
        return this._services;
    }
}
exports.default = V1;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/SyncBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/sync/V1.js [app-rsc] (ecmascript)"));
class SyncBase extends Domain_1.default {
    /**
     * Initialize sync domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://sync.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
}
module.exports = SyncBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Sync.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const SyncBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/SyncBase.js [app-rsc] (ecmascript)"));
class Sync extends SyncBase_1.default {
    /**
     * @deprecated - Use v1.services instead
     */ get services() {
        console.warn("services is deprecated. Use v1.services instead.");
        return this.v1.services;
    }
}
module.exports = Sync;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/TaskrouterBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/taskrouter/V1.js [app-rsc] (ecmascript)"));
class TaskrouterBase extends Domain_1.default {
    /**
     * Initialize taskrouter domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://taskrouter.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
}
module.exports = TaskrouterBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Taskrouter.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const TaskrouterBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/TaskrouterBase.js [app-rsc] (ecmascript)"));
class Taskrouter extends TaskrouterBase_1.default {
    /**
     * @deprecated - Use v1.workspaces instead
     */ get workspaces() {
        console.warn("workspaces is deprecated. Use v1.workspaces instead.");
        return this.v1.workspaces;
    }
}
module.exports = Taskrouter;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/trunking/v1/trunk/credentialList.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Trunking
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CredentialListPage = exports.CredentialListInstance = exports.CredentialListContextImpl = void 0;
exports.CredentialListListInstance = CredentialListListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class CredentialListContextImpl {
    constructor(_version, trunkSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(trunkSid)) {
            throw new Error("Parameter 'trunkSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            trunkSid,
            sid
        };
        this._uri = `/Trunks/${trunkSid}/CredentialLists/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CredentialListInstance(operationVersion, payload, instance._solution.trunkSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CredentialListContextImpl = CredentialListContextImpl;
class CredentialListInstance {
    constructor(_version, payload, trunkSid, sid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.sid = payload.sid;
        this.trunkSid = payload.trunk_sid;
        this.friendlyName = payload.friendly_name;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            trunkSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new CredentialListContextImpl(this._version, this._solution.trunkSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a CredentialListInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a CredentialListInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed CredentialListInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            sid: this.sid,
            trunkSid: this.trunkSid,
            friendlyName: this.friendlyName,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CredentialListInstance = CredentialListInstance;
function CredentialListListInstance(version, trunkSid) {
    if (!(0, utility_1.isValidPathParam)(trunkSid)) {
        throw new Error("Parameter 'trunkSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new CredentialListContextImpl(version, trunkSid, sid);
    };
    instance._version = version;
    instance._solution = {
        trunkSid
    };
    instance._uri = `/Trunks/${trunkSid}/CredentialLists`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["credentialListSid"] === null || params["credentialListSid"] === undefined) {
            throw new Error("Required parameter \"params['credentialListSid']\" missing.");
        }
        let data = {};
        data["CredentialListSid"] = params["credentialListSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CredentialListInstance(operationVersion, payload, instance._solution.trunkSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CredentialListPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new CredentialListPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class CredentialListPage extends Page_1.default {
    /**
     * Initialize the CredentialListPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of CredentialListInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new CredentialListInstance(this._version, payload, this._solution.trunkSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CredentialListPage = CredentialListPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/trunking/v1/trunk/ipAccessControlList.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Trunking
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IpAccessControlListPage = exports.IpAccessControlListInstance = exports.IpAccessControlListContextImpl = void 0;
exports.IpAccessControlListListInstance = IpAccessControlListListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class IpAccessControlListContextImpl {
    constructor(_version, trunkSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(trunkSid)) {
            throw new Error("Parameter 'trunkSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            trunkSid,
            sid
        };
        this._uri = `/Trunks/${trunkSid}/IpAccessControlLists/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new IpAccessControlListInstance(operationVersion, payload, instance._solution.trunkSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.IpAccessControlListContextImpl = IpAccessControlListContextImpl;
class IpAccessControlListInstance {
    constructor(_version, payload, trunkSid, sid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.sid = payload.sid;
        this.trunkSid = payload.trunk_sid;
        this.friendlyName = payload.friendly_name;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            trunkSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new IpAccessControlListContextImpl(this._version, this._solution.trunkSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a IpAccessControlListInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a IpAccessControlListInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed IpAccessControlListInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            sid: this.sid,
            trunkSid: this.trunkSid,
            friendlyName: this.friendlyName,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.IpAccessControlListInstance = IpAccessControlListInstance;
function IpAccessControlListListInstance(version, trunkSid) {
    if (!(0, utility_1.isValidPathParam)(trunkSid)) {
        throw new Error("Parameter 'trunkSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new IpAccessControlListContextImpl(version, trunkSid, sid);
    };
    instance._version = version;
    instance._solution = {
        trunkSid
    };
    instance._uri = `/Trunks/${trunkSid}/IpAccessControlLists`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["ipAccessControlListSid"] === null || params["ipAccessControlListSid"] === undefined) {
            throw new Error("Required parameter \"params['ipAccessControlListSid']\" missing.");
        }
        let data = {};
        data["IpAccessControlListSid"] = params["ipAccessControlListSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new IpAccessControlListInstance(operationVersion, payload, instance._solution.trunkSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new IpAccessControlListPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new IpAccessControlListPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class IpAccessControlListPage extends Page_1.default {
    /**
     * Initialize the IpAccessControlListPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of IpAccessControlListInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new IpAccessControlListInstance(this._version, payload, this._solution.trunkSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.IpAccessControlListPage = IpAccessControlListPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/trunking/v1/trunk/originationUrl.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Trunking
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OriginationUrlPage = exports.OriginationUrlInstance = exports.OriginationUrlContextImpl = void 0;
exports.OriginationUrlListInstance = OriginationUrlListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class OriginationUrlContextImpl {
    constructor(_version, trunkSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(trunkSid)) {
            throw new Error("Parameter 'trunkSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            trunkSid,
            sid
        };
        this._uri = `/Trunks/${trunkSid}/OriginationUrls/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new OriginationUrlInstance(operationVersion, payload, instance._solution.trunkSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["weight"] !== undefined) data["Weight"] = params["weight"];
        if (params["priority"] !== undefined) data["Priority"] = params["priority"];
        if (params["enabled"] !== undefined) data["Enabled"] = serialize.bool(params["enabled"]);
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["sipUrl"] !== undefined) data["SipUrl"] = params["sipUrl"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new OriginationUrlInstance(operationVersion, payload, instance._solution.trunkSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.OriginationUrlContextImpl = OriginationUrlContextImpl;
class OriginationUrlInstance {
    constructor(_version, payload, trunkSid, sid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.sid = payload.sid;
        this.trunkSid = payload.trunk_sid;
        this.weight = deserialize.integer(payload.weight);
        this.enabled = payload.enabled;
        this.sipUrl = payload.sip_url;
        this.friendlyName = payload.friendly_name;
        this.priority = deserialize.integer(payload.priority);
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            trunkSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new OriginationUrlContextImpl(this._version, this._solution.trunkSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a OriginationUrlInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a OriginationUrlInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed OriginationUrlInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            sid: this.sid,
            trunkSid: this.trunkSid,
            weight: this.weight,
            enabled: this.enabled,
            sipUrl: this.sipUrl,
            friendlyName: this.friendlyName,
            priority: this.priority,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.OriginationUrlInstance = OriginationUrlInstance;
function OriginationUrlListInstance(version, trunkSid) {
    if (!(0, utility_1.isValidPathParam)(trunkSid)) {
        throw new Error("Parameter 'trunkSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new OriginationUrlContextImpl(version, trunkSid, sid);
    };
    instance._version = version;
    instance._solution = {
        trunkSid
    };
    instance._uri = `/Trunks/${trunkSid}/OriginationUrls`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["weight"] === null || params["weight"] === undefined) {
            throw new Error("Required parameter \"params['weight']\" missing.");
        }
        if (params["priority"] === null || params["priority"] === undefined) {
            throw new Error("Required parameter \"params['priority']\" missing.");
        }
        if (params["enabled"] === null || params["enabled"] === undefined) {
            throw new Error("Required parameter \"params['enabled']\" missing.");
        }
        if (params["friendlyName"] === null || params["friendlyName"] === undefined) {
            throw new Error("Required parameter \"params['friendlyName']\" missing.");
        }
        if (params["sipUrl"] === null || params["sipUrl"] === undefined) {
            throw new Error("Required parameter \"params['sipUrl']\" missing.");
        }
        let data = {};
        data["Weight"] = params["weight"];
        data["Priority"] = params["priority"];
        data["Enabled"] = serialize.bool(params["enabled"]);
        data["FriendlyName"] = params["friendlyName"];
        data["SipUrl"] = params["sipUrl"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new OriginationUrlInstance(operationVersion, payload, instance._solution.trunkSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new OriginationUrlPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new OriginationUrlPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class OriginationUrlPage extends Page_1.default {
    /**
     * Initialize the OriginationUrlPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of OriginationUrlInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new OriginationUrlInstance(this._version, payload, this._solution.trunkSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.OriginationUrlPage = OriginationUrlPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/trunking/v1/trunk/phoneNumber.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Trunking
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PhoneNumberPage = exports.PhoneNumberInstance = exports.PhoneNumberContextImpl = void 0;
exports.PhoneNumberListInstance = PhoneNumberListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class PhoneNumberContextImpl {
    constructor(_version, trunkSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(trunkSid)) {
            throw new Error("Parameter 'trunkSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            trunkSid,
            sid
        };
        this._uri = `/Trunks/${trunkSid}/PhoneNumbers/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PhoneNumberInstance(operationVersion, payload, instance._solution.trunkSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PhoneNumberContextImpl = PhoneNumberContextImpl;
class PhoneNumberInstance {
    constructor(_version, payload, trunkSid, sid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.addressRequirements = payload.address_requirements;
        this.apiVersion = payload.api_version;
        this.beta = payload.beta;
        this.capabilities = payload.capabilities;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.friendlyName = payload.friendly_name;
        this.links = payload.links;
        this.phoneNumber = payload.phone_number;
        this.sid = payload.sid;
        this.smsApplicationSid = payload.sms_application_sid;
        this.smsFallbackMethod = payload.sms_fallback_method;
        this.smsFallbackUrl = payload.sms_fallback_url;
        this.smsMethod = payload.sms_method;
        this.smsUrl = payload.sms_url;
        this.statusCallback = payload.status_callback;
        this.statusCallbackMethod = payload.status_callback_method;
        this.trunkSid = payload.trunk_sid;
        this.url = payload.url;
        this.voiceApplicationSid = payload.voice_application_sid;
        this.voiceCallerIdLookup = payload.voice_caller_id_lookup;
        this.voiceFallbackMethod = payload.voice_fallback_method;
        this.voiceFallbackUrl = payload.voice_fallback_url;
        this.voiceMethod = payload.voice_method;
        this.voiceUrl = payload.voice_url;
        this._solution = {
            trunkSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new PhoneNumberContextImpl(this._version, this._solution.trunkSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a PhoneNumberInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a PhoneNumberInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed PhoneNumberInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            addressRequirements: this.addressRequirements,
            apiVersion: this.apiVersion,
            beta: this.beta,
            capabilities: this.capabilities,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            friendlyName: this.friendlyName,
            links: this.links,
            phoneNumber: this.phoneNumber,
            sid: this.sid,
            smsApplicationSid: this.smsApplicationSid,
            smsFallbackMethod: this.smsFallbackMethod,
            smsFallbackUrl: this.smsFallbackUrl,
            smsMethod: this.smsMethod,
            smsUrl: this.smsUrl,
            statusCallback: this.statusCallback,
            statusCallbackMethod: this.statusCallbackMethod,
            trunkSid: this.trunkSid,
            url: this.url,
            voiceApplicationSid: this.voiceApplicationSid,
            voiceCallerIdLookup: this.voiceCallerIdLookup,
            voiceFallbackMethod: this.voiceFallbackMethod,
            voiceFallbackUrl: this.voiceFallbackUrl,
            voiceMethod: this.voiceMethod,
            voiceUrl: this.voiceUrl
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PhoneNumberInstance = PhoneNumberInstance;
function PhoneNumberListInstance(version, trunkSid) {
    if (!(0, utility_1.isValidPathParam)(trunkSid)) {
        throw new Error("Parameter 'trunkSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new PhoneNumberContextImpl(version, trunkSid, sid);
    };
    instance._version = version;
    instance._solution = {
        trunkSid
    };
    instance._uri = `/Trunks/${trunkSid}/PhoneNumbers`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["phoneNumberSid"] === null || params["phoneNumberSid"] === undefined) {
            throw new Error("Required parameter \"params['phoneNumberSid']\" missing.");
        }
        let data = {};
        data["PhoneNumberSid"] = params["phoneNumberSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PhoneNumberInstance(operationVersion, payload, instance._solution.trunkSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PhoneNumberPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new PhoneNumberPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class PhoneNumberPage extends Page_1.default {
    /**
     * Initialize the PhoneNumberPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of PhoneNumberInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new PhoneNumberInstance(this._version, payload, this._solution.trunkSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PhoneNumberPage = PhoneNumberPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/trunking/v1/trunk/recording.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Trunking
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RecordingInstance = exports.RecordingContextImpl = void 0;
exports.RecordingListInstance = RecordingListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class RecordingContextImpl {
    constructor(_version, trunkSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(trunkSid)) {
            throw new Error("Parameter 'trunkSid' is not valid.");
        }
        this._solution = {
            trunkSid
        };
        this._uri = `/Trunks/${trunkSid}/Recording`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new RecordingInstance(operationVersion, payload, instance._solution.trunkSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["mode"] !== undefined) data["Mode"] = params["mode"];
        if (params["trim"] !== undefined) data["Trim"] = params["trim"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new RecordingInstance(operationVersion, payload, instance._solution.trunkSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.RecordingContextImpl = RecordingContextImpl;
class RecordingInstance {
    constructor(_version, payload, trunkSid){
        this._version = _version;
        this.mode = payload.mode;
        this.trim = payload.trim;
        this._solution = {
            trunkSid
        };
    }
    get _proxy() {
        this._context = this._context || new RecordingContextImpl(this._version, this._solution.trunkSid);
        return this._context;
    }
    /**
     * Fetch a RecordingInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed RecordingInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            mode: this.mode,
            trim: this.trim
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.RecordingInstance = RecordingInstance;
function RecordingListInstance(version, trunkSid) {
    if (!(0, utility_1.isValidPathParam)(trunkSid)) {
        throw new Error("Parameter 'trunkSid' is not valid.");
    }
    const instance = ()=>instance.get();
    instance.get = function get() {
        return new RecordingContextImpl(version, trunkSid);
    };
    instance._version = version;
    instance._solution = {
        trunkSid
    };
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/trunking/v1/trunk.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Trunking
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TrunkPage = exports.TrunkInstance = exports.TrunkContextImpl = void 0;
exports.TrunkListInstance = TrunkListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const credentialList_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/trunking/v1/trunk/credentialList.js [app-rsc] (ecmascript)");
const ipAccessControlList_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/trunking/v1/trunk/ipAccessControlList.js [app-rsc] (ecmascript)");
const originationUrl_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/trunking/v1/trunk/originationUrl.js [app-rsc] (ecmascript)");
const phoneNumber_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/trunking/v1/trunk/phoneNumber.js [app-rsc] (ecmascript)");
const recording_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/trunking/v1/trunk/recording.js [app-rsc] (ecmascript)");
class TrunkContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Trunks/${sid}`;
    }
    get credentialsLists() {
        this._credentialsLists = this._credentialsLists || (0, credentialList_1.CredentialListListInstance)(this._version, this._solution.sid);
        return this._credentialsLists;
    }
    get ipAccessControlLists() {
        this._ipAccessControlLists = this._ipAccessControlLists || (0, ipAccessControlList_1.IpAccessControlListListInstance)(this._version, this._solution.sid);
        return this._ipAccessControlLists;
    }
    get originationUrls() {
        this._originationUrls = this._originationUrls || (0, originationUrl_1.OriginationUrlListInstance)(this._version, this._solution.sid);
        return this._originationUrls;
    }
    get phoneNumbers() {
        this._phoneNumbers = this._phoneNumbers || (0, phoneNumber_1.PhoneNumberListInstance)(this._version, this._solution.sid);
        return this._phoneNumbers;
    }
    get recordings() {
        this._recordings = this._recordings || (0, recording_1.RecordingListInstance)(this._version, this._solution.sid);
        return this._recordings;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new TrunkInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["domainName"] !== undefined) data["DomainName"] = params["domainName"];
        if (params["disasterRecoveryUrl"] !== undefined) data["DisasterRecoveryUrl"] = params["disasterRecoveryUrl"];
        if (params["disasterRecoveryMethod"] !== undefined) data["DisasterRecoveryMethod"] = params["disasterRecoveryMethod"];
        if (params["transferMode"] !== undefined) data["TransferMode"] = params["transferMode"];
        if (params["secure"] !== undefined) data["Secure"] = serialize.bool(params["secure"]);
        if (params["cnamLookupEnabled"] !== undefined) data["CnamLookupEnabled"] = serialize.bool(params["cnamLookupEnabled"]);
        if (params["transferCallerId"] !== undefined) data["TransferCallerId"] = params["transferCallerId"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new TrunkInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.TrunkContextImpl = TrunkContextImpl;
class TrunkInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.domainName = payload.domain_name;
        this.disasterRecoveryMethod = payload.disaster_recovery_method;
        this.disasterRecoveryUrl = payload.disaster_recovery_url;
        this.friendlyName = payload.friendly_name;
        this.secure = payload.secure;
        this.recording = payload.recording;
        this.transferMode = payload.transfer_mode;
        this.transferCallerId = payload.transfer_caller_id;
        this.cnamLookupEnabled = payload.cnam_lookup_enabled;
        this.authType = payload.auth_type;
        this.symmetricRtpEnabled = payload.symmetric_rtp_enabled;
        this.authTypeSet = payload.auth_type_set;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.sid = payload.sid;
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new TrunkContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a TrunkInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a TrunkInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed TrunkInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the credentialsLists.
     */ credentialsLists() {
        return this._proxy.credentialsLists;
    }
    /**
     * Access the ipAccessControlLists.
     */ ipAccessControlLists() {
        return this._proxy.ipAccessControlLists;
    }
    /**
     * Access the originationUrls.
     */ originationUrls() {
        return this._proxy.originationUrls;
    }
    /**
     * Access the phoneNumbers.
     */ phoneNumbers() {
        return this._proxy.phoneNumbers;
    }
    /**
     * Access the recordings.
     */ recordings() {
        return this._proxy.recordings;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            domainName: this.domainName,
            disasterRecoveryMethod: this.disasterRecoveryMethod,
            disasterRecoveryUrl: this.disasterRecoveryUrl,
            friendlyName: this.friendlyName,
            secure: this.secure,
            recording: this.recording,
            transferMode: this.transferMode,
            transferCallerId: this.transferCallerId,
            cnamLookupEnabled: this.cnamLookupEnabled,
            authType: this.authType,
            symmetricRtpEnabled: this.symmetricRtpEnabled,
            authTypeSet: this.authTypeSet,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            sid: this.sid,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.TrunkInstance = TrunkInstance;
function TrunkListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new TrunkContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Trunks`;
    instance.create = function create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["domainName"] !== undefined) data["DomainName"] = params["domainName"];
        if (params["disasterRecoveryUrl"] !== undefined) data["DisasterRecoveryUrl"] = params["disasterRecoveryUrl"];
        if (params["disasterRecoveryMethod"] !== undefined) data["DisasterRecoveryMethod"] = params["disasterRecoveryMethod"];
        if (params["transferMode"] !== undefined) data["TransferMode"] = params["transferMode"];
        if (params["secure"] !== undefined) data["Secure"] = serialize.bool(params["secure"]);
        if (params["cnamLookupEnabled"] !== undefined) data["CnamLookupEnabled"] = serialize.bool(params["cnamLookupEnabled"]);
        if (params["transferCallerId"] !== undefined) data["TransferCallerId"] = params["transferCallerId"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new TrunkInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new TrunkPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new TrunkPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class TrunkPage extends Page_1.default {
    /**
     * Initialize the TrunkPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of TrunkInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new TrunkInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.TrunkPage = TrunkPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/trunking/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Trunking
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const trunk_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/trunking/v1/trunk.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of Trunking
     *
     * @param domain - The Twilio (Twilio.Trunking) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for trunks resource */ get trunks() {
        this._trunks = this._trunks || (0, trunk_1.TrunkListInstance)(this);
        return this._trunks;
    }
}
exports.default = V1;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/TrunkingBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/trunking/V1.js [app-rsc] (ecmascript)"));
class TrunkingBase extends Domain_1.default {
    /**
     * Initialize trunking domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://trunking.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
}
module.exports = TrunkingBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Trunking.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const TrunkingBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/TrunkingBase.js [app-rsc] (ecmascript)"));
class Trunking extends TrunkingBase_1.default {
    /**
     * @deprecated - Use v1.trunks instead
     */ get trunks() {
        console.warn("trunks is deprecated. Use v1.trunks instead.");
        return this.v1.trunks;
    }
}
module.exports = Trunking;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/TrusthubBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/trusthub/V1.js [app-rsc] (ecmascript)"));
class TrusthubBase extends Domain_1.default {
    /**
     * Initialize trusthub domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://trusthub.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
}
module.exports = TrusthubBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Trusthub.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const TrusthubBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/TrusthubBase.js [app-rsc] (ecmascript)"));
class Trusthub extends TrusthubBase_1.default {
    /**
     * @deprecated - Use v1.customerProfiles instead
     */ get customerProfiles() {
        console.warn("customerProfiles is deprecated. Use v1.customerProfiles instead.");
        return this.v1.customerProfiles;
    }
    /**
     * @deprecated - Use v1.endUsers instead
     */ get endUsers() {
        console.warn("endUsers is deprecated. Use v1.endUsers instead.");
        return this.v1.endUsers;
    }
    /**
     * @deprecated - Use v1.endUserTypes instead
     */ get endUserTypes() {
        console.warn("endUserTypes is deprecated. Use v1.endUserTypes instead.");
        return this.v1.endUserTypes;
    }
    /**
     * @deprecated - Use v1.policies instead
     */ get policies() {
        console.warn("policies is deprecated. Use v1.policies instead.");
        return this.v1.policies;
    }
    /**
     * @deprecated - Use v1.supportingDocuments instead
     */ get supportingDocuments() {
        console.warn("supportingDocuments is deprecated. Use v1.supportingDocuments instead.");
        return this.v1.supportingDocuments;
    }
    /**
     * @deprecated - Use v1.supportingDocumentTypes instead
     */ get supportingDocumentTypes() {
        console.warn("supportingDocumentTypes is deprecated. Use v1.supportingDocumentTypes instead.");
        return this.v1.supportingDocumentTypes;
    }
    /**
     * @deprecated - Use v1.trustProducts instead
     */ get trustProducts() {
        console.warn("trustProducts is deprecated. Use v1.trustProducts instead.");
        return this.v1.trustProducts;
    }
}
module.exports = Trusthub;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/VerifyBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V2_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/V2.js [app-rsc] (ecmascript)"));
class VerifyBase extends Domain_1.default {
    /**
     * Initialize verify domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://verify.twilio.com");
    }
    get v2() {
        this._v2 = this._v2 || new V2_1.default(this);
        return this._v2;
    }
}
module.exports = VerifyBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Verify.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const VerifyBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/VerifyBase.js [app-rsc] (ecmascript)"));
class Verify extends VerifyBase_1.default {
    /**
     * @deprecated - Use v2.forms instead
     */ get forms() {
        console.warn("forms is deprecated. Use v2.forms instead.");
        return this.v2.forms;
    }
    /**
     * @deprecated - Use v2.services instead
     */ get services() {
        console.warn("services is deprecated. Use v2.services instead.");
        return this.v2.services;
    }
    /**
     * @deprecated - Use v2.verificationAttempts instead
     */ get verificationAttempts() {
        console.warn("verificationAttempts is deprecated. Use v2.verificationAttempts instead.");
        return this.v2.verificationAttempts;
    }
    /**
     * @deprecated - Use v2.verificationAttemptsSummary instead
     */ get verificationAttemptsSummary() {
        console.warn("verificationAttemptsSummary is deprecated. Use v2.verificationAttemptsSummary instead.");
        return this.v2.verificationAttemptsSummary;
    }
    /**
     * @deprecated - Use v2.templates instead
     */ get templates() {
        console.warn("templates is deprecated. Use v2.templates instead.");
        return this.v2.templates;
    }
}
module.exports = Verify;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/VideoBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/video/V1.js [app-rsc] (ecmascript)"));
class VideoBase extends Domain_1.default {
    /**
     * Initialize video domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://video.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
}
module.exports = VideoBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Video.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const VideoBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/VideoBase.js [app-rsc] (ecmascript)"));
class Video extends VideoBase_1.default {
    /**
     * @deprecated - Use v1.compositions instead
     */ get compositions() {
        console.warn("compositions is deprecated. Use v1.compositions instead.");
        return this.v1.compositions;
    }
    /**
     * @deprecated - Use v1.compositionHooks instead
     */ get compositionHooks() {
        console.warn("compositionHooks is deprecated. Use v1.compositionHooks instead.");
        return this.v1.compositionHooks;
    }
    /**
     * @deprecated - Use v1.compositionSettings instead
     */ get compositionSettings() {
        console.warn("compositionSettings is deprecated. Use v1.compositionSettings instead.");
        return this.v1.compositionSettings;
    }
    /**
     * @deprecated - Use v1.recordings instead
     */ get recordings() {
        console.warn("recordings is deprecated. Use v1.recordings instead.");
        return this.v1.recordings;
    }
    /**
     * @deprecated - Use v1.recordingSettings instead
     */ get recordingSettings() {
        console.warn("recordingSettings is deprecated. Use v1.recordingSettings instead.");
        return this.v1.recordingSettings;
    }
    /**
     * @deprecated - Use v1.rooms instead
     */ get rooms() {
        console.warn("rooms is deprecated. Use v1.rooms instead.");
        return this.v1.rooms;
    }
}
module.exports = Video;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/v1/archivedCall.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Voice
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ArchivedCallContextImpl = void 0;
exports.ArchivedCallListInstance = ArchivedCallListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class ArchivedCallContextImpl {
    constructor(_version, date, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(date)) {
            throw new Error("Parameter 'date' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            date,
            sid
        };
        this._uri = `/Archives/${date}/Calls/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ArchivedCallContextImpl = ArchivedCallContextImpl;
function ArchivedCallListInstance(version) {
    const instance = (date, sid)=>instance.get(date, sid);
    instance.get = function get(date, sid) {
        return new ArchivedCallContextImpl(version, date, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/v1/byocTrunk.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Voice
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ByocTrunkPage = exports.ByocTrunkInstance = exports.ByocTrunkContextImpl = void 0;
exports.ByocTrunkListInstance = ByocTrunkListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class ByocTrunkContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/ByocTrunks/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ByocTrunkInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["voiceUrl"] !== undefined) data["VoiceUrl"] = params["voiceUrl"];
        if (params["voiceMethod"] !== undefined) data["VoiceMethod"] = params["voiceMethod"];
        if (params["voiceFallbackUrl"] !== undefined) data["VoiceFallbackUrl"] = params["voiceFallbackUrl"];
        if (params["voiceFallbackMethod"] !== undefined) data["VoiceFallbackMethod"] = params["voiceFallbackMethod"];
        if (params["statusCallbackUrl"] !== undefined) data["StatusCallbackUrl"] = params["statusCallbackUrl"];
        if (params["statusCallbackMethod"] !== undefined) data["StatusCallbackMethod"] = params["statusCallbackMethod"];
        if (params["cnamLookupEnabled"] !== undefined) data["CnamLookupEnabled"] = serialize.bool(params["cnamLookupEnabled"]);
        if (params["connectionPolicySid"] !== undefined) data["ConnectionPolicySid"] = params["connectionPolicySid"];
        if (params["fromDomainSid"] !== undefined) data["FromDomainSid"] = params["fromDomainSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ByocTrunkInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ByocTrunkContextImpl = ByocTrunkContextImpl;
class ByocTrunkInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.sid = payload.sid;
        this.friendlyName = payload.friendly_name;
        this.voiceUrl = payload.voice_url;
        this.voiceMethod = payload.voice_method;
        this.voiceFallbackUrl = payload.voice_fallback_url;
        this.voiceFallbackMethod = payload.voice_fallback_method;
        this.statusCallbackUrl = payload.status_callback_url;
        this.statusCallbackMethod = payload.status_callback_method;
        this.cnamLookupEnabled = payload.cnam_lookup_enabled;
        this.connectionPolicySid = payload.connection_policy_sid;
        this.fromDomainSid = payload.from_domain_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new ByocTrunkContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a ByocTrunkInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a ByocTrunkInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ByocTrunkInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            sid: this.sid,
            friendlyName: this.friendlyName,
            voiceUrl: this.voiceUrl,
            voiceMethod: this.voiceMethod,
            voiceFallbackUrl: this.voiceFallbackUrl,
            voiceFallbackMethod: this.voiceFallbackMethod,
            statusCallbackUrl: this.statusCallbackUrl,
            statusCallbackMethod: this.statusCallbackMethod,
            cnamLookupEnabled: this.cnamLookupEnabled,
            connectionPolicySid: this.connectionPolicySid,
            fromDomainSid: this.fromDomainSid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ByocTrunkInstance = ByocTrunkInstance;
function ByocTrunkListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new ByocTrunkContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/ByocTrunks`;
    instance.create = function create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["voiceUrl"] !== undefined) data["VoiceUrl"] = params["voiceUrl"];
        if (params["voiceMethod"] !== undefined) data["VoiceMethod"] = params["voiceMethod"];
        if (params["voiceFallbackUrl"] !== undefined) data["VoiceFallbackUrl"] = params["voiceFallbackUrl"];
        if (params["voiceFallbackMethod"] !== undefined) data["VoiceFallbackMethod"] = params["voiceFallbackMethod"];
        if (params["statusCallbackUrl"] !== undefined) data["StatusCallbackUrl"] = params["statusCallbackUrl"];
        if (params["statusCallbackMethod"] !== undefined) data["StatusCallbackMethod"] = params["statusCallbackMethod"];
        if (params["cnamLookupEnabled"] !== undefined) data["CnamLookupEnabled"] = serialize.bool(params["cnamLookupEnabled"]);
        if (params["connectionPolicySid"] !== undefined) data["ConnectionPolicySid"] = params["connectionPolicySid"];
        if (params["fromDomainSid"] !== undefined) data["FromDomainSid"] = params["fromDomainSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ByocTrunkInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ByocTrunkPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ByocTrunkPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ByocTrunkPage extends Page_1.default {
    /**
     * Initialize the ByocTrunkPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ByocTrunkInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ByocTrunkInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ByocTrunkPage = ByocTrunkPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/v1/connectionPolicy/connectionPolicyTarget.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Voice
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ConnectionPolicyTargetPage = exports.ConnectionPolicyTargetInstance = exports.ConnectionPolicyTargetContextImpl = void 0;
exports.ConnectionPolicyTargetListInstance = ConnectionPolicyTargetListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class ConnectionPolicyTargetContextImpl {
    constructor(_version, connectionPolicySid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(connectionPolicySid)) {
            throw new Error("Parameter 'connectionPolicySid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            connectionPolicySid,
            sid
        };
        this._uri = `/ConnectionPolicies/${connectionPolicySid}/Targets/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ConnectionPolicyTargetInstance(operationVersion, payload, instance._solution.connectionPolicySid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["target"] !== undefined) data["Target"] = params["target"];
        if (params["priority"] !== undefined) data["Priority"] = params["priority"];
        if (params["weight"] !== undefined) data["Weight"] = params["weight"];
        if (params["enabled"] !== undefined) data["Enabled"] = serialize.bool(params["enabled"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ConnectionPolicyTargetInstance(operationVersion, payload, instance._solution.connectionPolicySid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ConnectionPolicyTargetContextImpl = ConnectionPolicyTargetContextImpl;
class ConnectionPolicyTargetInstance {
    constructor(_version, payload, connectionPolicySid, sid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.connectionPolicySid = payload.connection_policy_sid;
        this.sid = payload.sid;
        this.friendlyName = payload.friendly_name;
        this.target = payload.target;
        this.priority = deserialize.integer(payload.priority);
        this.weight = deserialize.integer(payload.weight);
        this.enabled = payload.enabled;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            connectionPolicySid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new ConnectionPolicyTargetContextImpl(this._version, this._solution.connectionPolicySid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a ConnectionPolicyTargetInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a ConnectionPolicyTargetInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ConnectionPolicyTargetInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            connectionPolicySid: this.connectionPolicySid,
            sid: this.sid,
            friendlyName: this.friendlyName,
            target: this.target,
            priority: this.priority,
            weight: this.weight,
            enabled: this.enabled,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ConnectionPolicyTargetInstance = ConnectionPolicyTargetInstance;
function ConnectionPolicyTargetListInstance(version, connectionPolicySid) {
    if (!(0, utility_1.isValidPathParam)(connectionPolicySid)) {
        throw new Error("Parameter 'connectionPolicySid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new ConnectionPolicyTargetContextImpl(version, connectionPolicySid, sid);
    };
    instance._version = version;
    instance._solution = {
        connectionPolicySid
    };
    instance._uri = `/ConnectionPolicies/${connectionPolicySid}/Targets`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["target"] === null || params["target"] === undefined) {
            throw new Error("Required parameter \"params['target']\" missing.");
        }
        let data = {};
        data["Target"] = params["target"];
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["priority"] !== undefined) data["Priority"] = params["priority"];
        if (params["weight"] !== undefined) data["Weight"] = params["weight"];
        if (params["enabled"] !== undefined) data["Enabled"] = serialize.bool(params["enabled"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ConnectionPolicyTargetInstance(operationVersion, payload, instance._solution.connectionPolicySid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ConnectionPolicyTargetPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ConnectionPolicyTargetPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ConnectionPolicyTargetPage extends Page_1.default {
    /**
     * Initialize the ConnectionPolicyTargetPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ConnectionPolicyTargetInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ConnectionPolicyTargetInstance(this._version, payload, this._solution.connectionPolicySid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ConnectionPolicyTargetPage = ConnectionPolicyTargetPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/v1/connectionPolicy.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Voice
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ConnectionPolicyPage = exports.ConnectionPolicyInstance = exports.ConnectionPolicyContextImpl = void 0;
exports.ConnectionPolicyListInstance = ConnectionPolicyListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const connectionPolicyTarget_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/v1/connectionPolicy/connectionPolicyTarget.js [app-rsc] (ecmascript)");
class ConnectionPolicyContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/ConnectionPolicies/${sid}`;
    }
    get targets() {
        this._targets = this._targets || (0, connectionPolicyTarget_1.ConnectionPolicyTargetListInstance)(this._version, this._solution.sid);
        return this._targets;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ConnectionPolicyInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ConnectionPolicyInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ConnectionPolicyContextImpl = ConnectionPolicyContextImpl;
class ConnectionPolicyInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.sid = payload.sid;
        this.friendlyName = payload.friendly_name;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new ConnectionPolicyContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a ConnectionPolicyInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a ConnectionPolicyInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ConnectionPolicyInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the targets.
     */ targets() {
        return this._proxy.targets;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            sid: this.sid,
            friendlyName: this.friendlyName,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ConnectionPolicyInstance = ConnectionPolicyInstance;
function ConnectionPolicyListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new ConnectionPolicyContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/ConnectionPolicies`;
    instance.create = function create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ConnectionPolicyInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ConnectionPolicyPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ConnectionPolicyPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ConnectionPolicyPage extends Page_1.default {
    /**
     * Initialize the ConnectionPolicyPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ConnectionPolicyInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ConnectionPolicyInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ConnectionPolicyPage = ConnectionPolicyPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/v1/dialingPermissions/bulkCountryUpdate.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Voice
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BulkCountryUpdateInstance = void 0;
exports.BulkCountryUpdateListInstance = BulkCountryUpdateListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function BulkCountryUpdateListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/DialingPermissions/BulkCountryUpdates`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["updateRequest"] === null || params["updateRequest"] === undefined) {
            throw new Error("Required parameter \"params['updateRequest']\" missing.");
        }
        let data = {};
        data["UpdateRequest"] = params["updateRequest"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BulkCountryUpdateInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class BulkCountryUpdateInstance {
    constructor(_version, payload){
        this._version = _version;
        this.updateCount = deserialize.integer(payload.update_count);
        this.updateRequest = payload.update_request;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            updateCount: this.updateCount,
            updateRequest: this.updateRequest
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BulkCountryUpdateInstance = BulkCountryUpdateInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/v1/dialingPermissions/country/highriskSpecialPrefix.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Voice
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.HighriskSpecialPrefixPage = exports.HighriskSpecialPrefixInstance = void 0;
exports.HighriskSpecialPrefixListInstance = HighriskSpecialPrefixListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
function HighriskSpecialPrefixListInstance(version, isoCode) {
    if (!(0, utility_1.isValidPathParam)(isoCode)) {
        throw new Error("Parameter 'isoCode' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        isoCode
    };
    instance._uri = `/DialingPermissions/Countries/${isoCode}/HighRiskSpecialPrefixes`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new HighriskSpecialPrefixPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new HighriskSpecialPrefixPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class HighriskSpecialPrefixInstance {
    constructor(_version, payload, isoCode){
        this._version = _version;
        this.prefix = payload.prefix;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            prefix: this.prefix
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.HighriskSpecialPrefixInstance = HighriskSpecialPrefixInstance;
class HighriskSpecialPrefixPage extends Page_1.default {
    /**
     * Initialize the HighriskSpecialPrefixPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of HighriskSpecialPrefixInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new HighriskSpecialPrefixInstance(this._version, payload, this._solution.isoCode);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.HighriskSpecialPrefixPage = HighriskSpecialPrefixPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/v1/dialingPermissions/country.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Voice
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CountryPage = exports.CountryInstance = exports.CountryContextImpl = void 0;
exports.CountryListInstance = CountryListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const highriskSpecialPrefix_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/v1/dialingPermissions/country/highriskSpecialPrefix.js [app-rsc] (ecmascript)");
class CountryContextImpl {
    constructor(_version, isoCode){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(isoCode)) {
            throw new Error("Parameter 'isoCode' is not valid.");
        }
        this._solution = {
            isoCode
        };
        this._uri = `/DialingPermissions/Countries/${isoCode}`;
    }
    get highriskSpecialPrefixes() {
        this._highriskSpecialPrefixes = this._highriskSpecialPrefixes || (0, highriskSpecialPrefix_1.HighriskSpecialPrefixListInstance)(this._version, this._solution.isoCode);
        return this._highriskSpecialPrefixes;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CountryInstance(operationVersion, payload, instance._solution.isoCode));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CountryContextImpl = CountryContextImpl;
class CountryInstance {
    constructor(_version, payload, isoCode){
        this._version = _version;
        this.isoCode = payload.iso_code;
        this.name = payload.name;
        this.continent = payload.continent;
        this.countryCodes = payload.country_codes;
        this.lowRiskNumbersEnabled = payload.low_risk_numbers_enabled;
        this.highRiskSpecialNumbersEnabled = payload.high_risk_special_numbers_enabled;
        this.highRiskTollfraudNumbersEnabled = payload.high_risk_tollfraud_numbers_enabled;
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            isoCode: isoCode || this.isoCode
        };
    }
    get _proxy() {
        this._context = this._context || new CountryContextImpl(this._version, this._solution.isoCode);
        return this._context;
    }
    /**
     * Fetch a CountryInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed CountryInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Access the highriskSpecialPrefixes.
     */ highriskSpecialPrefixes() {
        return this._proxy.highriskSpecialPrefixes;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            isoCode: this.isoCode,
            name: this.name,
            continent: this.continent,
            countryCodes: this.countryCodes,
            lowRiskNumbersEnabled: this.lowRiskNumbersEnabled,
            highRiskSpecialNumbersEnabled: this.highRiskSpecialNumbersEnabled,
            highRiskTollfraudNumbersEnabled: this.highRiskTollfraudNumbersEnabled,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CountryInstance = CountryInstance;
function CountryListInstance(version) {
    const instance = (isoCode)=>instance.get(isoCode);
    instance.get = function get(isoCode) {
        return new CountryContextImpl(version, isoCode);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/DialingPermissions/Countries`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["isoCode"] !== undefined) data["IsoCode"] = params["isoCode"];
        if (params["continent"] !== undefined) data["Continent"] = params["continent"];
        if (params["countryCode"] !== undefined) data["CountryCode"] = params["countryCode"];
        if (params["lowRiskNumbersEnabled"] !== undefined) data["LowRiskNumbersEnabled"] = serialize.bool(params["lowRiskNumbersEnabled"]);
        if (params["highRiskSpecialNumbersEnabled"] !== undefined) data["HighRiskSpecialNumbersEnabled"] = serialize.bool(params["highRiskSpecialNumbersEnabled"]);
        if (params["highRiskTollfraudNumbersEnabled"] !== undefined) data["HighRiskTollfraudNumbersEnabled"] = serialize.bool(params["highRiskTollfraudNumbersEnabled"]);
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CountryPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new CountryPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class CountryPage extends Page_1.default {
    /**
     * Initialize the CountryPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of CountryInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new CountryInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CountryPage = CountryPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/v1/dialingPermissions/settings.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Voice
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SettingsInstance = exports.SettingsContextImpl = void 0;
exports.SettingsListInstance = SettingsListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
class SettingsContextImpl {
    constructor(_version){
        this._version = _version;
        this._solution = {};
        this._uri = `/Settings`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SettingsInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["dialingPermissionsInheritance"] !== undefined) data["DialingPermissionsInheritance"] = serialize.bool(params["dialingPermissionsInheritance"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SettingsInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SettingsContextImpl = SettingsContextImpl;
class SettingsInstance {
    constructor(_version, payload){
        this._version = _version;
        this.dialingPermissionsInheritance = payload.dialing_permissions_inheritance;
        this.url = payload.url;
        this._solution = {};
    }
    get _proxy() {
        this._context = this._context || new SettingsContextImpl(this._version);
        return this._context;
    }
    /**
     * Fetch a SettingsInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed SettingsInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            dialingPermissionsInheritance: this.dialingPermissionsInheritance,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SettingsInstance = SettingsInstance;
function SettingsListInstance(version) {
    const instance = ()=>instance.get();
    instance.get = function get() {
        return new SettingsContextImpl(version);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/v1/dialingPermissions.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Voice
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DialingPermissionsListInstance = DialingPermissionsListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const bulkCountryUpdate_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/v1/dialingPermissions/bulkCountryUpdate.js [app-rsc] (ecmascript)");
const country_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/v1/dialingPermissions/country.js [app-rsc] (ecmascript)");
const settings_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/v1/dialingPermissions/settings.js [app-rsc] (ecmascript)");
function DialingPermissionsListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/DialingPermissions`;
    Object.defineProperty(instance, "bulkCountryUpdates", {
        get: function bulkCountryUpdates() {
            if (!instance._bulkCountryUpdates) {
                instance._bulkCountryUpdates = (0, bulkCountryUpdate_1.BulkCountryUpdateListInstance)(instance._version);
            }
            return instance._bulkCountryUpdates;
        }
    });
    Object.defineProperty(instance, "countries", {
        get: function countries() {
            if (!instance._countries) {
                instance._countries = (0, country_1.CountryListInstance)(instance._version);
            }
            return instance._countries;
        }
    });
    Object.defineProperty(instance, "settings", {
        get: function settings() {
            if (!instance._settings) {
                instance._settings = (0, settings_1.SettingsListInstance)(instance._version);
            }
            return instance._settings;
        }
    });
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/v1/ipRecord.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Voice
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IpRecordPage = exports.IpRecordInstance = exports.IpRecordContextImpl = void 0;
exports.IpRecordListInstance = IpRecordListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class IpRecordContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/IpRecords/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new IpRecordInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new IpRecordInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.IpRecordContextImpl = IpRecordContextImpl;
class IpRecordInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.sid = payload.sid;
        this.friendlyName = payload.friendly_name;
        this.ipAddress = payload.ip_address;
        this.cidrPrefixLength = deserialize.integer(payload.cidr_prefix_length);
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new IpRecordContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a IpRecordInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a IpRecordInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed IpRecordInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            sid: this.sid,
            friendlyName: this.friendlyName,
            ipAddress: this.ipAddress,
            cidrPrefixLength: this.cidrPrefixLength,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.IpRecordInstance = IpRecordInstance;
function IpRecordListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new IpRecordContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/IpRecords`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["ipAddress"] === null || params["ipAddress"] === undefined) {
            throw new Error("Required parameter \"params['ipAddress']\" missing.");
        }
        let data = {};
        data["IpAddress"] = params["ipAddress"];
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["cidrPrefixLength"] !== undefined) data["CidrPrefixLength"] = params["cidrPrefixLength"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new IpRecordInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new IpRecordPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new IpRecordPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class IpRecordPage extends Page_1.default {
    /**
     * Initialize the IpRecordPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of IpRecordInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new IpRecordInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.IpRecordPage = IpRecordPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/v1/sourceIpMapping.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Voice
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SourceIpMappingPage = exports.SourceIpMappingInstance = exports.SourceIpMappingContextImpl = void 0;
exports.SourceIpMappingListInstance = SourceIpMappingListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class SourceIpMappingContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/SourceIpMappings/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SourceIpMappingInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["sipDomainSid"] === null || params["sipDomainSid"] === undefined) {
            throw new Error("Required parameter \"params['sipDomainSid']\" missing.");
        }
        let data = {};
        data["SipDomainSid"] = params["sipDomainSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SourceIpMappingInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SourceIpMappingContextImpl = SourceIpMappingContextImpl;
class SourceIpMappingInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.ipRecordSid = payload.ip_record_sid;
        this.sipDomainSid = payload.sip_domain_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new SourceIpMappingContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a SourceIpMappingInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a SourceIpMappingInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed SourceIpMappingInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            ipRecordSid: this.ipRecordSid,
            sipDomainSid: this.sipDomainSid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SourceIpMappingInstance = SourceIpMappingInstance;
function SourceIpMappingListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new SourceIpMappingContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/SourceIpMappings`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["ipRecordSid"] === null || params["ipRecordSid"] === undefined) {
            throw new Error("Required parameter \"params['ipRecordSid']\" missing.");
        }
        if (params["sipDomainSid"] === null || params["sipDomainSid"] === undefined) {
            throw new Error("Required parameter \"params['sipDomainSid']\" missing.");
        }
        let data = {};
        data["IpRecordSid"] = params["ipRecordSid"];
        data["SipDomainSid"] = params["sipDomainSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SourceIpMappingInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SourceIpMappingPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new SourceIpMappingPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SourceIpMappingPage extends Page_1.default {
    /**
     * Initialize the SourceIpMappingPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of SourceIpMappingInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new SourceIpMappingInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SourceIpMappingPage = SourceIpMappingPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Voice
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const archivedCall_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/v1/archivedCall.js [app-rsc] (ecmascript)");
const byocTrunk_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/v1/byocTrunk.js [app-rsc] (ecmascript)");
const connectionPolicy_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/v1/connectionPolicy.js [app-rsc] (ecmascript)");
const dialingPermissions_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/v1/dialingPermissions.js [app-rsc] (ecmascript)");
const ipRecord_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/v1/ipRecord.js [app-rsc] (ecmascript)");
const sourceIpMapping_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/v1/sourceIpMapping.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of Voice
     *
     * @param domain - The Twilio (Twilio.Voice) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for archivedCalls resource */ get archivedCalls() {
        this._archivedCalls = this._archivedCalls || (0, archivedCall_1.ArchivedCallListInstance)(this);
        return this._archivedCalls;
    }
    /** Getter for byocTrunks resource */ get byocTrunks() {
        this._byocTrunks = this._byocTrunks || (0, byocTrunk_1.ByocTrunkListInstance)(this);
        return this._byocTrunks;
    }
    /** Getter for connectionPolicies resource */ get connectionPolicies() {
        this._connectionPolicies = this._connectionPolicies || (0, connectionPolicy_1.ConnectionPolicyListInstance)(this);
        return this._connectionPolicies;
    }
    /** Getter for dialingPermissions resource */ get dialingPermissions() {
        this._dialingPermissions = this._dialingPermissions || (0, dialingPermissions_1.DialingPermissionsListInstance)(this);
        return this._dialingPermissions;
    }
    /** Getter for ipRecords resource */ get ipRecords() {
        this._ipRecords = this._ipRecords || (0, ipRecord_1.IpRecordListInstance)(this);
        return this._ipRecords;
    }
    /** Getter for sourceIpMappings resource */ get sourceIpMappings() {
        this._sourceIpMappings = this._sourceIpMappings || (0, sourceIpMapping_1.SourceIpMappingListInstance)(this);
        return this._sourceIpMappings;
    }
}
exports.default = V1;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/VoiceBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/voice/V1.js [app-rsc] (ecmascript)"));
class VoiceBase extends Domain_1.default {
    /**
     * Initialize voice domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://voice.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
}
module.exports = VoiceBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Voice.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const VoiceBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/VoiceBase.js [app-rsc] (ecmascript)"));
class Voice extends VoiceBase_1.default {
    /**
     * @deprecated - Use v1.archivedCalls instead
     */ get archivedCalls() {
        console.warn("archivedCalls is deprecated. Use v1.archivedCalls instead.");
        return this.v1.archivedCalls;
    }
    /**
     * @deprecated - Use v1.byocTrunks instead
     */ get byocTrunks() {
        console.warn("byocTrunks is deprecated. Use v1.byocTrunks instead.");
        return this.v1.byocTrunks;
    }
    /**
     * @deprecated - Use v1.connectionPolicies instead
     */ get connectionPolicies() {
        console.warn("connectionPolicies is deprecated. Use v1.connectionPolicies instead.");
        return this.v1.connectionPolicies;
    }
    /**
     * @deprecated - Use v1.dialingPermissions instead
     */ get dialingPermissions() {
        console.warn("dialingPermissions is deprecated. Use v1.dialingPermissions instead.");
        return this.v1.dialingPermissions;
    }
    /**
     * @deprecated - Use v1.ipRecords instead
     */ get ipRecords() {
        console.warn("ipRecords is deprecated. Use v1.ipRecords instead.");
        return this.v1.ipRecords;
    }
    /**
     * @deprecated - Use v1.sourceIpMappings instead
     */ get sourceIpMappings() {
        console.warn("sourceIpMappings is deprecated. Use v1.sourceIpMappings instead.");
        return this.v1.sourceIpMappings;
    }
}
module.exports = Voice;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/wireless/v1/command.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Wireless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CommandPage = exports.CommandInstance = exports.CommandContextImpl = void 0;
exports.CommandListInstance = CommandListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class CommandContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Commands/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CommandInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CommandContextImpl = CommandContextImpl;
class CommandInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.simSid = payload.sim_sid;
        this.command = payload.command;
        this.commandMode = payload.command_mode;
        this.transport = payload.transport;
        this.deliveryReceiptRequested = payload.delivery_receipt_requested;
        this.status = payload.status;
        this.direction = payload.direction;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new CommandContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a CommandInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a CommandInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed CommandInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            simSid: this.simSid,
            command: this.command,
            commandMode: this.commandMode,
            transport: this.transport,
            deliveryReceiptRequested: this.deliveryReceiptRequested,
            status: this.status,
            direction: this.direction,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CommandInstance = CommandInstance;
function CommandListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new CommandContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Commands`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["command"] === null || params["command"] === undefined) {
            throw new Error("Required parameter \"params['command']\" missing.");
        }
        let data = {};
        data["Command"] = params["command"];
        if (params["sim"] !== undefined) data["Sim"] = params["sim"];
        if (params["callbackMethod"] !== undefined) data["CallbackMethod"] = params["callbackMethod"];
        if (params["callbackUrl"] !== undefined) data["CallbackUrl"] = params["callbackUrl"];
        if (params["commandMode"] !== undefined) data["CommandMode"] = params["commandMode"];
        if (params["includeSid"] !== undefined) data["IncludeSid"] = params["includeSid"];
        if (params["deliveryReceiptRequested"] !== undefined) data["DeliveryReceiptRequested"] = serialize.bool(params["deliveryReceiptRequested"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CommandInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["sim"] !== undefined) data["Sim"] = params["sim"];
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["direction"] !== undefined) data["Direction"] = params["direction"];
        if (params["transport"] !== undefined) data["Transport"] = params["transport"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new CommandPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new CommandPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class CommandPage extends Page_1.default {
    /**
     * Initialize the CommandPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of CommandInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new CommandInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.CommandPage = CommandPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/wireless/v1/ratePlan.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Wireless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RatePlanPage = exports.RatePlanInstance = exports.RatePlanContextImpl = void 0;
exports.RatePlanListInstance = RatePlanListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class RatePlanContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/RatePlans/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new RatePlanInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new RatePlanInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.RatePlanContextImpl = RatePlanContextImpl;
class RatePlanInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.uniqueName = payload.unique_name;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.dataEnabled = payload.data_enabled;
        this.dataMetering = payload.data_metering;
        this.dataLimit = deserialize.integer(payload.data_limit);
        this.messagingEnabled = payload.messaging_enabled;
        this.voiceEnabled = payload.voice_enabled;
        this.nationalRoamingEnabled = payload.national_roaming_enabled;
        this.nationalRoamingDataLimit = deserialize.integer(payload.national_roaming_data_limit);
        this.internationalRoaming = payload.international_roaming;
        this.internationalRoamingDataLimit = deserialize.integer(payload.international_roaming_data_limit);
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new RatePlanContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a RatePlanInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a RatePlanInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed RatePlanInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            uniqueName: this.uniqueName,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            dataEnabled: this.dataEnabled,
            dataMetering: this.dataMetering,
            dataLimit: this.dataLimit,
            messagingEnabled: this.messagingEnabled,
            voiceEnabled: this.voiceEnabled,
            nationalRoamingEnabled: this.nationalRoamingEnabled,
            nationalRoamingDataLimit: this.nationalRoamingDataLimit,
            internationalRoaming: this.internationalRoaming,
            internationalRoamingDataLimit: this.internationalRoamingDataLimit,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.RatePlanInstance = RatePlanInstance;
function RatePlanListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new RatePlanContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/RatePlans`;
    instance.create = function create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["dataEnabled"] !== undefined) data["DataEnabled"] = serialize.bool(params["dataEnabled"]);
        if (params["dataLimit"] !== undefined) data["DataLimit"] = params["dataLimit"];
        if (params["dataMetering"] !== undefined) data["DataMetering"] = params["dataMetering"];
        if (params["messagingEnabled"] !== undefined) data["MessagingEnabled"] = serialize.bool(params["messagingEnabled"]);
        if (params["voiceEnabled"] !== undefined) data["VoiceEnabled"] = serialize.bool(params["voiceEnabled"]);
        if (params["nationalRoamingEnabled"] !== undefined) data["NationalRoamingEnabled"] = serialize.bool(params["nationalRoamingEnabled"]);
        if (params["internationalRoaming"] !== undefined) data["InternationalRoaming"] = serialize.map(params["internationalRoaming"], (e)=>e);
        if (params["nationalRoamingDataLimit"] !== undefined) data["NationalRoamingDataLimit"] = params["nationalRoamingDataLimit"];
        if (params["internationalRoamingDataLimit"] !== undefined) data["InternationalRoamingDataLimit"] = params["internationalRoamingDataLimit"];
        if (params["dataLimitStrategy"] !== undefined) data["DataLimitStrategy"] = params["dataLimitStrategy"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new RatePlanInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new RatePlanPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new RatePlanPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class RatePlanPage extends Page_1.default {
    /**
     * Initialize the RatePlanPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of RatePlanInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new RatePlanInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.RatePlanPage = RatePlanPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/wireless/v1/sim/dataSession.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Wireless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DataSessionPage = exports.DataSessionInstance = void 0;
exports.DataSessionListInstance = DataSessionListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
function DataSessionListInstance(version, simSid) {
    if (!(0, utility_1.isValidPathParam)(simSid)) {
        throw new Error("Parameter 'simSid' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        simSid
    };
    instance._uri = `/Sims/${simSid}/DataSessions`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new DataSessionPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new DataSessionPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class DataSessionInstance {
    constructor(_version, payload, simSid){
        this._version = _version;
        this.sid = payload.sid;
        this.simSid = payload.sim_sid;
        this.accountSid = payload.account_sid;
        this.radioLink = payload.radio_link;
        this.operatorMcc = payload.operator_mcc;
        this.operatorMnc = payload.operator_mnc;
        this.operatorCountry = payload.operator_country;
        this.operatorName = payload.operator_name;
        this.cellId = payload.cell_id;
        this.cellLocationEstimate = payload.cell_location_estimate;
        this.packetsUploaded = deserialize.integer(payload.packets_uploaded);
        this.packetsDownloaded = deserialize.integer(payload.packets_downloaded);
        this.lastUpdated = deserialize.iso8601DateTime(payload.last_updated);
        this.start = deserialize.iso8601DateTime(payload.start);
        this.end = deserialize.iso8601DateTime(payload.end);
        this.imei = payload.imei;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            simSid: this.simSid,
            accountSid: this.accountSid,
            radioLink: this.radioLink,
            operatorMcc: this.operatorMcc,
            operatorMnc: this.operatorMnc,
            operatorCountry: this.operatorCountry,
            operatorName: this.operatorName,
            cellId: this.cellId,
            cellLocationEstimate: this.cellLocationEstimate,
            packetsUploaded: this.packetsUploaded,
            packetsDownloaded: this.packetsDownloaded,
            lastUpdated: this.lastUpdated,
            start: this.start,
            end: this.end,
            imei: this.imei
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DataSessionInstance = DataSessionInstance;
class DataSessionPage extends Page_1.default {
    /**
     * Initialize the DataSessionPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of DataSessionInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new DataSessionInstance(this._version, payload, this._solution.simSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DataSessionPage = DataSessionPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/wireless/v1/sim/usageRecord.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Wireless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UsageRecordPage = exports.UsageRecordInstance = void 0;
exports.UsageRecordListInstance = UsageRecordListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
function UsageRecordListInstance(version, simSid) {
    if (!(0, utility_1.isValidPathParam)(simSid)) {
        throw new Error("Parameter 'simSid' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        simSid
    };
    instance._uri = `/Sims/${simSid}/UsageRecords`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["end"] !== undefined) data["End"] = serialize.iso8601DateTime(params["end"]);
        if (params["start"] !== undefined) data["Start"] = serialize.iso8601DateTime(params["start"]);
        if (params["granularity"] !== undefined) data["Granularity"] = params["granularity"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new UsageRecordPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new UsageRecordPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class UsageRecordInstance {
    constructor(_version, payload, simSid){
        this._version = _version;
        this.simSid = payload.sim_sid;
        this.accountSid = payload.account_sid;
        this.period = payload.period;
        this.commands = payload.commands;
        this.data = payload.data;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            simSid: this.simSid,
            accountSid: this.accountSid,
            period: this.period,
            commands: this.commands,
            data: this.data
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.UsageRecordInstance = UsageRecordInstance;
class UsageRecordPage extends Page_1.default {
    /**
     * Initialize the UsageRecordPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of UsageRecordInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new UsageRecordInstance(this._version, payload, this._solution.simSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.UsageRecordPage = UsageRecordPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/wireless/v1/sim.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Wireless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SimPage = exports.SimInstance = exports.SimContextImpl = void 0;
exports.SimListInstance = SimListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const dataSession_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/wireless/v1/sim/dataSession.js [app-rsc] (ecmascript)");
const usageRecord_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/wireless/v1/sim/usageRecord.js [app-rsc] (ecmascript)");
class SimContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Sims/${sid}`;
    }
    get dataSessions() {
        this._dataSessions = this._dataSessions || (0, dataSession_1.DataSessionListInstance)(this._version, this._solution.sid);
        return this._dataSessions;
    }
    get usageRecords() {
        this._usageRecords = this._usageRecords || (0, usageRecord_1.UsageRecordListInstance)(this._version, this._solution.sid);
        return this._usageRecords;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SimInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["uniqueName"] !== undefined) data["UniqueName"] = params["uniqueName"];
        if (params["callbackMethod"] !== undefined) data["CallbackMethod"] = params["callbackMethod"];
        if (params["callbackUrl"] !== undefined) data["CallbackUrl"] = params["callbackUrl"];
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["ratePlan"] !== undefined) data["RatePlan"] = params["ratePlan"];
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["commandsCallbackMethod"] !== undefined) data["CommandsCallbackMethod"] = params["commandsCallbackMethod"];
        if (params["commandsCallbackUrl"] !== undefined) data["CommandsCallbackUrl"] = params["commandsCallbackUrl"];
        if (params["smsFallbackMethod"] !== undefined) data["SmsFallbackMethod"] = params["smsFallbackMethod"];
        if (params["smsFallbackUrl"] !== undefined) data["SmsFallbackUrl"] = params["smsFallbackUrl"];
        if (params["smsMethod"] !== undefined) data["SmsMethod"] = params["smsMethod"];
        if (params["smsUrl"] !== undefined) data["SmsUrl"] = params["smsUrl"];
        if (params["voiceFallbackMethod"] !== undefined) data["VoiceFallbackMethod"] = params["voiceFallbackMethod"];
        if (params["voiceFallbackUrl"] !== undefined) data["VoiceFallbackUrl"] = params["voiceFallbackUrl"];
        if (params["voiceMethod"] !== undefined) data["VoiceMethod"] = params["voiceMethod"];
        if (params["voiceUrl"] !== undefined) data["VoiceUrl"] = params["voiceUrl"];
        if (params["resetStatus"] !== undefined) data["ResetStatus"] = params["resetStatus"];
        if (params["accountSid"] !== undefined) data["AccountSid"] = params["accountSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SimInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SimContextImpl = SimContextImpl;
class SimInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.uniqueName = payload.unique_name;
        this.accountSid = payload.account_sid;
        this.ratePlanSid = payload.rate_plan_sid;
        this.friendlyName = payload.friendly_name;
        this.iccid = payload.iccid;
        this.eId = payload.e_id;
        this.status = payload.status;
        this.resetStatus = payload.reset_status;
        this.commandsCallbackUrl = payload.commands_callback_url;
        this.commandsCallbackMethod = payload.commands_callback_method;
        this.smsFallbackMethod = payload.sms_fallback_method;
        this.smsFallbackUrl = payload.sms_fallback_url;
        this.smsMethod = payload.sms_method;
        this.smsUrl = payload.sms_url;
        this.voiceFallbackMethod = payload.voice_fallback_method;
        this.voiceFallbackUrl = payload.voice_fallback_url;
        this.voiceMethod = payload.voice_method;
        this.voiceUrl = payload.voice_url;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.links = payload.links;
        this.ipAddress = payload.ip_address;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new SimContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a SimInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a SimInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed SimInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the dataSessions.
     */ dataSessions() {
        return this._proxy.dataSessions;
    }
    /**
     * Access the usageRecords.
     */ usageRecords() {
        return this._proxy.usageRecords;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            uniqueName: this.uniqueName,
            accountSid: this.accountSid,
            ratePlanSid: this.ratePlanSid,
            friendlyName: this.friendlyName,
            iccid: this.iccid,
            eId: this.eId,
            status: this.status,
            resetStatus: this.resetStatus,
            commandsCallbackUrl: this.commandsCallbackUrl,
            commandsCallbackMethod: this.commandsCallbackMethod,
            smsFallbackMethod: this.smsFallbackMethod,
            smsFallbackUrl: this.smsFallbackUrl,
            smsMethod: this.smsMethod,
            smsUrl: this.smsUrl,
            voiceFallbackMethod: this.voiceFallbackMethod,
            voiceFallbackUrl: this.voiceFallbackUrl,
            voiceMethod: this.voiceMethod,
            voiceUrl: this.voiceUrl,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            links: this.links,
            ipAddress: this.ipAddress
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SimInstance = SimInstance;
function SimListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new SimContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Sims`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["iccid"] !== undefined) data["Iccid"] = params["iccid"];
        if (params["ratePlan"] !== undefined) data["RatePlan"] = params["ratePlan"];
        if (params["eId"] !== undefined) data["EId"] = params["eId"];
        if (params["simRegistrationCode"] !== undefined) data["SimRegistrationCode"] = params["simRegistrationCode"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SimPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new SimPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class SimPage extends Page_1.default {
    /**
     * Initialize the SimPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of SimInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new SimInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SimPage = SimPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/wireless/v1/usageRecord.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Wireless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UsageRecordPage = exports.UsageRecordInstance = void 0;
exports.UsageRecordListInstance = UsageRecordListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function UsageRecordListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/UsageRecords`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["end"] !== undefined) data["End"] = serialize.iso8601DateTime(params["end"]);
        if (params["start"] !== undefined) data["Start"] = serialize.iso8601DateTime(params["start"]);
        if (params["granularity"] !== undefined) data["Granularity"] = params["granularity"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new UsageRecordPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new UsageRecordPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class UsageRecordInstance {
    constructor(_version, payload){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.period = payload.period;
        this.commands = payload.commands;
        this.data = payload.data;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            period: this.period,
            commands: this.commands,
            data: this.data
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.UsageRecordInstance = UsageRecordInstance;
class UsageRecordPage extends Page_1.default {
    /**
     * Initialize the UsageRecordPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of UsageRecordInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new UsageRecordInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.UsageRecordPage = UsageRecordPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/wireless/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Wireless
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const command_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/wireless/v1/command.js [app-rsc] (ecmascript)");
const ratePlan_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/wireless/v1/ratePlan.js [app-rsc] (ecmascript)");
const sim_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/wireless/v1/sim.js [app-rsc] (ecmascript)");
const usageRecord_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/wireless/v1/usageRecord.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of Wireless
     *
     * @param domain - The Twilio (Twilio.Wireless) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for commands resource */ get commands() {
        this._commands = this._commands || (0, command_1.CommandListInstance)(this);
        return this._commands;
    }
    /** Getter for ratePlans resource */ get ratePlans() {
        this._ratePlans = this._ratePlans || (0, ratePlan_1.RatePlanListInstance)(this);
        return this._ratePlans;
    }
    /** Getter for sims resource */ get sims() {
        this._sims = this._sims || (0, sim_1.SimListInstance)(this);
        return this._sims;
    }
    /** Getter for usageRecords resource */ get usageRecords() {
        this._usageRecords = this._usageRecords || (0, usageRecord_1.UsageRecordListInstance)(this);
        return this._usageRecords;
    }
}
exports.default = V1;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/WirelessBase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const Domain_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Domain.js [app-rsc] (ecmascript)"));
const V1_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/wireless/V1.js [app-rsc] (ecmascript)"));
class WirelessBase extends Domain_1.default {
    /**
     * Initialize wireless domain
     *
     * @param twilio - The twilio client
     */ constructor(twilio){
        super(twilio, "https://wireless.twilio.com");
    }
    get v1() {
        this._v1 = this._v1 || new V1_1.default(this);
        return this._v1;
    }
}
module.exports = WirelessBase;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Wireless.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
const WirelessBase_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/WirelessBase.js [app-rsc] (ecmascript)"));
class Wireless extends WirelessBase_1.default {
    /**
     * @deprecated - Use v1.usageRecords instead
     */ get usageRecords() {
        console.warn("usageRecords is deprecated. Use v1.usageRecords instead.");
        return this.v1.usageRecords;
    }
    /**
     * @deprecated - Use v1.commands instead
     */ get commands() {
        console.warn("commands is deprecated. Use v1.commands instead.");
        return this.v1.commands;
    }
    /**
     * @deprecated - Use v1.ratePlans instead
     */ get ratePlans() {
        console.warn("ratePlans is deprecated. Use v1.ratePlans instead.");
        return this.v1.ratePlans;
    }
    /**
     * @deprecated - Use v1.sims instead
     */ get sims() {
        console.warn("sims is deprecated. Use v1.sims instead.");
        return this.v1.sims;
    }
}
module.exports = Wireless;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Twilio.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ const BaseTwilio_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/BaseTwilio.js [app-rsc] (ecmascript)");
/* jshint ignore:start */ /**
 * Twilio Client to interact with the Rest API
 */ /* jshint ignore:end */ class Twilio extends BaseTwilio_1.Client {
    /* jshint ignore:start */ /**
     * Creates a new instance of Twilio Client
     *
     * @param username -
     *          The username used for authentication. This is normally account sid, but if using key/secret auth will be the api key sid.
     * @param password -
     *          The password used for authentication. This is normally auth token, but if using key/secret auth will be the secret.
     * @param opts - The options argument
     *
     * @returns A new instance of Twilio client
     */ /* jshint ignore:end */ constructor(username, password, opts){
        super(username, password, opts);
        if (this.opts?.lazyLoading === false) {
            this.accounts;
            this.api;
            this.assistants;
            this.bulkexports;
            this.chat;
            this.content;
            this.conversations;
            this.events;
            this.flexApi;
            this.frontlineApi;
            this.previewIam;
            this.iam;
            this.insights;
            this.intelligence;
            this.ipMessaging;
            this.knowledge;
            this.lookups;
            this.marketplace;
            this.messaging;
            this.monitor;
            this.notify;
            this.numbers;
            this.oauth;
            this.preview;
            this.pricing;
            this.proxy;
            this.routes;
            this.serverless;
            this.studio;
            this.supersim;
            this.sync;
            this.taskrouter;
            this.trunking;
            this.trusthub;
            this.verify;
            this.video;
            this.voice;
            this.wireless;
        }
    }
    //Domains
    /** Getter for (Twilio.Accounts) domain */ get accounts() {
        return this._accounts ?? (this._accounts = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Accounts.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Api) domain */ get api() {
        return this._api ?? (this._api = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Api.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Assistants) domain */ get assistants() {
        return this._assistants ?? (this._assistants = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Assistants.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Bulkexports) domain */ get bulkexports() {
        return this._bulkexports ?? (this._bulkexports = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Bulkexports.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Chat) domain */ get chat() {
        return this._chat ?? (this._chat = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Chat.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Content) domain */ get content() {
        return this._content ?? (this._content = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Content.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Conversations) domain */ get conversations() {
        return this._conversations ?? (this._conversations = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Conversations.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Events) domain */ get events() {
        return this._events ?? (this._events = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Events.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.FlexApi) domain */ get flexApi() {
        return this._flexApi ?? (this._flexApi = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/FlexApi.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.FrontlineApi) domain */ get frontlineApi() {
        return this._frontlineApi ?? (this._frontlineApi = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/FrontlineApi.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.PreviewIam) domain */ get previewIam() {
        return this._previewIam ?? (this._previewIam = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/PreviewIam.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Iam) domain */ get iam() {
        return this._iam ?? (this._iam = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Iam.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Insights) domain */ get insights() {
        return this._insights ?? (this._insights = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Insights.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Intelligence) domain */ get intelligence() {
        return this._intelligence ?? (this._intelligence = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Intelligence.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.IpMessaging) domain */ get ipMessaging() {
        return this._ipMessaging ?? (this._ipMessaging = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/IpMessaging.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Knowledge) domain */ get knowledge() {
        return this._knowledge ?? (this._knowledge = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Knowledge.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Lookups) domain */ get lookups() {
        return this._lookups ?? (this._lookups = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Lookups.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Marketplace) domain */ get marketplace() {
        return this._marketplace ?? (this._marketplace = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Marketplace.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Messaging) domain */ get messaging() {
        return this._messaging ?? (this._messaging = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Messaging.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Monitor) domain */ get monitor() {
        return this._monitor ?? (this._monitor = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Monitor.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Notify) domain */ get notify() {
        return this._notify ?? (this._notify = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Notify.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Numbers) domain */ get numbers() {
        return this._numbers ?? (this._numbers = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Numbers.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Oauth) domain */ get oauth() {
        return this._oauth ?? (this._oauth = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Oauth.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Preview) domain */ get preview() {
        return this._preview ?? (this._preview = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Preview.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Pricing) domain */ get pricing() {
        return this._pricing ?? (this._pricing = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Pricing.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Proxy) domain */ get proxy() {
        return this._proxy ?? (this._proxy = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Proxy.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Routes) domain */ get routes() {
        return this._routes ?? (this._routes = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Routes.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Serverless) domain */ get serverless() {
        return this._serverless ?? (this._serverless = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Serverless.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Studio) domain */ get studio() {
        return this._studio ?? (this._studio = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Studio.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Supersim) domain */ get supersim() {
        return this._supersim ?? (this._supersim = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Supersim.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Sync) domain */ get sync() {
        return this._sync ?? (this._sync = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Sync.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Taskrouter) domain */ get taskrouter() {
        return this._taskrouter ?? (this._taskrouter = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Taskrouter.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Trunking) domain */ get trunking() {
        return this._trunking ?? (this._trunking = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Trunking.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Trusthub) domain */ get trusthub() {
        return this._trusthub ?? (this._trusthub = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Trusthub.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Verify) domain */ get verify() {
        return this._verify ?? (this._verify = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Verify.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Video) domain */ get video() {
        return this._video ?? (this._video = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Video.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Voice) domain */ get voice() {
        return this._voice ?? (this._voice = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Voice.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Wireless) domain */ get wireless() {
        return this._wireless ?? (this._wireless = new (__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/Wireless.js [app-rsc] (ecmascript)"))(this));
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.AddressListInstance) addresses resource */ get addresses() {
        return this.api.v2010.account.addresses;
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.ApplicationListInstance) applications resource */ get applications() {
        return this.api.v2010.account.applications;
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.AuthorizedConnectAppListInstance) authorizedConnectApps resource */ get authorizedConnectApps() {
        return this.api.v2010.account.authorizedConnectApps;
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryListInstance) availablePhoneNumbers resource */ get availablePhoneNumbers() {
        return this.api.v2010.account.availablePhoneNumbers;
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.BalanceListInstance) balance resource */ get balance() {
        return this.api.v2010.account.balance;
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.CallListInstance) calls resource */ get calls() {
        return this.api.v2010.account.calls;
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.ConferenceListInstance) conferences resource */ get conferences() {
        return this.api.v2010.account.conferences;
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.ConnectAppListInstance) connectApps resource */ get connectApps() {
        return this.api.v2010.account.connectApps;
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.IncomingPhoneNumberListInstance) incomingPhoneNumbers resource */ get incomingPhoneNumbers() {
        return this.api.v2010.account.incomingPhoneNumbers;
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.KeyListInstance) keys resource */ get keys() {
        return this.api.v2010.account.keys;
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.MessageListInstance) messages resource */ get messages() {
        return this.api.v2010.account.messages;
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.NewKeyListInstance) newKeys resource */ get newKeys() {
        return this.api.v2010.account.newKeys;
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.NewSigningKeyListInstance) newSigningKeys resource */ get newSigningKeys() {
        return this.api.v2010.account.newSigningKeys;
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.NotificationListInstance) notifications resource */ get notifications() {
        return this.api.v2010.account.notifications;
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.OutgoingCallerIdListInstance) outgoingCallerIds resource */ get outgoingCallerIds() {
        return this.api.v2010.account.outgoingCallerIds;
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.QueueListInstance) queues resource */ get queues() {
        return this.api.v2010.account.queues;
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.RecordingListInstance) recordings resource */ get recordings() {
        return this.api.v2010.account.recordings;
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.ShortCodeListInstance) shortCodes resource */ get shortCodes() {
        return this.api.v2010.account.shortCodes;
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.SigningKeyListInstance) signingKeys resource */ get signingKeys() {
        return this.api.v2010.account.signingKeys;
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.SipListInstance) sip resource */ get sip() {
        return this.api.v2010.account.sip;
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.TokenListInstance) tokens resource */ get tokens() {
        return this.api.v2010.account.tokens;
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.TranscriptionListInstance) transcriptions resource */ get transcriptions() {
        return this.api.v2010.account.transcriptions;
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.UsageListInstance) usage resource */ get usage() {
        return this.api.v2010.account.usage;
    }
    /** Getter for (Twilio.Api.V2010.AccountContext.ValidationRequestListInstance) validationRequests resource */ get validationRequests() {
        return this.api.v2010.account.validationRequests;
    }
}
module.exports = Twilio;
}),
];

//# sourceMappingURL=1b7ef_twilio_lib_rest_de3d0ad2._.js.map