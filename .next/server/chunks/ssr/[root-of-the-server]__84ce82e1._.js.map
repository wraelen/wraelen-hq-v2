{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/components/ui/button.tsx"],"sourcesContent":["import { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AAGA;;;;;AAEA,MAAM,iBAAiB,IAAA,kPAAG,EACxB,+bACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OACE;YACF,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AAGF,SAAS,OAAO,EACd,SAAS,EACT,OAAO,EACP,IAAI,EACJ,UAAU,KAAK,EACf,GAAG,OAIF;IACD,MAAM,OAAO,UAAU,4SAAI,GAAG;IAE9B,qBACE,6bAAC;QACC,aAAU;QACV,WAAW,IAAA,yHAAE,EAAC,eAAe;YAAE;YAAS;YAAM;QAAU;QACvD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/components/ui/table.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Table({ className, ...props }: React.ComponentProps<\"table\">) {\n  return (\n    <div\n      data-slot=\"table-container\"\n      className=\"relative w-full overflow-x-auto\"\n    >\n      <table\n        data-slot=\"table\"\n        className={cn(\"w-full caption-bottom text-sm\", className)}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction TableHeader({ className, ...props }: React.ComponentProps<\"thead\">) {\n  return (\n    <thead\n      data-slot=\"table-header\"\n      className={cn(\"[&_tr]:border-b\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableBody({ className, ...props }: React.ComponentProps<\"tbody\">) {\n  return (\n    <tbody\n      data-slot=\"table-body\"\n      className={cn(\"[&_tr:last-child]:border-0\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableFooter({ className, ...props }: React.ComponentProps<\"tfoot\">) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn(\n        \"bg-muted/50 border-t font-medium [&>tr]:last:border-b-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableRow({ className, ...props }: React.ComponentProps<\"tr\">) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn(\n        \"hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableHead({ className, ...props }: React.ComponentProps<\"th\">) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        \"text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCell({ className, ...props }: React.ComponentProps<\"td\">) {\n  return (\n    <td\n      data-slot=\"table-cell\"\n      className={cn(\n        \"p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCaption({\n  className,\n  ...props\n}: React.ComponentProps<\"caption\">) {\n  return (\n    <caption\n      data-slot=\"table-caption\"\n      className={cn(\"text-muted-foreground mt-4 text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAIA;AAJA;;;AAMA,SAAS,MAAM,EAAE,SAAS,EAAE,GAAG,OAAsC;IACnE,qBACE,6bAAC;QACC,aAAU;QACV,WAAU;kBAEV,cAAA,6bAAC;YACC,aAAU;YACV,WAAW,IAAA,yHAAE,EAAC,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;AAIjB;AAEA,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAsC;IACzE,qBACE,6bAAC;QACC,aAAU;QACV,WAAW,IAAA,yHAAE,EAAC,mBAAmB;QAChC,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAsC;IACvE,qBACE,6bAAC;QACC,aAAU;QACV,WAAW,IAAA,yHAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAsC;IACzE,qBACE,6bAAC;QACC,aAAU;QACV,WAAW,IAAA,yHAAE,EACX,2DACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,SAAS,EAAE,SAAS,EAAE,GAAG,OAAmC;IACnE,qBACE,6bAAC;QACC,aAAU;QACV,WAAW,IAAA,yHAAE,EACX,+EACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAmC;IACpE,qBACE,6bAAC;QACC,aAAU;QACV,WAAW,IAAA,yHAAE,EACX,sJACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAmC;IACpE,qBACE,6bAAC;QACC,aAAU;QACV,WAAW,IAAA,yHAAE,EACX,0GACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,aAAa,EACpB,SAAS,EACT,GAAG,OAC6B;IAChC,qBACE,6bAAC;QACC,aAAU;QACV,WAAW,IAAA,yHAAE,EAAC,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/lib/actions.ts"],"sourcesContent":["// src/lib/actions.ts – Updated with async Supabase (align with layout fix; keeps Propstream CSV ready – test upload post-restart)\n'use server'; // Logic: Marks as server-only (no client bundle bloat – optimizes for internal app with leads/calls)\nimport { PrismaClient } from '@prisma/client';  // Your DB client (async-safe in actions)\nimport { redirect } from 'next/navigation'; // Server redirect (reliable – no client hacks; best for post-auth flow to dashboard quests)\nimport Papa from 'papaparse'; // Logic: CSV parser (handles headers, errors – best for Propstream exports)\nimport Twilio from 'twilio'; // Logic: Twilio SDK for outbound calls (inexpensive, reliable integration)\nimport { z } from 'zod';  // Validation (type-safe inputs – prevents junk data in DB; no-brainer for prod)\nimport crypto from 'crypto';  // Built-in hash (no extra deps – for address_hash dedup)\nimport { createSupabaseServerClient } from '@/lib/supabaseServer'; // Use async helper (fixes warnings in actions too)\nimport type { Database } from '@/types/database.types'; // Types (autocompletes e.g., session.user.id for Prisma sync – now fixed via your gen)\n\nconst prisma = new PrismaClient();  // Global instance (efficient in Next.js actions – auto-closes; push back: Cache in lib/prisma.ts for hot reloads if issues)\n\nconst twilioClient = Twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN); // Logic: Init Twilio (guard env in prod)\n\nconst importSchema = z.object({\n  source: z.literal('propstream'), // Logic: Locked to Propstream for now (expand later)\n});  // Logic: Zod for form (file handled separately)\n\n// Action: Sign in (logic: Basic stub – expand with your original zod/email/password validation; centralized for type-safety)\nexport async function signInAction(formData: FormData) {\n  const email = formData.get('email')?.toString() ?? '';\n  const password = formData.get('password')?.toString() ?? '';\n  // ... (add your validation/error returns here; e.g., zod schema for email/password)\n  const supabase = await createSupabaseServerClient(); // Logic: Async client (Next 15 safe)\n  const { error } = await supabase.auth.signInWithPassword({ email, password });\n  if (error) {\n    return { error: error.message };\n  }\n  redirect('/dashboard'); // Logic: Post-login to HQ (quests await!)\n}\n\n// Action: Sign out (logic: Centralized mutation – avoids serialization issues in layout; redirects to signin)\nexport async function signOutAction() {\n  const supabase = await createSupabaseServerClient(); // Logic: Async client (consistent fix)\n  await supabase.auth.signOut(); // Logic: Clears session (middleware will redirect unauthed requests)\n  redirect('/auth/signin'); // Logic: Post-signout flow (back to login – update to '/' if public landing needed)\n}\n\n// Action: Import from Propstream CSV (logic: Parse file → per-row extract/map → batch upsert properties/create leads – returns results for UX)\nexport async function importDataAction(formData: FormData) {\n  const validated = importSchema.safeParse({\n    source: formData.get('source')?.toString() ?? 'propstream',\n  });\n  if (!validated.success) {\n    return { error: validated.error.format() };\n  }\n\n  const file = formData.get('file') as File | null; // Logic: Get uploaded CSV (from dropzone/form)\n  if (!file) {\n    return { error: 'No file uploaded' };\n  }\n\n  // Parse CSV (papaparse – async, handles large files stream-like)\n  const csvText = await file.text();\n  const parsed = Papa.parse(csvText, { header: true, skipEmptyLines: true, dynamicTyping: true }); // Logic: Headers on (maps to objects), auto-type numbers\n  if (parsed.errors.length > 0) {\n    return { error: `CSV parse errors: ${parsed.errors.map(e => e.message).join('; ')}` }; // Logic: Early feedback (e.g., malformed rows)\n  }\n\n  const rows = parsed.data as Record<string, any>[]; // Logic: Typed rows (Propstream columns like 'Property Address', 'AVM', etc.)\n  const supabase = await createSupabaseServerClient(); // Logic: Hoist session fetch (efficiency – avoids per-row calls)\n  const { data: { session } } = await supabase.auth.getSession();\n  if (!session?.user.id) {\n    return { error: 'No session – login required' };\n  }\n\n  const results = await Promise.allSettled(rows.map(async (row, index) => { // Logic: Parallel for speed; settled for per-row errors\n    try {\n      // Map Propstream columns to schema (flexible – handle variants/missing; added equity/mortgage for creative financing)\n      const propertyTypeMap: Record<string, PropertyType> = { // Logic: Dict for safe enum mapping (pushback: Better than lowercase assume – handles variants)\n        'single family': 'single_family',\n        'multi family': 'multi_family',\n        'condo': 'condo',\n        'townhouse': 'townhouse',\n        'land': 'land',\n        'commercial': 'commercial',\n        // Add more mappings as needed; default 'other'\n      };\n      const extracted = {\n        address: row['Property Address']?.trim() || null,\n        city: row['City']?.trim() || null,\n        state: row['State']?.toUpperCase() || null, // Logic: Standardize to 2-letter\n        zip_code: row['Zip']?.trim() || null,\n        property_type: propertyTypeMap[row['Property Type']?.toLowerCase() || ''] || 'other',\n        bedrooms: Number(row['Bedrooms']) || null,\n        bathrooms: Number(row['Bathrooms']) || null,\n        square_feet: Number(row['Sq Ft']) || null, // Logic: Common variant 'Sq Ft' over 'Square Feet'\n        lot_size: Number(row['Lot Sq Ft']) || null,\n        year_built: Number(row['Year Built']) || null,\n        avm: Number(row['AVM']) || null,\n        tax_assessed_value: Number(row['Tax Assessed Value']) || null,\n        distress_signals: { // Logic: Expand for more signals if in CSV (e.g., 'High Equity')\n          pre_foreclosure: row['Pre-Foreclosure'] === 'Y' || false,\n        },\n        owner_occupied: row['Owner Occupied'] === 'Y' || null,\n        metadata: { // Logic: Store extras like equity/mortgage for creative financing quests\n          equity_percent: Number(row['Equity %']) || null,\n          mortgage_balance: Number(row['Mortgage Balance']) || null,\n          propstream_row: row, // Full audit\n        },\n      };\n\n      if (!extracted.address || !extracted.city || !extracted.state || !extracted.zip_code) {\n        throw new Error(`Invalid address components in row ${index + 1} – skipping`);\n      }\n\n      const addressHash = crypto.createHash('sha256').update(`${extracted.address.toLowerCase()}${extracted.city.toLowerCase()}${extracted.state.toLowerCase()}${extracted.zip_code}`).digest('hex'); // Logic: Hash full components for better dedup\n\n      // Transaction: Upsert property + create lead + increment points (atomic – best for gamification integrity)\n      const [property, lead] = await prisma.$transaction(async (tx) => {\n        const prop = await tx.properties.upsert({\n          where: { address_hash: addressHash },\n          update: { ...extracted, updated_at: new Date() }, // Logic: Partial update (merge); force timestamp\n          create: { address_hash: addressHash, ...extracted },\n        });\n\n        const ld = await tx.leads.create({\n          data: {\n            properties_id: prop.id,\n            lead_type: row['Lead Type']?.toLowerCase() as LeadType || 'owner', // Logic: Map to enum\n            first_name: row['Owner First Name'] || null,\n            last_name: row['Owner Last Name'] || null,\n            phone: row['Phone 1'] || null, // Logic: 'Phone 1' common; expand for multiples\n            source: 'propstream_import' as LeadSource,\n            metadata: extracted.metadata,\n            assigned_to: session.user.id,\n            points_earned: 1, // Logic: Per-lead base (gamify: bonus for batch size later)\n          },\n        });\n\n        await tx.profile.update({\n          where: { id: session.user.id },\n          data: { points: { increment: 1 } }, // Logic: Accumulate (tie to quests, e.g., if rows.length >50, extra badge)\n        });\n\n        return [prop, ld];\n      });\n\n      return { row: index + 1, leadId: lead.id, success: true };\n    } catch (error) {\n      console.error(`Import error for row ${index + 1}:`, error);\n      return { row: index + 1, success: false, error: (error as Error).message };\n    }\n  }));\n\n  return { results: results.map(r => r.status === 'fulfilled' ? r.value : { success: false, error: (r.reason as Error).message }) }; // Logic: Flatten for client (e.g., success count)\n}\n\n// Action: Poll import status (fix: Stub for progress polling – simulates % complete; push back: Replace with real DB query on 'import_jobs' table for prod; unblocks testing without Upstash)\nexport async function pollImportStatus(jobId: string) {\n  // Stub logic: Simulate progress (e.g., from memory or DB; here, random increment for testing)\n  // In real, query prisma.import_jobs.findUnique({ where: { id: jobId } }) for { progress, results, error }\n  const simulatedProgress = Math.min(100, (Math.random() * 20) + (await new Promise(r => setTimeout(r, 500)) as any || 0)); // Fake delay/increment\n  if (simulatedProgress >= 100) {\n    return { progress: 100, results: [], error: null }; // Replace with real results\n  }\n  return { progress: simulatedProgress, results: [], error: null };\n}\n\n// Action: Dial lead (logic: Twilio outbound call – from your Twilio number to lead phone; logs to calls table)\nexport async function dialLeadAction(leadId: number) {\n  try {\n    const lead = await prisma.leads.findUnique({ where: { id: leadId }, include: { properties: true } });\n    if (!lead?.phone) {\n      throw new Error('No phone for lead');\n    }\n\n    const supabase = await createSupabaseServerClient(); // Logic: Async client\n    const { data: { session } } = await supabase.auth.getSession();\n    if (!session?.user.id || lead.assigned_to !== session.user.id) {\n      throw new Error('Unauthorized or mismatched assignment');\n    }\n\n    // Twilio outbound (phone-to-phone; expand to browser via Voice SDK if web calls needed)\n    const call = await twilioClient.calls.create({\n      to: lead.phone, // Lead's number\n      from: process.env.TWILIO_PHONE_NUMBER!, // Your Twilio number\n      url: 'http://your-domain.com/api/twiml', // Logic: TwiML endpoint (create /api/twiml route for voice response – e.g., <Say>Hello, connecting to lead</Say>)\n      statusCallback: 'http://your-domain.com/api/call-status', // Logic: Webhook for metrics (update calls table on complete)\n      statusCallbackEvent: ['initiated', 'ringing', 'answered', 'completed'], // Track status\n    });\n\n    // Log call (for metrics/quests – expand with webhook for duration/points)\n    await prisma.calls.create({\n      data: {\n        leads_id: lead.id,\n        caller_id: session.user.id,\n        call_sid: call.sid, // Twilio ID for tracking\n        status: 'initiated',\n        metadata: { address: lead.properties.address },\n      },\n    });\n\n    return { success: true, callId: call.sid };\n  } catch (error) {\n    console.error('Dial error:', error);\n    return { success: false, error: (error as Error).message };\n  }\n}\n\n// Helper: Stubbed extractFromLink (removed for pivot – mock for non-CSV if needed)\n// async function extractFromLink(...) { return { /* mock data */ }; } // Comment out Zillow logic"],"names":[],"mappings":"AAAA,kIAAkI;;;;;;;;CAyMlI,mFAAmF;CACnF,kGAAkG","debugId":null}},
    {"offset": {"line": 247, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/lib/actions.ts"],"sourcesContent":["// src/lib/actions.ts – Updated with async Supabase (align with layout fix; keeps Propstream CSV ready – test upload post-restart)\n'use server'; // Logic: Marks as server-only (no client bundle bloat – optimizes for internal app with leads/calls)\nimport { PrismaClient } from '@prisma/client';  // Your DB client (async-safe in actions)\nimport { redirect } from 'next/navigation'; // Server redirect (reliable – no client hacks; best for post-auth flow to dashboard quests)\nimport Papa from 'papaparse'; // Logic: CSV parser (handles headers, errors – best for Propstream exports)\nimport Twilio from 'twilio'; // Logic: Twilio SDK for outbound calls (inexpensive, reliable integration)\nimport { z } from 'zod';  // Validation (type-safe inputs – prevents junk data in DB; no-brainer for prod)\nimport crypto from 'crypto';  // Built-in hash (no extra deps – for address_hash dedup)\nimport { createSupabaseServerClient } from '@/lib/supabaseServer'; // Use async helper (fixes warnings in actions too)\nimport type { Database } from '@/types/database.types'; // Types (autocompletes e.g., session.user.id for Prisma sync – now fixed via your gen)\n\nconst prisma = new PrismaClient();  // Global instance (efficient in Next.js actions – auto-closes; push back: Cache in lib/prisma.ts for hot reloads if issues)\n\nconst twilioClient = Twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN); // Logic: Init Twilio (guard env in prod)\n\nconst importSchema = z.object({\n  source: z.literal('propstream'), // Logic: Locked to Propstream for now (expand later)\n});  // Logic: Zod for form (file handled separately)\n\n// Action: Sign in (logic: Basic stub – expand with your original zod/email/password validation; centralized for type-safety)\nexport async function signInAction(formData: FormData) {\n  const email = formData.get('email')?.toString() ?? '';\n  const password = formData.get('password')?.toString() ?? '';\n  // ... (add your validation/error returns here; e.g., zod schema for email/password)\n  const supabase = await createSupabaseServerClient(); // Logic: Async client (Next 15 safe)\n  const { error } = await supabase.auth.signInWithPassword({ email, password });\n  if (error) {\n    return { error: error.message };\n  }\n  redirect('/dashboard'); // Logic: Post-login to HQ (quests await!)\n}\n\n// Action: Sign out (logic: Centralized mutation – avoids serialization issues in layout; redirects to signin)\nexport async function signOutAction() {\n  const supabase = await createSupabaseServerClient(); // Logic: Async client (consistent fix)\n  await supabase.auth.signOut(); // Logic: Clears session (middleware will redirect unauthed requests)\n  redirect('/auth/signin'); // Logic: Post-signout flow (back to login – update to '/' if public landing needed)\n}\n\n// Action: Import from Propstream CSV (logic: Parse file → per-row extract/map → batch upsert properties/create leads – returns results for UX)\nexport async function importDataAction(formData: FormData) {\n  const validated = importSchema.safeParse({\n    source: formData.get('source')?.toString() ?? 'propstream',\n  });\n  if (!validated.success) {\n    return { error: validated.error.format() };\n  }\n\n  const file = formData.get('file') as File | null; // Logic: Get uploaded CSV (from dropzone/form)\n  if (!file) {\n    return { error: 'No file uploaded' };\n  }\n\n  // Parse CSV (papaparse – async, handles large files stream-like)\n  const csvText = await file.text();\n  const parsed = Papa.parse(csvText, { header: true, skipEmptyLines: true, dynamicTyping: true }); // Logic: Headers on (maps to objects), auto-type numbers\n  if (parsed.errors.length > 0) {\n    return { error: `CSV parse errors: ${parsed.errors.map(e => e.message).join('; ')}` }; // Logic: Early feedback (e.g., malformed rows)\n  }\n\n  const rows = parsed.data as Record<string, any>[]; // Logic: Typed rows (Propstream columns like 'Property Address', 'AVM', etc.)\n  const supabase = await createSupabaseServerClient(); // Logic: Hoist session fetch (efficiency – avoids per-row calls)\n  const { data: { session } } = await supabase.auth.getSession();\n  if (!session?.user.id) {\n    return { error: 'No session – login required' };\n  }\n\n  const results = await Promise.allSettled(rows.map(async (row, index) => { // Logic: Parallel for speed; settled for per-row errors\n    try {\n      // Map Propstream columns to schema (flexible – handle variants/missing; added equity/mortgage for creative financing)\n      const propertyTypeMap: Record<string, PropertyType> = { // Logic: Dict for safe enum mapping (pushback: Better than lowercase assume – handles variants)\n        'single family': 'single_family',\n        'multi family': 'multi_family',\n        'condo': 'condo',\n        'townhouse': 'townhouse',\n        'land': 'land',\n        'commercial': 'commercial',\n        // Add more mappings as needed; default 'other'\n      };\n      const extracted = {\n        address: row['Property Address']?.trim() || null,\n        city: row['City']?.trim() || null,\n        state: row['State']?.toUpperCase() || null, // Logic: Standardize to 2-letter\n        zip_code: row['Zip']?.trim() || null,\n        property_type: propertyTypeMap[row['Property Type']?.toLowerCase() || ''] || 'other',\n        bedrooms: Number(row['Bedrooms']) || null,\n        bathrooms: Number(row['Bathrooms']) || null,\n        square_feet: Number(row['Sq Ft']) || null, // Logic: Common variant 'Sq Ft' over 'Square Feet'\n        lot_size: Number(row['Lot Sq Ft']) || null,\n        year_built: Number(row['Year Built']) || null,\n        avm: Number(row['AVM']) || null,\n        tax_assessed_value: Number(row['Tax Assessed Value']) || null,\n        distress_signals: { // Logic: Expand for more signals if in CSV (e.g., 'High Equity')\n          pre_foreclosure: row['Pre-Foreclosure'] === 'Y' || false,\n        },\n        owner_occupied: row['Owner Occupied'] === 'Y' || null,\n        metadata: { // Logic: Store extras like equity/mortgage for creative financing quests\n          equity_percent: Number(row['Equity %']) || null,\n          mortgage_balance: Number(row['Mortgage Balance']) || null,\n          propstream_row: row, // Full audit\n        },\n      };\n\n      if (!extracted.address || !extracted.city || !extracted.state || !extracted.zip_code) {\n        throw new Error(`Invalid address components in row ${index + 1} – skipping`);\n      }\n\n      const addressHash = crypto.createHash('sha256').update(`${extracted.address.toLowerCase()}${extracted.city.toLowerCase()}${extracted.state.toLowerCase()}${extracted.zip_code}`).digest('hex'); // Logic: Hash full components for better dedup\n\n      // Transaction: Upsert property + create lead + increment points (atomic – best for gamification integrity)\n      const [property, lead] = await prisma.$transaction(async (tx) => {\n        const prop = await tx.properties.upsert({\n          where: { address_hash: addressHash },\n          update: { ...extracted, updated_at: new Date() }, // Logic: Partial update (merge); force timestamp\n          create: { address_hash: addressHash, ...extracted },\n        });\n\n        const ld = await tx.leads.create({\n          data: {\n            properties_id: prop.id,\n            lead_type: row['Lead Type']?.toLowerCase() as LeadType || 'owner', // Logic: Map to enum\n            first_name: row['Owner First Name'] || null,\n            last_name: row['Owner Last Name'] || null,\n            phone: row['Phone 1'] || null, // Logic: 'Phone 1' common; expand for multiples\n            source: 'propstream_import' as LeadSource,\n            metadata: extracted.metadata,\n            assigned_to: session.user.id,\n            points_earned: 1, // Logic: Per-lead base (gamify: bonus for batch size later)\n          },\n        });\n\n        await tx.profile.update({\n          where: { id: session.user.id },\n          data: { points: { increment: 1 } }, // Logic: Accumulate (tie to quests, e.g., if rows.length >50, extra badge)\n        });\n\n        return [prop, ld];\n      });\n\n      return { row: index + 1, leadId: lead.id, success: true };\n    } catch (error) {\n      console.error(`Import error for row ${index + 1}:`, error);\n      return { row: index + 1, success: false, error: (error as Error).message };\n    }\n  }));\n\n  return { results: results.map(r => r.status === 'fulfilled' ? r.value : { success: false, error: (r.reason as Error).message }) }; // Logic: Flatten for client (e.g., success count)\n}\n\n// Action: Poll import status (fix: Stub for progress polling – simulates % complete; push back: Replace with real DB query on 'import_jobs' table for prod; unblocks testing without Upstash)\nexport async function pollImportStatus(jobId: string) {\n  // Stub logic: Simulate progress (e.g., from memory or DB; here, random increment for testing)\n  // In real, query prisma.import_jobs.findUnique({ where: { id: jobId } }) for { progress, results, error }\n  const simulatedProgress = Math.min(100, (Math.random() * 20) + (await new Promise(r => setTimeout(r, 500)) as any || 0)); // Fake delay/increment\n  if (simulatedProgress >= 100) {\n    return { progress: 100, results: [], error: null }; // Replace with real results\n  }\n  return { progress: simulatedProgress, results: [], error: null };\n}\n\n// Action: Dial lead (logic: Twilio outbound call – from your Twilio number to lead phone; logs to calls table)\nexport async function dialLeadAction(leadId: number) {\n  try {\n    const lead = await prisma.leads.findUnique({ where: { id: leadId }, include: { properties: true } });\n    if (!lead?.phone) {\n      throw new Error('No phone for lead');\n    }\n\n    const supabase = await createSupabaseServerClient(); // Logic: Async client\n    const { data: { session } } = await supabase.auth.getSession();\n    if (!session?.user.id || lead.assigned_to !== session.user.id) {\n      throw new Error('Unauthorized or mismatched assignment');\n    }\n\n    // Twilio outbound (phone-to-phone; expand to browser via Voice SDK if web calls needed)\n    const call = await twilioClient.calls.create({\n      to: lead.phone, // Lead's number\n      from: process.env.TWILIO_PHONE_NUMBER!, // Your Twilio number\n      url: 'http://your-domain.com/api/twiml', // Logic: TwiML endpoint (create /api/twiml route for voice response – e.g., <Say>Hello, connecting to lead</Say>)\n      statusCallback: 'http://your-domain.com/api/call-status', // Logic: Webhook for metrics (update calls table on complete)\n      statusCallbackEvent: ['initiated', 'ringing', 'answered', 'completed'], // Track status\n    });\n\n    // Log call (for metrics/quests – expand with webhook for duration/points)\n    await prisma.calls.create({\n      data: {\n        leads_id: lead.id,\n        caller_id: session.user.id,\n        call_sid: call.sid, // Twilio ID for tracking\n        status: 'initiated',\n        metadata: { address: lead.properties.address },\n      },\n    });\n\n    return { success: true, callId: call.sid };\n  } catch (error) {\n    console.error('Dial error:', error);\n    return { success: false, error: (error as Error).message };\n  }\n}\n\n// Helper: Stubbed extractFromLink (removed for pivot – mock for non-CSV if needed)\n// async function extractFromLink(...) { return { /* mock data */ }; } // Comment out Zillow logic"],"names":[],"mappings":";;;;;;;IAoBsB,eAAA,WAAA,GAAA,IAAA,8bAAA,EAAA,8CAAA,mbAAA,EAAA,KAAA,GAAA,ybAAA,EAAA","debugId":null}},
    {"offset": {"line": 259, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/lib/actions.ts"],"sourcesContent":["// src/lib/actions.ts – Updated with async Supabase (align with layout fix; keeps Propstream CSV ready – test upload post-restart)\n'use server'; // Logic: Marks as server-only (no client bundle bloat – optimizes for internal app with leads/calls)\nimport { PrismaClient } from '@prisma/client';  // Your DB client (async-safe in actions)\nimport { redirect } from 'next/navigation'; // Server redirect (reliable – no client hacks; best for post-auth flow to dashboard quests)\nimport Papa from 'papaparse'; // Logic: CSV parser (handles headers, errors – best for Propstream exports)\nimport Twilio from 'twilio'; // Logic: Twilio SDK for outbound calls (inexpensive, reliable integration)\nimport { z } from 'zod';  // Validation (type-safe inputs – prevents junk data in DB; no-brainer for prod)\nimport crypto from 'crypto';  // Built-in hash (no extra deps – for address_hash dedup)\nimport { createSupabaseServerClient } from '@/lib/supabaseServer'; // Use async helper (fixes warnings in actions too)\nimport type { Database } from '@/types/database.types'; // Types (autocompletes e.g., session.user.id for Prisma sync – now fixed via your gen)\n\nconst prisma = new PrismaClient();  // Global instance (efficient in Next.js actions – auto-closes; push back: Cache in lib/prisma.ts for hot reloads if issues)\n\nconst twilioClient = Twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN); // Logic: Init Twilio (guard env in prod)\n\nconst importSchema = z.object({\n  source: z.literal('propstream'), // Logic: Locked to Propstream for now (expand later)\n});  // Logic: Zod for form (file handled separately)\n\n// Action: Sign in (logic: Basic stub – expand with your original zod/email/password validation; centralized for type-safety)\nexport async function signInAction(formData: FormData) {\n  const email = formData.get('email')?.toString() ?? '';\n  const password = formData.get('password')?.toString() ?? '';\n  // ... (add your validation/error returns here; e.g., zod schema for email/password)\n  const supabase = await createSupabaseServerClient(); // Logic: Async client (Next 15 safe)\n  const { error } = await supabase.auth.signInWithPassword({ email, password });\n  if (error) {\n    return { error: error.message };\n  }\n  redirect('/dashboard'); // Logic: Post-login to HQ (quests await!)\n}\n\n// Action: Sign out (logic: Centralized mutation – avoids serialization issues in layout; redirects to signin)\nexport async function signOutAction() {\n  const supabase = await createSupabaseServerClient(); // Logic: Async client (consistent fix)\n  await supabase.auth.signOut(); // Logic: Clears session (middleware will redirect unauthed requests)\n  redirect('/auth/signin'); // Logic: Post-signout flow (back to login – update to '/' if public landing needed)\n}\n\n// Action: Import from Propstream CSV (logic: Parse file → per-row extract/map → batch upsert properties/create leads – returns results for UX)\nexport async function importDataAction(formData: FormData) {\n  const validated = importSchema.safeParse({\n    source: formData.get('source')?.toString() ?? 'propstream',\n  });\n  if (!validated.success) {\n    return { error: validated.error.format() };\n  }\n\n  const file = formData.get('file') as File | null; // Logic: Get uploaded CSV (from dropzone/form)\n  if (!file) {\n    return { error: 'No file uploaded' };\n  }\n\n  // Parse CSV (papaparse – async, handles large files stream-like)\n  const csvText = await file.text();\n  const parsed = Papa.parse(csvText, { header: true, skipEmptyLines: true, dynamicTyping: true }); // Logic: Headers on (maps to objects), auto-type numbers\n  if (parsed.errors.length > 0) {\n    return { error: `CSV parse errors: ${parsed.errors.map(e => e.message).join('; ')}` }; // Logic: Early feedback (e.g., malformed rows)\n  }\n\n  const rows = parsed.data as Record<string, any>[]; // Logic: Typed rows (Propstream columns like 'Property Address', 'AVM', etc.)\n  const supabase = await createSupabaseServerClient(); // Logic: Hoist session fetch (efficiency – avoids per-row calls)\n  const { data: { session } } = await supabase.auth.getSession();\n  if (!session?.user.id) {\n    return { error: 'No session – login required' };\n  }\n\n  const results = await Promise.allSettled(rows.map(async (row, index) => { // Logic: Parallel for speed; settled for per-row errors\n    try {\n      // Map Propstream columns to schema (flexible – handle variants/missing; added equity/mortgage for creative financing)\n      const propertyTypeMap: Record<string, PropertyType> = { // Logic: Dict for safe enum mapping (pushback: Better than lowercase assume – handles variants)\n        'single family': 'single_family',\n        'multi family': 'multi_family',\n        'condo': 'condo',\n        'townhouse': 'townhouse',\n        'land': 'land',\n        'commercial': 'commercial',\n        // Add more mappings as needed; default 'other'\n      };\n      const extracted = {\n        address: row['Property Address']?.trim() || null,\n        city: row['City']?.trim() || null,\n        state: row['State']?.toUpperCase() || null, // Logic: Standardize to 2-letter\n        zip_code: row['Zip']?.trim() || null,\n        property_type: propertyTypeMap[row['Property Type']?.toLowerCase() || ''] || 'other',\n        bedrooms: Number(row['Bedrooms']) || null,\n        bathrooms: Number(row['Bathrooms']) || null,\n        square_feet: Number(row['Sq Ft']) || null, // Logic: Common variant 'Sq Ft' over 'Square Feet'\n        lot_size: Number(row['Lot Sq Ft']) || null,\n        year_built: Number(row['Year Built']) || null,\n        avm: Number(row['AVM']) || null,\n        tax_assessed_value: Number(row['Tax Assessed Value']) || null,\n        distress_signals: { // Logic: Expand for more signals if in CSV (e.g., 'High Equity')\n          pre_foreclosure: row['Pre-Foreclosure'] === 'Y' || false,\n        },\n        owner_occupied: row['Owner Occupied'] === 'Y' || null,\n        metadata: { // Logic: Store extras like equity/mortgage for creative financing quests\n          equity_percent: Number(row['Equity %']) || null,\n          mortgage_balance: Number(row['Mortgage Balance']) || null,\n          propstream_row: row, // Full audit\n        },\n      };\n\n      if (!extracted.address || !extracted.city || !extracted.state || !extracted.zip_code) {\n        throw new Error(`Invalid address components in row ${index + 1} – skipping`);\n      }\n\n      const addressHash = crypto.createHash('sha256').update(`${extracted.address.toLowerCase()}${extracted.city.toLowerCase()}${extracted.state.toLowerCase()}${extracted.zip_code}`).digest('hex'); // Logic: Hash full components for better dedup\n\n      // Transaction: Upsert property + create lead + increment points (atomic – best for gamification integrity)\n      const [property, lead] = await prisma.$transaction(async (tx) => {\n        const prop = await tx.properties.upsert({\n          where: { address_hash: addressHash },\n          update: { ...extracted, updated_at: new Date() }, // Logic: Partial update (merge); force timestamp\n          create: { address_hash: addressHash, ...extracted },\n        });\n\n        const ld = await tx.leads.create({\n          data: {\n            properties_id: prop.id,\n            lead_type: row['Lead Type']?.toLowerCase() as LeadType || 'owner', // Logic: Map to enum\n            first_name: row['Owner First Name'] || null,\n            last_name: row['Owner Last Name'] || null,\n            phone: row['Phone 1'] || null, // Logic: 'Phone 1' common; expand for multiples\n            source: 'propstream_import' as LeadSource,\n            metadata: extracted.metadata,\n            assigned_to: session.user.id,\n            points_earned: 1, // Logic: Per-lead base (gamify: bonus for batch size later)\n          },\n        });\n\n        await tx.profile.update({\n          where: { id: session.user.id },\n          data: { points: { increment: 1 } }, // Logic: Accumulate (tie to quests, e.g., if rows.length >50, extra badge)\n        });\n\n        return [prop, ld];\n      });\n\n      return { row: index + 1, leadId: lead.id, success: true };\n    } catch (error) {\n      console.error(`Import error for row ${index + 1}:`, error);\n      return { row: index + 1, success: false, error: (error as Error).message };\n    }\n  }));\n\n  return { results: results.map(r => r.status === 'fulfilled' ? r.value : { success: false, error: (r.reason as Error).message }) }; // Logic: Flatten for client (e.g., success count)\n}\n\n// Action: Poll import status (fix: Stub for progress polling – simulates % complete; push back: Replace with real DB query on 'import_jobs' table for prod; unblocks testing without Upstash)\nexport async function pollImportStatus(jobId: string) {\n  // Stub logic: Simulate progress (e.g., from memory or DB; here, random increment for testing)\n  // In real, query prisma.import_jobs.findUnique({ where: { id: jobId } }) for { progress, results, error }\n  const simulatedProgress = Math.min(100, (Math.random() * 20) + (await new Promise(r => setTimeout(r, 500)) as any || 0)); // Fake delay/increment\n  if (simulatedProgress >= 100) {\n    return { progress: 100, results: [], error: null }; // Replace with real results\n  }\n  return { progress: simulatedProgress, results: [], error: null };\n}\n\n// Action: Dial lead (logic: Twilio outbound call – from your Twilio number to lead phone; logs to calls table)\nexport async function dialLeadAction(leadId: number) {\n  try {\n    const lead = await prisma.leads.findUnique({ where: { id: leadId }, include: { properties: true } });\n    if (!lead?.phone) {\n      throw new Error('No phone for lead');\n    }\n\n    const supabase = await createSupabaseServerClient(); // Logic: Async client\n    const { data: { session } } = await supabase.auth.getSession();\n    if (!session?.user.id || lead.assigned_to !== session.user.id) {\n      throw new Error('Unauthorized or mismatched assignment');\n    }\n\n    // Twilio outbound (phone-to-phone; expand to browser via Voice SDK if web calls needed)\n    const call = await twilioClient.calls.create({\n      to: lead.phone, // Lead's number\n      from: process.env.TWILIO_PHONE_NUMBER!, // Your Twilio number\n      url: 'http://your-domain.com/api/twiml', // Logic: TwiML endpoint (create /api/twiml route for voice response – e.g., <Say>Hello, connecting to lead</Say>)\n      statusCallback: 'http://your-domain.com/api/call-status', // Logic: Webhook for metrics (update calls table on complete)\n      statusCallbackEvent: ['initiated', 'ringing', 'answered', 'completed'], // Track status\n    });\n\n    // Log call (for metrics/quests – expand with webhook for duration/points)\n    await prisma.calls.create({\n      data: {\n        leads_id: lead.id,\n        caller_id: session.user.id,\n        call_sid: call.sid, // Twilio ID for tracking\n        status: 'initiated',\n        metadata: { address: lead.properties.address },\n      },\n    });\n\n    return { success: true, callId: call.sid };\n  } catch (error) {\n    console.error('Dial error:', error);\n    return { success: false, error: (error as Error).message };\n  }\n}\n\n// Helper: Stubbed extractFromLink (removed for pivot – mock for non-CSV if needed)\n// async function extractFromLink(...) { return { /* mock data */ }; } // Comment out Zillow logic"],"names":[],"mappings":";;;;;;;IAiCsB,gBAAA,WAAA,GAAA,IAAA,8bAAA,EAAA,8CAAA,mbAAA,EAAA,KAAA,GAAA,ybAAA,EAAA","debugId":null}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/lib/actions.ts"],"sourcesContent":["// src/lib/actions.ts – Updated with async Supabase (align with layout fix; keeps Propstream CSV ready – test upload post-restart)\n'use server'; // Logic: Marks as server-only (no client bundle bloat – optimizes for internal app with leads/calls)\nimport { PrismaClient } from '@prisma/client';  // Your DB client (async-safe in actions)\nimport { redirect } from 'next/navigation'; // Server redirect (reliable – no client hacks; best for post-auth flow to dashboard quests)\nimport Papa from 'papaparse'; // Logic: CSV parser (handles headers, errors – best for Propstream exports)\nimport Twilio from 'twilio'; // Logic: Twilio SDK for outbound calls (inexpensive, reliable integration)\nimport { z } from 'zod';  // Validation (type-safe inputs – prevents junk data in DB; no-brainer for prod)\nimport crypto from 'crypto';  // Built-in hash (no extra deps – for address_hash dedup)\nimport { createSupabaseServerClient } from '@/lib/supabaseServer'; // Use async helper (fixes warnings in actions too)\nimport type { Database } from '@/types/database.types'; // Types (autocompletes e.g., session.user.id for Prisma sync – now fixed via your gen)\n\nconst prisma = new PrismaClient();  // Global instance (efficient in Next.js actions – auto-closes; push back: Cache in lib/prisma.ts for hot reloads if issues)\n\nconst twilioClient = Twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN); // Logic: Init Twilio (guard env in prod)\n\nconst importSchema = z.object({\n  source: z.literal('propstream'), // Logic: Locked to Propstream for now (expand later)\n});  // Logic: Zod for form (file handled separately)\n\n// Action: Sign in (logic: Basic stub – expand with your original zod/email/password validation; centralized for type-safety)\nexport async function signInAction(formData: FormData) {\n  const email = formData.get('email')?.toString() ?? '';\n  const password = formData.get('password')?.toString() ?? '';\n  // ... (add your validation/error returns here; e.g., zod schema for email/password)\n  const supabase = await createSupabaseServerClient(); // Logic: Async client (Next 15 safe)\n  const { error } = await supabase.auth.signInWithPassword({ email, password });\n  if (error) {\n    return { error: error.message };\n  }\n  redirect('/dashboard'); // Logic: Post-login to HQ (quests await!)\n}\n\n// Action: Sign out (logic: Centralized mutation – avoids serialization issues in layout; redirects to signin)\nexport async function signOutAction() {\n  const supabase = await createSupabaseServerClient(); // Logic: Async client (consistent fix)\n  await supabase.auth.signOut(); // Logic: Clears session (middleware will redirect unauthed requests)\n  redirect('/auth/signin'); // Logic: Post-signout flow (back to login – update to '/' if public landing needed)\n}\n\n// Action: Import from Propstream CSV (logic: Parse file → per-row extract/map → batch upsert properties/create leads – returns results for UX)\nexport async function importDataAction(formData: FormData) {\n  const validated = importSchema.safeParse({\n    source: formData.get('source')?.toString() ?? 'propstream',\n  });\n  if (!validated.success) {\n    return { error: validated.error.format() };\n  }\n\n  const file = formData.get('file') as File | null; // Logic: Get uploaded CSV (from dropzone/form)\n  if (!file) {\n    return { error: 'No file uploaded' };\n  }\n\n  // Parse CSV (papaparse – async, handles large files stream-like)\n  const csvText = await file.text();\n  const parsed = Papa.parse(csvText, { header: true, skipEmptyLines: true, dynamicTyping: true }); // Logic: Headers on (maps to objects), auto-type numbers\n  if (parsed.errors.length > 0) {\n    return { error: `CSV parse errors: ${parsed.errors.map(e => e.message).join('; ')}` }; // Logic: Early feedback (e.g., malformed rows)\n  }\n\n  const rows = parsed.data as Record<string, any>[]; // Logic: Typed rows (Propstream columns like 'Property Address', 'AVM', etc.)\n  const supabase = await createSupabaseServerClient(); // Logic: Hoist session fetch (efficiency – avoids per-row calls)\n  const { data: { session } } = await supabase.auth.getSession();\n  if (!session?.user.id) {\n    return { error: 'No session – login required' };\n  }\n\n  const results = await Promise.allSettled(rows.map(async (row, index) => { // Logic: Parallel for speed; settled for per-row errors\n    try {\n      // Map Propstream columns to schema (flexible – handle variants/missing; added equity/mortgage for creative financing)\n      const propertyTypeMap: Record<string, PropertyType> = { // Logic: Dict for safe enum mapping (pushback: Better than lowercase assume – handles variants)\n        'single family': 'single_family',\n        'multi family': 'multi_family',\n        'condo': 'condo',\n        'townhouse': 'townhouse',\n        'land': 'land',\n        'commercial': 'commercial',\n        // Add more mappings as needed; default 'other'\n      };\n      const extracted = {\n        address: row['Property Address']?.trim() || null,\n        city: row['City']?.trim() || null,\n        state: row['State']?.toUpperCase() || null, // Logic: Standardize to 2-letter\n        zip_code: row['Zip']?.trim() || null,\n        property_type: propertyTypeMap[row['Property Type']?.toLowerCase() || ''] || 'other',\n        bedrooms: Number(row['Bedrooms']) || null,\n        bathrooms: Number(row['Bathrooms']) || null,\n        square_feet: Number(row['Sq Ft']) || null, // Logic: Common variant 'Sq Ft' over 'Square Feet'\n        lot_size: Number(row['Lot Sq Ft']) || null,\n        year_built: Number(row['Year Built']) || null,\n        avm: Number(row['AVM']) || null,\n        tax_assessed_value: Number(row['Tax Assessed Value']) || null,\n        distress_signals: { // Logic: Expand for more signals if in CSV (e.g., 'High Equity')\n          pre_foreclosure: row['Pre-Foreclosure'] === 'Y' || false,\n        },\n        owner_occupied: row['Owner Occupied'] === 'Y' || null,\n        metadata: { // Logic: Store extras like equity/mortgage for creative financing quests\n          equity_percent: Number(row['Equity %']) || null,\n          mortgage_balance: Number(row['Mortgage Balance']) || null,\n          propstream_row: row, // Full audit\n        },\n      };\n\n      if (!extracted.address || !extracted.city || !extracted.state || !extracted.zip_code) {\n        throw new Error(`Invalid address components in row ${index + 1} – skipping`);\n      }\n\n      const addressHash = crypto.createHash('sha256').update(`${extracted.address.toLowerCase()}${extracted.city.toLowerCase()}${extracted.state.toLowerCase()}${extracted.zip_code}`).digest('hex'); // Logic: Hash full components for better dedup\n\n      // Transaction: Upsert property + create lead + increment points (atomic – best for gamification integrity)\n      const [property, lead] = await prisma.$transaction(async (tx) => {\n        const prop = await tx.properties.upsert({\n          where: { address_hash: addressHash },\n          update: { ...extracted, updated_at: new Date() }, // Logic: Partial update (merge); force timestamp\n          create: { address_hash: addressHash, ...extracted },\n        });\n\n        const ld = await tx.leads.create({\n          data: {\n            properties_id: prop.id,\n            lead_type: row['Lead Type']?.toLowerCase() as LeadType || 'owner', // Logic: Map to enum\n            first_name: row['Owner First Name'] || null,\n            last_name: row['Owner Last Name'] || null,\n            phone: row['Phone 1'] || null, // Logic: 'Phone 1' common; expand for multiples\n            source: 'propstream_import' as LeadSource,\n            metadata: extracted.metadata,\n            assigned_to: session.user.id,\n            points_earned: 1, // Logic: Per-lead base (gamify: bonus for batch size later)\n          },\n        });\n\n        await tx.profile.update({\n          where: { id: session.user.id },\n          data: { points: { increment: 1 } }, // Logic: Accumulate (tie to quests, e.g., if rows.length >50, extra badge)\n        });\n\n        return [prop, ld];\n      });\n\n      return { row: index + 1, leadId: lead.id, success: true };\n    } catch (error) {\n      console.error(`Import error for row ${index + 1}:`, error);\n      return { row: index + 1, success: false, error: (error as Error).message };\n    }\n  }));\n\n  return { results: results.map(r => r.status === 'fulfilled' ? r.value : { success: false, error: (r.reason as Error).message }) }; // Logic: Flatten for client (e.g., success count)\n}\n\n// Action: Poll import status (fix: Stub for progress polling – simulates % complete; push back: Replace with real DB query on 'import_jobs' table for prod; unblocks testing without Upstash)\nexport async function pollImportStatus(jobId: string) {\n  // Stub logic: Simulate progress (e.g., from memory or DB; here, random increment for testing)\n  // In real, query prisma.import_jobs.findUnique({ where: { id: jobId } }) for { progress, results, error }\n  const simulatedProgress = Math.min(100, (Math.random() * 20) + (await new Promise(r => setTimeout(r, 500)) as any || 0)); // Fake delay/increment\n  if (simulatedProgress >= 100) {\n    return { progress: 100, results: [], error: null }; // Replace with real results\n  }\n  return { progress: simulatedProgress, results: [], error: null };\n}\n\n// Action: Dial lead (logic: Twilio outbound call – from your Twilio number to lead phone; logs to calls table)\nexport async function dialLeadAction(leadId: number) {\n  try {\n    const lead = await prisma.leads.findUnique({ where: { id: leadId }, include: { properties: true } });\n    if (!lead?.phone) {\n      throw new Error('No phone for lead');\n    }\n\n    const supabase = await createSupabaseServerClient(); // Logic: Async client\n    const { data: { session } } = await supabase.auth.getSession();\n    if (!session?.user.id || lead.assigned_to !== session.user.id) {\n      throw new Error('Unauthorized or mismatched assignment');\n    }\n\n    // Twilio outbound (phone-to-phone; expand to browser via Voice SDK if web calls needed)\n    const call = await twilioClient.calls.create({\n      to: lead.phone, // Lead's number\n      from: process.env.TWILIO_PHONE_NUMBER!, // Your Twilio number\n      url: 'http://your-domain.com/api/twiml', // Logic: TwiML endpoint (create /api/twiml route for voice response – e.g., <Say>Hello, connecting to lead</Say>)\n      statusCallback: 'http://your-domain.com/api/call-status', // Logic: Webhook for metrics (update calls table on complete)\n      statusCallbackEvent: ['initiated', 'ringing', 'answered', 'completed'], // Track status\n    });\n\n    // Log call (for metrics/quests – expand with webhook for duration/points)\n    await prisma.calls.create({\n      data: {\n        leads_id: lead.id,\n        caller_id: session.user.id,\n        call_sid: call.sid, // Twilio ID for tracking\n        status: 'initiated',\n        metadata: { address: lead.properties.address },\n      },\n    });\n\n    return { success: true, callId: call.sid };\n  } catch (error) {\n    console.error('Dial error:', error);\n    return { success: false, error: (error as Error).message };\n  }\n}\n\n// Helper: Stubbed extractFromLink (removed for pivot – mock for non-CSV if needed)\n// async function extractFromLink(...) { return { /* mock data */ }; } // Comment out Zillow logic"],"names":[],"mappings":";;;;;;;IAwCsB,mBAAA,WAAA,GAAA,IAAA,8bAAA,EAAA,8CAAA,mbAAA,EAAA,KAAA,GAAA,ybAAA,EAAA","debugId":null}},
    {"offset": {"line": 283, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/lib/actions.ts"],"sourcesContent":["// src/lib/actions.ts – Updated with async Supabase (align with layout fix; keeps Propstream CSV ready – test upload post-restart)\n'use server'; // Logic: Marks as server-only (no client bundle bloat – optimizes for internal app with leads/calls)\nimport { PrismaClient } from '@prisma/client';  // Your DB client (async-safe in actions)\nimport { redirect } from 'next/navigation'; // Server redirect (reliable – no client hacks; best for post-auth flow to dashboard quests)\nimport Papa from 'papaparse'; // Logic: CSV parser (handles headers, errors – best for Propstream exports)\nimport Twilio from 'twilio'; // Logic: Twilio SDK for outbound calls (inexpensive, reliable integration)\nimport { z } from 'zod';  // Validation (type-safe inputs – prevents junk data in DB; no-brainer for prod)\nimport crypto from 'crypto';  // Built-in hash (no extra deps – for address_hash dedup)\nimport { createSupabaseServerClient } from '@/lib/supabaseServer'; // Use async helper (fixes warnings in actions too)\nimport type { Database } from '@/types/database.types'; // Types (autocompletes e.g., session.user.id for Prisma sync – now fixed via your gen)\n\nconst prisma = new PrismaClient();  // Global instance (efficient in Next.js actions – auto-closes; push back: Cache in lib/prisma.ts for hot reloads if issues)\n\nconst twilioClient = Twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN); // Logic: Init Twilio (guard env in prod)\n\nconst importSchema = z.object({\n  source: z.literal('propstream'), // Logic: Locked to Propstream for now (expand later)\n});  // Logic: Zod for form (file handled separately)\n\n// Action: Sign in (logic: Basic stub – expand with your original zod/email/password validation; centralized for type-safety)\nexport async function signInAction(formData: FormData) {\n  const email = formData.get('email')?.toString() ?? '';\n  const password = formData.get('password')?.toString() ?? '';\n  // ... (add your validation/error returns here; e.g., zod schema for email/password)\n  const supabase = await createSupabaseServerClient(); // Logic: Async client (Next 15 safe)\n  const { error } = await supabase.auth.signInWithPassword({ email, password });\n  if (error) {\n    return { error: error.message };\n  }\n  redirect('/dashboard'); // Logic: Post-login to HQ (quests await!)\n}\n\n// Action: Sign out (logic: Centralized mutation – avoids serialization issues in layout; redirects to signin)\nexport async function signOutAction() {\n  const supabase = await createSupabaseServerClient(); // Logic: Async client (consistent fix)\n  await supabase.auth.signOut(); // Logic: Clears session (middleware will redirect unauthed requests)\n  redirect('/auth/signin'); // Logic: Post-signout flow (back to login – update to '/' if public landing needed)\n}\n\n// Action: Import from Propstream CSV (logic: Parse file → per-row extract/map → batch upsert properties/create leads – returns results for UX)\nexport async function importDataAction(formData: FormData) {\n  const validated = importSchema.safeParse({\n    source: formData.get('source')?.toString() ?? 'propstream',\n  });\n  if (!validated.success) {\n    return { error: validated.error.format() };\n  }\n\n  const file = formData.get('file') as File | null; // Logic: Get uploaded CSV (from dropzone/form)\n  if (!file) {\n    return { error: 'No file uploaded' };\n  }\n\n  // Parse CSV (papaparse – async, handles large files stream-like)\n  const csvText = await file.text();\n  const parsed = Papa.parse(csvText, { header: true, skipEmptyLines: true, dynamicTyping: true }); // Logic: Headers on (maps to objects), auto-type numbers\n  if (parsed.errors.length > 0) {\n    return { error: `CSV parse errors: ${parsed.errors.map(e => e.message).join('; ')}` }; // Logic: Early feedback (e.g., malformed rows)\n  }\n\n  const rows = parsed.data as Record<string, any>[]; // Logic: Typed rows (Propstream columns like 'Property Address', 'AVM', etc.)\n  const supabase = await createSupabaseServerClient(); // Logic: Hoist session fetch (efficiency – avoids per-row calls)\n  const { data: { session } } = await supabase.auth.getSession();\n  if (!session?.user.id) {\n    return { error: 'No session – login required' };\n  }\n\n  const results = await Promise.allSettled(rows.map(async (row, index) => { // Logic: Parallel for speed; settled for per-row errors\n    try {\n      // Map Propstream columns to schema (flexible – handle variants/missing; added equity/mortgage for creative financing)\n      const propertyTypeMap: Record<string, PropertyType> = { // Logic: Dict for safe enum mapping (pushback: Better than lowercase assume – handles variants)\n        'single family': 'single_family',\n        'multi family': 'multi_family',\n        'condo': 'condo',\n        'townhouse': 'townhouse',\n        'land': 'land',\n        'commercial': 'commercial',\n        // Add more mappings as needed; default 'other'\n      };\n      const extracted = {\n        address: row['Property Address']?.trim() || null,\n        city: row['City']?.trim() || null,\n        state: row['State']?.toUpperCase() || null, // Logic: Standardize to 2-letter\n        zip_code: row['Zip']?.trim() || null,\n        property_type: propertyTypeMap[row['Property Type']?.toLowerCase() || ''] || 'other',\n        bedrooms: Number(row['Bedrooms']) || null,\n        bathrooms: Number(row['Bathrooms']) || null,\n        square_feet: Number(row['Sq Ft']) || null, // Logic: Common variant 'Sq Ft' over 'Square Feet'\n        lot_size: Number(row['Lot Sq Ft']) || null,\n        year_built: Number(row['Year Built']) || null,\n        avm: Number(row['AVM']) || null,\n        tax_assessed_value: Number(row['Tax Assessed Value']) || null,\n        distress_signals: { // Logic: Expand for more signals if in CSV (e.g., 'High Equity')\n          pre_foreclosure: row['Pre-Foreclosure'] === 'Y' || false,\n        },\n        owner_occupied: row['Owner Occupied'] === 'Y' || null,\n        metadata: { // Logic: Store extras like equity/mortgage for creative financing quests\n          equity_percent: Number(row['Equity %']) || null,\n          mortgage_balance: Number(row['Mortgage Balance']) || null,\n          propstream_row: row, // Full audit\n        },\n      };\n\n      if (!extracted.address || !extracted.city || !extracted.state || !extracted.zip_code) {\n        throw new Error(`Invalid address components in row ${index + 1} – skipping`);\n      }\n\n      const addressHash = crypto.createHash('sha256').update(`${extracted.address.toLowerCase()}${extracted.city.toLowerCase()}${extracted.state.toLowerCase()}${extracted.zip_code}`).digest('hex'); // Logic: Hash full components for better dedup\n\n      // Transaction: Upsert property + create lead + increment points (atomic – best for gamification integrity)\n      const [property, lead] = await prisma.$transaction(async (tx) => {\n        const prop = await tx.properties.upsert({\n          where: { address_hash: addressHash },\n          update: { ...extracted, updated_at: new Date() }, // Logic: Partial update (merge); force timestamp\n          create: { address_hash: addressHash, ...extracted },\n        });\n\n        const ld = await tx.leads.create({\n          data: {\n            properties_id: prop.id,\n            lead_type: row['Lead Type']?.toLowerCase() as LeadType || 'owner', // Logic: Map to enum\n            first_name: row['Owner First Name'] || null,\n            last_name: row['Owner Last Name'] || null,\n            phone: row['Phone 1'] || null, // Logic: 'Phone 1' common; expand for multiples\n            source: 'propstream_import' as LeadSource,\n            metadata: extracted.metadata,\n            assigned_to: session.user.id,\n            points_earned: 1, // Logic: Per-lead base (gamify: bonus for batch size later)\n          },\n        });\n\n        await tx.profile.update({\n          where: { id: session.user.id },\n          data: { points: { increment: 1 } }, // Logic: Accumulate (tie to quests, e.g., if rows.length >50, extra badge)\n        });\n\n        return [prop, ld];\n      });\n\n      return { row: index + 1, leadId: lead.id, success: true };\n    } catch (error) {\n      console.error(`Import error for row ${index + 1}:`, error);\n      return { row: index + 1, success: false, error: (error as Error).message };\n    }\n  }));\n\n  return { results: results.map(r => r.status === 'fulfilled' ? r.value : { success: false, error: (r.reason as Error).message }) }; // Logic: Flatten for client (e.g., success count)\n}\n\n// Action: Poll import status (fix: Stub for progress polling – simulates % complete; push back: Replace with real DB query on 'import_jobs' table for prod; unblocks testing without Upstash)\nexport async function pollImportStatus(jobId: string) {\n  // Stub logic: Simulate progress (e.g., from memory or DB; here, random increment for testing)\n  // In real, query prisma.import_jobs.findUnique({ where: { id: jobId } }) for { progress, results, error }\n  const simulatedProgress = Math.min(100, (Math.random() * 20) + (await new Promise(r => setTimeout(r, 500)) as any || 0)); // Fake delay/increment\n  if (simulatedProgress >= 100) {\n    return { progress: 100, results: [], error: null }; // Replace with real results\n  }\n  return { progress: simulatedProgress, results: [], error: null };\n}\n\n// Action: Dial lead (logic: Twilio outbound call – from your Twilio number to lead phone; logs to calls table)\nexport async function dialLeadAction(leadId: number) {\n  try {\n    const lead = await prisma.leads.findUnique({ where: { id: leadId }, include: { properties: true } });\n    if (!lead?.phone) {\n      throw new Error('No phone for lead');\n    }\n\n    const supabase = await createSupabaseServerClient(); // Logic: Async client\n    const { data: { session } } = await supabase.auth.getSession();\n    if (!session?.user.id || lead.assigned_to !== session.user.id) {\n      throw new Error('Unauthorized or mismatched assignment');\n    }\n\n    // Twilio outbound (phone-to-phone; expand to browser via Voice SDK if web calls needed)\n    const call = await twilioClient.calls.create({\n      to: lead.phone, // Lead's number\n      from: process.env.TWILIO_PHONE_NUMBER!, // Your Twilio number\n      url: 'http://your-domain.com/api/twiml', // Logic: TwiML endpoint (create /api/twiml route for voice response – e.g., <Say>Hello, connecting to lead</Say>)\n      statusCallback: 'http://your-domain.com/api/call-status', // Logic: Webhook for metrics (update calls table on complete)\n      statusCallbackEvent: ['initiated', 'ringing', 'answered', 'completed'], // Track status\n    });\n\n    // Log call (for metrics/quests – expand with webhook for duration/points)\n    await prisma.calls.create({\n      data: {\n        leads_id: lead.id,\n        caller_id: session.user.id,\n        call_sid: call.sid, // Twilio ID for tracking\n        status: 'initiated',\n        metadata: { address: lead.properties.address },\n      },\n    });\n\n    return { success: true, callId: call.sid };\n  } catch (error) {\n    console.error('Dial error:', error);\n    return { success: false, error: (error as Error).message };\n  }\n}\n\n// Helper: Stubbed extractFromLink (removed for pivot – mock for non-CSV if needed)\n// async function extractFromLink(...) { return { /* mock data */ }; } // Comment out Zillow logic"],"names":[],"mappings":";;;;;;;IAsJsB,mBAAA,WAAA,GAAA,IAAA,8bAAA,EAAA,8CAAA,mbAAA,EAAA,KAAA,GAAA,ybAAA,EAAA","debugId":null}},
    {"offset": {"line": 295, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/lib/actions.ts"],"sourcesContent":["// src/lib/actions.ts – Updated with async Supabase (align with layout fix; keeps Propstream CSV ready – test upload post-restart)\n'use server'; // Logic: Marks as server-only (no client bundle bloat – optimizes for internal app with leads/calls)\nimport { PrismaClient } from '@prisma/client';  // Your DB client (async-safe in actions)\nimport { redirect } from 'next/navigation'; // Server redirect (reliable – no client hacks; best for post-auth flow to dashboard quests)\nimport Papa from 'papaparse'; // Logic: CSV parser (handles headers, errors – best for Propstream exports)\nimport Twilio from 'twilio'; // Logic: Twilio SDK for outbound calls (inexpensive, reliable integration)\nimport { z } from 'zod';  // Validation (type-safe inputs – prevents junk data in DB; no-brainer for prod)\nimport crypto from 'crypto';  // Built-in hash (no extra deps – for address_hash dedup)\nimport { createSupabaseServerClient } from '@/lib/supabaseServer'; // Use async helper (fixes warnings in actions too)\nimport type { Database } from '@/types/database.types'; // Types (autocompletes e.g., session.user.id for Prisma sync – now fixed via your gen)\n\nconst prisma = new PrismaClient();  // Global instance (efficient in Next.js actions – auto-closes; push back: Cache in lib/prisma.ts for hot reloads if issues)\n\nconst twilioClient = Twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN); // Logic: Init Twilio (guard env in prod)\n\nconst importSchema = z.object({\n  source: z.literal('propstream'), // Logic: Locked to Propstream for now (expand later)\n});  // Logic: Zod for form (file handled separately)\n\n// Action: Sign in (logic: Basic stub – expand with your original zod/email/password validation; centralized for type-safety)\nexport async function signInAction(formData: FormData) {\n  const email = formData.get('email')?.toString() ?? '';\n  const password = formData.get('password')?.toString() ?? '';\n  // ... (add your validation/error returns here; e.g., zod schema for email/password)\n  const supabase = await createSupabaseServerClient(); // Logic: Async client (Next 15 safe)\n  const { error } = await supabase.auth.signInWithPassword({ email, password });\n  if (error) {\n    return { error: error.message };\n  }\n  redirect('/dashboard'); // Logic: Post-login to HQ (quests await!)\n}\n\n// Action: Sign out (logic: Centralized mutation – avoids serialization issues in layout; redirects to signin)\nexport async function signOutAction() {\n  const supabase = await createSupabaseServerClient(); // Logic: Async client (consistent fix)\n  await supabase.auth.signOut(); // Logic: Clears session (middleware will redirect unauthed requests)\n  redirect('/auth/signin'); // Logic: Post-signout flow (back to login – update to '/' if public landing needed)\n}\n\n// Action: Import from Propstream CSV (logic: Parse file → per-row extract/map → batch upsert properties/create leads – returns results for UX)\nexport async function importDataAction(formData: FormData) {\n  const validated = importSchema.safeParse({\n    source: formData.get('source')?.toString() ?? 'propstream',\n  });\n  if (!validated.success) {\n    return { error: validated.error.format() };\n  }\n\n  const file = formData.get('file') as File | null; // Logic: Get uploaded CSV (from dropzone/form)\n  if (!file) {\n    return { error: 'No file uploaded' };\n  }\n\n  // Parse CSV (papaparse – async, handles large files stream-like)\n  const csvText = await file.text();\n  const parsed = Papa.parse(csvText, { header: true, skipEmptyLines: true, dynamicTyping: true }); // Logic: Headers on (maps to objects), auto-type numbers\n  if (parsed.errors.length > 0) {\n    return { error: `CSV parse errors: ${parsed.errors.map(e => e.message).join('; ')}` }; // Logic: Early feedback (e.g., malformed rows)\n  }\n\n  const rows = parsed.data as Record<string, any>[]; // Logic: Typed rows (Propstream columns like 'Property Address', 'AVM', etc.)\n  const supabase = await createSupabaseServerClient(); // Logic: Hoist session fetch (efficiency – avoids per-row calls)\n  const { data: { session } } = await supabase.auth.getSession();\n  if (!session?.user.id) {\n    return { error: 'No session – login required' };\n  }\n\n  const results = await Promise.allSettled(rows.map(async (row, index) => { // Logic: Parallel for speed; settled for per-row errors\n    try {\n      // Map Propstream columns to schema (flexible – handle variants/missing; added equity/mortgage for creative financing)\n      const propertyTypeMap: Record<string, PropertyType> = { // Logic: Dict for safe enum mapping (pushback: Better than lowercase assume – handles variants)\n        'single family': 'single_family',\n        'multi family': 'multi_family',\n        'condo': 'condo',\n        'townhouse': 'townhouse',\n        'land': 'land',\n        'commercial': 'commercial',\n        // Add more mappings as needed; default 'other'\n      };\n      const extracted = {\n        address: row['Property Address']?.trim() || null,\n        city: row['City']?.trim() || null,\n        state: row['State']?.toUpperCase() || null, // Logic: Standardize to 2-letter\n        zip_code: row['Zip']?.trim() || null,\n        property_type: propertyTypeMap[row['Property Type']?.toLowerCase() || ''] || 'other',\n        bedrooms: Number(row['Bedrooms']) || null,\n        bathrooms: Number(row['Bathrooms']) || null,\n        square_feet: Number(row['Sq Ft']) || null, // Logic: Common variant 'Sq Ft' over 'Square Feet'\n        lot_size: Number(row['Lot Sq Ft']) || null,\n        year_built: Number(row['Year Built']) || null,\n        avm: Number(row['AVM']) || null,\n        tax_assessed_value: Number(row['Tax Assessed Value']) || null,\n        distress_signals: { // Logic: Expand for more signals if in CSV (e.g., 'High Equity')\n          pre_foreclosure: row['Pre-Foreclosure'] === 'Y' || false,\n        },\n        owner_occupied: row['Owner Occupied'] === 'Y' || null,\n        metadata: { // Logic: Store extras like equity/mortgage for creative financing quests\n          equity_percent: Number(row['Equity %']) || null,\n          mortgage_balance: Number(row['Mortgage Balance']) || null,\n          propstream_row: row, // Full audit\n        },\n      };\n\n      if (!extracted.address || !extracted.city || !extracted.state || !extracted.zip_code) {\n        throw new Error(`Invalid address components in row ${index + 1} – skipping`);\n      }\n\n      const addressHash = crypto.createHash('sha256').update(`${extracted.address.toLowerCase()}${extracted.city.toLowerCase()}${extracted.state.toLowerCase()}${extracted.zip_code}`).digest('hex'); // Logic: Hash full components for better dedup\n\n      // Transaction: Upsert property + create lead + increment points (atomic – best for gamification integrity)\n      const [property, lead] = await prisma.$transaction(async (tx) => {\n        const prop = await tx.properties.upsert({\n          where: { address_hash: addressHash },\n          update: { ...extracted, updated_at: new Date() }, // Logic: Partial update (merge); force timestamp\n          create: { address_hash: addressHash, ...extracted },\n        });\n\n        const ld = await tx.leads.create({\n          data: {\n            properties_id: prop.id,\n            lead_type: row['Lead Type']?.toLowerCase() as LeadType || 'owner', // Logic: Map to enum\n            first_name: row['Owner First Name'] || null,\n            last_name: row['Owner Last Name'] || null,\n            phone: row['Phone 1'] || null, // Logic: 'Phone 1' common; expand for multiples\n            source: 'propstream_import' as LeadSource,\n            metadata: extracted.metadata,\n            assigned_to: session.user.id,\n            points_earned: 1, // Logic: Per-lead base (gamify: bonus for batch size later)\n          },\n        });\n\n        await tx.profile.update({\n          where: { id: session.user.id },\n          data: { points: { increment: 1 } }, // Logic: Accumulate (tie to quests, e.g., if rows.length >50, extra badge)\n        });\n\n        return [prop, ld];\n      });\n\n      return { row: index + 1, leadId: lead.id, success: true };\n    } catch (error) {\n      console.error(`Import error for row ${index + 1}:`, error);\n      return { row: index + 1, success: false, error: (error as Error).message };\n    }\n  }));\n\n  return { results: results.map(r => r.status === 'fulfilled' ? r.value : { success: false, error: (r.reason as Error).message }) }; // Logic: Flatten for client (e.g., success count)\n}\n\n// Action: Poll import status (fix: Stub for progress polling – simulates % complete; push back: Replace with real DB query on 'import_jobs' table for prod; unblocks testing without Upstash)\nexport async function pollImportStatus(jobId: string) {\n  // Stub logic: Simulate progress (e.g., from memory or DB; here, random increment for testing)\n  // In real, query prisma.import_jobs.findUnique({ where: { id: jobId } }) for { progress, results, error }\n  const simulatedProgress = Math.min(100, (Math.random() * 20) + (await new Promise(r => setTimeout(r, 500)) as any || 0)); // Fake delay/increment\n  if (simulatedProgress >= 100) {\n    return { progress: 100, results: [], error: null }; // Replace with real results\n  }\n  return { progress: simulatedProgress, results: [], error: null };\n}\n\n// Action: Dial lead (logic: Twilio outbound call – from your Twilio number to lead phone; logs to calls table)\nexport async function dialLeadAction(leadId: number) {\n  try {\n    const lead = await prisma.leads.findUnique({ where: { id: leadId }, include: { properties: true } });\n    if (!lead?.phone) {\n      throw new Error('No phone for lead');\n    }\n\n    const supabase = await createSupabaseServerClient(); // Logic: Async client\n    const { data: { session } } = await supabase.auth.getSession();\n    if (!session?.user.id || lead.assigned_to !== session.user.id) {\n      throw new Error('Unauthorized or mismatched assignment');\n    }\n\n    // Twilio outbound (phone-to-phone; expand to browser via Voice SDK if web calls needed)\n    const call = await twilioClient.calls.create({\n      to: lead.phone, // Lead's number\n      from: process.env.TWILIO_PHONE_NUMBER!, // Your Twilio number\n      url: 'http://your-domain.com/api/twiml', // Logic: TwiML endpoint (create /api/twiml route for voice response – e.g., <Say>Hello, connecting to lead</Say>)\n      statusCallback: 'http://your-domain.com/api/call-status', // Logic: Webhook for metrics (update calls table on complete)\n      statusCallbackEvent: ['initiated', 'ringing', 'answered', 'completed'], // Track status\n    });\n\n    // Log call (for metrics/quests – expand with webhook for duration/points)\n    await prisma.calls.create({\n      data: {\n        leads_id: lead.id,\n        caller_id: session.user.id,\n        call_sid: call.sid, // Twilio ID for tracking\n        status: 'initiated',\n        metadata: { address: lead.properties.address },\n      },\n    });\n\n    return { success: true, callId: call.sid };\n  } catch (error) {\n    console.error('Dial error:', error);\n    return { success: false, error: (error as Error).message };\n  }\n}\n\n// Helper: Stubbed extractFromLink (removed for pivot – mock for non-CSV if needed)\n// async function extractFromLink(...) { return { /* mock data */ }; } // Comment out Zillow logic"],"names":[],"mappings":";;;;;;;IAiKsB,iBAAA,WAAA,GAAA,IAAA,8bAAA,EAAA,8CAAA,mbAAA,EAAA,KAAA,GAAA,ybAAA,EAAA","debugId":null}},
    {"offset": {"line": 329, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/app/extract/page.tsx"],"sourcesContent":["// src/app/extract/page.tsx – Client page for Propstream import (with progress bar, polling, always-on leads table; gamified UX – see imports progress like quest loading, review leads for dialing; best practice: Polling for status unblocks without complexity; realtime sub for table)\n'use client'; // Logic: Client for interactivity (dropzone, form state, polling, realtime sub)\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { createClientComponentClient } from '@supabase/auth-helpers-nextjs'; // For realtime client sub\nimport { useEffect, useState } from 'react';\nimport { useDropzone } from 'react-dropzone'; // Logic: Drag-drop (gamified UX – better than plain input)\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button'; // Import Button component\nimport { Progress } from '@/components/ui/progress'; // Shadcn for import progress\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'; // Shadcn for leads display\nimport { enrichLeadRealtor, importDataAction, pollImportStatus } from '@/lib/actions'; // Updated actions (add poll below)\n\nconst importSchema = z.object({ source: z.literal('propstream') });\ntype FormData = z.infer<typeof importSchema>;\n\nexport default function ExtractPage() {\n  const [importResults, setImportResults] = useState<any[]>([]); // Logic: Import outcomes\n  const [error, setError] = useState<string | null>(null);\n  const [file, setFile] = useState<File | null>(null); // Logic: Hold uploaded file\n  const [leads, setLeads] = useState<any[]>([]); // Logic: State for current leads (fetched/realtime)\n  const [importProgress, setImportProgress] = useState(0); // Logic: Progress % (0-100)\n  const [importJobId, setImportJobId] = useState<string | null>(null); // Logic: Job ID for polling\n  const { handleSubmit, formState: { isSubmitting } } = useForm<FormData>({\n    resolver: zodResolver(importSchema),\n    defaultValues: { source: 'propstream' },\n  });\n\n  const supabase = createClientComponentClient(); // Logic: Client Supabase for realtime subs/fetch (secure with RLS)\n\n  // Fetch initial leads + sub for realtime (always show – gamified review; pushback: Pagination for >100 leads later)\n  useEffect(() => {\n    const fetchLeads = async () => {\n      const { data: { user } } = await supabase.auth.getUser(); // Secure client auth\n      if (user?.id) {\n        const { data } = await supabase.from('leads').select('*').eq('assigned_to', user.id).order('created_at', { ascending: false }).limit(100); // Logic: User's assigned, recent first (limit for perf)\n        setLeads(data || []);\n      }\n    };\n\n    fetchLeads();\n\n    // Realtime sub (pushback: Efficient for gamification – live updates like MMO quest log; unsub on unmount)\n    const leadsSub = supabase.channel('leads_changes').on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'leads' }, (payload) => {\n      setLeads((prev) => [payload.new, ...prev.slice(0, 99)]); // Prepend new, cap at 100\n    }).subscribe();\n\n    return () => { supabase.removeChannel(leadsSub); }; // Cleanup\n  }, [supabase]);\n\n  // Polling for import progress (if jobId set; interval 1s, stop on 100% or error)\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (importJobId) {\n      interval = setInterval(async () => {\n        const status = await pollImportStatus(importJobId); // Logic: New action (below)\n        setImportProgress(status.progress);\n        setImportResults(status.results || []);\n        if (status.error) setError(status.error);\n        if (status.progress >= 100 || status.error) {\n          clearInterval(interval);\n          setImportJobId(null); // Reset\n        }\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [importJobId]);\n\n  const onSubmit = async () => {\n    setError(null);\n    setImportResults([]);\n    setImportProgress(0);\n    if (!file) {\n      setError('Upload a Propstream CSV first');\n      return;\n    }\n    if (file.size > 5 * 1024 * 1024) { // Logic: Security/perf – limit 5MB\n      setError('File too large – max 5MB');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('source', 'propstream');\n    const result = await importDataAction(formData); // Logic: Now returns jobId for long-running (update action to support)\n\n    if (result.error) {\n      setError('Import failed: ' + JSON.stringify(result.error));\n    } else {\n      setImportJobId(result.jobId); // Start polling\n    }\n  };\n\n  const { getRootProps, getInputProps } = useDropzone({\n    accept: { 'text/csv': ['.csv'] },\n    onDrop: (acceptedFiles) => setFile(acceptedFiles[0] || null), // Logic: Take first file\n  });\n\n  return (\n    <div className=\"flex flex-col min-h-screen items-center bg-black text-green-400 font-mono p-8\">\n      <form onSubmit={handleSubmit(onSubmit)} className=\"p-8 border-2 border-green-500 rounded-lg shadow-[0_0_15px_rgba(0,255,0,0.7)] bg-black/80 w-full max-w-md mb-8\">\n        <h2 className=\"text-2xl mb-6 text-center\">Import Leads Quest (Propstream CSV)</h2>\n        <div {...getRootProps()} className=\"w-full mb-4 p-4 bg-black border border-dashed border-green-500 text-center cursor-pointer\">\n          <input {...getInputProps()} />\n          <p>{file ? file.name : 'Drag-drop CSV or click to upload'}</p>\n        </div>\n        <button type=\"submit\" disabled={isSubmitting || !file} className=\"w-full p-2 bg-green-500 text-black hover:bg-green-600\">\n          {isSubmitting ? 'Importing...' : 'Start Import'}\n        </button>\n        {importProgress > 0 && <Progress value={importProgress} className=\"mt-4\" />} {/* Logic: Gamified progress bar */}\n        {error && <p className=\"text-red-500 mt-4\">{error}</p>}\n        {importResults.length > 0 && (\n          <ul className=\"mt-4 max-h-40 overflow-y-auto\">\n            {importResults.map((res, i) => (\n              <li key={i} className={res.success ? 'text-green-400' : 'text-red-500'}>\n                {res.success ? `Row ${res.row} imported (Lead ${res.leadId})` : `Error on row ${res.row}: ${res.error}`}\n              </li>\n            ))}\n          </ul>\n        )}\n      </form>\n\n      {/* Leads Table (always show – data table of current leads; realtime updates) */}\n      <div className=\"w-full max-w-4xl\">\n        <h2 className=\"text-2xl mb-4\">Your Current Leads (Assigned to You)</h2>\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Address</TableHead>\n              <TableHead>Name</TableHead>\n              <TableHead>Phone</TableHead>\n              <TableHead>Status</TableHead>\n              <TableHead>Source</TableHead>\n              <TableHead>Points Earned</TableHead>\n              <TableHead>Equity % (Creative)</TableHead> {/* Logic: From metadata for financing focus */}\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n  {leads.map((lead) => (\n    <TableRow key={lead.id}>\n      // ... existing cells\n      <TableCell>{lead.realtor_first_name || 'N/A'}</TableCell>\n      <TableCell>{lead.realtor_last_name || 'N/A'}</TableCell>\n      <TableCell>{lead.realtor_phone || 'N/A'}</TableCell>\n      <TableCell>\n        <Button onClick={async () => {\n          const result = await enrichLeadRealtor(lead.id);\n          if (result.success) {\n            // Update local state (or rely on realtime sub)\n            setLeads(prev => prev.map(l => l.id === lead.id ? { ...l, ...result.realtor } : l));\n          } else {\n            alert(result.error); // Simple error UX; use toast later\n          }\n        }}>Enrich Realtor</Button>\n      </TableCell>\n    </TableRow>\n  ))}\n</TableBody>\n        </Table>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}