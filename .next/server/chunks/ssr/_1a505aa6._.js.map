{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/lib/actions.ts"],"sourcesContent":["// src/lib/actions.ts – Updated with async Supabase (align with layout fix; keeps Propstream CSV ready – test upload post-restart)\n'use server'; // Logic: Marks as server-only (no client bundle bloat – optimizes for internal app with leads/calls)\nimport { PrismaClient } from '@prisma/client';  // Your DB client (async-safe in actions)\nimport { redirect } from 'next/navigation'; // Server redirect (reliable – no client hacks; best for post-auth flow to dashboard quests)\nimport Papa from 'papaparse'; // Logic: CSV parser (handles headers, errors – best for Propstream exports)\nimport Twilio from 'twilio'; // Logic: Twilio SDK for outbound calls (inexpensive, reliable integration)\nimport { z } from 'zod';  // Validation (type-safe inputs – prevents junk data in DB; no-brainer for prod)\nimport crypto from 'crypto';  // Built-in hash (no extra deps – for address_hash dedup)\nimport { createSupabaseServerClient } from '@/lib/supabaseServer'; // Use async helper (fixes warnings in actions too)\nimport type { Database } from '../types/database.types'; // Types (autocompletes e.g., session.user.id for Prisma sync – now fixed via your gen)\n\nconst prisma = new PrismaClient();  // Global instance (efficient in Next.js actions – auto-closes; push back: Cache in lib/prisma.ts for hot reloads if issues)\n\nconst twilioClient = Twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN); // Logic: Init Twilio (guard env in prod)\n\nconst importSchema = z.object({\n  source: z.literal('propstream'), // Logic: Locked to Propstream for now (expand later)\n});  // Logic: Zod for form (file handled separately)\n\n// Action: Sign in (logic: Basic stub – expand with your original zod/email/password validation; centralized for type-safety)\nexport async function signInAction(formData: FormData) {\n  const email = formData.get('email')?.toString() ?? '';\n  const password = formData.get('password')?.toString() ?? '';\n  // ... (add your validation/error returns here; e.g., zod schema for email/password)\n  const supabase = await createSupabaseServerClient(); // Logic: Async client (Next 15 safe)\n  const { data: { session }, error } = await supabase.auth.signInWithPassword({ email, password });\n  if (error) {\n    return { error: error.message };\n  }\n\n  // Auto-create profile if none exists (step 3 fix: No-brainer for robustness – ensures every logged-in user has a gamification profile; prevents null errors in dashboard/layout; pushback: If using Supabase signup hooks, move there for new users only, but this covers all logins safely)\n  if (session?.user.id) {\n    const existingProfile = await prisma.profile.findUnique({ where: { id: session.user.id } });\n    if (!existingProfile) {\n      await prisma.profile.create({\n        data: {\n          id: session.user.id, // PK matches auth user ID\n          user_id: session.user.id, // 1:1 FK to auth.users\n          role: 'novice', // Default enum (gamify: Start at base level)\n          points: 0,\n          badges: [], // Empty array\n        },\n      });\n    }\n  }\n\n  redirect('/dashboard'); // Logic: Post-login to HQ (quests await!)\n}\n\n// Action: Sign out (logic: Centralized mutation – avoids serialization issues in layout; redirects to signin)\nexport async function signOutAction() {\n  const supabase = await createSupabaseServerClient(); // Logic: Async client (consistent fix)\n  await supabase.auth.signOut(); // Logic: Clears session (middleware will redirect unauthed requests)\n  redirect('/auth/signin'); // Logic: Post-signout flow (back to login – update to '/' if public landing needed)\n}\n\n// Action: Import from Propstream CSV (logic: Parse file → per-row extract/map → batch upsert properties/create leads – returns results for UX)\nexport async function importDataAction(formData: FormData) {\n  const validated = importSchema.safeParse({\n    source: formData.get('source')?.toString() ?? 'propstream',\n  });\n  if (!validated.success) {\n    return { error: validated.error.format() };\n  }\n  const file = formData.get('file') as File | null; // Logic: Get uploaded CSV (from dropzone/form)\n  if (!file) {\n    return { error: 'No file uploaded' };\n  }\n  // Parse CSV (papaparse – async, handles large files stream-like)\n  const csvText = await file.text();\n  const parsed = Papa.parse(csvText, { header: true, skipEmptyLines: true, dynamicTyping: true }); // Logic: Headers on (maps to objects), auto-type numbers\n  if (parsed.errors.length > 0) {\n    return { error: `CSV parse errors: ${parsed.errors.map(e => e.message).join('; ')}` }; // Logic: Early feedback (e.g., malformed rows)\n  }\n  const rows = parsed.data as Record<string, any>[]; // Logic: Typed rows (Propstream columns like 'Property Address', 'AVM', etc.)\n  const supabase = await createSupabaseServerClient(); // Logic: Hoist session fetch outside loop/transaction (efficiency – avoids redundant calls per row; best practice for batch actions)\n  const { data: { session } } = await supabase.auth.getSession();\n  if (!session?.user.id) {\n    return { error: 'No session – login required' };\n  }\n  const results = await Promise.allSettled(rows.map(async (row, index) => { // Logic: Parallel for speed; settled for per-row errors\n    try {\n      // Map Propstream columns to schema (flexible – handle variants/missing; added equity/mortgage for creative financing—calculate `equity_percent` if not direct)\n      const propertyTypeMap: Record<string, PropertyType> = { // Logic: Dict for safe enum mapping (pushback: Better than lowercase assume – handles variants)\n        'single family': 'single_family',\n        'multi family': 'multi_family',\n        'condo': 'condo',\n        'townhouse': 'townhouse',\n        'land': 'land',\n        'commercial': 'commercial',\n        // Add more mappings as needed; default 'other'\n      };\n      const extracted = {\n        address: row['Property Address']?.trim() || null,\n        city: row['City']?.trim() || null,\n        state: row['State']?.toUpperCase() || null, // Logic: Standardize to 2-letter\n        zip_code: row['Zip']?.trim() || null,\n        property_type: propertyTypeMap[row['Property Type']?.toLowerCase() || ''] || 'other',\n        bedrooms: Number(row['Bedrooms']) || null,\n        bathrooms: Number(row['Bathrooms']) || null,\n        square_feet: Number(row['Sq Ft']) || null, // Logic: Common variant 'Sq Ft' over 'Square Feet'\n        lot_size: Number(row['Lot Sq Ft']) || null,\n        year_built: Number(row['Year Built']) || null,\n        avm: Number(row['AVM']) || null,\n        tax_assessed_value: Number(row['Tax Assessed Value']) || null,\n        distress_signals: { // Logic: Expand for more signals if in CSV (e.g., 'High Equity')\n          pre_foreclosure: row['Pre-Foreclosure'] === 'Y' || false,\n        },\n        owner_occupied: row['Owner Occupied'] === 'Y' || null,\n        metadata: { // Logic: Store extras like equity/mortgage for creative financing quests\n          equity_percent: Number(row['Equity %']) || null,\n          mortgage_balance: Number(row['Mortgage Balance']) || null,\n          propstream_row: row, // Full audit\n        },\n      };\n\n      if (!extracted.address || !extracted.city || !extracted.state || !extracted.zip_code) {\n        throw new Error(`Invalid address components in row ${index + 1} – skipping`);\n      }\n\n      const addressHash = crypto.createHash('sha256').update(`${extracted.address.toLowerCase()}${extracted.city.toLowerCase()}${extracted.state.toLowerCase()}${extracted.zip_code}`).digest('hex'); // Logic: Hash full components for better dedup\n\n      // Transaction: Upsert property + create lead + increment points (atomic – best for gamification integrity)\n      const [property, lead] = await prisma.$transaction(async (tx) => {\n        const prop = await tx.properties.upsert({\n          where: { address_hash: addressHash },\n          update: { ...extracted, updated_at: new Date() }, // Logic: Partial update (merge); force timestamp\n          create: { address_hash: addressHash, ...extracted },\n        });\n\n        const ld = await tx.leads.create({\n          data: {\n            properties_id: prop.id,\n            lead_type: row['Lead Type']?.toLowerCase() as LeadType || 'owner', // Logic: Map to enum\n            first_name: row['Owner First Name'] || null,\n            last_name: row['Owner Last Name'] || null,\n            phone: row['Phone 1'] || null, // Logic: 'Phone 1' common; expand for multiples\n            source: 'propstream_import' as LeadSource,\n            metadata: extracted.metadata,\n            assigned_to: session.user.id,\n            points_earned: 1, // Logic: Per-lead base (gamify: bonus for batch size later)\n          },\n        });\n\n        await tx.profile.update({\n          where: { id: session.user.id },\n          data: { points: { increment: 1 } }, // Logic: Accumulate (tie to quests, e.g., if rows.length >50, extra badge)\n        });\n\n        return [prop, ld];\n      });\n\n      return { row: index + 1, leadId: lead.id, success: true };\n    } catch (error) {\n      console.error(`Import error for row ${index + 1}:`, error); // Logic: Server log for debug (client gets summary)\n      return { row: index + 1, success: false, error: (error as Error).message };\n    }\n  }));\n\n  const importResults = results.map(r => r.status === 'fulfilled' ? r.value : { success: false, error: (r.reason as Error).message }); // Logic: Flatten for client (e.g., success count)\n\n  // Gamification Trigger: Batch-based quest (e.g., if >50 successful imports, complete a \"Bulk Import\" quest – assume quest ID 'bulk-import-quest-id' exists; seed if not)\n  const successfulImports = importResults.filter(r => r.success).length;\n  if (successfulImports > 50) {\n    await prisma.quest_completions.create({\n      data: {\n        quest_id: 'bulk-import-quest-id', // Logic: Replace with real ID (create quest: title=\"Bulk Import 50+ Leads\", points=100, criteria={min_imports:50})\n        profile_id: session.user.id,\n        evidence: { total_imports: successfulImports, points_awarded: 100 },\n      },\n    });\n    // Pushback: Also update profile badges here if quest unlocks one (e.g., push 'Bulk Importer' to badges array)\n    await prisma.profile.update({\n      where: { id: session.user.id },\n      data: { badges: { push: 'Bulk Importer' }, points: { increment: 100 } },\n    });\n  }\n\n  return { results: importResults };\n}\n\n// Action: Dial lead (logic: Twilio outbound call – from your Twilio number to lead phone; logs to calls table)\nexport async function dialLeadAction(leadId: string) { // Logic: String for UUID (matches schema)\n  try {\n    const lead = await prisma.leads.findUnique({ where: { id: leadId }, include: { properties: true } });\n    if (!lead?.phone) {\n      throw new Error('No phone for lead');\n    }\n\n    const supabase = await createSupabaseServerClient(); // Logic: Async client\n    const { data: { session } } = await supabase.auth.getSession();\n    if (!session?.user.id || lead.assigned_to !== session.user.id) {\n      throw new Error('Unauthorized or mismatched assignment');\n    }\n\n    // Twilio outbound (phone-to-phone; expand to browser via Voice SDK if web calls needed)\n    const call = await twilioClient.calls.create({\n      to: lead.phone, // Lead's number\n      from: process.env.TWILIO_PHONE_NUMBER!, // Your Twilio number\n      url: 'http://your-domain.com/api/twiml', // Logic: TwiML endpoint (create /api/twiml route for voice response – e.g., <Say>Hello, connecting to lead</Say>)\n      statusCallback: 'http://your-domain.com/api/call-status', // Logic: Webhook for metrics (update calls table on complete)\n      statusCallbackEvent: ['initiated', 'ringing', 'answered', 'completed'], // Track status\n    });\n\n    // Log call (for metrics/quests – expand with webhook for duration/points)\n    await prisma.calls.create({\n      data: {\n        leads_id: lead.id,\n        caller_id: session.user.id,\n        call_sid: call.sid, // Twilio ID for tracking\n        status: 'initiated',\n        metadata: { address: lead.properties.address },\n      },\n    });\n\n    return { success: true, callId: call.sid };\n  } catch (error) {\n    console.error('Dial error:', error);\n    return { success: false, error: (error as Error).message };\n  }\n}\n\n// Helper: Stubbed extractFromLink (removed for pivot – mock for non-CSV if needed)\n// async function extractFromLink(...) { return { /* mock data */ }; } // Comment out Zillow logic"],"names":[],"mappings":";;;;;;;IAoBsB,eAAA,WAAA,GAAA,IAAA,8bAAA,EAAA,8CAAA,mbAAA,EAAA,KAAA,GAAA,ybAAA,EAAA","debugId":null}},
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/app/auth/signin/page.tsx"],"sourcesContent":["// src/app/auth/signin/page.tsx – Login form (client-side for state/UX; binds server action for mutation – best hybrid for Next.js, fixes cookie bug without full server component)\n'use client';  // Logic: Client (enables hooks like useState/useRouter – interactive errors without reload; push back: If no complex state, could go full server for perf)\n\nimport { useRouter } from 'next/navigation';  // Logic: Router for client push/refresh (smooth transition – e.g., to leaderboard; no reload on success; satisfies ESLint by using refresh() fallback)\nimport { useState } from 'react';\nimport { signInAction } from '@/lib/actions';  // Imported server action (executes server-side – handles cookies/redirect; scalable for more forms)\n\nexport default function SignIn() {\n  const router = useRouter();  // Logic: Used for success push + refresh (avoids stale UI post-auth – better for game-like flow; fixes \"assigned but unused\")\n  const [email, setEmail] = useState('');  // Logic: Controlled input (realtime validation if expanded – e.g., email format check for \"quest eligibility\")\n  const [password, setPassword] = useState('');  // Logic: Controlled input (same as above)\n  const [error, setError] = useState<string | null>(null);  // Logic: Local error state (displays without reload – improves rep login experience; fixes \"assigned but unused\" by setting conditionally)\n\n  const handleSignIn = async (e: React.FormEvent<HTMLFormElement>) => {  // Logic: Async handler (waits for action – sets local error if fails)\n    e.preventDefault();\n    if (!email || !password) {  // Logic: Client validation (quick feedback – prevents unnecessary server calls; duplicates server for speed; uses state vars to satisfy ESLint)\n      setError('Email and password are required');\n      return;\n    }\n    if (password.length < 6) {\n      setError('Password must be at least 6 characters');\n      return;\n    }\n\n    const formData = new FormData(e.currentTarget);  // Logic: Native FormData (binds inputs – no manual state sync; efficient)\n    const result = await signInAction(formData);  // Logic: Call server action (runs server-side – returns { error } or redirects on success)\n\n    if (result?.error) {\n      setError(result.error);  // Logic: Display error client-side (no reload – e.g., \"Invalid credentials\"; ties to game theme, like \"Access Denied: Retry Quest\")\n    } else {\n      router.refresh();  // Logic: Optimistic refresh (syncs any server data if dashboard has SSR fetches – e.g., load quests; satisfies ESLint usage)\n      router.push('/dashboard');  // Logic: Client push on success (smooth – cookies sync'd via middleware; fallback if redirect fails)\n    }\n  };\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-black text-green-400 font-mono\">\n      <form onSubmit={handleSignIn} className=\"p-8 border-2 border-green-500 rounded-lg shadow-[0_0_15px_rgba(0,255,0,0.7)] bg-black/80\">\n        <h2 className=\"text-2xl mb-6 text-center\">Enter Wraelen HQ</h2>\n        {error && <p className=\"text-red-500 mb-4\">{error}</p>}  // Logic: Displays from state (clear feedback – no query params needed)\n        <input\n          name=\"email\"  // Logic: Name attrs (for FormData – kept onChange for controlled inputs/realtime validation if expanded)\n          type=\"email\"\n          placeholder=\"Email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          className=\"w-full mb-4 p-2 bg-black border border-green-500 text-green-400 focus:outline-none focus:border-green-300\"\n        />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          className=\"w-full mb-6 p-2 bg-black border border-green-500 text-green-400 focus:outline-none focus:border-green-300\"\n        />\n        <button type=\"submit\" className=\"w-full p-2 bg-green-500 text-black hover:bg-green-600\">Login</button>\n      </form>\n    </div>\n  );\n}"],"names":[],"mappings":"AAAA,mLAAmL;;;;;;AAGnL,ikBAA8C,uJAAuJ;AACrM;AACA,4PAA+C,oGAAoG;AAJnJ,cAAe,2JAA2J;;;;;AAM3J,SAAS;IACtB,MAAM,SAAS,IAAA,8VAAS,KAAK,8HAA8H;IAC3J,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,gaAAQ,EAAC,KAAM,+GAA+G;IACxJ,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,gaAAQ,EAAC,KAAM,0CAA0C;IACzF,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,gaAAQ,EAAgB,OAAQ,2IAA2I;IAErM,MAAM,eAAe,OAAO;QAC1B,EAAE,cAAc;QAChB,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,SAAS;YACT;QACF;QACA,IAAI,SAAS,MAAM,GAAG,GAAG;YACvB,SAAS;YACT;QACF;QAEA,MAAM,WAAW,IAAI,SAAS,EAAE,aAAa,GAAI,0EAA0E;QAC3H,MAAM,SAAS,MAAM,IAAA,kKAAY,EAAC,WAAY,2FAA2F;QAEzI,IAAI,QAAQ,OAAO;YACjB,SAAS,OAAO,KAAK,GAAI,oIAAoI;QAC/J,OAAO;YACL,OAAO,OAAO,IAAK,6HAA6H;YAChJ,OAAO,IAAI,CAAC,eAAgB,qGAAqG;QACnI;IACF;IAEA,qBACE,6bAAC;QAAI,WAAU;kBACb,cAAA,6bAAC;YAAK,UAAU;YAAc,WAAU;;8BACtC,6bAAC;oBAAG,WAAU;8BAA4B;;;;;;gBACzC,uBAAS,6bAAC;oBAAE,WAAU;8BAAqB;;;;;;gBAAW;8BACvD,6bAAC;oBACC,MAAK;oBACL,MAAK;oBACL,aAAY;oBACZ,OAAO;oBACP,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;oBACxC,WAAU;;;;;;8BAEZ,6bAAC;oBACC,MAAK;oBACL,MAAK;oBACL,aAAY;oBACZ,OAAO;oBACP,UAAU,CAAC,IAAM,YAAY,EAAE,MAAM,CAAC,KAAK;oBAC3C,WAAU;;;;;;8BAEZ,6bAAC;oBAAO,MAAK;oBAAS,WAAU;8BAAwD;;;;;;;;;;;;;;;;;AAIhG","debugId":null}},
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/next%4015.5.4_%40babel%2Bcore%407.27.1_%40opentelemetry%2Bapi%401.7.0_%40playwright%2Btest%401.52.0_babel-p_68e8c185df7d969f063bfb2ef00a51ed/node_modules/next/navigation.js"],"sourcesContent":["module.exports = require('./dist/client/components/navigation')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/next%4015.5.4_%40babel%2Bcore%407.27.1_%40opentelemetry%2Bapi%401.7.0_%40playwright%2Btest%401.52.0_babel-p_68e8c185df7d969f063bfb2ef00a51ed/node_modules/next/src/build/webpack/loaders/next-flight-loader/action-client-wrapper.ts"],"sourcesContent":["// This file must be bundled in the app's client layer, it shouldn't be directly\n// imported by the server.\n\nexport { callServer } from 'next/dist/client/app-call-server'\nexport { findSourceMapURL } from 'next/dist/client/app-find-source-map-url'\n\n// A noop wrapper to let the Flight client create the server reference.\n// See also: https://github.com/facebook/react/pull/26632\n// eslint-disable-next-line import/no-extraneous-dependencies\nexport { createServerReference } from 'react-server-dom-webpack/client'\n"],"names":["callServer","createServerReference","findSourceMapURL"],"mappings":"AAAA,gFAAgF;AAChF,0BAA0B;;;;;;;;;;;;;;;;IAEjBA,UAAU,EAAA;eAAVA,eAAAA,UAAU;;IAMVC,qBAAqB,EAAA;eAArBA,QAAAA,qBAAqB;;IALrBC,gBAAgB,EAAA;eAAhBA,qBAAAA,gBAAgB;;;+BADE;qCACM;wBAKK","ignoreList":[0],"debugId":null}}]
}