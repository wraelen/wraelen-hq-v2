{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/components/ui/progress.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const Progress = registerClientReference(\n    function() { throw new Error(\"Attempted to call Progress() from the server but Progress is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/progress.tsx <module evaluation>\",\n    \"Progress\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,WAAW,IAAA,udAAuB,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,gEACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 18, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/components/ui/progress.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const Progress = registerClientReference(\n    function() { throw new Error(\"Attempted to call Progress() from the server but Progress is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/progress.tsx\",\n    \"Progress\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,WAAW,IAAA,udAAuB,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,4CACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/lib/supabaseServer.ts"],"sourcesContent":["// src/lib/supabaseServer.ts – Async Supabase server client helper (best practice: Wrap for Next 15 async cookies – fixes sync-dynamic-apis warnings; centralized for reuse in actions/layout; added autoRefresh false to avoid sets in components)\nimport { createServerClient } from '@supabase/ssr';\nimport { cookies } from 'next/headers';\nimport type { Database } from '@/types/database.types'; // Keep your types\n\nexport async function createSupabaseServerClient() {\n  const cookieStore = await cookies(); // Logic: Await dynamic cookies (Next 15 requirement – avoids sync errors)\n  return createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      auth: {\n        autoRefreshToken: false, // Logic: Disable auto-refresh in server components (prevents token set during getSession – fixes cookie modify error; refresh in actions/middleware)\n        persistSession: false, // Logic: No persist on server (session is per-request)\n      },\n      cookies: {\n        get(name: string) {\n          return cookieStore.get(name)?.value; // Logic: Sync get after await (safe)\n        },\n        set(name: string, value: string, options: any) {\n          try {\n            cookieStore.set({ name, value, ...options }); // Logic: No await needed (set is sync)\n          } catch (error) {\n            // The `set` method was called from a Server Action. Ignore – middleware will refresh session on next request.\n            // Logic: No logging here (expected noise in Next.js 15+ with Supabase SSR during token refresh attempts; the try-catch safely ignores it per docs – unblocks cleanly without clutter; push back: If debugging needed, add console.warn only in dev via process.env.NODE_ENV)\n          }\n        },\n        remove(name: string, options: any) {\n          try {\n            cookieStore.set({ name, value: '', ...options }); // Logic: Remove via empty set\n          } catch (error) {\n            // Ignored as above\n          }\n        },\n      },\n    }\n  );\n}"],"names":[],"mappings":"AAAA,mPAAmP;;;;;AACnP;AAAA;AACA;;;AAGO,eAAe;IACpB,MAAM,cAAc,MAAM,IAAA,yVAAO,KAAI,0EAA0E;IAC/G,OAAO,IAAA,4SAAkB,sUAGvB;QACE,MAAM;YACJ,kBAAkB;YAClB,gBAAgB;QAClB;QACA,SAAS;YACP,KAAI,IAAY;gBACd,OAAO,YAAY,GAAG,CAAC,OAAO,OAAO,qCAAqC;YAC5E;YACA,KAAI,IAAY,EAAE,KAAa,EAAE,OAAY;gBAC3C,IAAI;oBACF,YAAY,GAAG,CAAC;wBAAE;wBAAM;wBAAO,GAAG,OAAO;oBAAC,IAAI,uCAAuC;gBACvF,EAAE,OAAO,OAAO;gBACd,8GAA8G;gBAC9G,6QAA6Q;gBAC/Q;YACF;YACA,QAAO,IAAY,EAAE,OAAY;gBAC/B,IAAI;oBACF,YAAY,GAAG,CAAC;wBAAE;wBAAM,OAAO;wBAAI,GAAG,OAAO;oBAAC,IAAI,8BAA8B;gBAClF,EAAE,OAAO,OAAO;gBACd,mBAAmB;gBACrB;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 193, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/lib/actions.ts"],"sourcesContent":["// src/lib/actions.ts – Updated with async Supabase (align with layout fix; keeps Propstream CSV ready – test upload post-restart; fixed notes type by disabling dynamicTyping and explicit conversions – best practice: Treat CSV as strings to avoid surprises, manually Number() numerics for safety/scalability in imports/quests)\n'use server'; // Logic: Marks as server-only (no client bundle bloat – optimizes for internal app with leads/calls)\nimport { LeadSource, LeadType, PrismaClient, PropertyType } from '@prisma/client';  // Your DB client (async-safe in actions)\nimport { redirect } from 'next/navigation'; // Server redirect (reliable – no client hacks; best for post-auth flow to dashboard quests)\nimport Papa from 'papaparse'; // Logic: CSV parser (handles headers, errors – best for Propstream exports)\nimport Twilio from 'twilio'; // Logic: Twilio SDK for outbound calls (inexpensive, reliable integration)\nimport { z } from 'zod';  // Validation (type-safe inputs – prevents junk data in DB; no-brainer for prod)\nimport crypto from 'crypto';  // Built-in hash (no extra deps – for address_hash dedup)\nimport { createSupabaseServerClient } from '@/lib/supabaseServer'; // Use async helper (fixes warnings in actions too)\nimport type { Database } from '@/types/database.types'; // Types (autocompletes e.g., session.user.id for Prisma sync – now fixed via your gen)\n\nconst prisma = new PrismaClient();  // Global instance (efficient in Next.js actions – auto-closes; push back: Cache in lib/prisma.ts for hot reloads if issues)\n\nconst twilioClient = Twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN); // Logic: Init Twilio (guard env in prod)\n\nconst importSchema = z.object({\n  source: z.literal('propstream'), // Logic: Locked to Propstream for now (expand later)\n});  // Logic: Zod for form (file handled separately)\n\n// Action: Sign in (logic: Basic stub – expand with your original zod/email/password validation; centralized for type-safety)\nexport async function signInAction(formData: FormData) {\n  const email = formData.get('email')?.toString() ?? '';\n  const password = formData.get('password')?.toString() ?? '';\n  // ... (add your validation/error returns here; e.g., zod schema for email/password)\n  const supabase = await createSupabaseServerClient(); // Logic: Async client (Next 15 safe)\n  const { error } = await supabase.auth.signInWithPassword({ email, password });\n  if (error) {\n    return { error: error.message };\n  }\n  redirect('/dashboard'); // Logic: Post-login to HQ (quests await!)\n}\n\n// Action: Sign out (logic: Centralized mutation – avoids serialization issues in layout; redirects to signin)\nexport async function signOutAction() {\n  const supabase = await createSupabaseServerClient(); // Logic: Async client (consistent fix)\n  await supabase.auth.signOut(); // Logic: Clears session (middleware will redirect unauthed requests)\n  redirect('/auth/signin'); // Logic: Post-signout flow (back to login – update to '/' if public landing needed)\n}\n\n// Action: Import from Propstream CSV (logic: Parse file → per-row extract/map → batch upsert properties/create leads – returns results for UX)\nexport async function importDataAction(formData: FormData) {\n  const validated = importSchema.safeParse({\n    source: formData.get('source')?.toString() ?? 'propstream',\n  });\n  if (!validated.success) {\n    return { error: validated.error.format() };\n  }\n\n  const file = formData.get('file') as File | null; // Logic: Get uploaded CSV (from dropzone/form)\n  if (!file) {\n    return { error: 'No file uploaded' };\n  }\n\n  // Parse CSV (papaparse – async, handles large files stream-like)\n  const csvText = await file.text();\n  const parsed = Papa.parse(csvText, { header: true, skipEmptyLines: true, dynamicTyping: false }); // Fix: Disable dynamicTyping (all fields as strings – avoids number surprises like notes:1 as Int; explicit Number() below for numerics)\n  if (parsed.errors.length > 0) {\n    return { error: `CSV parse errors: ${parsed.errors.map(e => e.message).join('; ')}` }; // Logic: Early feedback (e.g., malformed rows)\n  }\n\n  const rows = parsed.data as Record<string, any>[]; // Logic: Typed rows (Propstream columns like 'Property Address', 'AVM', etc.)\n  const supabase = await createSupabaseServerClient(); // Logic: Hoist session fetch (efficiency – avoids per-row calls)\n  const { data: { session } } = await supabase.auth.getSession();\n  if (!session?.user.id) {\n    return { error: 'No session – login required' };\n  }\n\n  const results = await Promise.allSettled(rows.map(async (row, index) => { // Logic: Parallel for speed; settled for per-row errors\n    try {\n      // Map Propstream columns to schema (flexible – handle variants/missing; added equity/mortgage for creative financing)\n      const propertyTypeMap: Record<string, PropertyType> = { // Logic: Dict for safe enum mapping (pushback: Better than lowercase assume – handles variants)\n        'single family': 'single_family',\n        'multi family': 'multi_family',\n        'condo': 'condo',\n        'townhouse': 'townhouse',\n        'land': 'land',\n        'commercial': 'commercial',\n        'duplex (2 units, any combination)': 'multi_family', // Added: Matches your sample CSV value (normalize to enum; pushback: If more variants, expand or use AI fuzzy match later)\n        // Add more mappings as needed; default to 'other' below\n      };\n\n      const address = row['Address']?.trim() || null; // Logic: Trim (now strings)\n      const city = row['City']?.trim() || null;\n      const state = row['State']?.toUpperCase() || null; // Standardize to uppercase (e.g., 'FL' → 'FL')\n      const zip_code = row['Zip']?.trim() || null; // Keep as string for leading zeros\n      if (!address || !city || !state || !zip_code) {\n        throw new Error('Missing required address fields');\n      }\n\n      const address_hash = crypto.createHash('sha256').update(`${address}${city}${state}${zip_code}`.toLowerCase()).digest('hex'); // Logic: Normalized hash for dedup (lowercase for consistency)\n\n      const propertyData = {\n        address,\n        city,\n        state,\n        zip_code,\n        property_type: propertyTypeMap[row['Property Type']?.toLowerCase() || ''] || 'other' as PropertyType,\n        bedrooms: Number(row['Bedrooms']) || null, // Explicit Number (NaN → null)\n        bathrooms: Number(row['Total Bathrooms']) || null, // Matches CSV header 'Total Bathrooms'\n        square_feet: Number(row['Building Sqft']) || null,\n        lot_size: Number(row['Lot Size Sqft']) || null,\n        year_built: Number(row['Effective Year Built']) || null,\n        avm: Number(row['Est. Value']) || null, // Matches 'Est. Value' for AVM\n        tax_assessed_value: Number(row['Total Assessed Value']) || null,\n        owner_occupied: row['Owner Occupied']?.toLowerCase() === 'yes' ? true : (row['Owner Occupied']?.toLowerCase() === 'no' ? false : null), // Boolean map from string\n        distress_signals: row['Foreclosure Factor'] ? { foreclosure: row['Foreclosure Factor'] } : null, // Json: Basic distress (expand with more CSV fields if available)\n        notes: row['Marketing Lists'] || null, // Now string (e.g., '1' instead of 1 – fixes validation error)\n        metadata: { // Json: Extras for creative financing (add more if CSV has them; e.g., if 'Equity' column exists, parse here)\n          equity: Number(row['Est. Equity']) || null, // Matches 'Est. Equity' in CSV\n          remaining_balance: Number(row['Est. Remaining balance of Open Loans']) || null, // Matches CSV\n          loan_to_value: Number(row['Est. Loan-to-Value']) || null, // Matches CSV\n          open_loans: Number(row['Total Open Loans']) || null, // Matches CSV\n        },\n      };\n\n      // Upsert property (dedup on hash – merge data)\n      const property = await prisma.properties.upsert({\n        where: { address_hash },\n        update: propertyData,\n        create: { ...propertyData, address_hash },\n      });\n\n      // Parse owner names (split first/last if combined; for owner leads)\n      const owner1First = row['Owner 1 First Name']?.trim() || null;\n      const owner1Last = row['Owner 1 Last Name']?.trim() || null;\n      const phone = row['Owner 1 Phone']?.trim() || null; // Assuming CSV has phone; add if present\n      const email = row['Owner 1 Email']?.trim() || null; // Add if CSV has email\n\n      const leadData = {\n        properties_id: property.id,\n        lead_type: 'owner' as LeadType, // Default to owner for Propstream (realtor enrich separate)\n        first_name: owner1First,\n        last_name: owner1Last,\n        phone,\n        email,\n        status: 'new' as const, // Default new\n        source: 'propstream_import' as LeadSource,\n        assigned_to: session.user.id, // Assign to importer (gamification: Their quest points)\n        points_earned: 1, // Per-lead points (expand logic for quality-based)\n        notes: row['Notes'] || null,\n        metadata: { imported_at: new Date(), county: row['County'] || null }, // Audit + extras\n      };\n\n      // Create lead (no unique – allow multiples per property if needed; pushback: Add unique constraint if 1:1 desired)\n      const lead = await prisma.leads.create({ data: leadData });\n\n      return { success: true, row: index + 1, leadId: lead.id }; // For results list\n    } catch (error) {\n      console.error(`Import error for row ${index + 1}:`, error);\n      return { success: false, row: index + 1, error: (error as Error).message };\n    }\n  }));\n\n  // Filter fulfilled/rejected for summary (UX: Show counts in results)\n  const successful = results.filter(r => r.status === 'fulfilled' && (r.value as any).success).length;\n  const failed = results.length - successful;\n\n  if (failed === results.length) {\n    return { error: 'All rows failed – check CSV format/console logs' };\n  }\n\n  return { success: true, results, summary: { successful, failed } }; // Logic: Return array for display (no jobId yet; pushback: For long-running, add Upstash/edge func + return jobId for poll)\n}\n\n// Stub poll (replace with real DB query on 'import_jobs' table for prod; unblocks testing without Upstash)\nexport async function pollImportStatus(jobId: string) {\n  // Stub logic: Simulate progress (e.g., from memory or DB; here, random increment for testing)\n  // In real, query prisma.import_jobs.findUnique({ where: { id: jobId } }) for { progress, results, error }\n  const simulatedProgress = Math.min(100, (Math.random() * 20) + (await new Promise(r => setTimeout(r, 500)) as any || 0)); // Fake delay/increment\n  if (simulatedProgress >= 100) {\n    return { progress: 100, results: [], error: null }; // Replace with real results\n  }\n  return { progress: simulatedProgress, results: [], error: null };\n}\n\n// Action: Dial lead (logic: Twilio outbound call – from your Twilio number to lead phone; logs to calls table)\nexport async function dialLeadAction(leadId: number) {\n  try {\n    const lead = await prisma.leads.findUnique({ where: { id: leadId }, include: { properties: true } });\n    if (!lead?.phone) {\n      throw new Error('No phone for lead');\n    }\n\n    const supabase = await createSupabaseServerClient(); // Logic: Async client\n    const { data: { session } } = await supabase.auth.getSession();\n    if (!session?.user.id || lead.assigned_to !== session.user.id) {\n      throw new Error('Unauthorized or mismatched assignment');\n    }\n\n    // Twilio outbound (phone-to-phone; expand to browser via Voice SDK if web calls needed)\n    const call = await twilioClient.calls.create({\n      to: lead.phone, // Lead's number\n      from: process.env.TWILIO_PHONE_NUMBER!, // Your Twilio number\n      url: 'http://your-domain.com/api/twiml', // Logic: TwiML endpoint (create /api/twiml route for voice response – e.g., <Say>Hello, connecting to lead</Say>)\n      statusCallback: 'http://your-domain.com/api/call-status', // Logic: Webhook for metrics (update calls table on complete)\n      statusCallbackEvent: ['initiated', 'ringing', 'answered', 'completed'], // Track status\n    });\n\n    // Log call (for metrics/quests – expand with webhook for duration/points)\n    await prisma.calls.create({\n      data: {\n        leads_id: lead.id,\n        caller_id: session.user.id,\n        call_sid: call.sid, // Twilio ID for tracking\n        status: 'initiated',\n        metadata: { address: lead.properties.address },\n      },\n    });\n\n    return { success: true, callId: call.sid };\n  } catch (error) {\n    console.error('Dial error:', error);\n    return { success: false, error: (error as Error).message };\n  }\n}\n\n// Helper: Stubbed extractFromLink (removed for pivot – mock for non-CSV if needed)\n// async function extractFromLink(...) { return { /* mock data */ }; } // Comment out Zillow logic\n\n// Action: Enrich lead with realtor info (fix: Added for API call; uses RapidAPI key from .env – solves realtor missing in Propstream; push back: Cache results to avoid repeat costs)\nexport async function enrichLeadRealtor(leadId: string) {\n  const supabase = await createSupabaseServerClient(); // Logic: Async client\n  const { data: { session } } = await supabase.auth.getSession();\n  if (!session?.user.id) {\n    return { error: 'No session' };\n  }\n\n  const lead = await prisma.leads.findUnique({ where: { id: leadId }, include: { properties: true } });\n  if (!lead || lead.assigned_to !== session.user.id) {\n    return { error: 'Unauthorized or lead not found' };\n  }\n\n  const address = lead.properties.address; // Logic: Use full address for API query (add city/state if needed for accuracy)\n\n  try {\n    const response = await fetch('https://realtor-com4.p.rapidapi.com/properties/v1/search', { // Logic: Endpoint for agents by location (adjust per API docs; e.g., /agents if separate)\n      method: 'POST', // Or GET—check docs\n      headers: {\n        'Content-Type': 'application/json',\n        'x-rapidapi-key': process.env.RAPIDAPI_KEY!, // Your key from .env (add to .env: RAPIDAPI_KEY=your_key)\n        'x-rapidapi-host': 'realtor-com4.p.rapidapi.com',\n      },\n      body: JSON.stringify({ // Params from docs (example—tweak for address search)\n        location: address,\n        limit: 1, // Top realtor\n      }),\n    });\n\n    if (!response.ok) {\n      return { error: `API error: ${response.status}` };\n    }\n\n    const data = await response.json();\n    const realtor = data.agents?.[0] || {}; // Logic: Parse response (adjust path per API; e.g., data.results[0].agent)\n\n    await prisma.leads.update({\n      where: { id: leadId },\n      data: {\n        realtor_first_name: realtor.first_name || null,\n        realtor_last_name: realtor.last_name || null,\n        realtor_phone: realtor.phone || null,\n        metadata: { ...lead.metadata, enriched_at: new Date(), api_source: 'realtor-com' }, // Cache/audit\n      },\n    });\n\n    return { success: true, realtor };\n  } catch (error) {\n    console.error('Enrich error:', error);\n    return { error: (error as Error).message };\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 559, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/lib/prisma.ts"],"sourcesContent":["// src/lib/prisma.ts – Prisma singleton (best practice: Avoids new instances per request – reduces latency/overhead for quest updates; push back: Raw imports risk exhaustion on Supabase as reps grow)\nimport { PrismaClient } from '@prisma/client';\n\nlet prisma: PrismaClient;\n\nif (process.env.NODE_ENV === 'production') {\n  prisma = new PrismaClient();  // Prod: Single instance (efficient scale for leaderboards/queries)\n} else {\n  if (!globalThis.prisma) {\n    globalThis.prisma = new PrismaClient();  // Dev: Global persists across HMR (hot reload – no reconnections on code changes)\n  }\n  prisma = globalThis.prisma;\n}\n\nexport default prisma;  // Logic: Export for server use (type-safe, e.g., prisma.profile.findUnique autocompletes points/role)"],"names":[],"mappings":"AAAA,uMAAuM;;;;;AACvM;;AAEA,IAAI;AAEJ;;KAEO;IACL,IAAI,CAAC,WAAW,MAAM,EAAE;QACtB,WAAW,MAAM,GAAG,IAAI,6IAAY,IAAK,kFAAkF;IAC7H;IACA,SAAS,WAAW,MAAM;AAC5B;uCAEe;CAAS,sGAAsG","debugId":null}},
    {"offset": {"line": 581, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/app/layout.tsx"],"sourcesContent":["// src/app/layout.tsx – Root layout (SSR for session fetch; gamified header with role/XP – updated for async Supabase)\nimport Link from 'next/link';\nimport { Progress } from '@/components/ui/progress'; // Assuming Shadcn\nimport { signOutAction } from '@/lib/actions'; // Import server action (bound for form)\nimport prisma from '@/lib/prisma'; // Shared singleton\nimport { createSupabaseServerClient } from '@/lib/supabaseServer'; // Import async helper (fixes warnings)\nimport type { Database } from '@/types/database.types';\n\nexport default async function RootLayout({ children }: { children: React.ReactNode }) {\n  const supabase = await createSupabaseServerClient(); // Logic: Await async client (Next 15 compatible – no sync warnings)\n\n  const { data: { user } } = await supabase.auth.getUser(); // Logic: Switch to getUser() (secure verification with Supabase server – fixes \"insecure getSession\" warning; best practice for prod/internal apps to prevent tampering; push back: Use this for user.id/role fetches, as it's authenticated vs. local cookie-based getSession())\n\n  // Fetch profile for gamification (role/points – plain data only)\n  let role = 'guest';\n  let xp = 0;\n  if (user?.id) {\n    const profile = await prisma.profile.findUnique({ where: { id: user.id } }); // Logic: profiles (match schema; assumes generate ran)\n    role = profile?.role || 'rep';\n    xp = profile?.points || 0;\n  }\n\n  return (\n    <html lang=\"en\">\n      <body>\n        <header>\n          <nav>\n            <div>\n              <span>Role: {role}</span>\n              <Progress value={(xp / 1000) * 100} className=\"w-32\" /> {/* Logic: XP bar (gamified progress – tie to levels) */}\n              {user ? ( // Logic: Check user instead of session (consistent with getUser())\n                <form action={signOutAction}> {/* Logic: Bind server action (no inline async – avoids serialization) */}\n                  <button type=\"submit\">Logout</button>\n                </form>\n              ) : (\n                <Link href=\"/auth/signin\">Login</Link>\n              )}\n            </div>\n          </nav>\n        </header>\n        {children}\n      </body>\n    </html>\n  );\n}"],"names":[],"mappings":"AAAA,sHAAsH;;;;;;AACtH;AACA,uOAAqD,kBAAkB;AACvE,4MAA+C,wCAAwC;AACvF,0MAAmC,mBAAmB;AACtD,0NAAmE,uCAAuC;;;;;;;AAG3F,eAAe,WAAW,EAAE,QAAQ,EAAiC;IAClF,MAAM,WAAW,MAAM,IAAA,0JAA0B,KAAI,oEAAoE;IAEzH,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO,IAAI,kRAAkR;IAE5U,iEAAiE;IACjE,IAAI,OAAO;IACX,IAAI,KAAK;IACT,IAAI,MAAM,IAAI;QACZ,MAAM,UAAU,MAAM,+HAAM,CAAC,OAAO,CAAC,UAAU,CAAC;YAAE,OAAO;gBAAE,IAAI,KAAK,EAAE;YAAC;QAAE,IAAI,uDAAuD;QACpI,OAAO,SAAS,QAAQ;QACxB,KAAK,SAAS,UAAU;IAC1B;IAEA,qBACE,6bAAC;QAAK,MAAK;kBACT,cAAA,6bAAC;;8BACC,6bAAC;8BACC,cAAA,6bAAC;kCACC,cAAA,6bAAC;;8CACC,6bAAC;;wCAAK;wCAAO;;;;;;;8CACb,6bAAC,gJAAQ;oCAAC,OAAO,AAAC,KAAK,OAAQ;oCAAK,WAAU;;;;;;gCAAS;gCACtD,qBACC,6bAAC;oCAAK,QAAQ,sIAAa;;wCAAE;sDAC3B,6bAAC;4CAAO,MAAK;sDAAS;;;;;;;;;;;yDAGxB,6bAAC,sXAAI;oCAAC,MAAK;8CAAe;;;;;;;;;;;;;;;;;;;;;;gBAKjC;;;;;;;;;;;;AAIT","debugId":null}}]
}