module.exports = [
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/form.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FormInstance = exports.FormContextImpl = void 0;
exports.FormListInstance = FormListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class FormContextImpl {
    constructor(_version, formType){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(formType)) {
            throw new Error("Parameter 'formType' is not valid.");
        }
        this._solution = {
            formType
        };
        this._uri = `/Forms/${formType}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new FormInstance(operationVersion, payload, instance._solution.formType));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.FormContextImpl = FormContextImpl;
class FormInstance {
    constructor(_version, payload, formType){
        this._version = _version;
        this.formType = payload.form_type;
        this.forms = payload.forms;
        this.formMeta = payload.form_meta;
        this.url = payload.url;
        this._solution = {
            formType: formType || this.formType
        };
    }
    get _proxy() {
        this._context = this._context || new FormContextImpl(this._version, this._solution.formType);
        return this._context;
    }
    /**
     * Fetch a FormInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed FormInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            formType: this.formType,
            forms: this.forms,
            formMeta: this.formMeta,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.FormInstance = FormInstance;
function FormListInstance(version) {
    const instance = (formType)=>instance.get(formType);
    instance.get = function get(formType) {
        return new FormContextImpl(version, formType);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/safelist.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SafelistInstance = exports.SafelistContextImpl = void 0;
exports.SafelistListInstance = SafelistListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class SafelistContextImpl {
    constructor(_version, phoneNumber){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(phoneNumber)) {
            throw new Error("Parameter 'phoneNumber' is not valid.");
        }
        this._solution = {
            phoneNumber
        };
        this._uri = `/SafeList/Numbers/${phoneNumber}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SafelistInstance(operationVersion, payload, instance._solution.phoneNumber));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SafelistContextImpl = SafelistContextImpl;
class SafelistInstance {
    constructor(_version, payload, phoneNumber){
        this._version = _version;
        this.sid = payload.sid;
        this.phoneNumber = payload.phone_number;
        this.url = payload.url;
        this._solution = {
            phoneNumber: phoneNumber || this.phoneNumber
        };
    }
    get _proxy() {
        this._context = this._context || new SafelistContextImpl(this._version, this._solution.phoneNumber);
        return this._context;
    }
    /**
     * Remove a SafelistInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a SafelistInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed SafelistInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            phoneNumber: this.phoneNumber,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.SafelistInstance = SafelistInstance;
function SafelistListInstance(version) {
    const instance = (phoneNumber)=>instance.get(phoneNumber);
    instance.get = function get(phoneNumber) {
        return new SafelistContextImpl(version, phoneNumber);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/SafeList/Numbers`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["phoneNumber"] === null || params["phoneNumber"] === undefined) {
            throw new Error("Required parameter \"params['phoneNumber']\" missing.");
        }
        let data = {};
        data["PhoneNumber"] = params["phoneNumber"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new SafelistInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/accessToken.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AccessTokenInstance = exports.AccessTokenContextImpl = void 0;
exports.AccessTokenListInstance = AccessTokenListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class AccessTokenContextImpl {
    constructor(_version, serviceSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/AccessTokens/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AccessTokenInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AccessTokenContextImpl = AccessTokenContextImpl;
class AccessTokenInstance {
    constructor(_version, payload, serviceSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.entityIdentity = payload.entity_identity;
        this.factorType = payload.factor_type;
        this.factorFriendlyName = payload.factor_friendly_name;
        this.token = payload.token;
        this.url = payload.url;
        this.ttl = deserialize.integer(payload.ttl);
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this._solution = {
            serviceSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new AccessTokenContextImpl(this._version, this._solution.serviceSid, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a AccessTokenInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed AccessTokenInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            entityIdentity: this.entityIdentity,
            factorType: this.factorType,
            factorFriendlyName: this.factorFriendlyName,
            token: this.token,
            url: this.url,
            ttl: this.ttl,
            dateCreated: this.dateCreated
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AccessTokenInstance = AccessTokenInstance;
function AccessTokenListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new AccessTokenContextImpl(version, serviceSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/AccessTokens`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["identity"] === null || params["identity"] === undefined) {
            throw new Error("Required parameter \"params['identity']\" missing.");
        }
        if (params["factorType"] === null || params["factorType"] === undefined) {
            throw new Error("Required parameter \"params['factorType']\" missing.");
        }
        let data = {};
        data["Identity"] = params["identity"];
        data["FactorType"] = params["factorType"];
        if (params["factorFriendlyName"] !== undefined) data["FactorFriendlyName"] = params["factorFriendlyName"];
        if (params["ttl"] !== undefined) data["Ttl"] = params["ttl"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AccessTokenInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/approveChallenge.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ApproveChallengeInstance = exports.ApprovePasskeysChallengeRequestResponse = exports.ApprovePasskeysChallengeRequest = void 0;
exports.ApproveChallengeListInstance = ApproveChallengeListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class ApprovePasskeysChallengeRequest {
}
exports.ApprovePasskeysChallengeRequest = ApprovePasskeysChallengeRequest;
/**
 * The result of a WebAuthn authentication via a `navigator.credentials.get()` request, as specified in [AuthenticatorAttestationResponse](https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAttestationResponse).
 */ class ApprovePasskeysChallengeRequestResponse {
}
exports.ApprovePasskeysChallengeRequestResponse = ApprovePasskeysChallengeRequestResponse;
function ApproveChallengeListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/Passkeys/ApproveChallenge`;
    instance.update = function update(params, headers, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ApproveChallengeInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ApproveChallengeInstance {
    constructor(_version, payload, serviceSid){
        this._version = _version;
        this.options = payload.options;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.entitySid = payload.entity_sid;
        this.identity = payload.identity;
        this.factorSid = payload.factor_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.dateResponded = deserialize.iso8601DateTime(payload.date_responded);
        this.expirationDate = deserialize.iso8601DateTime(payload.expiration_date);
        this.status = payload.status;
        this.respondedReason = payload.responded_reason;
        this.details = payload.details;
        this.hiddenDetails = payload.hidden_details;
        this.metadata = payload.metadata;
        this.factorType = payload.factor_type;
        this.url = payload.url;
        this.links = payload.links;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            options: this.options,
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            entitySid: this.entitySid,
            identity: this.identity,
            factorSid: this.factorSid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            dateResponded: this.dateResponded,
            expirationDate: this.expirationDate,
            status: this.status,
            respondedReason: this.respondedReason,
            details: this.details,
            hiddenDetails: this.hiddenDetails,
            metadata: this.metadata,
            factorType: this.factorType,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ApproveChallengeInstance = ApproveChallengeInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/entity/challenge/notification.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NotificationInstance = void 0;
exports.NotificationListInstance = NotificationListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
function NotificationListInstance(version, serviceSid, identity, challengeSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(identity)) {
        throw new Error("Parameter 'identity' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(challengeSid)) {
        throw new Error("Parameter 'challengeSid' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        serviceSid,
        identity,
        challengeSid
    };
    instance._uri = `/Services/${serviceSid}/Entities/${identity}/Challenges/${challengeSid}/Notifications`;
    instance.create = function create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["ttl"] !== undefined) data["Ttl"] = params["ttl"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new NotificationInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.identity, instance._solution.challengeSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class NotificationInstance {
    constructor(_version, payload, serviceSid, identity, challengeSid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.entitySid = payload.entity_sid;
        this.identity = payload.identity;
        this.challengeSid = payload.challenge_sid;
        this.priority = payload.priority;
        this.ttl = deserialize.integer(payload.ttl);
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            entitySid: this.entitySid,
            identity: this.identity,
            challengeSid: this.challengeSid,
            priority: this.priority,
            ttl: this.ttl,
            dateCreated: this.dateCreated
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.NotificationInstance = NotificationInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/entity/challenge.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ChallengePage = exports.ChallengeInstance = exports.ChallengeContextImpl = void 0;
exports.ChallengeListInstance = ChallengeListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const notification_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/entity/challenge/notification.js [app-rsc] (ecmascript)");
class ChallengeContextImpl {
    constructor(_version, serviceSid, identity, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(identity)) {
            throw new Error("Parameter 'identity' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            identity,
            sid
        };
        this._uri = `/Services/${serviceSid}/Entities/${identity}/Challenges/${sid}`;
    }
    get notifications() {
        this._notifications = this._notifications || (0, notification_1.NotificationListInstance)(this._version, this._solution.serviceSid, this._solution.identity, this._solution.sid);
        return this._notifications;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ChallengeInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.identity, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["authPayload"] !== undefined) data["AuthPayload"] = params["authPayload"];
        if (params["metadata"] !== undefined) data["Metadata"] = serialize.object(params["metadata"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ChallengeInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.identity, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ChallengeContextImpl = ChallengeContextImpl;
class ChallengeInstance {
    constructor(_version, payload, serviceSid, identity, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.entitySid = payload.entity_sid;
        this.identity = payload.identity;
        this.factorSid = payload.factor_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.dateResponded = deserialize.iso8601DateTime(payload.date_responded);
        this.expirationDate = deserialize.iso8601DateTime(payload.expiration_date);
        this.status = payload.status;
        this.respondedReason = payload.responded_reason;
        this.details = payload.details;
        this.hiddenDetails = payload.hidden_details;
        this.metadata = payload.metadata;
        this.factorType = payload.factor_type;
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            serviceSid,
            identity,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new ChallengeContextImpl(this._version, this._solution.serviceSid, this._solution.identity, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a ChallengeInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ChallengeInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the notifications.
     */ notifications() {
        return this._proxy.notifications;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            entitySid: this.entitySid,
            identity: this.identity,
            factorSid: this.factorSid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            dateResponded: this.dateResponded,
            expirationDate: this.expirationDate,
            status: this.status,
            respondedReason: this.respondedReason,
            details: this.details,
            hiddenDetails: this.hiddenDetails,
            metadata: this.metadata,
            factorType: this.factorType,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ChallengeInstance = ChallengeInstance;
function ChallengeListInstance(version, serviceSid, identity) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(identity)) {
        throw new Error("Parameter 'identity' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new ChallengeContextImpl(version, serviceSid, identity, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid,
        identity
    };
    instance._uri = `/Services/${serviceSid}/Entities/${identity}/Challenges`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["factorSid"] === null || params["factorSid"] === undefined) {
            throw new Error("Required parameter \"params['factorSid']\" missing.");
        }
        let data = {};
        data["FactorSid"] = params["factorSid"];
        if (params["expirationDate"] !== undefined) data["ExpirationDate"] = serialize.iso8601DateTime(params["expirationDate"]);
        if (params["details.message"] !== undefined) data["Details.Message"] = params["details.message"];
        if (params["details.fields"] !== undefined) data["Details.Fields"] = serialize.map(params["details.fields"], (e)=>serialize.object(e));
        if (params["hiddenDetails"] !== undefined) data["HiddenDetails"] = serialize.object(params["hiddenDetails"]);
        if (params["authPayload"] !== undefined) data["AuthPayload"] = params["authPayload"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ChallengeInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.identity));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["factorSid"] !== undefined) data["FactorSid"] = params["factorSid"];
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["order"] !== undefined) data["Order"] = params["order"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ChallengePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ChallengePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ChallengePage extends Page_1.default {
    /**
     * Initialize the ChallengePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ChallengeInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ChallengeInstance(this._version, payload, this._solution.serviceSid, this._solution.identity);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ChallengePage = ChallengePage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/entity/factor.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FactorPage = exports.FactorInstance = exports.FactorContextImpl = void 0;
exports.FactorListInstance = FactorListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class FactorContextImpl {
    constructor(_version, serviceSid, identity, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(identity)) {
            throw new Error("Parameter 'identity' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            identity,
            sid
        };
        this._uri = `/Services/${serviceSid}/Entities/${identity}/Factors/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new FactorInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.identity, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["authPayload"] !== undefined) data["AuthPayload"] = params["authPayload"];
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["config.notificationToken"] !== undefined) data["Config.NotificationToken"] = params["config.notificationToken"];
        if (params["config.sdkVersion"] !== undefined) data["Config.SdkVersion"] = params["config.sdkVersion"];
        if (params["config.timeStep"] !== undefined) data["Config.TimeStep"] = params["config.timeStep"];
        if (params["config.skew"] !== undefined) data["Config.Skew"] = params["config.skew"];
        if (params["config.codeLength"] !== undefined) data["Config.CodeLength"] = params["config.codeLength"];
        if (params["config.alg"] !== undefined) data["Config.Alg"] = params["config.alg"];
        if (params["config.notificationPlatform"] !== undefined) data["Config.NotificationPlatform"] = params["config.notificationPlatform"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new FactorInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.identity, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.FactorContextImpl = FactorContextImpl;
class FactorInstance {
    constructor(_version, payload, serviceSid, identity, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.entitySid = payload.entity_sid;
        this.identity = payload.identity;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.friendlyName = payload.friendly_name;
        this.status = payload.status;
        this.factorType = payload.factor_type;
        this.config = payload.config;
        this.metadata = payload.metadata;
        this.url = payload.url;
        this._solution = {
            serviceSid,
            identity,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new FactorContextImpl(this._version, this._solution.serviceSid, this._solution.identity, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a FactorInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a FactorInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed FactorInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            entitySid: this.entitySid,
            identity: this.identity,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            friendlyName: this.friendlyName,
            status: this.status,
            factorType: this.factorType,
            config: this.config,
            metadata: this.metadata,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.FactorInstance = FactorInstance;
function FactorListInstance(version, serviceSid, identity) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(identity)) {
        throw new Error("Parameter 'identity' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new FactorContextImpl(version, serviceSid, identity, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid,
        identity
    };
    instance._uri = `/Services/${serviceSid}/Entities/${identity}/Factors`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new FactorPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new FactorPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class FactorPage extends Page_1.default {
    /**
     * Initialize the FactorPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of FactorInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new FactorInstance(this._version, payload, this._solution.serviceSid, this._solution.identity);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.FactorPage = FactorPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/entity/newFactor.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NewFactorInstance = void 0;
exports.NewFactorListInstance = NewFactorListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
function NewFactorListInstance(version, serviceSid, identity) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(identity)) {
        throw new Error("Parameter 'identity' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        serviceSid,
        identity
    };
    instance._uri = `/Services/${serviceSid}/Entities/${identity}/Factors`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["friendlyName"] === null || params["friendlyName"] === undefined) {
            throw new Error("Required parameter \"params['friendlyName']\" missing.");
        }
        if (params["factorType"] === null || params["factorType"] === undefined) {
            throw new Error("Required parameter \"params['factorType']\" missing.");
        }
        let data = {};
        data["FriendlyName"] = params["friendlyName"];
        data["FactorType"] = params["factorType"];
        if (params["binding.alg"] !== undefined) data["Binding.Alg"] = params["binding.alg"];
        if (params["binding.publicKey"] !== undefined) data["Binding.PublicKey"] = params["binding.publicKey"];
        if (params["config.appId"] !== undefined) data["Config.AppId"] = params["config.appId"];
        if (params["config.notificationPlatform"] !== undefined) data["Config.NotificationPlatform"] = params["config.notificationPlatform"];
        if (params["config.notificationToken"] !== undefined) data["Config.NotificationToken"] = params["config.notificationToken"];
        if (params["config.sdkVersion"] !== undefined) data["Config.SdkVersion"] = params["config.sdkVersion"];
        if (params["binding.secret"] !== undefined) data["Binding.Secret"] = params["binding.secret"];
        if (params["config.timeStep"] !== undefined) data["Config.TimeStep"] = params["config.timeStep"];
        if (params["config.skew"] !== undefined) data["Config.Skew"] = params["config.skew"];
        if (params["config.codeLength"] !== undefined) data["Config.CodeLength"] = params["config.codeLength"];
        if (params["config.alg"] !== undefined) data["Config.Alg"] = params["config.alg"];
        if (params["metadata"] !== undefined) data["Metadata"] = serialize.object(params["metadata"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new NewFactorInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.identity));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class NewFactorInstance {
    constructor(_version, payload, serviceSid, identity){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.entitySid = payload.entity_sid;
        this.identity = payload.identity;
        this.binding = payload.binding;
        this.options = payload.options;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.friendlyName = payload.friendly_name;
        this.status = payload.status;
        this.factorType = payload.factor_type;
        this.config = payload.config;
        this.metadata = payload.metadata;
        this.url = payload.url;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            entitySid: this.entitySid,
            identity: this.identity,
            binding: this.binding,
            options: this.options,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            friendlyName: this.friendlyName,
            status: this.status,
            factorType: this.factorType,
            config: this.config,
            metadata: this.metadata,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.NewFactorInstance = NewFactorInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/entity.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EntityPage = exports.EntityInstance = exports.EntityContextImpl = void 0;
exports.EntityListInstance = EntityListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const challenge_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/entity/challenge.js [app-rsc] (ecmascript)");
const factor_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/entity/factor.js [app-rsc] (ecmascript)");
const newFactor_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/entity/newFactor.js [app-rsc] (ecmascript)");
class EntityContextImpl {
    constructor(_version, serviceSid, identity){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(identity)) {
            throw new Error("Parameter 'identity' is not valid.");
        }
        this._solution = {
            serviceSid,
            identity
        };
        this._uri = `/Services/${serviceSid}/Entities/${identity}`;
    }
    get challenges() {
        this._challenges = this._challenges || (0, challenge_1.ChallengeListInstance)(this._version, this._solution.serviceSid, this._solution.identity);
        return this._challenges;
    }
    get factors() {
        this._factors = this._factors || (0, factor_1.FactorListInstance)(this._version, this._solution.serviceSid, this._solution.identity);
        return this._factors;
    }
    get newFactors() {
        this._newFactors = this._newFactors || (0, newFactor_1.NewFactorListInstance)(this._version, this._solution.serviceSid, this._solution.identity);
        return this._newFactors;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new EntityInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.identity));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.EntityContextImpl = EntityContextImpl;
class EntityInstance {
    constructor(_version, payload, serviceSid, identity){
        this._version = _version;
        this.sid = payload.sid;
        this.identity = payload.identity;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            serviceSid,
            identity: identity || this.identity
        };
    }
    get _proxy() {
        this._context = this._context || new EntityContextImpl(this._version, this._solution.serviceSid, this._solution.identity);
        return this._context;
    }
    /**
     * Remove a EntityInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a EntityInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed EntityInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Access the challenges.
     */ challenges() {
        return this._proxy.challenges;
    }
    /**
     * Access the factors.
     */ factors() {
        return this._proxy.factors;
    }
    /**
     * Access the newFactors.
     */ newFactors() {
        return this._proxy.newFactors;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            identity: this.identity,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.EntityInstance = EntityInstance;
function EntityListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = (identity)=>instance.get(identity);
    instance.get = function get(identity) {
        return new EntityContextImpl(version, serviceSid, identity);
    };
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/Entities`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["identity"] === null || params["identity"] === undefined) {
            throw new Error("Required parameter \"params['identity']\" missing.");
        }
        let data = {};
        data["Identity"] = params["identity"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new EntityInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new EntityPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new EntityPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class EntityPage extends Page_1.default {
    /**
     * Initialize the EntityPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of EntityInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new EntityInstance(this._version, payload, this._solution.serviceSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.EntityPage = EntityPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/messagingConfiguration.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MessagingConfigurationPage = exports.MessagingConfigurationInstance = exports.MessagingConfigurationContextImpl = void 0;
exports.MessagingConfigurationListInstance = MessagingConfigurationListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class MessagingConfigurationContextImpl {
    constructor(_version, serviceSid, country){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(country)) {
            throw new Error("Parameter 'country' is not valid.");
        }
        this._solution = {
            serviceSid,
            country
        };
        this._uri = `/Services/${serviceSid}/MessagingConfigurations/${country}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new MessagingConfigurationInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.country));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["messagingServiceSid"] === null || params["messagingServiceSid"] === undefined) {
            throw new Error("Required parameter \"params['messagingServiceSid']\" missing.");
        }
        let data = {};
        data["MessagingServiceSid"] = params["messagingServiceSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new MessagingConfigurationInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.country));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.MessagingConfigurationContextImpl = MessagingConfigurationContextImpl;
class MessagingConfigurationInstance {
    constructor(_version, payload, serviceSid, country){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.country = payload.country;
        this.messagingServiceSid = payload.messaging_service_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            serviceSid,
            country: country || this.country
        };
    }
    get _proxy() {
        this._context = this._context || new MessagingConfigurationContextImpl(this._version, this._solution.serviceSid, this._solution.country);
        return this._context;
    }
    /**
     * Remove a MessagingConfigurationInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a MessagingConfigurationInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed MessagingConfigurationInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            country: this.country,
            messagingServiceSid: this.messagingServiceSid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.MessagingConfigurationInstance = MessagingConfigurationInstance;
function MessagingConfigurationListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = (country)=>instance.get(country);
    instance.get = function get(country) {
        return new MessagingConfigurationContextImpl(version, serviceSid, country);
    };
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/MessagingConfigurations`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["country"] === null || params["country"] === undefined) {
            throw new Error("Required parameter \"params['country']\" missing.");
        }
        if (params["messagingServiceSid"] === null || params["messagingServiceSid"] === undefined) {
            throw new Error("Required parameter \"params['messagingServiceSid']\" missing.");
        }
        let data = {};
        data["Country"] = params["country"];
        data["MessagingServiceSid"] = params["messagingServiceSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new MessagingConfigurationInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new MessagingConfigurationPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new MessagingConfigurationPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class MessagingConfigurationPage extends Page_1.default {
    /**
     * Initialize the MessagingConfigurationPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of MessagingConfigurationInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new MessagingConfigurationInstance(this._version, payload, this._solution.serviceSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.MessagingConfigurationPage = MessagingConfigurationPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/newChallenge.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NewChallengeInstance = exports.NewChallengeContextImpl = exports.CreatePasskeysChallengeRequest = void 0;
exports.NewChallengeListInstance = NewChallengeListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class CreatePasskeysChallengeRequest {
}
exports.CreatePasskeysChallengeRequest = CreatePasskeysChallengeRequest;
class NewChallengeContextImpl {
    constructor(_version, serviceSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        this._solution = {
            serviceSid
        };
        this._uri = `/Services/${serviceSid}/Passkeys/Challenges`;
    }
    create(params, headers, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new NewChallengeInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.NewChallengeContextImpl = NewChallengeContextImpl;
class NewChallengeInstance {
    constructor(_version, payload, serviceSid){
        this._version = _version;
        this.options = payload.options;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.entitySid = payload.entity_sid;
        this.identity = payload.identity;
        this.factorSid = payload.factor_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.dateResponded = deserialize.iso8601DateTime(payload.date_responded);
        this.expirationDate = deserialize.iso8601DateTime(payload.expiration_date);
        this.status = payload.status;
        this.respondedReason = payload.responded_reason;
        this.details = payload.details;
        this.hiddenDetails = payload.hidden_details;
        this.metadata = payload.metadata;
        this.factorType = payload.factor_type;
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            serviceSid
        };
    }
    get _proxy() {
        this._context = this._context || new NewChallengeContextImpl(this._version, this._solution.serviceSid);
        return this._context;
    }
    create(params, callback) {
        return this._proxy.create(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            options: this.options,
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            entitySid: this.entitySid,
            identity: this.identity,
            factorSid: this.factorSid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            dateResponded: this.dateResponded,
            expirationDate: this.expirationDate,
            status: this.status,
            respondedReason: this.respondedReason,
            details: this.details,
            hiddenDetails: this.hiddenDetails,
            metadata: this.metadata,
            factorType: this.factorType,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.NewChallengeInstance = NewChallengeInstance;
function NewChallengeListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = ()=>instance.get();
    instance.get = function get() {
        return new NewChallengeContextImpl(version, serviceSid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/newFactor.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NewFactorInstance = exports.CreateNewPasskeysFactorRequestConfigRelyingParty = exports.CreateNewPasskeysFactorRequestConfig = exports.CreateNewPasskeysFactorRequest = void 0;
exports.NewFactorListInstance = NewFactorListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class CreateNewPasskeysFactorRequest {
}
exports.CreateNewPasskeysFactorRequest = CreateNewPasskeysFactorRequest;
class CreateNewPasskeysFactorRequestConfig {
}
exports.CreateNewPasskeysFactorRequestConfig = CreateNewPasskeysFactorRequestConfig;
/**
 * Contains the information of the party requesting the user for authentication
 */ class CreateNewPasskeysFactorRequestConfigRelyingParty {
}
exports.CreateNewPasskeysFactorRequestConfigRelyingParty = CreateNewPasskeysFactorRequestConfigRelyingParty;
function NewFactorListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/Passkeys/Factors`;
    instance.create = function create(params, headers, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new NewFactorInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class NewFactorInstance {
    constructor(_version, payload, serviceSid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.entitySid = payload.entity_sid;
        this.identity = payload.identity;
        this.binding = payload.binding;
        this.options = payload.options;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.friendlyName = payload.friendly_name;
        this.status = payload.status;
        this.factorType = payload.factor_type;
        this.config = payload.config;
        this.metadata = payload.metadata;
        this.url = payload.url;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            entitySid: this.entitySid,
            identity: this.identity,
            binding: this.binding,
            options: this.options,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            friendlyName: this.friendlyName,
            status: this.status,
            factorType: this.factorType,
            config: this.config,
            metadata: this.metadata,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.NewFactorInstance = NewFactorInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/newVerifyFactor.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NewVerifyFactorInstance = exports.VerifyPasskeysFactorRequestResponse = exports.VerifyPasskeysFactorRequest = void 0;
exports.NewVerifyFactorListInstance = NewVerifyFactorListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class VerifyPasskeysFactorRequest {
}
exports.VerifyPasskeysFactorRequest = VerifyPasskeysFactorRequest;
/**
 * The result of a WebAuthn credential registration via `navigator.credentials.create()`, as specified in [AuthenticatorAttestationResponse](https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAttestationResponse).
 */ class VerifyPasskeysFactorRequestResponse {
}
exports.VerifyPasskeysFactorRequestResponse = VerifyPasskeysFactorRequestResponse;
function NewVerifyFactorListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/Passkeys/VerifyFactor`;
    instance.update = function update(params, headers, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new NewVerifyFactorInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class NewVerifyFactorInstance {
    constructor(_version, payload, serviceSid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.entitySid = payload.entity_sid;
        this.identity = payload.identity;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.friendlyName = payload.friendly_name;
        this.status = payload.status;
        this.factorType = payload.factor_type;
        this.config = payload.config;
        this.metadata = payload.metadata;
        this.url = payload.url;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            entitySid: this.entitySid,
            identity: this.identity,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            friendlyName: this.friendlyName,
            status: this.status,
            factorType: this.factorType,
            config: this.config,
            metadata: this.metadata,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.NewVerifyFactorInstance = NewVerifyFactorInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/rateLimit/bucket.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BucketPage = exports.BucketInstance = exports.BucketContextImpl = void 0;
exports.BucketListInstance = BucketListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class BucketContextImpl {
    constructor(_version, serviceSid, rateLimitSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(rateLimitSid)) {
            throw new Error("Parameter 'rateLimitSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            rateLimitSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/RateLimits/${rateLimitSid}/Buckets/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BucketInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.rateLimitSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["max"] !== undefined) data["Max"] = params["max"];
        if (params["interval"] !== undefined) data["Interval"] = params["interval"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BucketInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.rateLimitSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BucketContextImpl = BucketContextImpl;
class BucketInstance {
    constructor(_version, payload, serviceSid, rateLimitSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.rateLimitSid = payload.rate_limit_sid;
        this.serviceSid = payload.service_sid;
        this.accountSid = payload.account_sid;
        this.max = deserialize.integer(payload.max);
        this.interval = deserialize.integer(payload.interval);
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            serviceSid,
            rateLimitSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new BucketContextImpl(this._version, this._solution.serviceSid, this._solution.rateLimitSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a BucketInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a BucketInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed BucketInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            rateLimitSid: this.rateLimitSid,
            serviceSid: this.serviceSid,
            accountSid: this.accountSid,
            max: this.max,
            interval: this.interval,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BucketInstance = BucketInstance;
function BucketListInstance(version, serviceSid, rateLimitSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(rateLimitSid)) {
        throw new Error("Parameter 'rateLimitSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new BucketContextImpl(version, serviceSid, rateLimitSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid,
        rateLimitSid
    };
    instance._uri = `/Services/${serviceSid}/RateLimits/${rateLimitSid}/Buckets`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["max"] === null || params["max"] === undefined) {
            throw new Error("Required parameter \"params['max']\" missing.");
        }
        if (params["interval"] === null || params["interval"] === undefined) {
            throw new Error("Required parameter \"params['interval']\" missing.");
        }
        let data = {};
        data["Max"] = params["max"];
        data["Interval"] = params["interval"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BucketInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.rateLimitSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BucketPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new BucketPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class BucketPage extends Page_1.default {
    /**
     * Initialize the BucketPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of BucketInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new BucketInstance(this._version, payload, this._solution.serviceSid, this._solution.rateLimitSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BucketPage = BucketPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/rateLimit.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RateLimitPage = exports.RateLimitInstance = exports.RateLimitContextImpl = void 0;
exports.RateLimitListInstance = RateLimitListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const bucket_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/rateLimit/bucket.js [app-rsc] (ecmascript)");
class RateLimitContextImpl {
    constructor(_version, serviceSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/RateLimits/${sid}`;
    }
    get buckets() {
        this._buckets = this._buckets || (0, bucket_1.BucketListInstance)(this._version, this._solution.serviceSid, this._solution.sid);
        return this._buckets;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new RateLimitInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["description"] !== undefined) data["Description"] = params["description"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new RateLimitInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.RateLimitContextImpl = RateLimitContextImpl;
class RateLimitInstance {
    constructor(_version, payload, serviceSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.serviceSid = payload.service_sid;
        this.accountSid = payload.account_sid;
        this.uniqueName = payload.unique_name;
        this.description = payload.description;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            serviceSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new RateLimitContextImpl(this._version, this._solution.serviceSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a RateLimitInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a RateLimitInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed RateLimitInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the buckets.
     */ buckets() {
        return this._proxy.buckets;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            serviceSid: this.serviceSid,
            accountSid: this.accountSid,
            uniqueName: this.uniqueName,
            description: this.description,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.RateLimitInstance = RateLimitInstance;
function RateLimitListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new RateLimitContextImpl(version, serviceSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/RateLimits`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["uniqueName"] === null || params["uniqueName"] === undefined) {
            throw new Error("Required parameter \"params['uniqueName']\" missing.");
        }
        let data = {};
        data["UniqueName"] = params["uniqueName"];
        if (params["description"] !== undefined) data["Description"] = params["description"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new RateLimitInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new RateLimitPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new RateLimitPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class RateLimitPage extends Page_1.default {
    /**
     * Initialize the RateLimitPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of RateLimitInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new RateLimitInstance(this._version, payload, this._solution.serviceSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.RateLimitPage = RateLimitPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/verification.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.VerificationInstance = exports.VerificationContextImpl = void 0;
exports.VerificationListInstance = VerificationListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class VerificationContextImpl {
    constructor(_version, serviceSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/Verifications/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new VerificationInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["status"] === null || params["status"] === undefined) {
            throw new Error("Required parameter \"params['status']\" missing.");
        }
        let data = {};
        data["Status"] = params["status"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new VerificationInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.VerificationContextImpl = VerificationContextImpl;
class VerificationInstance {
    constructor(_version, payload, serviceSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.serviceSid = payload.service_sid;
        this.accountSid = payload.account_sid;
        this.to = payload.to;
        this.channel = payload.channel;
        this.status = payload.status;
        this.valid = payload.valid;
        this.lookup = payload.lookup;
        this.amount = payload.amount;
        this.payee = payload.payee;
        this.sendCodeAttempts = payload.send_code_attempts;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.sna = payload.sna;
        this.url = payload.url;
        this._solution = {
            serviceSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new VerificationContextImpl(this._version, this._solution.serviceSid, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a VerificationInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed VerificationInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            serviceSid: this.serviceSid,
            accountSid: this.accountSid,
            to: this.to,
            channel: this.channel,
            status: this.status,
            valid: this.valid,
            lookup: this.lookup,
            amount: this.amount,
            payee: this.payee,
            sendCodeAttempts: this.sendCodeAttempts,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            sna: this.sna,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.VerificationInstance = VerificationInstance;
function VerificationListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new VerificationContextImpl(version, serviceSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/Verifications`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["to"] === null || params["to"] === undefined) {
            throw new Error("Required parameter \"params['to']\" missing.");
        }
        if (params["channel"] === null || params["channel"] === undefined) {
            throw new Error("Required parameter \"params['channel']\" missing.");
        }
        let data = {};
        data["To"] = params["to"];
        data["Channel"] = params["channel"];
        if (params["customFriendlyName"] !== undefined) data["CustomFriendlyName"] = params["customFriendlyName"];
        if (params["customMessage"] !== undefined) data["CustomMessage"] = params["customMessage"];
        if (params["sendDigits"] !== undefined) data["SendDigits"] = params["sendDigits"];
        if (params["locale"] !== undefined) data["Locale"] = params["locale"];
        if (params["customCode"] !== undefined) data["CustomCode"] = params["customCode"];
        if (params["amount"] !== undefined) data["Amount"] = params["amount"];
        if (params["payee"] !== undefined) data["Payee"] = params["payee"];
        if (params["rateLimits"] !== undefined) data["RateLimits"] = serialize.object(params["rateLimits"]);
        if (params["channelConfiguration"] !== undefined) data["ChannelConfiguration"] = serialize.object(params["channelConfiguration"]);
        if (params["appHash"] !== undefined) data["AppHash"] = params["appHash"];
        if (params["templateSid"] !== undefined) data["TemplateSid"] = params["templateSid"];
        if (params["templateCustomSubstitutions"] !== undefined) data["TemplateCustomSubstitutions"] = params["templateCustomSubstitutions"];
        if (params["deviceIp"] !== undefined) data["DeviceIp"] = params["deviceIp"];
        if (params["enableSnaClientToken"] !== undefined) data["EnableSnaClientToken"] = serialize.bool(params["enableSnaClientToken"]);
        if (params["riskCheck"] !== undefined) data["RiskCheck"] = params["riskCheck"];
        if (params["tags"] !== undefined) data["Tags"] = params["tags"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new VerificationInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/verificationCheck.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.VerificationCheckInstance = void 0;
exports.VerificationCheckListInstance = VerificationCheckListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
function VerificationCheckListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/VerificationCheck`;
    instance.create = function create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["code"] !== undefined) data["Code"] = params["code"];
        if (params["to"] !== undefined) data["To"] = params["to"];
        if (params["verificationSid"] !== undefined) data["VerificationSid"] = params["verificationSid"];
        if (params["amount"] !== undefined) data["Amount"] = params["amount"];
        if (params["payee"] !== undefined) data["Payee"] = params["payee"];
        if (params["snaClientToken"] !== undefined) data["SnaClientToken"] = params["snaClientToken"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new VerificationCheckInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class VerificationCheckInstance {
    constructor(_version, payload, serviceSid){
        this._version = _version;
        this.sid = payload.sid;
        this.serviceSid = payload.service_sid;
        this.accountSid = payload.account_sid;
        this.to = payload.to;
        this.channel = payload.channel;
        this.status = payload.status;
        this.valid = payload.valid;
        this.amount = payload.amount;
        this.payee = payload.payee;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.snaAttemptsErrorCodes = payload.sna_attempts_error_codes;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            serviceSid: this.serviceSid,
            accountSid: this.accountSid,
            to: this.to,
            channel: this.channel,
            status: this.status,
            valid: this.valid,
            amount: this.amount,
            payee: this.payee,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            snaAttemptsErrorCodes: this.snaAttemptsErrorCodes
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.VerificationCheckInstance = VerificationCheckInstance;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/webhook.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WebhookPage = exports.WebhookInstance = exports.WebhookContextImpl = void 0;
exports.WebhookListInstance = WebhookListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class WebhookContextImpl {
    constructor(_version, serviceSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/Webhooks/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new WebhookInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["eventTypes"] !== undefined) data["EventTypes"] = serialize.map(params["eventTypes"], (e)=>e);
        if (params["webhookUrl"] !== undefined) data["WebhookUrl"] = params["webhookUrl"];
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["version"] !== undefined) data["Version"] = params["version"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new WebhookInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.WebhookContextImpl = WebhookContextImpl;
class WebhookInstance {
    constructor(_version, payload, serviceSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.serviceSid = payload.service_sid;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.eventTypes = payload.event_types;
        this.status = payload.status;
        this.version = payload.version;
        this.webhookUrl = payload.webhook_url;
        this.webhookMethod = payload.webhook_method;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            serviceSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new WebhookContextImpl(this._version, this._solution.serviceSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a WebhookInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a WebhookInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed WebhookInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            serviceSid: this.serviceSid,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            eventTypes: this.eventTypes,
            status: this.status,
            version: this.version,
            webhookUrl: this.webhookUrl,
            webhookMethod: this.webhookMethod,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.WebhookInstance = WebhookInstance;
function WebhookListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new WebhookContextImpl(version, serviceSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/Webhooks`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["friendlyName"] === null || params["friendlyName"] === undefined) {
            throw new Error("Required parameter \"params['friendlyName']\" missing.");
        }
        if (params["eventTypes"] === null || params["eventTypes"] === undefined) {
            throw new Error("Required parameter \"params['eventTypes']\" missing.");
        }
        if (params["webhookUrl"] === null || params["webhookUrl"] === undefined) {
            throw new Error("Required parameter \"params['webhookUrl']\" missing.");
        }
        let data = {};
        data["FriendlyName"] = params["friendlyName"];
        data["EventTypes"] = serialize.map(params["eventTypes"], (e)=>e);
        data["WebhookUrl"] = params["webhookUrl"];
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["version"] !== undefined) data["Version"] = params["version"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new WebhookInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new WebhookPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new WebhookPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class WebhookPage extends Page_1.default {
    /**
     * Initialize the WebhookPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of WebhookInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new WebhookInstance(this._version, payload, this._solution.serviceSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.WebhookPage = WebhookPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ServicePage = exports.ServiceInstance = exports.ServiceContextImpl = void 0;
exports.ServiceListInstance = ServiceListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const accessToken_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/accessToken.js [app-rsc] (ecmascript)");
const approveChallenge_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/approveChallenge.js [app-rsc] (ecmascript)");
const entity_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/entity.js [app-rsc] (ecmascript)");
const messagingConfiguration_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/messagingConfiguration.js [app-rsc] (ecmascript)");
const newChallenge_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/newChallenge.js [app-rsc] (ecmascript)");
const newFactor_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/newFactor.js [app-rsc] (ecmascript)");
const newVerifyFactor_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/newVerifyFactor.js [app-rsc] (ecmascript)");
const rateLimit_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/rateLimit.js [app-rsc] (ecmascript)");
const verification_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/verification.js [app-rsc] (ecmascript)");
const verificationCheck_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/verificationCheck.js [app-rsc] (ecmascript)");
const webhook_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service/webhook.js [app-rsc] (ecmascript)");
class ServiceContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Services/${sid}`;
    }
    get accessTokens() {
        this._accessTokens = this._accessTokens || (0, accessToken_1.AccessTokenListInstance)(this._version, this._solution.sid);
        return this._accessTokens;
    }
    get approveChallenge() {
        this._approveChallenge = this._approveChallenge || (0, approveChallenge_1.ApproveChallengeListInstance)(this._version, this._solution.sid);
        return this._approveChallenge;
    }
    get entities() {
        this._entities = this._entities || (0, entity_1.EntityListInstance)(this._version, this._solution.sid);
        return this._entities;
    }
    get messagingConfigurations() {
        this._messagingConfigurations = this._messagingConfigurations || (0, messagingConfiguration_1.MessagingConfigurationListInstance)(this._version, this._solution.sid);
        return this._messagingConfigurations;
    }
    get newChallenge() {
        this._newChallenge = this._newChallenge || (0, newChallenge_1.NewChallengeListInstance)(this._version, this._solution.sid);
        return this._newChallenge;
    }
    get newFactors() {
        this._newFactors = this._newFactors || (0, newFactor_1.NewFactorListInstance)(this._version, this._solution.sid);
        return this._newFactors;
    }
    get newVerifyFactors() {
        this._newVerifyFactors = this._newVerifyFactors || (0, newVerifyFactor_1.NewVerifyFactorListInstance)(this._version, this._solution.sid);
        return this._newVerifyFactors;
    }
    get rateLimits() {
        this._rateLimits = this._rateLimits || (0, rateLimit_1.RateLimitListInstance)(this._version, this._solution.sid);
        return this._rateLimits;
    }
    get verifications() {
        this._verifications = this._verifications || (0, verification_1.VerificationListInstance)(this._version, this._solution.sid);
        return this._verifications;
    }
    get verificationChecks() {
        this._verificationChecks = this._verificationChecks || (0, verificationCheck_1.VerificationCheckListInstance)(this._version, this._solution.sid);
        return this._verificationChecks;
    }
    get webhooks() {
        this._webhooks = this._webhooks || (0, webhook_1.WebhookListInstance)(this._version, this._solution.sid);
        return this._webhooks;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServiceInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["codeLength"] !== undefined) data["CodeLength"] = params["codeLength"];
        if (params["lookupEnabled"] !== undefined) data["LookupEnabled"] = serialize.bool(params["lookupEnabled"]);
        if (params["skipSmsToLandlines"] !== undefined) data["SkipSmsToLandlines"] = serialize.bool(params["skipSmsToLandlines"]);
        if (params["dtmfInputRequired"] !== undefined) data["DtmfInputRequired"] = serialize.bool(params["dtmfInputRequired"]);
        if (params["ttsName"] !== undefined) data["TtsName"] = params["ttsName"];
        if (params["psd2Enabled"] !== undefined) data["Psd2Enabled"] = serialize.bool(params["psd2Enabled"]);
        if (params["doNotShareWarningEnabled"] !== undefined) data["DoNotShareWarningEnabled"] = serialize.bool(params["doNotShareWarningEnabled"]);
        if (params["customCodeEnabled"] !== undefined) data["CustomCodeEnabled"] = serialize.bool(params["customCodeEnabled"]);
        if (params["push.includeDate"] !== undefined) data["Push.IncludeDate"] = serialize.bool(params["push.includeDate"]);
        if (params["push.apnCredentialSid"] !== undefined) data["Push.ApnCredentialSid"] = params["push.apnCredentialSid"];
        if (params["push.fcmCredentialSid"] !== undefined) data["Push.FcmCredentialSid"] = params["push.fcmCredentialSid"];
        if (params["totp.issuer"] !== undefined) data["Totp.Issuer"] = params["totp.issuer"];
        if (params["totp.timeStep"] !== undefined) data["Totp.TimeStep"] = params["totp.timeStep"];
        if (params["totp.codeLength"] !== undefined) data["Totp.CodeLength"] = params["totp.codeLength"];
        if (params["totp.skew"] !== undefined) data["Totp.Skew"] = params["totp.skew"];
        if (params["defaultTemplateSid"] !== undefined) data["DefaultTemplateSid"] = params["defaultTemplateSid"];
        if (params["whatsapp.msgServiceSid"] !== undefined) data["Whatsapp.MsgServiceSid"] = params["whatsapp.msgServiceSid"];
        if (params["whatsapp.from"] !== undefined) data["Whatsapp.From"] = params["whatsapp.from"];
        if (params["passkeys.relyingParty.id"] !== undefined) data["Passkeys.RelyingParty.Id"] = params["passkeys.relyingParty.id"];
        if (params["passkeys.relyingParty.name"] !== undefined) data["Passkeys.RelyingParty.Name"] = params["passkeys.relyingParty.name"];
        if (params["passkeys.relyingParty.origins"] !== undefined) data["Passkeys.RelyingParty.Origins"] = params["passkeys.relyingParty.origins"];
        if (params["passkeys.authenticatorAttachment"] !== undefined) data["Passkeys.AuthenticatorAttachment"] = params["passkeys.authenticatorAttachment"];
        if (params["passkeys.discoverableCredentials"] !== undefined) data["Passkeys.DiscoverableCredentials"] = params["passkeys.discoverableCredentials"];
        if (params["passkeys.userVerification"] !== undefined) data["Passkeys.UserVerification"] = params["passkeys.userVerification"];
        if (params["verifyEventSubscriptionEnabled"] !== undefined) data["VerifyEventSubscriptionEnabled"] = serialize.bool(params["verifyEventSubscriptionEnabled"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServiceInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ServiceContextImpl = ServiceContextImpl;
class ServiceInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.codeLength = deserialize.integer(payload.code_length);
        this.lookupEnabled = payload.lookup_enabled;
        this.psd2Enabled = payload.psd2_enabled;
        this.skipSmsToLandlines = payload.skip_sms_to_landlines;
        this.dtmfInputRequired = payload.dtmf_input_required;
        this.ttsName = payload.tts_name;
        this.doNotShareWarningEnabled = payload.do_not_share_warning_enabled;
        this.customCodeEnabled = payload.custom_code_enabled;
        this.push = payload.push;
        this.totp = payload.totp;
        this.defaultTemplateSid = payload.default_template_sid;
        this.whatsapp = payload.whatsapp;
        this.passkeys = payload.passkeys;
        this.verifyEventSubscriptionEnabled = payload.verify_event_subscription_enabled;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new ServiceContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a ServiceInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a ServiceInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ServiceInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the accessTokens.
     */ accessTokens() {
        return this._proxy.accessTokens;
    }
    /**
     * Access the approveChallenge.
     */ approveChallenge() {
        return this._proxy.approveChallenge;
    }
    /**
     * Access the entities.
     */ entities() {
        return this._proxy.entities;
    }
    /**
     * Access the messagingConfigurations.
     */ messagingConfigurations() {
        return this._proxy.messagingConfigurations;
    }
    /**
     * Access the newChallenge.
     */ newChallenge() {
        return this._proxy.newChallenge;
    }
    /**
     * Access the newFactors.
     */ newFactors() {
        return this._proxy.newFactors;
    }
    /**
     * Access the newVerifyFactors.
     */ newVerifyFactors() {
        return this._proxy.newVerifyFactors;
    }
    /**
     * Access the rateLimits.
     */ rateLimits() {
        return this._proxy.rateLimits;
    }
    /**
     * Access the verifications.
     */ verifications() {
        return this._proxy.verifications;
    }
    /**
     * Access the verificationChecks.
     */ verificationChecks() {
        return this._proxy.verificationChecks;
    }
    /**
     * Access the webhooks.
     */ webhooks() {
        return this._proxy.webhooks;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            codeLength: this.codeLength,
            lookupEnabled: this.lookupEnabled,
            psd2Enabled: this.psd2Enabled,
            skipSmsToLandlines: this.skipSmsToLandlines,
            dtmfInputRequired: this.dtmfInputRequired,
            ttsName: this.ttsName,
            doNotShareWarningEnabled: this.doNotShareWarningEnabled,
            customCodeEnabled: this.customCodeEnabled,
            push: this.push,
            totp: this.totp,
            defaultTemplateSid: this.defaultTemplateSid,
            whatsapp: this.whatsapp,
            passkeys: this.passkeys,
            verifyEventSubscriptionEnabled: this.verifyEventSubscriptionEnabled,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ServiceInstance = ServiceInstance;
function ServiceListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new ServiceContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Services`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["friendlyName"] === null || params["friendlyName"] === undefined) {
            throw new Error("Required parameter \"params['friendlyName']\" missing.");
        }
        let data = {};
        data["FriendlyName"] = params["friendlyName"];
        if (params["codeLength"] !== undefined) data["CodeLength"] = params["codeLength"];
        if (params["lookupEnabled"] !== undefined) data["LookupEnabled"] = serialize.bool(params["lookupEnabled"]);
        if (params["skipSmsToLandlines"] !== undefined) data["SkipSmsToLandlines"] = serialize.bool(params["skipSmsToLandlines"]);
        if (params["dtmfInputRequired"] !== undefined) data["DtmfInputRequired"] = serialize.bool(params["dtmfInputRequired"]);
        if (params["ttsName"] !== undefined) data["TtsName"] = params["ttsName"];
        if (params["psd2Enabled"] !== undefined) data["Psd2Enabled"] = serialize.bool(params["psd2Enabled"]);
        if (params["doNotShareWarningEnabled"] !== undefined) data["DoNotShareWarningEnabled"] = serialize.bool(params["doNotShareWarningEnabled"]);
        if (params["customCodeEnabled"] !== undefined) data["CustomCodeEnabled"] = serialize.bool(params["customCodeEnabled"]);
        if (params["push.includeDate"] !== undefined) data["Push.IncludeDate"] = serialize.bool(params["push.includeDate"]);
        if (params["push.apnCredentialSid"] !== undefined) data["Push.ApnCredentialSid"] = params["push.apnCredentialSid"];
        if (params["push.fcmCredentialSid"] !== undefined) data["Push.FcmCredentialSid"] = params["push.fcmCredentialSid"];
        if (params["totp.issuer"] !== undefined) data["Totp.Issuer"] = params["totp.issuer"];
        if (params["totp.timeStep"] !== undefined) data["Totp.TimeStep"] = params["totp.timeStep"];
        if (params["totp.codeLength"] !== undefined) data["Totp.CodeLength"] = params["totp.codeLength"];
        if (params["totp.skew"] !== undefined) data["Totp.Skew"] = params["totp.skew"];
        if (params["defaultTemplateSid"] !== undefined) data["DefaultTemplateSid"] = params["defaultTemplateSid"];
        if (params["whatsapp.msgServiceSid"] !== undefined) data["Whatsapp.MsgServiceSid"] = params["whatsapp.msgServiceSid"];
        if (params["whatsapp.from"] !== undefined) data["Whatsapp.From"] = params["whatsapp.from"];
        if (params["passkeys.relyingParty.id"] !== undefined) data["Passkeys.RelyingParty.Id"] = params["passkeys.relyingParty.id"];
        if (params["passkeys.relyingParty.name"] !== undefined) data["Passkeys.RelyingParty.Name"] = params["passkeys.relyingParty.name"];
        if (params["passkeys.relyingParty.origins"] !== undefined) data["Passkeys.RelyingParty.Origins"] = params["passkeys.relyingParty.origins"];
        if (params["passkeys.authenticatorAttachment"] !== undefined) data["Passkeys.AuthenticatorAttachment"] = params["passkeys.authenticatorAttachment"];
        if (params["passkeys.discoverableCredentials"] !== undefined) data["Passkeys.DiscoverableCredentials"] = params["passkeys.discoverableCredentials"];
        if (params["passkeys.userVerification"] !== undefined) data["Passkeys.UserVerification"] = params["passkeys.userVerification"];
        if (params["verifyEventSubscriptionEnabled"] !== undefined) data["VerifyEventSubscriptionEnabled"] = serialize.bool(params["verifyEventSubscriptionEnabled"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServiceInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServicePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ServicePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ServicePage extends Page_1.default {
    /**
     * Initialize the ServicePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ServiceInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ServiceInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ServicePage = ServicePage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/template.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TemplatePage = exports.TemplateInstance = void 0;
exports.TemplateListInstance = TemplateListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function TemplateListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Templates`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new TemplatePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new TemplatePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class TemplateInstance {
    constructor(_version, payload){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.channels = payload.channels;
        this.translations = payload.translations;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            channels: this.channels,
            translations: this.translations
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.TemplateInstance = TemplateInstance;
class TemplatePage extends Page_1.default {
    /**
     * Initialize the TemplatePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of TemplateInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new TemplateInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.TemplatePage = TemplatePage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/verificationAttempt.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.VerificationAttemptPage = exports.VerificationAttemptInstance = exports.VerificationAttemptContextImpl = void 0;
exports.VerificationAttemptListInstance = VerificationAttemptListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class VerificationAttemptContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Attempts/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new VerificationAttemptInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.VerificationAttemptContextImpl = VerificationAttemptContextImpl;
class VerificationAttemptInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.verificationSid = payload.verification_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.conversionStatus = payload.conversion_status;
        this.channel = payload.channel;
        this.price = payload.price;
        this.channelData = payload.channel_data;
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new VerificationAttemptContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a VerificationAttemptInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed VerificationAttemptInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            verificationSid: this.verificationSid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            conversionStatus: this.conversionStatus,
            channel: this.channel,
            price: this.price,
            channelData: this.channelData,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.VerificationAttemptInstance = VerificationAttemptInstance;
function VerificationAttemptListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new VerificationAttemptContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Attempts`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["dateCreatedAfter"] !== undefined) data["DateCreatedAfter"] = serialize.iso8601DateTime(params["dateCreatedAfter"]);
        if (params["dateCreatedBefore"] !== undefined) data["DateCreatedBefore"] = serialize.iso8601DateTime(params["dateCreatedBefore"]);
        if (params["channelData.to"] !== undefined) data["ChannelData.To"] = params["channelData.to"];
        if (params["country"] !== undefined) data["Country"] = params["country"];
        if (params["channel"] !== undefined) data["Channel"] = params["channel"];
        if (params["verifyServiceSid"] !== undefined) data["VerifyServiceSid"] = params["verifyServiceSid"];
        if (params["verificationSid"] !== undefined) data["VerificationSid"] = params["verificationSid"];
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new VerificationAttemptPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new VerificationAttemptPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class VerificationAttemptPage extends Page_1.default {
    /**
     * Initialize the VerificationAttemptPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of VerificationAttemptInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new VerificationAttemptInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.VerificationAttemptPage = VerificationAttemptPage;
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/verificationAttemptsSummary.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.VerificationAttemptsSummaryInstance = exports.VerificationAttemptsSummaryContextImpl = void 0;
exports.VerificationAttemptsSummaryListInstance = VerificationAttemptsSummaryListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
class VerificationAttemptsSummaryContextImpl {
    constructor(_version){
        this._version = _version;
        this._solution = {};
        this._uri = `/Attempts/Summary`;
    }
    fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["verifyServiceSid"] !== undefined) data["VerifyServiceSid"] = params["verifyServiceSid"];
        if (params["dateCreatedAfter"] !== undefined) data["DateCreatedAfter"] = serialize.iso8601DateTime(params["dateCreatedAfter"]);
        if (params["dateCreatedBefore"] !== undefined) data["DateCreatedBefore"] = serialize.iso8601DateTime(params["dateCreatedBefore"]);
        if (params["country"] !== undefined) data["Country"] = params["country"];
        if (params["channel"] !== undefined) data["Channel"] = params["channel"];
        if (params["destinationPrefix"] !== undefined) data["DestinationPrefix"] = params["destinationPrefix"];
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new VerificationAttemptsSummaryInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.VerificationAttemptsSummaryContextImpl = VerificationAttemptsSummaryContextImpl;
class VerificationAttemptsSummaryInstance {
    constructor(_version, payload){
        this._version = _version;
        this.totalAttempts = deserialize.integer(payload.total_attempts);
        this.totalConverted = deserialize.integer(payload.total_converted);
        this.totalUnconverted = deserialize.integer(payload.total_unconverted);
        this.conversionRatePercentage = payload.conversion_rate_percentage;
        this.url = payload.url;
        this._solution = {};
    }
    get _proxy() {
        this._context = this._context || new VerificationAttemptsSummaryContextImpl(this._version);
        return this._context;
    }
    fetch(params, callback) {
        return this._proxy.fetch(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            totalAttempts: this.totalAttempts,
            totalConverted: this.totalConverted,
            totalUnconverted: this.totalUnconverted,
            conversionRatePercentage: this.conversionRatePercentage,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.VerificationAttemptsSummaryInstance = VerificationAttemptsSummaryInstance;
function VerificationAttemptsSummaryListInstance(version) {
    const instance = ()=>instance.get();
    instance.get = function get() {
        return new VerificationAttemptsSummaryContextImpl(version);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/V2.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Verify
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const form_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/form.js [app-rsc] (ecmascript)");
const safelist_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/safelist.js [app-rsc] (ecmascript)");
const service_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/service.js [app-rsc] (ecmascript)");
const template_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/template.js [app-rsc] (ecmascript)");
const verificationAttempt_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/verificationAttempt.js [app-rsc] (ecmascript)");
const verificationAttemptsSummary_1 = __turbopack_context__.r("[project]/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/verify/v2/verificationAttemptsSummary.js [app-rsc] (ecmascript)");
class V2 extends Version_1.default {
    /**
     * Initialize the V2 version of Verify
     *
     * @param domain - The Twilio (Twilio.Verify) domain
     */ constructor(domain){
        super(domain, "v2");
    }
    /** Getter for forms resource */ get forms() {
        this._forms = this._forms || (0, form_1.FormListInstance)(this);
        return this._forms;
    }
    /** Getter for safelist resource */ get safelist() {
        this._safelist = this._safelist || (0, safelist_1.SafelistListInstance)(this);
        return this._safelist;
    }
    /** Getter for services resource */ get services() {
        this._services = this._services || (0, service_1.ServiceListInstance)(this);
        return this._services;
    }
    /** Getter for templates resource */ get templates() {
        this._templates = this._templates || (0, template_1.TemplateListInstance)(this);
        return this._templates;
    }
    /** Getter for verificationAttempts resource */ get verificationAttempts() {
        this._verificationAttempts = this._verificationAttempts || (0, verificationAttempt_1.VerificationAttemptListInstance)(this);
        return this._verificationAttempts;
    }
    /** Getter for verificationAttemptsSummary resource */ get verificationAttemptsSummary() {
        this._verificationAttemptsSummary = this._verificationAttemptsSummary || (0, verificationAttemptsSummary_1.VerificationAttemptsSummaryListInstance)(this);
        return this._verificationAttemptsSummary;
    }
}
exports.default = V2;
}),
];

//# sourceMappingURL=1b7ef_twilio_lib_rest_verify_04fba02a._.js.map