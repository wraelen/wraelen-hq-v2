{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/components/ui/progress.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const Progress = registerClientReference(\n    function() { throw new Error(\"Attempted to call Progress() from the server but Progress is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/wraelen/wraelen-internal-boilerplate/src/components/ui/progress.tsx <module evaluation>\",\n    \"Progress\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,WAAW,IAAA,wgBAAuB,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,qGACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/components/ui/progress.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const Progress = registerClientReference(\n    function() { throw new Error(\"Attempted to call Progress() from the server but Progress is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/wraelen/wraelen-internal-boilerplate/src/components/ui/progress.tsx\",\n    \"Progress\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,WAAW,IAAA,wgBAAuB,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,iFACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 274, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/lib/actions.ts"],"sourcesContent":["'use server'; // Logic: Marks as server-only (no client bundle bloat – optimizes for internal app with leads/calls)\nimport { PrismaClient } from '@prisma/client';  // Your DB client (async-safe in actions)\nimport { createServerClient } from '@supabase/ssr'; // SSR package (server-aware – auto-handles cookies via proxy; middleware refreshes post-redirect)\nimport axios from 'axios';  // API/fetch (lightweight – no fetch polyfill needed)\nimport * as cheerio from 'cheerio';  // HTML parse (fast/static – better than Puppeteer for Zillow; handles fallback)\nimport { cookies } from 'next/headers'; // Next utility (dynamic read for session check – set ignored in actions, as middleware handles)\nimport { redirect } from 'next/navigation'; // Server redirect (reliable – no client hacks; best for post-auth flow to dashboard quests)\nimport { chromium } from 'playwright'; // Logic: Headless browser (already in devDeps – executes JS for full page load)\nimport { z } from 'zod';  // Validation (type-safe inputs – prevents junk data in DB; no-brainer for prod)\nimport crypto from 'crypto';  // Built-in hash (no extra deps – for address_hash dedup)\nimport type { Database } from '../types/database.types'; // Types (autocompletes e.g., session.user.id for Prisma sync – now fixed via your gen)\n\n// Optional: Import Playwright for robust scraping (bypasses 403/Cloudflare – use if Axios fails; enable via env)\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!; // Logic: Required env (fail-fast if missing – matches middleware guard)\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\nconst prisma = new PrismaClient();  // Global instance (efficient in Next.js actions – auto-closes; push back: Cache in lib/prisma.ts for hot reloads if issues)\n\nconst extractSchema = z.object({\n  links: z.string().min(1),\n  source: z.enum(['zillow', 'propstream', 'both']).default('zillow'),\n});  // Logic: Zod schema (validates formData – quick errors without DB hits)\n\n// Action: Sign out (logic: Centralized mutation – avoids serialization issues in layout; redirects to signin)\nexport async function signOutAction() {\n  const cookieStore = cookies();\n  const supabase = createServerClient<Database>(supabaseUrl, supabaseAnonKey, {\n    cookies: {\n      getAll: () => cookieStore.getAll(),\n      setAll: (cookiesToSet) => { try { cookiesToSet.forEach(({ name, value, options }) => cookieStore.set(name, value, options)); } catch {} },\n    },\n  });\n  await supabase.auth.signOut(); // Logic: Clears session (middleware will redirect unauthed requests)\n  redirect('/auth/signin'); // Logic: Post-signout flow (back to login – update to '/' if public landing needed)\n}\n\n// Action: Extract and merge from links (logic: Parse batch → per-link extract → upsert properties (merge on hash) → create leads (link FK, award points) – returns results for UX feedback)\nexport async function extractDataAction(formData: FormData) {\n  const validated = extractSchema.safeParse({\n    links: formData.get('links')?.toString() ?? '',\n    source: formData.get('source')?.toString() ?? 'zillow',\n  });  // Logic: Safe parse (returns { success, data } or { error } – client displays errors)\n\n  if (!validated.success) {\n    return { error: validated.error.format() };  // Logic: Return zod errors (e.g., \"Links required\" – no redirect)\n  }\n\n  const { links, source } = validated.data;\n  const linkArray = links.split(/[\\n,]/).map(l => l.trim()).filter(Boolean); // Logic: Handle comma or newline-separated (textarea-friendly); filter empties\n  const results = await Promise.allSettled(linkArray.map(async (link) => { // Logic: Parallel for speed; settled handles per-link failures without crashing batch\n    try {\n      const extracted = await extractFromLink(link, source);\n      if (!extracted.address) {\n        throw new Error('Failed to extract valid address – skipping link'); // Logic: Early guard (prevents bad hash/upsert)\n      }\n\n      const addressHash = crypto.createHash('sha256').update(extracted.address.toLowerCase()).digest('hex'); // Logic: Normalize case for dedup\n\n      // Logic: Use Prisma transaction for atomicity (upsert property + create lead + update points – prevents partial failures)\n      const [property, lead] = await prisma.$transaction(async (tx) => {\n        const prop = await tx.properties.upsert({ // Logic: Merge existing (e.g., update zestimate if newer)\n          where: { address_hash: addressHash },\n          update: {\n            address: extracted.address,\n            property_type: extracted.property_type || 'other',\n            bedrooms: extracted.bedrooms ?? null, // Logic: Nullables to avoid defaults if missing (match schema)\n            bathrooms: extracted.bathrooms ?? null,\n            square_feet: extracted.square_feet ?? null,\n            lot_size: extracted.lot_size ?? null,\n            year_built: extracted.year_built ?? null,\n            zestimate: extracted.zestimate ?? null,\n            avm: extracted.avm ?? null,\n            tax_assessed_value: extracted.tax_assessed_value ?? null,\n            distress_signals: extracted.distress_signals ?? {}, // JSONB default empty\n            owner_occupied: extracted.owner_occupied ?? null,\n            metadata: { ...extracted.metadata, sources: [...(extracted.metadata.sources || []), source] }, // Append sources for audit\n          },\n          create: {\n            address: extracted.address,\n            address_hash: addressHash,\n            property_type: extracted.property_type || 'other',\n            bedrooms: extracted.bedrooms ?? null,\n            bathrooms: extracted.bathrooms ?? null,\n            square_feet: extracted.square_feet ?? null,\n            lot_size: extracted.lot_size ?? null,\n            year_built: extracted.year_built ?? null,\n            zestimate: extracted.zestimate ?? null,\n            avm: extracted.avm ?? null,\n            tax_assessed_value: extracted.tax_assessed_value ?? null,\n            distress_signals: extracted.distress_signals ?? {},\n            owner_occupied: extracted.owner_occupied ?? null,\n            metadata: extracted.metadata,\n          },\n        });\n\n        // Fetch session for assignment (reuse Supabase client – consistent)\n        const cookieStore = cookies();\n        const supabase = createServerClient<Database>(supabaseUrl, supabaseAnonKey, {\n          cookies: {\n            getAll: () => cookieStore.getAll(),\n            setAll: (cookiesToSet) => { try { cookiesToSet.forEach(({ name, value, options }) => cookieStore.set(name, value, options)); } catch {} },\n          },\n        });\n        const { data: { session } } = await supabase.auth.getSession();\n        if (!session?.user.id) {\n          throw new Error('No active session – login required for assignment');\n        }\n\n        const ld = await tx.leads.create({\n          data: {\n            properties_id: prop.id,\n            lead_type: extracted.lead_type || 'owner',  // Infer (e.g., from distress_signals)\n            first_name: extracted.first_name ?? null,\n            last_name: extracted.last_name ?? null,\n            phone: extracted.phone ?? null,\n            source: extracted.source || source,\n            metadata: { original_link: link, extracted_data: extracted },\n            assigned_to: session.user.id,  // UUID from auth\n            points_earned: 10,  // Base; gamify more on status changes\n          },\n        });\n\n        // Gamification stub: Increment user points (expand to check/complete quests, award badges)\n        await tx.profile.update({\n          where: { id: session.user.id },\n          data: { points: { increment: 10 } }, // Logic: Atomic update (ties to XP bar/leaderboards)\n        });\n\n        return [prop, ld];\n      });\n\n      return { link, leadId: lead.id, success: true };\n    } catch (error) {\n      console.error(`Extraction error for ${link}:`, error); // Logic: Server log for debugging (view in Vercel/terminal)\n      return { link, success: false, error: (error as Error).message };\n    }\n  }));\n\n  return { results: results.map(r => r.status === 'fulfilled' ? r.value : { success: false, error: (r.reason as Error).message }) }; // Logic: Flatten for client display\n}\n\n// Helper: Extract from single link (logic: Source switch → API or scrape → normalize output – expandable for Propstream)\nasync function extractFromLink(link: string, source: 'zillow' | 'propstream' | 'both') {\n  let extracted: Record<string, any> = { source, metadata: { link, scrape_time: new Date().toISOString() } }; // Base output (json-friendly)\n\n  if (source === 'zillow' || source === 'both') {\n    const zillowKey = process.env.ZILLOW_API_KEY;\n    if (zillowKey) {\n      try {\n        // Logic: Bridge API (adjust auth if needed – docs use Authorization: Bearer; test with your key)\n        const response = await axios.get(`https://api.bridgeapi.io/v1/public-records/property?url=${encodeURIComponent(link)}`, {\n          headers: { 'Authorization': `Bearer ${zillowKey}` }, // Push back: Update if RapidAPI (rare for Bridge); confirm in docs\n        });\n        extracted = { ...extracted, ...response.data, source: 'zillow_api' }; // Merge (normalize fields below if API shape differs)\n      } catch (apiError) {\n        console.error(`Zillow API error for ${link}:`, apiError); // Fallback to scrape\n      }\n    }\n\n    if (!extracted.address) {  // Scrape fallback (improved headers to mimic browser – avoids 403; timeout to prevent hangs)\n      let html: string;\n      try {\n        const response = await axios.get(link, {\n          headers: {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36', // Logic: Current Chrome (2024/2025) – update periodically\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',\n            'Accept-Language': 'en-US,en;q=0.5',\n            'Accept-Encoding': 'gzip, deflate, br',\n            'Connection': 'keep-alive',\n            'Upgrade-Insecure-Requests': '1',\n            'Sec-Fetch-Dest': 'document',\n            'Sec-Fetch-Mode': 'navigate',\n            'Sec-Fetch-Site': 'none',\n            'Sec-Fetch-User': '?1',\n            'Referer': 'https://www.zillow.com/', // Logic: Fake referer – helps bypass some checks\n          },\n          timeout: 5000,\n        });\n        html = response.data;\n      } catch (axiosError) {\n        console.error(`Axios scrape failed for ${link} (likely 403):`, axiosError);\n        // Pushback: Fallback to Playwright if env enabled (headless browser – bypasses Cloudflare/JS detection; slower but reliable for Zillow)\n        if (process.env.USE_PLAYWRIGHT === 'true') {\n          const browser = await chromium.launch({ headless: true }); // Logic: Launch headless Chrome (add { args: ['--no-sandbox'] } if perms issues)\n          const page = await browser.newPage();\n          await page.goto(link, { waitUntil: 'networkidle' }); // Logic: Wait for load (handles JS)\n          html = await page.content();\n          await browser.close();\n        } else {\n          throw new Error('Scrape failed – enable USE_PLAYWRIGHT=true in .env.local for browser fallback');\n        }\n      }\n\n      const $ = cheerio.load(html);\n\n      // Improved: Parse preloaded JSON (reliable; Zillow embeds data here)\n      const preloadedData = $('script#hdpApolloPreloadedData').text();\n      if (preloadedData) {\n        try {\n          const jsonData = JSON.parse(preloadedData); // Logic: No need for decodeURIComponent – Zillow often serves plain JSON\n          // Logic: Navigate cache (dynamic key; find property object – Zillow structure as of 2025)\n          const cacheKeys = Object.keys(jsonData.apiCache || {});\n          const propertyKey = cacheKeys.find(key => key.includes('ForSaleDoubleScrollFullRenderQuery') || key.includes('Property')); // Logic: Flexible for changes\n          const propertyData = jsonData.apiCache[propertyKey]?.property || jsonData.property || {};\n\n          extracted.address = `${propertyData.streetAddress || ''}, ${propertyData.city || ''}, ${propertyData.state || ''} ${propertyData.zipcode || ''}`.trim();\n          extracted.zestimate = propertyData.zestimate || null;\n          extracted.bedrooms = propertyData.bedrooms || null;\n          extracted.bathrooms = propertyData.bathrooms || null;\n          extracted.square_feet = propertyData.livingArea || null;\n          extracted.lot_size = propertyData.lotAreaValue || null; // In sqft or acres; normalize if needed\n          extracted.year_built = propertyData.yearBuilt || null;\n          extracted.tax_assessed_value = propertyData.taxAssessedValue || null;\n          // Add more: e.g., extracted.property_type = propertyData.homeType?.toLowerCase();\n          // Note: Owner name/phone not in Zillow (privacy); use skiptrace API (e.g., TruePeopleSearch) post-extract for leads\n        } catch (parseError) {\n          console.error(`JSON parse error for ${link}:`, parseError);\n        }\n      }\n    }\n  }\n\n  if (source === 'propstream' || source === 'both') {\n    // Logic: Propstream no public scrape/API (TOS ban); stub for now – push back: Add form file input for CSV export upload\n    // If API key, integrate: e.g., await axios.post('https://api.propstream.com/v1/export', { links }, { headers: { 'Authorization': propstreamKey } });\n    extracted.avm = 0;  // Mock; replace with real\n    extracted.distress_signals = { pre_foreclosure: false };  // Mock (e.g., from CSV parse)\n    extracted.owner_occupied = true; // Mock\n    extracted.first_name = 'Mock'; // etc.\n  }\n\n  return extracted;  // Normalized (add more mappings as needed)\n}\n\n// ... (keep your signInAction)"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 582, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/lib/prisma.ts"],"sourcesContent":["// src/lib/prisma.ts – Prisma singleton (best practice: Avoids new instances per request – reduces latency/overhead for quest updates; push back: Raw imports risk exhaustion on Supabase as reps grow)\nimport { PrismaClient } from '@prisma/client';\n\nlet prisma: PrismaClient;\n\nif (process.env.NODE_ENV === 'production') {\n  prisma = new PrismaClient();  // Prod: Single instance (efficient scale for leaderboards/queries)\n} else {\n  if (!globalThis.prisma) {\n    globalThis.prisma = new PrismaClient();  // Dev: Global persists across HMR (hot reload – no reconnections on code changes)\n  }\n  prisma = globalThis.prisma;\n}\n\nexport default prisma;  // Logic: Export for server use (type-safe, e.g., prisma.profile.findUnique autocompletes points/role)"],"names":[],"mappings":"AAAA,uMAAuM;;;;;AACvM;;AAEA,IAAI;AAEJ;;KAEO;IACL,IAAI,CAAC,WAAW,MAAM,EAAE;QACtB,WAAW,MAAM,GAAG,IAAI,6IAAY,IAAK,kFAAkF;IAC7H;IACA,SAAS,WAAW,MAAM;AAC5B;uCAEe;CAAS,sGAAsG","debugId":null}},
    {"offset": {"line": 606, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/app/layout.tsx"],"sourcesContent":["// src/app/layout.tsx – Root layout (SSR for session fetch; gamified header with role/XP)\nimport { createServerClient } from '@supabase/ssr'; // Logic: Server client for session\nimport { cookies } from 'next/headers'; // Dynamic cookies\nimport Link from 'next/link';\nimport { Progress } from '@/components/ui/progress'; // Assuming Shadcn\nimport { signOutAction } from '@/lib/actions'; // Import server action (bound for form)\nimport prisma from '@/lib/prisma'; // Assuming you have a prisma client export\nimport type { Database } from '@/types/database.types';\n\nexport default async function RootLayout({ children }: { children: React.ReactNode }) {\n  const cookieStore = cookies();\n  const supabase = createServerClient<Database>(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!, {\n    cookies: {\n      getAll: () => cookieStore.getAll(),\n      setAll: (cookiesToSet) => { try { cookiesToSet.forEach(({ name, value, options }) => cookieStore.set(name, value, options)); } catch {} },\n    },\n  });\n\n  const { data: { session } } = await supabase.auth.getSession(); // Logic: Fetch session (SSR – available to children via props if needed)\n\n  // Fetch profile for gamification (role/points – plain data only)\n  let role = 'guest';\n  let xp = 0;\n  if (session?.user.id) {\n    const profile = await prisma.profile.findUnique({ where: { id: session.user.id } });\n    role = profile?.role || 'rep';\n    xp = profile?.points || 0;\n  }\n\n  return (\n    <html lang=\"en\">\n      <body>\n        <header>\n          <nav>\n            <div>\n              <span>Role: {role}</span>\n              <Progress value={(xp / 1000) * 100} className=\"w-32\" /> {/* Logic: XP bar (gamified progress – tie to levels) */}\n              {session ? (\n                <form action={signOutAction}> {/* Logic: Bind server action (no inline async – avoids serialization) */}\n                  <button type=\"submit\">Logout</button>\n                </form>\n              ) : (\n                <Link href=\"/auth/signin\">Login</Link>\n              )}\n            </div>\n          </nav>\n        </header>\n        {children}\n      </body>\n    </html>\n  );\n}"],"names":[],"mappings":"AAAA,yFAAyF;;;;;;AACzF,gjBAAoD,mCAAmC;AAAvF;AACA,ipBAAwC,kBAAkB;AAC1D;AACA,6TAAqD,kBAAkB;AACvE,kSAA+C,wCAAwC;AACvF,gSAAmC,2CAA2C;;;;;;;;;;;;AAG/D,eAAe,WAAW,EAAE,QAAQ,EAAiC;IAClF,MAAM,cAAc,IAAA,0YAAO;IAC3B,MAAM,WAAW,IAAA,6VAAkB,sUAA8F;QAC/H,SAAS;YACP,QAAQ,IAAM,YAAY,MAAM;YAChC,QAAQ,CAAC;gBAAmB,IAAI;oBAAE,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAAK,YAAY,GAAG,CAAC,MAAM,OAAO;gBAAW,EAAE,OAAM,CAAC;YAAE;QAC1I;IACF;IAEA,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,UAAU,IAAI,yEAAyE;IAEzI,iEAAiE;IACjE,IAAI,OAAO;IACX,IAAI,KAAK;IACT,IAAI,SAAS,KAAK,IAAI;QACpB,MAAM,UAAU,MAAM,gLAAM,CAAC,OAAO,CAAC,UAAU,CAAC;YAAE,OAAO;gBAAE,IAAI,QAAQ,IAAI,CAAC,EAAE;YAAC;QAAE;QACjF,OAAO,SAAS,QAAQ;QACxB,KAAK,SAAS,UAAU;IAC1B;IAEA,qBACE,8eAAC;QAAK,MAAK;kBACT,cAAA,8eAAC;;8BACC,8eAAC;8BACC,cAAA,8eAAC;kCACC,cAAA,8eAAC;;8CACC,8eAAC;;wCAAK;wCAAO;;;;;;;8CACb,8eAAC,iMAAQ;oCAAC,OAAO,AAAC,KAAK,OAAQ;oCAAK,WAAU;;;;;;gCAAS;gCACtD,wBACC,8eAAC;oCAAK,QAAQ,uLAAa;;wCAAE;sDAC3B,8eAAC;4CAAO,MAAK;sDAAS;;;;;;;;;;;yDAGxB,8eAAC,uaAAI;oCAAC,MAAK;8CAAe;;;;;;;;;;;;;;;;;;;;;;gBAKjC;;;;;;;;;;;;AAIT","debugId":null}}]
}