{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/lib/actions.ts"],"sourcesContent":["// src/lib/actions.ts – Server actions for auth (best practice: Centralize mutations – efficient, type-safe; push back: Avoid client auth for cookie sync in Next.js; scales for quests/leaderboards with RLS)\n'use server'; // Logic: Marks as server-only (no client bundle bloat – optimizes for internal app with leads/calls)\nimport { PrismaClient } from '@prisma/client';  // Your DB client (async-safe in actions)\nimport { createServerClient } from '@supabase/ssr'; // SSR package (server-aware – auto-handles cookies via proxy; middleware refreshes post-redirect)\nimport axios from 'axios';  // API/fetch (lightweight – no fetch polyfill needed)\nimport * as cheerio from 'cheerio';  // HTML parse (fast/static – better than Puppeteer for Zillow; handles fallback)\nimport { cookies } from 'next/headers'; // Next utility (dynamic read for session check – set ignored in actions, as middleware handles)\nimport { redirect } from 'next/navigation'; // Server redirect (reliable – no client hacks; best for post-auth flow to dashboard quests)\nimport { z } from 'zod';  // Validation (type-safe inputs – prevents junk data in DB; no-brainer for prod)\nimport crypto from 'crypto';  // Built-in hash (no extra deps – for address_hash dedup)\nimport type { Database } from '../types/database.types'; // Types (autocompletes e.g., session.user.id for Prisma sync – now fixed via your gen)\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!; // Logic: Required env (fail-fast if missing – matches middleware guard)\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\nconst prisma = new PrismaClient();  // Global instance (efficient in Next.js actions – auto-closes; push back: Cache in lib/prisma.ts for hot reloads if issues)\n\nconst extractSchema = z.object({\n  links: z.string().min(1),\n  source: z.enum(['zillow', 'propstream', 'both']).default('zillow'),\n});  // Logic: Zod schema (validates formData – quick errors without DB hits)\n\n// Action: Extract and merge from links (logic: Parse batch → per-link extract → upsert properties (merge on hash) → create leads (link FK, award points) – returns results for UX feedback)\nexport async function extractDataAction(formData: FormData) {\n  const validated = extractSchema.safeParse({\n    links: formData.get('links')?.toString() ?? '',\n    source: formData.get('source')?.toString() ?? 'zillow',\n  });  // Logic: Safe parse (returns { success, data } or { error } – client displays errors)\n\n  if (!validated.success) {\n    return { error: validated.error.format() };  // Logic: Return zod errors (e.g., \"Links required\" – no redirect)\n  }\n\n  const { links, source } = validated.data;\n  const linkArray = links.split(/[\\n,]/).map(l => l.trim()).filter(Boolean); // Logic: Handle comma or newline-separated (textarea-friendly); filter empties\n  const results = await Promise.allSettled(linkArray.map(async (link) => { // Logic: Parallel for speed; settled handles per-link failures without crashing batch\n    try {\n      const extracted = await extractFromLink(link, source);\n      if (!extracted.address) {\n        throw new Error('Failed to extract valid address – skipping link'); // Logic: Early guard (prevents bad hash/upsert)\n      }\n\n      const addressHash = crypto.createHash('sha256').update(extracted.address.toLowerCase()).digest('hex'); // Logic: Normalize case for dedup\n\n      const property = await prisma.properties.upsert({ // Logic: Merge existing (e.g., update zestimate if newer)\n        where: { address_hash: addressHash },\n        update: {\n          address: extracted.address,\n          property_type: extracted.property_type || 'other',\n          bedrooms: extracted.bedrooms ?? null, // Logic: Nullables to avoid defaults if missing (match schema)\n          bathrooms: extracted.bathrooms ?? null,\n          square_feet: extracted.square_feet ?? null,\n          lot_size: extracted.lot_size ?? null,\n          year_built: extracted.year_built ?? null,\n          zestimate: extracted.zestimate ?? null,\n          avm: extracted.avm ?? null,\n          tax_assessed_value: extracted.tax_assessed_value ?? null,\n          distress_signals: extracted.distress_signals ?? {}, // JSONB default empty\n          owner_occupied: extracted.owner_occupied ?? null,\n          metadata: { ...extracted.metadata, sources: [...(extracted.metadata.sources || []), source] }, // Append sources for audit\n        },\n        create: {\n          address: extracted.address,\n          address_hash: addressHash,\n          property_type: extracted.property_type || 'other',\n          bedrooms: extracted.bedrooms ?? null,\n          bathrooms: extracted.bathrooms ?? null,\n          square_feet: extracted.square_feet ?? null,\n          lot_size: extracted.lot_size ?? null,\n          year_built: extracted.year_built ?? null,\n          zestimate: extracted.zestimate ?? null,\n          avm: extracted.avm ?? null,\n          tax_assessed_value: extracted.tax_assessed_value ?? null,\n          distress_signals: extracted.distress_signals ?? {},\n          owner_occupied: extracted.owner_occupied ?? null,\n          metadata: extracted.metadata,\n        },\n      });\n\n      // Fetch session for assignment (reuse Supabase client – consistent)\n      const cookieStore = cookies();\n      const supabase = createServerClient<Database>(supabaseUrl, supabaseAnonKey, {\n        cookies: {\n          getAll: () => cookieStore.getAll(),\n          setAll: (cookiesToSet) => { try { cookiesToSet.forEach(({ name, value, options }) => cookieStore.set(name, value, options)); } catch {} },\n        },\n      });\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session?.user.id) {\n        throw new Error('No active session – login required for assignment');\n      }\n\n      const lead = await prisma.leads.create({\n        data: {\n          properties_id: property.id,\n          lead_type: extracted.lead_type || 'owner',  // Infer (e.g., from distress_signals)\n          first_name: extracted.first_name ?? null,\n          last_name: extracted.last_name ?? null,\n          phone: extracted.phone ?? null,\n          source: extracted.source || source,\n          metadata: { original_link: link, extracted_data: extracted },\n          assigned_to: session.user.id,  // UUID from auth\n          points_earned: 10,  // Base; push back: Use transaction to update profile.points += 10 for gamification\n        },\n      });\n\n      // Optional: Trigger quest completion (e.g., if first import, award badge – expand with Prisma query)\n      // await prisma.quest_completions.create({ data: { quest_id: 'import-quest-id', user_id: session.user.id } });\n\n      return { link, leadId: lead.id, success: true };\n    } catch (error) {\n      console.error(`Extraction error for ${link}:`, error); // Logic: Server log for debugging (view in Vercel/terminal)\n      return { link, success: false, error: (error as Error).message };\n    }\n  }));\n\n  return { results: results.map(r => r.status === 'fulfilled' ? r.value : { success: false, error: (r.reason as Error).message }) }; // Logic: Flatten for client display\n}\n\n// Helper: Extract from single link (logic: Source switch → API or scrape → normalize output – expandable for Propstream)\nasync function extractFromLink(link: string, source: 'zillow' | 'propstream' | 'both') {\n  let extracted: Record<string, any> = { source, metadata: { link, scrape_time: new Date().toISOString() } }; // Base output (json-friendly)\n\n  if (source === 'zillow' || source === 'both') {\n    const zillowKey = process.env.ZILLOW_API_KEY;\n    if (zillowKey) {\n      try {\n        // Logic: Bridge API (adjust auth if needed – docs use Authorization: Bearer; test with your key)\n        const response = await axios.get(`https://api.bridgeapi.io/v1/public-records/property?url=${encodeURIComponent(link)}`, {\n          headers: { 'Authorization': `Bearer ${zillowKey}` }, // Push back: Update if RapidAPI (rare for Bridge); confirm in docs\n        });\n        extracted = { ...extracted, ...response.data, source: 'zillow_api' }; // Merge (normalize fields below if API shape differs)\n      } catch (apiError) {\n        console.error(`Zillow API error for ${link}:`, apiError); // Fallback to scrape\n      }\n    }\n\n    if (!extracted.address) {  // Scrape fallback (anti-bot UA + timeout; push back: Use Puppeteer for JS-rendered if needed, but heavier)\n      const { data: html } = await axios.get(link, {\n        headers: { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36' },\n        timeout: 5000, // Prevent hangs\n      });\n      const $ = cheerio.load(html);\n\n      // Improved: Parse preloaded JSON (reliable; Zillow embeds data here)\n      const preloadedData = $('script#hdpApolloPreloadedData').text();\n      if (preloadedData) {\n        try {\n          const decoded = decodeURIComponent(preloadedData);\n          const jsonData = JSON.parse(decoded);\n          // Logic: Navigate cache (dynamic key; find property object)\n          const cacheKeys = Object.keys(jsonData.apiCache || {});\n          const propertyKey = cacheKeys.find(key => key.includes('Property'));\n          const propertyData = jsonData.apiCache[propertyKey]?.data?.property || {};\n\n          extracted.address = `${propertyData.streetAddress || ''}, ${propertyData.city || ''}, ${propertyData.state || ''} ${propertyData.zipcode || ''}`.trim();\n          extracted.zestimate = propertyData.zestimate || null;\n          extracted.bedrooms = propertyData.bedrooms || null;\n          extracted.bathrooms = propertyData.bathrooms || null;\n          extracted.square_feet = propertyData.livingArea || null;\n          extracted.lot_size = propertyData.lotAreaValue || null; // In sqft or acres; normalize if needed\n          extracted.year_built = propertyData.yearBuilt || null;\n          extracted.tax_assessed_value = propertyData.taxAssessedValue || null;\n          // Add more: e.g., extracted.property_type = propertyData.homeType?.toLowerCase();\n          // Note: Owner name/phone not in Zillow (privacy); use skiptrace API (e.g., TruePeopleSearch) post-extract for leads\n        } catch (parseError) {\n          console.error(`JSON parse error for ${link}:`, parseError);\n        }\n      }\n    }\n  }\n\n  if (source === 'propstream' || source === 'both') {\n    // Logic: Propstream no public scrape/API (TOS ban); stub for now – push back: Add form file input for CSV export upload\n    // If API key, integrate: e.g., await axios.post('https://api.propstream.com/v1/export', { links }, { headers: { 'Authorization': propstreamKey } });\n    extracted.avm = 0;  // Mock; replace with real\n    extracted.distress_signals = { pre_foreclosure: false };  // Mock (e.g., from CSV parse)\n    extracted.owner_occupied = true; // Mock\n    extracted.first_name = 'Mock'; // etc.\n  }\n\n  return extracted;  // Normalized (add more mappings as needed)\n}\n\n// ... (keep your signInAction)"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 418, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/.next-internal/server/app/extract/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {$$RSC_SERVER_ACTION_0 as '40d92fdaace826a4b14baf5b30cd6ab04e268791d4'} from 'ACTIONS_MODULE0'\nexport {extractDataAction as '40b0632351e311896eabd3605d944d3e6ea6ec5958'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 444, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/app/extract/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/wraelen/wraelen-internal-boilerplate/src/app/extract/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/wraelen/wraelen-internal-boilerplate/src/app/extract/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wgBAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAiU,GAC9V,+FACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 458, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/app/extract/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/wraelen/wraelen-internal-boilerplate/src/app/extract/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/wraelen/wraelen-internal-boilerplate/src/app/extract/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wgBAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAA6S,GAC1U,2EACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 472, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}