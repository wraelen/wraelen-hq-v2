module.exports = [
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/assessments.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AssessmentsPage = exports.AssessmentsInstance = exports.AssessmentsContextImpl = void 0;
exports.AssessmentsListInstance = AssessmentsListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class AssessmentsContextImpl {
    constructor(_version, assessmentSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(assessmentSid)) {
            throw new Error("Parameter 'assessmentSid' is not valid.");
        }
        this._solution = {
            assessmentSid
        };
        this._uri = `/Insights/QualityManagement/Assessments/${assessmentSid}`;
    }
    update(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["offset"] === null || params["offset"] === undefined) {
            throw new Error("Required parameter \"params['offset']\" missing.");
        }
        if (params["answerText"] === null || params["answerText"] === undefined) {
            throw new Error("Required parameter \"params['answerText']\" missing.");
        }
        if (params["answerId"] === null || params["answerId"] === undefined) {
            throw new Error("Required parameter \"params['answerId']\" missing.");
        }
        let data = {};
        data["Offset"] = params["offset"];
        data["AnswerText"] = params["answerText"];
        data["AnswerId"] = params["answerId"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AssessmentsInstance(operationVersion, payload, instance._solution.assessmentSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AssessmentsContextImpl = AssessmentsContextImpl;
class AssessmentsInstance {
    constructor(_version, payload, assessmentSid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.assessmentSid = payload.assessment_sid;
        this.offset = payload.offset;
        this.report = payload.report;
        this.weight = payload.weight;
        this.agentId = payload.agent_id;
        this.segmentId = payload.segment_id;
        this.userName = payload.user_name;
        this.userEmail = payload.user_email;
        this.answerText = payload.answer_text;
        this.answerId = payload.answer_id;
        this.assessment = payload.assessment;
        this.timestamp = payload.timestamp;
        this.url = payload.url;
        this._solution = {
            assessmentSid: assessmentSid || this.assessmentSid
        };
    }
    get _proxy() {
        this._context = this._context || new AssessmentsContextImpl(this._version, this._solution.assessmentSid);
        return this._context;
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            assessmentSid: this.assessmentSid,
            offset: this.offset,
            report: this.report,
            weight: this.weight,
            agentId: this.agentId,
            segmentId: this.segmentId,
            userName: this.userName,
            userEmail: this.userEmail,
            answerText: this.answerText,
            answerId: this.answerId,
            assessment: this.assessment,
            timestamp: this.timestamp,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AssessmentsInstance = AssessmentsInstance;
function AssessmentsListInstance(version) {
    const instance = (assessmentSid)=>instance.get(assessmentSid);
    instance.get = function get(assessmentSid) {
        return new AssessmentsContextImpl(version, assessmentSid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Insights/QualityManagement/Assessments`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["categorySid"] === null || params["categorySid"] === undefined) {
            throw new Error("Required parameter \"params['categorySid']\" missing.");
        }
        if (params["categoryName"] === null || params["categoryName"] === undefined) {
            throw new Error("Required parameter \"params['categoryName']\" missing.");
        }
        if (params["segmentId"] === null || params["segmentId"] === undefined) {
            throw new Error("Required parameter \"params['segmentId']\" missing.");
        }
        if (params["agentId"] === null || params["agentId"] === undefined) {
            throw new Error("Required parameter \"params['agentId']\" missing.");
        }
        if (params["offset"] === null || params["offset"] === undefined) {
            throw new Error("Required parameter \"params['offset']\" missing.");
        }
        if (params["metricId"] === null || params["metricId"] === undefined) {
            throw new Error("Required parameter \"params['metricId']\" missing.");
        }
        if (params["metricName"] === null || params["metricName"] === undefined) {
            throw new Error("Required parameter \"params['metricName']\" missing.");
        }
        if (params["answerText"] === null || params["answerText"] === undefined) {
            throw new Error("Required parameter \"params['answerText']\" missing.");
        }
        if (params["answerId"] === null || params["answerId"] === undefined) {
            throw new Error("Required parameter \"params['answerId']\" missing.");
        }
        if (params["questionnaireSid"] === null || params["questionnaireSid"] === undefined) {
            throw new Error("Required parameter \"params['questionnaireSid']\" missing.");
        }
        let data = {};
        data["CategorySid"] = params["categorySid"];
        data["CategoryName"] = params["categoryName"];
        data["SegmentId"] = params["segmentId"];
        data["AgentId"] = params["agentId"];
        data["Offset"] = params["offset"];
        data["MetricId"] = params["metricId"];
        data["MetricName"] = params["metricName"];
        data["AnswerText"] = params["answerText"];
        data["AnswerId"] = params["answerId"];
        data["QuestionnaireSid"] = params["questionnaireSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AssessmentsInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["segmentId"] !== undefined) data["SegmentId"] = params["segmentId"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AssessmentsPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new AssessmentsPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class AssessmentsPage extends Page_1.default {
    /**
     * Initialize the AssessmentsPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of AssessmentsInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new AssessmentsInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AssessmentsPage = AssessmentsPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/channel.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ChannelPage = exports.ChannelInstance = exports.ChannelContextImpl = void 0;
exports.ChannelListInstance = ChannelListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class ChannelContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Channels/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ChannelInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ChannelContextImpl = ChannelContextImpl;
class ChannelInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.flexFlowSid = payload.flex_flow_sid;
        this.sid = payload.sid;
        this.userSid = payload.user_sid;
        this.taskSid = payload.task_sid;
        this.url = payload.url;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new ChannelContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a ChannelInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a ChannelInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ChannelInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            flexFlowSid: this.flexFlowSid,
            sid: this.sid,
            userSid: this.userSid,
            taskSid: this.taskSid,
            url: this.url,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ChannelInstance = ChannelInstance;
function ChannelListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new ChannelContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Channels`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["flexFlowSid"] === null || params["flexFlowSid"] === undefined) {
            throw new Error("Required parameter \"params['flexFlowSid']\" missing.");
        }
        if (params["identity"] === null || params["identity"] === undefined) {
            throw new Error("Required parameter \"params['identity']\" missing.");
        }
        if (params["chatUserFriendlyName"] === null || params["chatUserFriendlyName"] === undefined) {
            throw new Error("Required parameter \"params['chatUserFriendlyName']\" missing.");
        }
        if (params["chatFriendlyName"] === null || params["chatFriendlyName"] === undefined) {
            throw new Error("Required parameter \"params['chatFriendlyName']\" missing.");
        }
        let data = {};
        data["FlexFlowSid"] = params["flexFlowSid"];
        data["Identity"] = params["identity"];
        data["ChatUserFriendlyName"] = params["chatUserFriendlyName"];
        data["ChatFriendlyName"] = params["chatFriendlyName"];
        if (params["target"] !== undefined) data["Target"] = params["target"];
        if (params["chatUniqueName"] !== undefined) data["ChatUniqueName"] = params["chatUniqueName"];
        if (params["preEngagementData"] !== undefined) data["PreEngagementData"] = params["preEngagementData"];
        if (params["taskSid"] !== undefined) data["TaskSid"] = params["taskSid"];
        if (params["taskAttributes"] !== undefined) data["TaskAttributes"] = params["taskAttributes"];
        if (params["longLived"] !== undefined) data["LongLived"] = serialize.bool(params["longLived"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ChannelInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ChannelPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ChannelPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ChannelPage extends Page_1.default {
    /**
     * Initialize the ChannelPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ChannelInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ChannelInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ChannelPage = ChannelPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/configuration.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ConfigurationInstance = exports.ConfigurationContextImpl = void 0;
exports.ConfigurationListInstance = ConfigurationListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
class ConfigurationContextImpl {
    constructor(_version){
        this._version = _version;
        this._solution = {};
        this._uri = `/Configuration`;
    }
    fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["uiVersion"] !== undefined) data["UiVersion"] = params["uiVersion"];
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ConfigurationInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, headers, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ConfigurationInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ConfigurationContextImpl = ConfigurationContextImpl;
class ConfigurationInstance {
    constructor(_version, payload){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.attributes = payload.attributes;
        this.status = payload.status;
        this.taskrouterWorkspaceSid = payload.taskrouter_workspace_sid;
        this.taskrouterTargetWorkflowSid = payload.taskrouter_target_workflow_sid;
        this.taskrouterTargetTaskqueueSid = payload.taskrouter_target_taskqueue_sid;
        this.taskrouterTaskqueues = payload.taskrouter_taskqueues;
        this.taskrouterSkills = payload.taskrouter_skills;
        this.taskrouterWorkerChannels = payload.taskrouter_worker_channels;
        this.taskrouterWorkerAttributes = payload.taskrouter_worker_attributes;
        this.taskrouterOfflineActivitySid = payload.taskrouter_offline_activity_sid;
        this.runtimeDomain = payload.runtime_domain;
        this.messagingServiceInstanceSid = payload.messaging_service_instance_sid;
        this.chatServiceInstanceSid = payload.chat_service_instance_sid;
        this.flexServiceInstanceSid = payload.flex_service_instance_sid;
        this.flexInstanceSid = payload.flex_instance_sid;
        this.uiLanguage = payload.ui_language;
        this.uiAttributes = payload.ui_attributes;
        this.uiDependencies = payload.ui_dependencies;
        this.uiVersion = payload.ui_version;
        this.serviceVersion = payload.service_version;
        this.callRecordingEnabled = payload.call_recording_enabled;
        this.callRecordingWebhookUrl = payload.call_recording_webhook_url;
        this.crmEnabled = payload.crm_enabled;
        this.crmType = payload.crm_type;
        this.crmCallbackUrl = payload.crm_callback_url;
        this.crmFallbackUrl = payload.crm_fallback_url;
        this.crmAttributes = payload.crm_attributes;
        this.publicAttributes = payload.public_attributes;
        this.pluginServiceEnabled = payload.plugin_service_enabled;
        this.pluginServiceAttributes = payload.plugin_service_attributes;
        this.integrations = payload.integrations;
        this.outboundCallFlows = payload.outbound_call_flows;
        this.serverlessServiceSids = payload.serverless_service_sids;
        this.queueStatsConfiguration = payload.queue_stats_configuration;
        this.notifications = payload.notifications;
        this.markdown = payload.markdown;
        this.url = payload.url;
        this.flexInsightsHr = payload.flex_insights_hr;
        this.flexInsightsDrilldown = payload.flex_insights_drilldown;
        this.flexUrl = payload.flex_url;
        this.channelConfigs = payload.channel_configs;
        this.debuggerIntegration = payload.debugger_integration;
        this.flexUiStatusReport = payload.flex_ui_status_report;
        this.agentConvEndMethods = payload.agent_conv_end_methods;
        this.citrixVoiceVdi = payload.citrix_voice_vdi;
        this.offlineConfig = payload.offline_config;
        this._solution = {};
    }
    get _proxy() {
        this._context = this._context || new ConfigurationContextImpl(this._version);
        return this._context;
    }
    fetch(params, callback) {
        return this._proxy.fetch(params, callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            attributes: this.attributes,
            status: this.status,
            taskrouterWorkspaceSid: this.taskrouterWorkspaceSid,
            taskrouterTargetWorkflowSid: this.taskrouterTargetWorkflowSid,
            taskrouterTargetTaskqueueSid: this.taskrouterTargetTaskqueueSid,
            taskrouterTaskqueues: this.taskrouterTaskqueues,
            taskrouterSkills: this.taskrouterSkills,
            taskrouterWorkerChannels: this.taskrouterWorkerChannels,
            taskrouterWorkerAttributes: this.taskrouterWorkerAttributes,
            taskrouterOfflineActivitySid: this.taskrouterOfflineActivitySid,
            runtimeDomain: this.runtimeDomain,
            messagingServiceInstanceSid: this.messagingServiceInstanceSid,
            chatServiceInstanceSid: this.chatServiceInstanceSid,
            flexServiceInstanceSid: this.flexServiceInstanceSid,
            flexInstanceSid: this.flexInstanceSid,
            uiLanguage: this.uiLanguage,
            uiAttributes: this.uiAttributes,
            uiDependencies: this.uiDependencies,
            uiVersion: this.uiVersion,
            serviceVersion: this.serviceVersion,
            callRecordingEnabled: this.callRecordingEnabled,
            callRecordingWebhookUrl: this.callRecordingWebhookUrl,
            crmEnabled: this.crmEnabled,
            crmType: this.crmType,
            crmCallbackUrl: this.crmCallbackUrl,
            crmFallbackUrl: this.crmFallbackUrl,
            crmAttributes: this.crmAttributes,
            publicAttributes: this.publicAttributes,
            pluginServiceEnabled: this.pluginServiceEnabled,
            pluginServiceAttributes: this.pluginServiceAttributes,
            integrations: this.integrations,
            outboundCallFlows: this.outboundCallFlows,
            serverlessServiceSids: this.serverlessServiceSids,
            queueStatsConfiguration: this.queueStatsConfiguration,
            notifications: this.notifications,
            markdown: this.markdown,
            url: this.url,
            flexInsightsHr: this.flexInsightsHr,
            flexInsightsDrilldown: this.flexInsightsDrilldown,
            flexUrl: this.flexUrl,
            channelConfigs: this.channelConfigs,
            debuggerIntegration: this.debuggerIntegration,
            flexUiStatusReport: this.flexUiStatusReport,
            agentConvEndMethods: this.agentConvEndMethods,
            citrixVoiceVdi: this.citrixVoiceVdi,
            offlineConfig: this.offlineConfig
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ConfigurationInstance = ConfigurationInstance;
function ConfigurationListInstance(version) {
    const instance = ()=>instance.get();
    instance.get = function get() {
        return new ConfigurationContextImpl(version);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/flexFlow.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FlexFlowPage = exports.FlexFlowInstance = exports.FlexFlowContextImpl = void 0;
exports.FlexFlowListInstance = FlexFlowListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class FlexFlowContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/FlexFlows/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new FlexFlowInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["chatServiceSid"] !== undefined) data["ChatServiceSid"] = params["chatServiceSid"];
        if (params["channelType"] !== undefined) data["ChannelType"] = params["channelType"];
        if (params["contactIdentity"] !== undefined) data["ContactIdentity"] = params["contactIdentity"];
        if (params["enabled"] !== undefined) data["Enabled"] = serialize.bool(params["enabled"]);
        if (params["integrationType"] !== undefined) data["IntegrationType"] = params["integrationType"];
        if (params["integration.flowSid"] !== undefined) data["Integration.FlowSid"] = params["integration.flowSid"];
        if (params["integration.url"] !== undefined) data["Integration.Url"] = params["integration.url"];
        if (params["integration.workspaceSid"] !== undefined) data["Integration.WorkspaceSid"] = params["integration.workspaceSid"];
        if (params["integration.workflowSid"] !== undefined) data["Integration.WorkflowSid"] = params["integration.workflowSid"];
        if (params["integration.channel"] !== undefined) data["Integration.Channel"] = params["integration.channel"];
        if (params["integration.timeout"] !== undefined) data["Integration.Timeout"] = params["integration.timeout"];
        if (params["integration.priority"] !== undefined) data["Integration.Priority"] = params["integration.priority"];
        if (params["integration.creationOnMessage"] !== undefined) data["Integration.CreationOnMessage"] = serialize.bool(params["integration.creationOnMessage"]);
        if (params["longLived"] !== undefined) data["LongLived"] = serialize.bool(params["longLived"]);
        if (params["janitorEnabled"] !== undefined) data["JanitorEnabled"] = serialize.bool(params["janitorEnabled"]);
        if (params["integration.retryCount"] !== undefined) data["Integration.RetryCount"] = params["integration.retryCount"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new FlexFlowInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.FlexFlowContextImpl = FlexFlowContextImpl;
class FlexFlowInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.sid = payload.sid;
        this.friendlyName = payload.friendly_name;
        this.chatServiceSid = payload.chat_service_sid;
        this.channelType = payload.channel_type;
        this.contactIdentity = payload.contact_identity;
        this.enabled = payload.enabled;
        this.integrationType = payload.integration_type;
        this.integration = payload.integration;
        this.longLived = payload.long_lived;
        this.janitorEnabled = payload.janitor_enabled;
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new FlexFlowContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a FlexFlowInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a FlexFlowInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed FlexFlowInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            sid: this.sid,
            friendlyName: this.friendlyName,
            chatServiceSid: this.chatServiceSid,
            channelType: this.channelType,
            contactIdentity: this.contactIdentity,
            enabled: this.enabled,
            integrationType: this.integrationType,
            integration: this.integration,
            longLived: this.longLived,
            janitorEnabled: this.janitorEnabled,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.FlexFlowInstance = FlexFlowInstance;
function FlexFlowListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new FlexFlowContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/FlexFlows`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["friendlyName"] === null || params["friendlyName"] === undefined) {
            throw new Error("Required parameter \"params['friendlyName']\" missing.");
        }
        if (params["chatServiceSid"] === null || params["chatServiceSid"] === undefined) {
            throw new Error("Required parameter \"params['chatServiceSid']\" missing.");
        }
        if (params["channelType"] === null || params["channelType"] === undefined) {
            throw new Error("Required parameter \"params['channelType']\" missing.");
        }
        let data = {};
        data["FriendlyName"] = params["friendlyName"];
        data["ChatServiceSid"] = params["chatServiceSid"];
        data["ChannelType"] = params["channelType"];
        if (params["contactIdentity"] !== undefined) data["ContactIdentity"] = params["contactIdentity"];
        if (params["enabled"] !== undefined) data["Enabled"] = serialize.bool(params["enabled"]);
        if (params["integrationType"] !== undefined) data["IntegrationType"] = params["integrationType"];
        if (params["integration.flowSid"] !== undefined) data["Integration.FlowSid"] = params["integration.flowSid"];
        if (params["integration.url"] !== undefined) data["Integration.Url"] = params["integration.url"];
        if (params["integration.workspaceSid"] !== undefined) data["Integration.WorkspaceSid"] = params["integration.workspaceSid"];
        if (params["integration.workflowSid"] !== undefined) data["Integration.WorkflowSid"] = params["integration.workflowSid"];
        if (params["integration.channel"] !== undefined) data["Integration.Channel"] = params["integration.channel"];
        if (params["integration.timeout"] !== undefined) data["Integration.Timeout"] = params["integration.timeout"];
        if (params["integration.priority"] !== undefined) data["Integration.Priority"] = params["integration.priority"];
        if (params["integration.creationOnMessage"] !== undefined) data["Integration.CreationOnMessage"] = serialize.bool(params["integration.creationOnMessage"]);
        if (params["longLived"] !== undefined) data["LongLived"] = serialize.bool(params["longLived"]);
        if (params["janitorEnabled"] !== undefined) data["JanitorEnabled"] = serialize.bool(params["janitorEnabled"]);
        if (params["integration.retryCount"] !== undefined) data["Integration.RetryCount"] = params["integration.retryCount"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new FlexFlowInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new FlexFlowPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new FlexFlowPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class FlexFlowPage extends Page_1.default {
    /**
     * Initialize the FlexFlowPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of FlexFlowInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new FlexFlowInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.FlexFlowPage = FlexFlowPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/insightsAssessmentsComment.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InsightsAssessmentsCommentPage = exports.InsightsAssessmentsCommentInstance = void 0;
exports.InsightsAssessmentsCommentListInstance = InsightsAssessmentsCommentListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function InsightsAssessmentsCommentListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Insights/QualityManagement/Assessments/Comments`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["categoryId"] === null || params["categoryId"] === undefined) {
            throw new Error("Required parameter \"params['categoryId']\" missing.");
        }
        if (params["categoryName"] === null || params["categoryName"] === undefined) {
            throw new Error("Required parameter \"params['categoryName']\" missing.");
        }
        if (params["comment"] === null || params["comment"] === undefined) {
            throw new Error("Required parameter \"params['comment']\" missing.");
        }
        if (params["segmentId"] === null || params["segmentId"] === undefined) {
            throw new Error("Required parameter \"params['segmentId']\" missing.");
        }
        if (params["agentId"] === null || params["agentId"] === undefined) {
            throw new Error("Required parameter \"params['agentId']\" missing.");
        }
        if (params["offset"] === null || params["offset"] === undefined) {
            throw new Error("Required parameter \"params['offset']\" missing.");
        }
        let data = {};
        data["CategoryId"] = params["categoryId"];
        data["CategoryName"] = params["categoryName"];
        data["Comment"] = params["comment"];
        data["SegmentId"] = params["segmentId"];
        data["AgentId"] = params["agentId"];
        data["Offset"] = params["offset"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InsightsAssessmentsCommentInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["segmentId"] !== undefined) data["SegmentId"] = params["segmentId"];
        if (params["agentId"] !== undefined) data["AgentId"] = params["agentId"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InsightsAssessmentsCommentPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new InsightsAssessmentsCommentPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class InsightsAssessmentsCommentInstance {
    constructor(_version, payload){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.assessmentSid = payload.assessment_sid;
        this.comment = payload.comment;
        this.offset = payload.offset;
        this.report = payload.report;
        this.weight = payload.weight;
        this.agentId = payload.agent_id;
        this.segmentId = payload.segment_id;
        this.userName = payload.user_name;
        this.userEmail = payload.user_email;
        this.timestamp = payload.timestamp;
        this.url = payload.url;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            assessmentSid: this.assessmentSid,
            comment: this.comment,
            offset: this.offset,
            report: this.report,
            weight: this.weight,
            agentId: this.agentId,
            segmentId: this.segmentId,
            userName: this.userName,
            userEmail: this.userEmail,
            timestamp: this.timestamp,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InsightsAssessmentsCommentInstance = InsightsAssessmentsCommentInstance;
class InsightsAssessmentsCommentPage extends Page_1.default {
    /**
     * Initialize the InsightsAssessmentsCommentPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of InsightsAssessmentsCommentInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new InsightsAssessmentsCommentInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InsightsAssessmentsCommentPage = InsightsAssessmentsCommentPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/insightsConversations.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InsightsConversationsPage = exports.InsightsConversationsInstance = void 0;
exports.InsightsConversationsListInstance = InsightsConversationsListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function InsightsConversationsListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Insights/Conversations`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["segmentId"] !== undefined) data["SegmentId"] = params["segmentId"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InsightsConversationsPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new InsightsConversationsPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class InsightsConversationsInstance {
    constructor(_version, payload){
        this._version = _version;
        this.accountId = payload.account_id;
        this.conversationId = payload.conversation_id;
        this.segmentCount = deserialize.integer(payload.segment_count);
        this.segments = payload.segments;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountId: this.accountId,
            conversationId: this.conversationId,
            segmentCount: this.segmentCount,
            segments: this.segments
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InsightsConversationsInstance = InsightsConversationsInstance;
class InsightsConversationsPage extends Page_1.default {
    /**
     * Initialize the InsightsConversationsPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of InsightsConversationsInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new InsightsConversationsInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InsightsConversationsPage = InsightsConversationsPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/insightsQuestionnaires.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InsightsQuestionnairesPage = exports.InsightsQuestionnairesInstance = exports.InsightsQuestionnairesContextImpl = void 0;
exports.InsightsQuestionnairesListInstance = InsightsQuestionnairesListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class InsightsQuestionnairesContextImpl {
    constructor(_version, questionnaireSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(questionnaireSid)) {
            throw new Error("Parameter 'questionnaireSid' is not valid.");
        }
        this._solution = {
            questionnaireSid
        };
        this._uri = `/Insights/QualityManagement/Questionnaires/${questionnaireSid}`;
    }
    remove(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        const headers = {};
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            params: data,
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InsightsQuestionnairesInstance(operationVersion, payload, instance._solution.questionnaireSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["active"] === null || params["active"] === undefined) {
            throw new Error("Required parameter \"params['active']\" missing.");
        }
        let data = {};
        data["Active"] = serialize.bool(params["active"]);
        if (params["name"] !== undefined) data["Name"] = params["name"];
        if (params["description"] !== undefined) data["Description"] = params["description"];
        if (params["questionSids"] !== undefined) data["QuestionSids"] = serialize.map(params["questionSids"], (e)=>e);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InsightsQuestionnairesInstance(operationVersion, payload, instance._solution.questionnaireSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InsightsQuestionnairesContextImpl = InsightsQuestionnairesContextImpl;
class InsightsQuestionnairesInstance {
    constructor(_version, payload, questionnaireSid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.questionnaireSid = payload.questionnaire_sid;
        this.name = payload.name;
        this.description = payload.description;
        this.active = payload.active;
        this.questions = payload.questions;
        this.url = payload.url;
        this._solution = {
            questionnaireSid: questionnaireSid || this.questionnaireSid
        };
    }
    get _proxy() {
        this._context = this._context || new InsightsQuestionnairesContextImpl(this._version, this._solution.questionnaireSid);
        return this._context;
    }
    remove(params, callback) {
        return this._proxy.remove(params, callback);
    }
    fetch(params, callback) {
        return this._proxy.fetch(params, callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            questionnaireSid: this.questionnaireSid,
            name: this.name,
            description: this.description,
            active: this.active,
            questions: this.questions,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InsightsQuestionnairesInstance = InsightsQuestionnairesInstance;
function InsightsQuestionnairesListInstance(version) {
    const instance = (questionnaireSid)=>instance.get(questionnaireSid);
    instance.get = function get(questionnaireSid) {
        return new InsightsQuestionnairesContextImpl(version, questionnaireSid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Insights/QualityManagement/Questionnaires`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["name"] === null || params["name"] === undefined) {
            throw new Error("Required parameter \"params['name']\" missing.");
        }
        let data = {};
        data["Name"] = params["name"];
        if (params["description"] !== undefined) data["Description"] = params["description"];
        if (params["active"] !== undefined) data["Active"] = serialize.bool(params["active"]);
        if (params["questionSids"] !== undefined) data["QuestionSids"] = serialize.map(params["questionSids"], (e)=>e);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InsightsQuestionnairesInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["includeInactive"] !== undefined) data["IncludeInactive"] = serialize.bool(params["includeInactive"]);
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InsightsQuestionnairesPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new InsightsQuestionnairesPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class InsightsQuestionnairesPage extends Page_1.default {
    /**
     * Initialize the InsightsQuestionnairesPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of InsightsQuestionnairesInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new InsightsQuestionnairesInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InsightsQuestionnairesPage = InsightsQuestionnairesPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/insightsQuestionnairesCategory.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InsightsQuestionnairesCategoryPage = exports.InsightsQuestionnairesCategoryInstance = exports.InsightsQuestionnairesCategoryContextImpl = void 0;
exports.InsightsQuestionnairesCategoryListInstance = InsightsQuestionnairesCategoryListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class InsightsQuestionnairesCategoryContextImpl {
    constructor(_version, categorySid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(categorySid)) {
            throw new Error("Parameter 'categorySid' is not valid.");
        }
        this._solution = {
            categorySid
        };
        this._uri = `/Insights/QualityManagement/Categories/${categorySid}`;
    }
    remove(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        const headers = {};
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            params: data,
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["name"] === null || params["name"] === undefined) {
            throw new Error("Required parameter \"params['name']\" missing.");
        }
        let data = {};
        data["Name"] = params["name"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InsightsQuestionnairesCategoryInstance(operationVersion, payload, instance._solution.categorySid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InsightsQuestionnairesCategoryContextImpl = InsightsQuestionnairesCategoryContextImpl;
class InsightsQuestionnairesCategoryInstance {
    constructor(_version, payload, categorySid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.categorySid = payload.category_sid;
        this.name = payload.name;
        this.url = payload.url;
        this._solution = {
            categorySid: categorySid || this.categorySid
        };
    }
    get _proxy() {
        this._context = this._context || new InsightsQuestionnairesCategoryContextImpl(this._version, this._solution.categorySid);
        return this._context;
    }
    remove(params, callback) {
        return this._proxy.remove(params, callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            categorySid: this.categorySid,
            name: this.name,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InsightsQuestionnairesCategoryInstance = InsightsQuestionnairesCategoryInstance;
function InsightsQuestionnairesCategoryListInstance(version) {
    const instance = (categorySid)=>instance.get(categorySid);
    instance.get = function get(categorySid) {
        return new InsightsQuestionnairesCategoryContextImpl(version, categorySid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Insights/QualityManagement/Categories`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["name"] === null || params["name"] === undefined) {
            throw new Error("Required parameter \"params['name']\" missing.");
        }
        let data = {};
        data["Name"] = params["name"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InsightsQuestionnairesCategoryInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InsightsQuestionnairesCategoryPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new InsightsQuestionnairesCategoryPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class InsightsQuestionnairesCategoryPage extends Page_1.default {
    /**
     * Initialize the InsightsQuestionnairesCategoryPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of InsightsQuestionnairesCategoryInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new InsightsQuestionnairesCategoryInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InsightsQuestionnairesCategoryPage = InsightsQuestionnairesCategoryPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/insightsQuestionnairesQuestion.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InsightsQuestionnairesQuestionPage = exports.InsightsQuestionnairesQuestionInstance = exports.InsightsQuestionnairesQuestionContextImpl = void 0;
exports.InsightsQuestionnairesQuestionListInstance = InsightsQuestionnairesQuestionListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class InsightsQuestionnairesQuestionContextImpl {
    constructor(_version, questionSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(questionSid)) {
            throw new Error("Parameter 'questionSid' is not valid.");
        }
        this._solution = {
            questionSid
        };
        this._uri = `/Insights/QualityManagement/Questions/${questionSid}`;
    }
    remove(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        const headers = {};
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            params: data,
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["allowNa"] === null || params["allowNa"] === undefined) {
            throw new Error("Required parameter \"params['allowNa']\" missing.");
        }
        let data = {};
        data["AllowNa"] = serialize.bool(params["allowNa"]);
        if (params["categorySid"] !== undefined) data["CategorySid"] = params["categorySid"];
        if (params["question"] !== undefined) data["Question"] = params["question"];
        if (params["description"] !== undefined) data["Description"] = params["description"];
        if (params["answerSetId"] !== undefined) data["AnswerSetId"] = params["answerSetId"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InsightsQuestionnairesQuestionInstance(operationVersion, payload, instance._solution.questionSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InsightsQuestionnairesQuestionContextImpl = InsightsQuestionnairesQuestionContextImpl;
class InsightsQuestionnairesQuestionInstance {
    constructor(_version, payload, questionSid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.questionSid = payload.question_sid;
        this.question = payload.question;
        this.description = payload.description;
        this.category = payload.category;
        this.answerSetId = payload.answer_set_id;
        this.allowNa = payload.allow_na;
        this.usage = deserialize.integer(payload.usage);
        this.answerSet = payload.answer_set;
        this.url = payload.url;
        this._solution = {
            questionSid: questionSid || this.questionSid
        };
    }
    get _proxy() {
        this._context = this._context || new InsightsQuestionnairesQuestionContextImpl(this._version, this._solution.questionSid);
        return this._context;
    }
    remove(params, callback) {
        return this._proxy.remove(params, callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            questionSid: this.questionSid,
            question: this.question,
            description: this.description,
            category: this.category,
            answerSetId: this.answerSetId,
            allowNa: this.allowNa,
            usage: this.usage,
            answerSet: this.answerSet,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InsightsQuestionnairesQuestionInstance = InsightsQuestionnairesQuestionInstance;
function InsightsQuestionnairesQuestionListInstance(version) {
    const instance = (questionSid)=>instance.get(questionSid);
    instance.get = function get(questionSid) {
        return new InsightsQuestionnairesQuestionContextImpl(version, questionSid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Insights/QualityManagement/Questions`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["categorySid"] === null || params["categorySid"] === undefined) {
            throw new Error("Required parameter \"params['categorySid']\" missing.");
        }
        if (params["question"] === null || params["question"] === undefined) {
            throw new Error("Required parameter \"params['question']\" missing.");
        }
        if (params["answerSetId"] === null || params["answerSetId"] === undefined) {
            throw new Error("Required parameter \"params['answerSetId']\" missing.");
        }
        if (params["allowNa"] === null || params["allowNa"] === undefined) {
            throw new Error("Required parameter \"params['allowNa']\" missing.");
        }
        let data = {};
        data["CategorySid"] = params["categorySid"];
        data["Question"] = params["question"];
        data["AnswerSetId"] = params["answerSetId"];
        data["AllowNa"] = serialize.bool(params["allowNa"]);
        if (params["description"] !== undefined) data["Description"] = params["description"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InsightsQuestionnairesQuestionInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["categorySid"] !== undefined) data["CategorySid"] = serialize.map(params["categorySid"], (e)=>e);
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InsightsQuestionnairesQuestionPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new InsightsQuestionnairesQuestionPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class InsightsQuestionnairesQuestionPage extends Page_1.default {
    /**
     * Initialize the InsightsQuestionnairesQuestionPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of InsightsQuestionnairesQuestionInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new InsightsQuestionnairesQuestionInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InsightsQuestionnairesQuestionPage = InsightsQuestionnairesQuestionPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/insightsSegments.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InsightsSegmentsPage = exports.InsightsSegmentsInstance = void 0;
exports.InsightsSegmentsListInstance = InsightsSegmentsListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function InsightsSegmentsListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Insights/Segments`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["segmentId"] !== undefined) data["SegmentId"] = params["segmentId"];
        if (params["reservationId"] !== undefined) data["ReservationId"] = serialize.map(params["reservationId"], (e)=>e);
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InsightsSegmentsPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new InsightsSegmentsPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class InsightsSegmentsInstance {
    constructor(_version, payload){
        this._version = _version;
        this.segmentId = payload.segment_id;
        this.externalId = payload.external_id;
        this.queue = payload.queue;
        this.externalContact = payload.external_contact;
        this.externalSegmentLinkId = payload.external_segment_link_id;
        this.date = payload.date;
        this.accountId = payload.account_id;
        this.externalSegmentLink = payload.external_segment_link;
        this.agentId = payload.agent_id;
        this.agentPhone = payload.agent_phone;
        this.agentName = payload.agent_name;
        this.agentTeamName = payload.agent_team_name;
        this.agentTeamNameInHierarchy = payload.agent_team_name_in_hierarchy;
        this.agentLink = payload.agent_link;
        this.customerPhone = payload.customer_phone;
        this.customerName = payload.customer_name;
        this.customerLink = payload.customer_link;
        this.segmentRecordingOffset = payload.segment_recording_offset;
        this.media = payload.media;
        this.assessmentType = payload.assessment_type;
        this.assessmentPercentage = payload.assessment_percentage;
        this.url = payload.url;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            segmentId: this.segmentId,
            externalId: this.externalId,
            queue: this.queue,
            externalContact: this.externalContact,
            externalSegmentLinkId: this.externalSegmentLinkId,
            date: this.date,
            accountId: this.accountId,
            externalSegmentLink: this.externalSegmentLink,
            agentId: this.agentId,
            agentPhone: this.agentPhone,
            agentName: this.agentName,
            agentTeamName: this.agentTeamName,
            agentTeamNameInHierarchy: this.agentTeamNameInHierarchy,
            agentLink: this.agentLink,
            customerPhone: this.customerPhone,
            customerName: this.customerName,
            customerLink: this.customerLink,
            segmentRecordingOffset: this.segmentRecordingOffset,
            media: this.media,
            assessmentType: this.assessmentType,
            assessmentPercentage: this.assessmentPercentage,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InsightsSegmentsInstance = InsightsSegmentsInstance;
class InsightsSegmentsPage extends Page_1.default {
    /**
     * Initialize the InsightsSegmentsPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of InsightsSegmentsInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new InsightsSegmentsInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InsightsSegmentsPage = InsightsSegmentsPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/insightsSession.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InsightsSessionInstance = exports.InsightsSessionContextImpl = void 0;
exports.InsightsSessionListInstance = InsightsSessionListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
class InsightsSessionContextImpl {
    constructor(_version){
        this._version = _version;
        this._solution = {};
        this._uri = `/Insights/Session`;
    }
    create(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InsightsSessionInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InsightsSessionContextImpl = InsightsSessionContextImpl;
class InsightsSessionInstance {
    constructor(_version, payload){
        this._version = _version;
        this.workspaceId = payload.workspace_id;
        this.sessionExpiry = payload.session_expiry;
        this.sessionId = payload.session_id;
        this.baseUrl = payload.base_url;
        this.url = payload.url;
        this._solution = {};
    }
    get _proxy() {
        this._context = this._context || new InsightsSessionContextImpl(this._version);
        return this._context;
    }
    create(params, callback) {
        return this._proxy.create(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            workspaceId: this.workspaceId,
            sessionExpiry: this.sessionExpiry,
            sessionId: this.sessionId,
            baseUrl: this.baseUrl,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InsightsSessionInstance = InsightsSessionInstance;
function InsightsSessionListInstance(version) {
    const instance = ()=>instance.get();
    instance.get = function get() {
        return new InsightsSessionContextImpl(version);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/insightsSettingsAnswerSets.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InsightsSettingsAnswerSetsInstance = void 0;
exports.InsightsSettingsAnswerSetsListInstance = InsightsSettingsAnswerSetsListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function InsightsSettingsAnswerSetsListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Insights/QualityManagement/Settings/AnswerSets`;
    instance.fetch = function fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        let operationVersion = version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InsightsSettingsAnswerSetsInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class InsightsSettingsAnswerSetsInstance {
    constructor(_version, payload){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.answerSets = payload.answer_sets;
        this.answerSetCategories = payload.answer_set_categories;
        this.notApplicable = payload.not_applicable;
        this.url = payload.url;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            answerSets: this.answerSets,
            answerSetCategories: this.answerSetCategories,
            notApplicable: this.notApplicable,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InsightsSettingsAnswerSetsInstance = InsightsSettingsAnswerSetsInstance;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/insightsSettingsComment.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InsightsSettingsCommentInstance = void 0;
exports.InsightsSettingsCommentListInstance = InsightsSettingsCommentListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function InsightsSettingsCommentListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Insights/QualityManagement/Settings/CommentTags`;
    instance.fetch = function fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        let operationVersion = version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InsightsSettingsCommentInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class InsightsSettingsCommentInstance {
    constructor(_version, payload){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.comments = payload.comments;
        this.url = payload.url;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            comments: this.comments,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InsightsSettingsCommentInstance = InsightsSettingsCommentInstance;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/insightsUserRoles.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InsightsUserRolesInstance = exports.InsightsUserRolesContextImpl = void 0;
exports.InsightsUserRolesListInstance = InsightsUserRolesListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
class InsightsUserRolesContextImpl {
    constructor(_version){
        this._version = _version;
        this._solution = {};
        this._uri = `/Insights/UserRoles`;
    }
    fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["authorization"] !== undefined) headers["Authorization"] = params["authorization"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InsightsUserRolesInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InsightsUserRolesContextImpl = InsightsUserRolesContextImpl;
class InsightsUserRolesInstance {
    constructor(_version, payload){
        this._version = _version;
        this.roles = payload.roles;
        this.url = payload.url;
        this._solution = {};
    }
    get _proxy() {
        this._context = this._context || new InsightsUserRolesContextImpl(this._version);
        return this._context;
    }
    fetch(params, callback) {
        return this._proxy.fetch(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            roles: this.roles,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InsightsUserRolesInstance = InsightsUserRolesInstance;
function InsightsUserRolesListInstance(version) {
    const instance = ()=>instance.get();
    instance.get = function get() {
        return new InsightsUserRolesContextImpl(version);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/interaction/interactionChannel/interactionChannelInvite.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InteractionChannelInvitePage = exports.InteractionChannelInviteInstance = void 0;
exports.InteractionChannelInviteListInstance = InteractionChannelInviteListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
function InteractionChannelInviteListInstance(version, interactionSid, channelSid) {
    if (!(0, utility_1.isValidPathParam)(interactionSid)) {
        throw new Error("Parameter 'interactionSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(channelSid)) {
        throw new Error("Parameter 'channelSid' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        interactionSid,
        channelSid
    };
    instance._uri = `/Interactions/${interactionSid}/Channels/${channelSid}/Invites`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["routing"] === null || params["routing"] === undefined) {
            throw new Error("Required parameter \"params['routing']\" missing.");
        }
        let data = {};
        data["Routing"] = serialize.object(params["routing"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InteractionChannelInviteInstance(operationVersion, payload, instance._solution.interactionSid, instance._solution.channelSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InteractionChannelInvitePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new InteractionChannelInvitePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class InteractionChannelInviteInstance {
    constructor(_version, payload, interactionSid, channelSid){
        this._version = _version;
        this.sid = payload.sid;
        this.interactionSid = payload.interaction_sid;
        this.channelSid = payload.channel_sid;
        this.routing = payload.routing;
        this.url = payload.url;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            interactionSid: this.interactionSid,
            channelSid: this.channelSid,
            routing: this.routing,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InteractionChannelInviteInstance = InteractionChannelInviteInstance;
class InteractionChannelInvitePage extends Page_1.default {
    /**
     * Initialize the InteractionChannelInvitePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of InteractionChannelInviteInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new InteractionChannelInviteInstance(this._version, payload, this._solution.interactionSid, this._solution.channelSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InteractionChannelInvitePage = InteractionChannelInvitePage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/interaction/interactionChannel/interactionChannelParticipant.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InteractionChannelParticipantPage = exports.InteractionChannelParticipantInstance = exports.InteractionChannelParticipantContextImpl = void 0;
exports.InteractionChannelParticipantListInstance = InteractionChannelParticipantListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class InteractionChannelParticipantContextImpl {
    constructor(_version, interactionSid, channelSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(interactionSid)) {
            throw new Error("Parameter 'interactionSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(channelSid)) {
            throw new Error("Parameter 'channelSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            interactionSid,
            channelSid,
            sid
        };
        this._uri = `/Interactions/${interactionSid}/Channels/${channelSid}/Participants/${sid}`;
    }
    update(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["status"] === null || params["status"] === undefined) {
            throw new Error("Required parameter \"params['status']\" missing.");
        }
        let data = {};
        data["Status"] = params["status"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InteractionChannelParticipantInstance(operationVersion, payload, instance._solution.interactionSid, instance._solution.channelSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InteractionChannelParticipantContextImpl = InteractionChannelParticipantContextImpl;
class InteractionChannelParticipantInstance {
    constructor(_version, payload, interactionSid, channelSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.type = payload.type;
        this.interactionSid = payload.interaction_sid;
        this.channelSid = payload.channel_sid;
        this.url = payload.url;
        this.routingProperties = payload.routing_properties;
        this._solution = {
            interactionSid,
            channelSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new InteractionChannelParticipantContextImpl(this._version, this._solution.interactionSid, this._solution.channelSid, this._solution.sid);
        return this._context;
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            type: this.type,
            interactionSid: this.interactionSid,
            channelSid: this.channelSid,
            url: this.url,
            routingProperties: this.routingProperties
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InteractionChannelParticipantInstance = InteractionChannelParticipantInstance;
function InteractionChannelParticipantListInstance(version, interactionSid, channelSid) {
    if (!(0, utility_1.isValidPathParam)(interactionSid)) {
        throw new Error("Parameter 'interactionSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(channelSid)) {
        throw new Error("Parameter 'channelSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new InteractionChannelParticipantContextImpl(version, interactionSid, channelSid, sid);
    };
    instance._version = version;
    instance._solution = {
        interactionSid,
        channelSid
    };
    instance._uri = `/Interactions/${interactionSid}/Channels/${channelSid}/Participants`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["type"] === null || params["type"] === undefined) {
            throw new Error("Required parameter \"params['type']\" missing.");
        }
        if (params["mediaProperties"] === null || params["mediaProperties"] === undefined) {
            throw new Error("Required parameter \"params['mediaProperties']\" missing.");
        }
        let data = {};
        data["Type"] = params["type"];
        data["MediaProperties"] = serialize.object(params["mediaProperties"]);
        if (params["routingProperties"] !== undefined) data["RoutingProperties"] = serialize.object(params["routingProperties"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InteractionChannelParticipantInstance(operationVersion, payload, instance._solution.interactionSid, instance._solution.channelSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InteractionChannelParticipantPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new InteractionChannelParticipantPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class InteractionChannelParticipantPage extends Page_1.default {
    /**
     * Initialize the InteractionChannelParticipantPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of InteractionChannelParticipantInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new InteractionChannelParticipantInstance(this._version, payload, this._solution.interactionSid, this._solution.channelSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InteractionChannelParticipantPage = InteractionChannelParticipantPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/interaction/interactionChannel/interactionTransfer.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InteractionTransferInstance = exports.InteractionTransferContextImpl = void 0;
exports.InteractionTransferListInstance = InteractionTransferListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class InteractionTransferContextImpl {
    constructor(_version, interactionSid, channelSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(interactionSid)) {
            throw new Error("Parameter 'interactionSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(channelSid)) {
            throw new Error("Parameter 'channelSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            interactionSid,
            channelSid,
            sid
        };
        this._uri = `/Interactions/${interactionSid}/Channels/${channelSid}/Transfers/${sid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InteractionTransferInstance(operationVersion, payload, instance._solution.interactionSid, instance._solution.channelSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, headers, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InteractionTransferInstance(operationVersion, payload, instance._solution.interactionSid, instance._solution.channelSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InteractionTransferContextImpl = InteractionTransferContextImpl;
class InteractionTransferInstance {
    constructor(_version, payload, interactionSid, channelSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.instanceSid = payload.instance_sid;
        this.accountSid = payload.account_sid;
        this.interactionSid = payload.interaction_sid;
        this.channelSid = payload.channel_sid;
        this.executionSid = payload.execution_sid;
        this.type = payload.type;
        this.status = payload.status;
        this.from = payload.from;
        this.to = payload.to;
        this.noteSid = payload.note_sid;
        this.summarySid = payload.summary_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            interactionSid,
            channelSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new InteractionTransferContextImpl(this._version, this._solution.interactionSid, this._solution.channelSid, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a InteractionTransferInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed InteractionTransferInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            instanceSid: this.instanceSid,
            accountSid: this.accountSid,
            interactionSid: this.interactionSid,
            channelSid: this.channelSid,
            executionSid: this.executionSid,
            type: this.type,
            status: this.status,
            from: this.from,
            to: this.to,
            noteSid: this.noteSid,
            summarySid: this.summarySid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InteractionTransferInstance = InteractionTransferInstance;
function InteractionTransferListInstance(version, interactionSid, channelSid) {
    if (!(0, utility_1.isValidPathParam)(interactionSid)) {
        throw new Error("Parameter 'interactionSid' is not valid.");
    }
    if (!(0, utility_1.isValidPathParam)(channelSid)) {
        throw new Error("Parameter 'channelSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new InteractionTransferContextImpl(version, interactionSid, channelSid, sid);
    };
    instance._version = version;
    instance._solution = {
        interactionSid,
        channelSid
    };
    instance._uri = `/Interactions/${interactionSid}/Channels/${channelSid}/Transfers`;
    instance.create = function create(params, headers, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InteractionTransferInstance(operationVersion, payload, instance._solution.interactionSid, instance._solution.channelSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/interaction/interactionChannel.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InteractionChannelPage = exports.InteractionChannelInstance = exports.InteractionChannelContextImpl = void 0;
exports.InteractionChannelListInstance = InteractionChannelListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const interactionChannelInvite_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/interaction/interactionChannel/interactionChannelInvite.js [app-rsc] (ecmascript)");
const interactionChannelParticipant_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/interaction/interactionChannel/interactionChannelParticipant.js [app-rsc] (ecmascript)");
const interactionTransfer_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/interaction/interactionChannel/interactionTransfer.js [app-rsc] (ecmascript)");
class InteractionChannelContextImpl {
    constructor(_version, interactionSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(interactionSid)) {
            throw new Error("Parameter 'interactionSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            interactionSid,
            sid
        };
        this._uri = `/Interactions/${interactionSid}/Channels/${sid}`;
    }
    get invites() {
        this._invites = this._invites || (0, interactionChannelInvite_1.InteractionChannelInviteListInstance)(this._version, this._solution.interactionSid, this._solution.sid);
        return this._invites;
    }
    get participants() {
        this._participants = this._participants || (0, interactionChannelParticipant_1.InteractionChannelParticipantListInstance)(this._version, this._solution.interactionSid, this._solution.sid);
        return this._participants;
    }
    get transfers() {
        this._transfers = this._transfers || (0, interactionTransfer_1.InteractionTransferListInstance)(this._version, this._solution.interactionSid, this._solution.sid);
        return this._transfers;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InteractionChannelInstance(operationVersion, payload, instance._solution.interactionSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["status"] === null || params["status"] === undefined) {
            throw new Error("Required parameter \"params['status']\" missing.");
        }
        let data = {};
        data["Status"] = params["status"];
        if (params["routing"] !== undefined) data["Routing"] = serialize.object(params["routing"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InteractionChannelInstance(operationVersion, payload, instance._solution.interactionSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InteractionChannelContextImpl = InteractionChannelContextImpl;
class InteractionChannelInstance {
    constructor(_version, payload, interactionSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.interactionSid = payload.interaction_sid;
        this.type = payload.type;
        this.status = payload.status;
        this.errorCode = deserialize.integer(payload.error_code);
        this.errorMessage = payload.error_message;
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            interactionSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new InteractionChannelContextImpl(this._version, this._solution.interactionSid, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a InteractionChannelInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed InteractionChannelInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the invites.
     */ invites() {
        return this._proxy.invites;
    }
    /**
     * Access the participants.
     */ participants() {
        return this._proxy.participants;
    }
    /**
     * Access the transfers.
     */ transfers() {
        return this._proxy.transfers;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            interactionSid: this.interactionSid,
            type: this.type,
            status: this.status,
            errorCode: this.errorCode,
            errorMessage: this.errorMessage,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InteractionChannelInstance = InteractionChannelInstance;
function InteractionChannelListInstance(version, interactionSid) {
    if (!(0, utility_1.isValidPathParam)(interactionSid)) {
        throw new Error("Parameter 'interactionSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new InteractionChannelContextImpl(version, interactionSid, sid);
    };
    instance._version = version;
    instance._solution = {
        interactionSid
    };
    instance._uri = `/Interactions/${interactionSid}/Channels`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InteractionChannelPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new InteractionChannelPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class InteractionChannelPage extends Page_1.default {
    /**
     * Initialize the InteractionChannelPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of InteractionChannelInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new InteractionChannelInstance(this._version, payload, this._solution.interactionSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InteractionChannelPage = InteractionChannelPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/interaction.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InteractionInstance = exports.InteractionContextImpl = void 0;
exports.InteractionListInstance = InteractionListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const interactionChannel_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/interaction/interactionChannel.js [app-rsc] (ecmascript)");
class InteractionContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Interactions/${sid}`;
    }
    get channels() {
        this._channels = this._channels || (0, interactionChannel_1.InteractionChannelListInstance)(this._version, this._solution.sid);
        return this._channels;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InteractionInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["webhookTtid"] !== undefined) data["WebhookTtid"] = params["webhookTtid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InteractionInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InteractionContextImpl = InteractionContextImpl;
class InteractionInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.channel = payload.channel;
        this.routing = payload.routing;
        this.url = payload.url;
        this.links = payload.links;
        this.interactionContextSid = payload.interaction_context_sid;
        this.webhookTtid = payload.webhook_ttid;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new InteractionContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a InteractionInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed InteractionInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the channels.
     */ channels() {
        return this._proxy.channels;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            channel: this.channel,
            routing: this.routing,
            url: this.url,
            links: this.links,
            interactionContextSid: this.interactionContextSid,
            webhookTtid: this.webhookTtid
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InteractionInstance = InteractionInstance;
function InteractionListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new InteractionContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Interactions`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["channel"] === null || params["channel"] === undefined) {
            throw new Error("Required parameter \"params['channel']\" missing.");
        }
        let data = {};
        data["Channel"] = serialize.object(params["channel"]);
        if (params["routing"] !== undefined) data["Routing"] = serialize.object(params["routing"]);
        if (params["interactionContextSid"] !== undefined) data["InteractionContextSid"] = params["interactionContextSid"];
        if (params["webhookTtid"] !== undefined) data["WebhookTtid"] = params["webhookTtid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new InteractionInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/plugin/pluginVersions.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PluginVersionsPage = exports.PluginVersionsInstance = exports.PluginVersionsContextImpl = void 0;
exports.PluginVersionsListInstance = PluginVersionsListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class PluginVersionsContextImpl {
    constructor(_version, pluginSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(pluginSid)) {
            throw new Error("Parameter 'pluginSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            pluginSid,
            sid
        };
        this._uri = `/PluginService/Plugins/${pluginSid}/Versions/${sid}`;
    }
    fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["flexMetadata"] !== undefined) headers["Flex-Metadata"] = params["flexMetadata"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PluginVersionsInstance(operationVersion, payload, instance._solution.pluginSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PluginVersionsContextImpl = PluginVersionsContextImpl;
class PluginVersionsInstance {
    constructor(_version, payload, pluginSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.pluginSid = payload.plugin_sid;
        this.accountSid = payload.account_sid;
        this.version = payload.version;
        this.pluginUrl = payload.plugin_url;
        this.changelog = payload.changelog;
        this._private = payload.private;
        this.archived = payload.archived;
        this.validated = payload.validated;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.url = payload.url;
        this._solution = {
            pluginSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new PluginVersionsContextImpl(this._version, this._solution.pluginSid, this._solution.sid);
        return this._context;
    }
    fetch(params, callback) {
        return this._proxy.fetch(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            pluginSid: this.pluginSid,
            accountSid: this.accountSid,
            version: this.version,
            pluginUrl: this.pluginUrl,
            changelog: this.changelog,
            _private: this._private,
            archived: this.archived,
            validated: this.validated,
            dateCreated: this.dateCreated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PluginVersionsInstance = PluginVersionsInstance;
function PluginVersionsListInstance(version, pluginSid) {
    if (!(0, utility_1.isValidPathParam)(pluginSid)) {
        throw new Error("Parameter 'pluginSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new PluginVersionsContextImpl(version, pluginSid, sid);
    };
    instance._version = version;
    instance._solution = {
        pluginSid
    };
    instance._uri = `/PluginService/Plugins/${pluginSid}/Versions`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["version"] === null || params["version"] === undefined) {
            throw new Error("Required parameter \"params['version']\" missing.");
        }
        if (params["pluginUrl"] === null || params["pluginUrl"] === undefined) {
            throw new Error("Required parameter \"params['pluginUrl']\" missing.");
        }
        let data = {};
        data["Version"] = params["version"];
        data["PluginUrl"] = params["pluginUrl"];
        if (params["changelog"] !== undefined) data["Changelog"] = params["changelog"];
        if (params["private"] !== undefined) data["Private"] = serialize.bool(params["private"]);
        if (params["cliVersion"] !== undefined) data["CliVersion"] = params["cliVersion"];
        if (params["validateStatus"] !== undefined) data["ValidateStatus"] = params["validateStatus"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        if (params["flexMetadata"] !== undefined) headers["Flex-Metadata"] = params["flexMetadata"];
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PluginVersionsInstance(operationVersion, payload, instance._solution.pluginSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["flexMetadata"] !== undefined) headers["Flex-Metadata"] = params["flexMetadata"];
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PluginVersionsPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new PluginVersionsPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class PluginVersionsPage extends Page_1.default {
    /**
     * Initialize the PluginVersionsPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of PluginVersionsInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new PluginVersionsInstance(this._version, payload, this._solution.pluginSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PluginVersionsPage = PluginVersionsPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/plugin.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PluginPage = exports.PluginInstance = exports.PluginContextImpl = void 0;
exports.PluginListInstance = PluginListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const pluginVersions_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/plugin/pluginVersions.js [app-rsc] (ecmascript)");
class PluginContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/PluginService/Plugins/${sid}`;
    }
    get pluginVersions() {
        this._pluginVersions = this._pluginVersions || (0, pluginVersions_1.PluginVersionsListInstance)(this._version, this._solution.sid);
        return this._pluginVersions;
    }
    fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["flexMetadata"] !== undefined) headers["Flex-Metadata"] = params["flexMetadata"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PluginInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["description"] !== undefined) data["Description"] = params["description"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        if (params["flexMetadata"] !== undefined) headers["Flex-Metadata"] = params["flexMetadata"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PluginInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PluginContextImpl = PluginContextImpl;
class PluginInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.uniqueName = payload.unique_name;
        this.friendlyName = payload.friendly_name;
        this.description = payload.description;
        this.archived = payload.archived;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new PluginContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    fetch(params, callback) {
        return this._proxy.fetch(params, callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the pluginVersions.
     */ pluginVersions() {
        return this._proxy.pluginVersions;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            uniqueName: this.uniqueName,
            friendlyName: this.friendlyName,
            description: this.description,
            archived: this.archived,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PluginInstance = PluginInstance;
function PluginListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new PluginContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/PluginService/Plugins`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["uniqueName"] === null || params["uniqueName"] === undefined) {
            throw new Error("Required parameter \"params['uniqueName']\" missing.");
        }
        let data = {};
        data["UniqueName"] = params["uniqueName"];
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["description"] !== undefined) data["Description"] = params["description"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        if (params["flexMetadata"] !== undefined) headers["Flex-Metadata"] = params["flexMetadata"];
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PluginInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["flexMetadata"] !== undefined) headers["Flex-Metadata"] = params["flexMetadata"];
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PluginPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new PluginPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class PluginPage extends Page_1.default {
    /**
     * Initialize the PluginPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of PluginInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new PluginInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PluginPage = PluginPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/pluginArchive.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PluginArchiveInstance = exports.PluginArchiveContextImpl = void 0;
exports.PluginArchiveListInstance = PluginArchiveListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class PluginArchiveContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/PluginService/Plugins/${sid}/Archive`;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["flexMetadata"] !== undefined) headers["Flex-Metadata"] = params["flexMetadata"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PluginArchiveInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PluginArchiveContextImpl = PluginArchiveContextImpl;
class PluginArchiveInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.uniqueName = payload.unique_name;
        this.friendlyName = payload.friendly_name;
        this.description = payload.description;
        this.archived = payload.archived;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new PluginArchiveContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            uniqueName: this.uniqueName,
            friendlyName: this.friendlyName,
            description: this.description,
            archived: this.archived,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PluginArchiveInstance = PluginArchiveInstance;
function PluginArchiveListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new PluginArchiveContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/pluginConfiguration/configuredPlugin.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ConfiguredPluginPage = exports.ConfiguredPluginInstance = exports.ConfiguredPluginContextImpl = void 0;
exports.ConfiguredPluginListInstance = ConfiguredPluginListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class ConfiguredPluginContextImpl {
    constructor(_version, configurationSid, pluginSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(configurationSid)) {
            throw new Error("Parameter 'configurationSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(pluginSid)) {
            throw new Error("Parameter 'pluginSid' is not valid.");
        }
        this._solution = {
            configurationSid,
            pluginSid
        };
        this._uri = `/PluginService/Configurations/${configurationSid}/Plugins/${pluginSid}`;
    }
    fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["flexMetadata"] !== undefined) headers["Flex-Metadata"] = params["flexMetadata"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ConfiguredPluginInstance(operationVersion, payload, instance._solution.configurationSid, instance._solution.pluginSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ConfiguredPluginContextImpl = ConfiguredPluginContextImpl;
class ConfiguredPluginInstance {
    constructor(_version, payload, configurationSid, pluginSid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.configurationSid = payload.configuration_sid;
        this.pluginSid = payload.plugin_sid;
        this.pluginVersionSid = payload.plugin_version_sid;
        this.phase = deserialize.integer(payload.phase);
        this.pluginUrl = payload.plugin_url;
        this.uniqueName = payload.unique_name;
        this.friendlyName = payload.friendly_name;
        this.description = payload.description;
        this.pluginArchived = payload.plugin_archived;
        this.version = payload.version;
        this.changelog = payload.changelog;
        this.pluginVersionArchived = payload.plugin_version_archived;
        this._private = payload.private;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.url = payload.url;
        this._solution = {
            configurationSid,
            pluginSid: pluginSid || this.pluginSid
        };
    }
    get _proxy() {
        this._context = this._context || new ConfiguredPluginContextImpl(this._version, this._solution.configurationSid, this._solution.pluginSid);
        return this._context;
    }
    fetch(params, callback) {
        return this._proxy.fetch(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            configurationSid: this.configurationSid,
            pluginSid: this.pluginSid,
            pluginVersionSid: this.pluginVersionSid,
            phase: this.phase,
            pluginUrl: this.pluginUrl,
            uniqueName: this.uniqueName,
            friendlyName: this.friendlyName,
            description: this.description,
            pluginArchived: this.pluginArchived,
            version: this.version,
            changelog: this.changelog,
            pluginVersionArchived: this.pluginVersionArchived,
            _private: this._private,
            dateCreated: this.dateCreated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ConfiguredPluginInstance = ConfiguredPluginInstance;
function ConfiguredPluginListInstance(version, configurationSid) {
    if (!(0, utility_1.isValidPathParam)(configurationSid)) {
        throw new Error("Parameter 'configurationSid' is not valid.");
    }
    const instance = (pluginSid)=>instance.get(pluginSid);
    instance.get = function get(pluginSid) {
        return new ConfiguredPluginContextImpl(version, configurationSid, pluginSid);
    };
    instance._version = version;
    instance._solution = {
        configurationSid
    };
    instance._uri = `/PluginService/Configurations/${configurationSid}/Plugins`;
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["flexMetadata"] !== undefined) headers["Flex-Metadata"] = params["flexMetadata"];
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ConfiguredPluginPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ConfiguredPluginPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ConfiguredPluginPage extends Page_1.default {
    /**
     * Initialize the ConfiguredPluginPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ConfiguredPluginInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ConfiguredPluginInstance(this._version, payload, this._solution.configurationSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ConfiguredPluginPage = ConfiguredPluginPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/pluginConfiguration.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PluginConfigurationPage = exports.PluginConfigurationInstance = exports.PluginConfigurationContextImpl = void 0;
exports.PluginConfigurationListInstance = PluginConfigurationListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const configuredPlugin_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/pluginConfiguration/configuredPlugin.js [app-rsc] (ecmascript)");
class PluginConfigurationContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/PluginService/Configurations/${sid}`;
    }
    get plugins() {
        this._plugins = this._plugins || (0, configuredPlugin_1.ConfiguredPluginListInstance)(this._version, this._solution.sid);
        return this._plugins;
    }
    fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["flexMetadata"] !== undefined) headers["Flex-Metadata"] = params["flexMetadata"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PluginConfigurationInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PluginConfigurationContextImpl = PluginConfigurationContextImpl;
class PluginConfigurationInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.name = payload.name;
        this.description = payload.description;
        this.archived = payload.archived;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.url = payload.url;
        this.links = payload.links;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new PluginConfigurationContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    fetch(params, callback) {
        return this._proxy.fetch(params, callback);
    }
    /**
     * Access the plugins.
     */ plugins() {
        return this._proxy.plugins;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            name: this.name,
            description: this.description,
            archived: this.archived,
            dateCreated: this.dateCreated,
            url: this.url,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PluginConfigurationInstance = PluginConfigurationInstance;
function PluginConfigurationListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new PluginConfigurationContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/PluginService/Configurations`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["name"] === null || params["name"] === undefined) {
            throw new Error("Required parameter \"params['name']\" missing.");
        }
        let data = {};
        data["Name"] = params["name"];
        if (params["plugins"] !== undefined) data["Plugins"] = serialize.map(params["plugins"], (e)=>serialize.object(e));
        if (params["description"] !== undefined) data["Description"] = params["description"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        if (params["flexMetadata"] !== undefined) headers["Flex-Metadata"] = params["flexMetadata"];
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PluginConfigurationInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["flexMetadata"] !== undefined) headers["Flex-Metadata"] = params["flexMetadata"];
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PluginConfigurationPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new PluginConfigurationPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class PluginConfigurationPage extends Page_1.default {
    /**
     * Initialize the PluginConfigurationPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of PluginConfigurationInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new PluginConfigurationInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PluginConfigurationPage = PluginConfigurationPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/pluginConfigurationArchive.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PluginConfigurationArchiveInstance = exports.PluginConfigurationArchiveContextImpl = void 0;
exports.PluginConfigurationArchiveListInstance = PluginConfigurationArchiveListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class PluginConfigurationArchiveContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/PluginService/Configurations/${sid}/Archive`;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["flexMetadata"] !== undefined) headers["Flex-Metadata"] = params["flexMetadata"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PluginConfigurationArchiveInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PluginConfigurationArchiveContextImpl = PluginConfigurationArchiveContextImpl;
class PluginConfigurationArchiveInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.name = payload.name;
        this.description = payload.description;
        this.archived = payload.archived;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new PluginConfigurationArchiveContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            name: this.name,
            description: this.description,
            archived: this.archived,
            dateCreated: this.dateCreated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PluginConfigurationArchiveInstance = PluginConfigurationArchiveInstance;
function PluginConfigurationArchiveListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new PluginConfigurationArchiveContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/pluginRelease.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PluginReleasePage = exports.PluginReleaseInstance = exports.PluginReleaseContextImpl = void 0;
exports.PluginReleaseListInstance = PluginReleaseListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class PluginReleaseContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/PluginService/Releases/${sid}`;
    }
    fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["flexMetadata"] !== undefined) headers["Flex-Metadata"] = params["flexMetadata"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PluginReleaseInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PluginReleaseContextImpl = PluginReleaseContextImpl;
class PluginReleaseInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.configurationSid = payload.configuration_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new PluginReleaseContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    fetch(params, callback) {
        return this._proxy.fetch(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            configurationSid: this.configurationSid,
            dateCreated: this.dateCreated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PluginReleaseInstance = PluginReleaseInstance;
function PluginReleaseListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new PluginReleaseContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/PluginService/Releases`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["configurationId"] === null || params["configurationId"] === undefined) {
            throw new Error("Required parameter \"params['configurationId']\" missing.");
        }
        let data = {};
        data["ConfigurationId"] = params["configurationId"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        if (params["flexMetadata"] !== undefined) headers["Flex-Metadata"] = params["flexMetadata"];
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PluginReleaseInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["flexMetadata"] !== undefined) headers["Flex-Metadata"] = params["flexMetadata"];
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PluginReleasePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new PluginReleasePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class PluginReleasePage extends Page_1.default {
    /**
     * Initialize the PluginReleasePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of PluginReleaseInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new PluginReleaseInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PluginReleasePage = PluginReleasePage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/pluginVersionArchive.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PluginVersionArchiveInstance = exports.PluginVersionArchiveContextImpl = void 0;
exports.PluginVersionArchiveListInstance = PluginVersionArchiveListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class PluginVersionArchiveContextImpl {
    constructor(_version, pluginSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(pluginSid)) {
            throw new Error("Parameter 'pluginSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            pluginSid,
            sid
        };
        this._uri = `/PluginService/Plugins/${pluginSid}/Versions/${sid}/Archive`;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        const headers = {};
        headers["Accept"] = "application/json";
        if (params["flexMetadata"] !== undefined) headers["Flex-Metadata"] = params["flexMetadata"];
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PluginVersionArchiveInstance(operationVersion, payload, instance._solution.pluginSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PluginVersionArchiveContextImpl = PluginVersionArchiveContextImpl;
class PluginVersionArchiveInstance {
    constructor(_version, payload, pluginSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.pluginSid = payload.plugin_sid;
        this.accountSid = payload.account_sid;
        this.version = payload.version;
        this.pluginUrl = payload.plugin_url;
        this.changelog = payload.changelog;
        this._private = payload.private;
        this.archived = payload.archived;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.url = payload.url;
        this._solution = {
            pluginSid: pluginSid || this.pluginSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new PluginVersionArchiveContextImpl(this._version, this._solution.pluginSid, this._solution.sid);
        return this._context;
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            pluginSid: this.pluginSid,
            accountSid: this.accountSid,
            version: this.version,
            pluginUrl: this.pluginUrl,
            changelog: this.changelog,
            _private: this._private,
            archived: this.archived,
            dateCreated: this.dateCreated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PluginVersionArchiveInstance = PluginVersionArchiveInstance;
function PluginVersionArchiveListInstance(version) {
    const instance = (pluginSid, sid)=>instance.get(pluginSid, sid);
    instance.get = function get(pluginSid, sid) {
        return new PluginVersionArchiveContextImpl(version, pluginSid, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/provisioningStatus.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ProvisioningStatusInstance = exports.ProvisioningStatusContextImpl = void 0;
exports.ProvisioningStatusListInstance = ProvisioningStatusListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
class ProvisioningStatusContextImpl {
    constructor(_version){
        this._version = _version;
        this._solution = {};
        this._uri = `/account/provision/status`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ProvisioningStatusInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ProvisioningStatusContextImpl = ProvisioningStatusContextImpl;
class ProvisioningStatusInstance {
    constructor(_version, payload){
        this._version = _version;
        this.status = payload.status;
        this.url = payload.url;
        this._solution = {};
    }
    get _proxy() {
        this._context = this._context || new ProvisioningStatusContextImpl(this._version);
        return this._context;
    }
    /**
     * Fetch a ProvisioningStatusInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ProvisioningStatusInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            status: this.status,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ProvisioningStatusInstance = ProvisioningStatusInstance;
function ProvisioningStatusListInstance(version) {
    const instance = ()=>instance.get();
    instance.get = function get() {
        return new ProvisioningStatusContextImpl(version);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/webChannel.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WebChannelPage = exports.WebChannelInstance = exports.WebChannelContextImpl = void 0;
exports.WebChannelListInstance = WebChannelListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class WebChannelContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/WebChannels/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new WebChannelInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["chatStatus"] !== undefined) data["ChatStatus"] = params["chatStatus"];
        if (params["postEngagementData"] !== undefined) data["PostEngagementData"] = params["postEngagementData"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new WebChannelInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.WebChannelContextImpl = WebChannelContextImpl;
class WebChannelInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.flexFlowSid = payload.flex_flow_sid;
        this.sid = payload.sid;
        this.url = payload.url;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new WebChannelContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a WebChannelInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a WebChannelInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed WebChannelInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            flexFlowSid: this.flexFlowSid,
            sid: this.sid,
            url: this.url,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.WebChannelInstance = WebChannelInstance;
function WebChannelListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new WebChannelContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/WebChannels`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["flexFlowSid"] === null || params["flexFlowSid"] === undefined) {
            throw new Error("Required parameter \"params['flexFlowSid']\" missing.");
        }
        if (params["identity"] === null || params["identity"] === undefined) {
            throw new Error("Required parameter \"params['identity']\" missing.");
        }
        if (params["customerFriendlyName"] === null || params["customerFriendlyName"] === undefined) {
            throw new Error("Required parameter \"params['customerFriendlyName']\" missing.");
        }
        if (params["chatFriendlyName"] === null || params["chatFriendlyName"] === undefined) {
            throw new Error("Required parameter \"params['chatFriendlyName']\" missing.");
        }
        let data = {};
        data["FlexFlowSid"] = params["flexFlowSid"];
        data["Identity"] = params["identity"];
        data["CustomerFriendlyName"] = params["customerFriendlyName"];
        data["ChatFriendlyName"] = params["chatFriendlyName"];
        if (params["chatUniqueName"] !== undefined) data["ChatUniqueName"] = params["chatUniqueName"];
        if (params["preEngagementData"] !== undefined) data["PreEngagementData"] = params["preEngagementData"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new WebChannelInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new WebChannelPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new WebChannelPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class WebChannelPage extends Page_1.default {
    /**
     * Initialize the WebChannelPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of WebChannelInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new WebChannelInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.WebChannelPage = WebChannelPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const assessments_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/assessments.js [app-rsc] (ecmascript)");
const channel_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/channel.js [app-rsc] (ecmascript)");
const configuration_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/configuration.js [app-rsc] (ecmascript)");
const flexFlow_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/flexFlow.js [app-rsc] (ecmascript)");
const insightsAssessmentsComment_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/insightsAssessmentsComment.js [app-rsc] (ecmascript)");
const insightsConversations_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/insightsConversations.js [app-rsc] (ecmascript)");
const insightsQuestionnaires_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/insightsQuestionnaires.js [app-rsc] (ecmascript)");
const insightsQuestionnairesCategory_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/insightsQuestionnairesCategory.js [app-rsc] (ecmascript)");
const insightsQuestionnairesQuestion_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/insightsQuestionnairesQuestion.js [app-rsc] (ecmascript)");
const insightsSegments_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/insightsSegments.js [app-rsc] (ecmascript)");
const insightsSession_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/insightsSession.js [app-rsc] (ecmascript)");
const insightsSettingsAnswerSets_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/insightsSettingsAnswerSets.js [app-rsc] (ecmascript)");
const insightsSettingsComment_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/insightsSettingsComment.js [app-rsc] (ecmascript)");
const insightsUserRoles_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/insightsUserRoles.js [app-rsc] (ecmascript)");
const interaction_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/interaction.js [app-rsc] (ecmascript)");
const plugin_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/plugin.js [app-rsc] (ecmascript)");
const pluginArchive_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/pluginArchive.js [app-rsc] (ecmascript)");
const pluginConfiguration_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/pluginConfiguration.js [app-rsc] (ecmascript)");
const pluginConfigurationArchive_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/pluginConfigurationArchive.js [app-rsc] (ecmascript)");
const pluginRelease_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/pluginRelease.js [app-rsc] (ecmascript)");
const pluginVersionArchive_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/pluginVersionArchive.js [app-rsc] (ecmascript)");
const provisioningStatus_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/provisioningStatus.js [app-rsc] (ecmascript)");
const webChannel_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v1/webChannel.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of FlexApi
     *
     * @param domain - The Twilio (Twilio.FlexApi) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for assessments resource */ get assessments() {
        this._assessments = this._assessments || (0, assessments_1.AssessmentsListInstance)(this);
        return this._assessments;
    }
    /** Getter for channel resource */ get channel() {
        this._channel = this._channel || (0, channel_1.ChannelListInstance)(this);
        return this._channel;
    }
    /** Getter for configuration resource */ get configuration() {
        this._configuration = this._configuration || (0, configuration_1.ConfigurationListInstance)(this);
        return this._configuration;
    }
    /** Getter for flexFlow resource */ get flexFlow() {
        this._flexFlow = this._flexFlow || (0, flexFlow_1.FlexFlowListInstance)(this);
        return this._flexFlow;
    }
    /** Getter for insightsAssessmentsComment resource */ get insightsAssessmentsComment() {
        this._insightsAssessmentsComment = this._insightsAssessmentsComment || (0, insightsAssessmentsComment_1.InsightsAssessmentsCommentListInstance)(this);
        return this._insightsAssessmentsComment;
    }
    /** Getter for insightsConversations resource */ get insightsConversations() {
        this._insightsConversations = this._insightsConversations || (0, insightsConversations_1.InsightsConversationsListInstance)(this);
        return this._insightsConversations;
    }
    /** Getter for insightsQuestionnaires resource */ get insightsQuestionnaires() {
        this._insightsQuestionnaires = this._insightsQuestionnaires || (0, insightsQuestionnaires_1.InsightsQuestionnairesListInstance)(this);
        return this._insightsQuestionnaires;
    }
    /** Getter for insightsQuestionnairesCategory resource */ get insightsQuestionnairesCategory() {
        this._insightsQuestionnairesCategory = this._insightsQuestionnairesCategory || (0, insightsQuestionnairesCategory_1.InsightsQuestionnairesCategoryListInstance)(this);
        return this._insightsQuestionnairesCategory;
    }
    /** Getter for insightsQuestionnairesQuestion resource */ get insightsQuestionnairesQuestion() {
        this._insightsQuestionnairesQuestion = this._insightsQuestionnairesQuestion || (0, insightsQuestionnairesQuestion_1.InsightsQuestionnairesQuestionListInstance)(this);
        return this._insightsQuestionnairesQuestion;
    }
    /** Getter for insightsSegments resource */ get insightsSegments() {
        this._insightsSegments = this._insightsSegments || (0, insightsSegments_1.InsightsSegmentsListInstance)(this);
        return this._insightsSegments;
    }
    /** Getter for insightsSession resource */ get insightsSession() {
        this._insightsSession = this._insightsSession || (0, insightsSession_1.InsightsSessionListInstance)(this);
        return this._insightsSession;
    }
    /** Getter for insightsSettingsAnswerSets resource */ get insightsSettingsAnswerSets() {
        this._insightsSettingsAnswerSets = this._insightsSettingsAnswerSets || (0, insightsSettingsAnswerSets_1.InsightsSettingsAnswerSetsListInstance)(this);
        return this._insightsSettingsAnswerSets;
    }
    /** Getter for insightsSettingsComment resource */ get insightsSettingsComment() {
        this._insightsSettingsComment = this._insightsSettingsComment || (0, insightsSettingsComment_1.InsightsSettingsCommentListInstance)(this);
        return this._insightsSettingsComment;
    }
    /** Getter for insightsUserRoles resource */ get insightsUserRoles() {
        this._insightsUserRoles = this._insightsUserRoles || (0, insightsUserRoles_1.InsightsUserRolesListInstance)(this);
        return this._insightsUserRoles;
    }
    /** Getter for interaction resource */ get interaction() {
        this._interaction = this._interaction || (0, interaction_1.InteractionListInstance)(this);
        return this._interaction;
    }
    /** Getter for plugins resource */ get plugins() {
        this._plugins = this._plugins || (0, plugin_1.PluginListInstance)(this);
        return this._plugins;
    }
    /** Getter for pluginArchive resource */ get pluginArchive() {
        this._pluginArchive = this._pluginArchive || (0, pluginArchive_1.PluginArchiveListInstance)(this);
        return this._pluginArchive;
    }
    /** Getter for pluginConfigurations resource */ get pluginConfigurations() {
        this._pluginConfigurations = this._pluginConfigurations || (0, pluginConfiguration_1.PluginConfigurationListInstance)(this);
        return this._pluginConfigurations;
    }
    /** Getter for pluginConfigurationArchive resource */ get pluginConfigurationArchive() {
        this._pluginConfigurationArchive = this._pluginConfigurationArchive || (0, pluginConfigurationArchive_1.PluginConfigurationArchiveListInstance)(this);
        return this._pluginConfigurationArchive;
    }
    /** Getter for pluginReleases resource */ get pluginReleases() {
        this._pluginReleases = this._pluginReleases || (0, pluginRelease_1.PluginReleaseListInstance)(this);
        return this._pluginReleases;
    }
    /** Getter for pluginVersionArchive resource */ get pluginVersionArchive() {
        this._pluginVersionArchive = this._pluginVersionArchive || (0, pluginVersionArchive_1.PluginVersionArchiveListInstance)(this);
        return this._pluginVersionArchive;
    }
    /** Getter for provisioningStatus resource */ get provisioningStatus() {
        this._provisioningStatus = this._provisioningStatus || (0, provisioningStatus_1.ProvisioningStatusListInstance)(this);
        return this._provisioningStatus;
    }
    /** Getter for webChannel resource */ get webChannel() {
        this._webChannel = this._webChannel || (0, webChannel_1.WebChannelListInstance)(this);
        return this._webChannel;
    }
}
exports.default = V1;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v2/flexUser.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FlexUserInstance = exports.FlexUserContextImpl = void 0;
exports.FlexUserListInstance = FlexUserListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class FlexUserContextImpl {
    constructor(_version, instanceSid, flexUserSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(instanceSid)) {
            throw new Error("Parameter 'instanceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(flexUserSid)) {
            throw new Error("Parameter 'flexUserSid' is not valid.");
        }
        this._solution = {
            instanceSid,
            flexUserSid
        };
        this._uri = `/Instances/${instanceSid}/Users/${flexUserSid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new FlexUserInstance(operationVersion, payload, instance._solution.instanceSid, instance._solution.flexUserSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["email"] !== undefined) data["Email"] = params["email"];
        if (params["userSid"] !== undefined) data["UserSid"] = params["userSid"];
        if (params["locale"] !== undefined) data["Locale"] = params["locale"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new FlexUserInstance(operationVersion, payload, instance._solution.instanceSid, instance._solution.flexUserSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.FlexUserContextImpl = FlexUserContextImpl;
class FlexUserInstance {
    constructor(_version, payload, instanceSid, flexUserSid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.instanceSid = payload.instance_sid;
        this.userSid = payload.user_sid;
        this.flexUserSid = payload.flex_user_sid;
        this.workerSid = payload.worker_sid;
        this.workspaceSid = payload.workspace_sid;
        this.flexTeamSid = payload.flex_team_sid;
        this.username = payload.username;
        this.email = payload.email;
        this.locale = payload.locale;
        this.roles = payload.roles;
        this.createdDate = deserialize.iso8601DateTime(payload.created_date);
        this.updatedDate = deserialize.iso8601DateTime(payload.updated_date);
        this.version = deserialize.integer(payload.version);
        this.url = payload.url;
        this._solution = {
            instanceSid: instanceSid || this.instanceSid,
            flexUserSid: flexUserSid || this.flexUserSid
        };
    }
    get _proxy() {
        this._context = this._context || new FlexUserContextImpl(this._version, this._solution.instanceSid, this._solution.flexUserSid);
        return this._context;
    }
    /**
     * Fetch a FlexUserInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed FlexUserInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            instanceSid: this.instanceSid,
            userSid: this.userSid,
            flexUserSid: this.flexUserSid,
            workerSid: this.workerSid,
            workspaceSid: this.workspaceSid,
            flexTeamSid: this.flexTeamSid,
            username: this.username,
            email: this.email,
            locale: this.locale,
            roles: this.roles,
            createdDate: this.createdDate,
            updatedDate: this.updatedDate,
            version: this.version,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.FlexUserInstance = FlexUserInstance;
function FlexUserListInstance(version) {
    const instance = (instanceSid, flexUserSid)=>instance.get(instanceSid, flexUserSid);
    instance.get = function get(instanceSid, flexUserSid) {
        return new FlexUserContextImpl(version, instanceSid, flexUserSid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v2/webChannels.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WebChannelsInstance = void 0;
exports.WebChannelsListInstance = WebChannelsListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function WebChannelsListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/WebChats`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["addressSid"] === null || params["addressSid"] === undefined) {
            throw new Error("Required parameter \"params['addressSid']\" missing.");
        }
        let data = {};
        data["AddressSid"] = params["addressSid"];
        if (params["chatFriendlyName"] !== undefined) data["ChatFriendlyName"] = params["chatFriendlyName"];
        if (params["customerFriendlyName"] !== undefined) data["CustomerFriendlyName"] = params["customerFriendlyName"];
        if (params["preEngagementData"] !== undefined) data["PreEngagementData"] = params["preEngagementData"];
        if (params["identity"] !== undefined) data["Identity"] = params["identity"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        if (params["uiVersion"] !== undefined) headers["Ui-Version"] = params["uiVersion"];
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new WebChannelsInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class WebChannelsInstance {
    constructor(_version, payload){
        this._version = _version;
        this.conversationSid = payload.conversation_sid;
        this.identity = payload.identity;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            conversationSid: this.conversationSid,
            identity: this.identity
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.WebChannelsInstance = WebChannelsInstance;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/V2.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const flexUser_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v2/flexUser.js [app-rsc] (ecmascript)");
const webChannels_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/flexApi/v2/webChannels.js [app-rsc] (ecmascript)");
class V2 extends Version_1.default {
    /**
     * Initialize the V2 version of FlexApi
     *
     * @param domain - The Twilio (Twilio.FlexApi) domain
     */ constructor(domain){
        super(domain, "v2");
    }
    /** Getter for flexUser resource */ get flexUser() {
        this._flexUser = this._flexUser || (0, flexUser_1.FlexUserListInstance)(this);
        return this._flexUser;
    }
    /** Getter for webChannels resource */ get webChannels() {
        this._webChannels = this._webChannels || (0, webChannels_1.WebChannelsListInstance)(this);
        return this._webChannels;
    }
}
exports.default = V2;
}),
];

//# sourceMappingURL=3ac84_twilio_lib_rest_flexApi_13da8463._.js.map