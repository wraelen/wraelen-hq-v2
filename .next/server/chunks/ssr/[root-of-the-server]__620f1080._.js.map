{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/components/ui/progress.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const Progress = registerClientReference(\n    function() { throw new Error(\"Attempted to call Progress() from the server but Progress is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/progress.tsx <module evaluation>\",\n    \"Progress\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,WAAW,IAAA,udAAuB,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,gEACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/components/ui/progress.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const Progress = registerClientReference(\n    function() { throw new Error(\"Attempted to call Progress() from the server but Progress is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/progress.tsx\",\n    \"Progress\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,WAAW,IAAA,udAAuB,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAgO,GAC7P,4CACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/lib/actions.ts"],"sourcesContent":["'use server'; // Logic: Marks as server-only (no client bundle bloat – optimizes for internal app with leads/calls)\nimport { PrismaClient } from '@prisma/client';  // Your DB client (async-safe in actions)\nimport { createServerClient } from '@supabase/ssr'; // SSR package (server-aware – auto-handles cookies via proxy; middleware refreshes post-redirect)\nimport { cookies } from 'next/headers'; // Next utility (dynamic read for session check – set ignored in actions, as middleware handles)\nimport { redirect } from 'next/navigation'; // Server redirect (reliable – no client hacks; best for post-auth flow to dashboard quests)\nimport Papa from 'papaparse'; // Logic: CSV parser (handles headers, errors – best for Propstream exports)\nimport Twilio from 'twilio'; // Logic: Twilio SDK for outbound calls (inexpensive, reliable integration)\nimport { z } from 'zod';  // Validation (type-safe inputs – prevents junk data in DB; no-brainer for prod)\nimport crypto from 'crypto';  // Built-in hash (no extra deps – for address_hash dedup)\nimport type { Database } from '../types/database.types'; // Types (autocompletes e.g., session.user.id for Prisma sync – now fixed via your gen)\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!; // Logic: Required env (fail-fast if missing – matches middleware guard)\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\nconst prisma = new PrismaClient();  // Global instance (efficient in Next.js actions – auto-closes; push back: Cache in lib/prisma.ts for hot reloads if issues)\n\nconst twilioClient = Twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN); // Logic: Init Twilio (guard env in prod)\n\nconst importSchema = z.object({\n  source: z.literal('propstream'), // Logic: Locked to Propstream for now (expand later)\n});  // Logic: Zod for form (file handled separately)\n\n// Action: Sign in (logic: Basic stub – expand with your original zod/email/password validation; centralized for type-safety)\nexport async function signInAction(formData: FormData) {\n  const email = formData.get('email')?.toString() ?? '';\n  const password = formData.get('password')?.toString() ?? '';\n  // ... (add your validation/error returns here; e.g., zod schema for email/password)\n  const cookieStore = cookies();\n  const supabase = createServerClient<Database>(supabaseUrl, supabaseAnonKey, {\n    cookies: {\n      getAll: () => cookieStore.getAll(),\n      setAll: (cookiesToSet) => { try { cookiesToSet.forEach(({ name, value, options }) => cookieStore.set(name, value, options)); } catch {} },\n    },\n  });\n  const { error } = await supabase.auth.signInWithPassword({ email, password });\n  if (error) {\n    return { error: error.message };\n  }\n  redirect('/dashboard'); // Logic: Post-login to HQ (quests await!)\n}\n\n// Action: Sign out (logic: Centralized mutation – avoids serialization issues in layout; redirects to signin)\nexport async function signOutAction() {\n  const cookieStore = cookies();\n  const supabase = createServerClient<Database>(supabaseUrl, supabaseAnonKey, {\n    cookies: {\n      getAll: () => cookieStore.getAll(),\n      setAll: (cookiesToSet) => { try { cookiesToSet.forEach(({ name, value, options }) => cookieStore.set(name, value, options)); } catch {} },\n    },\n  });\n  await supabase.auth.signOut(); // Logic: Clears session (middleware will redirect unauthed requests)\n  redirect('/auth/signin'); // Logic: Post-signout flow (back to login – update to '/' if public landing needed)\n}\n\n// Action: Import from Propstream CSV (logic: Parse file → per-row extract/map → batch upsert properties/create leads – returns results for UX)\nexport async function importDataAction(formData: FormData) {\n  const validated = importSchema.safeParse({\n    source: formData.get('source')?.toString() ?? 'propstream',\n  });\n\n  if (!validated.success) {\n    return { error: validated.error.format() };\n  }\n\n  const file = formData.get('file') as File | null; // Logic: Get uploaded CSV (from dropzone/form)\n  if (!file) {\n    return { error: 'No file uploaded' };\n  }\n\n  // Parse CSV (papaparse – async, handles large files stream-like)\n  const csvText = await file.text();\n  const parsed = Papa.parse(csvText, { header: true, skipEmptyLines: true, dynamicTyping: true }); // Logic: Headers on (maps to objects), auto-type numbers\n  if (parsed.errors.length > 0) {\n    return { error: `CSV parse errors: ${parsed.errors.map(e => e.message).join('; ')}` }; // Logic: Early feedback (e.g., malformed rows)\n  }\n\n  const rows = parsed.data as Record<string, any>[]; // Logic: Typed rows (Propstream columns like 'Property Address', 'AVM', etc.)\n  const results = await Promise.allSettled(rows.map(async (row, index) => { // Logic: Parallel for speed; settled for per-row errors\n    try {\n      // Map Propstream columns to extracted data (flexible – handle variants/missing; based on common exports like Address, AVM, Equity; add more like 'Mortgage Amount' for financing quests)\n      const extracted = {\n        address: `${row['Property Address'] || ''}, ${row['City'] || ''}, ${row['State'] || ''} ${row['Zip'] || ''}`.trim(),\n        property_type: row['Property Type']?.toLowerCase() || 'other',\n        bedrooms: Number(row['Bedrooms']) || null,\n        bathrooms: Number(row['Bathrooms']) || null,\n        square_feet: Number(row['Square Feet']) || null,\n        lot_size: Number(row['Lot Size']) || null,\n        year_built: Number(row['Year Built']) || null,\n        avm: Number(row['AVM']) || null,\n        tax_assessed_value: Number(row['Tax Assessed Value']) || null,\n        distress_signals: { pre_foreclosure: row['Pre-Foreclosure'] === 'Y' || false }, // Logic: Map booleans/JSONB\n        owner_occupied: row['Owner Occupied'] === 'Y' || null,\n        first_name: row['Owner First Name'] || null,\n        last_name: row['Owner Last Name'] || null,\n        phone: row['Owner Phone 1'] || null, // Logic: Take first phone (expand for multiples in metadata)\n        lead_type: row['Lead Type'] || 'owner', // Infer if available\n        metadata: { propstream_row: row }, // Logic: Store full row for audit (e.g., add 'Equity %' here if in CSV)\n      };\n\n      if (!extracted.address) {\n        throw new Error(`Invalid address in row ${index + 1} – skipping`);\n      }\n\n      const addressHash = crypto.createHash('sha256').update(extracted.address.toLowerCase()).digest('hex');\n\n      // Transaction: Upsert property + create lead + increment points (atomic – best for gamification integrity)\n      const [property, lead] = await prisma.$transaction(async (tx) => {\n        const prop = await tx.properties.upsert({\n          where: { address_hash: addressHash },\n          update: { ...extracted, metadata: { ...extracted.metadata, updated_at: new Date() } }, // Logic: Partial update (merge)\n          create: { address_hash: addressHash, ...extracted },\n        });\n\n        const cookieStore = cookies();\n        const supabase = createServerClient<Database>(supabaseUrl, supabaseAnonKey, {\n          cookies: {\n            getAll: () => cookieStore.getAll(),\n            setAll: (cookiesToSet) => { try { cookiesToSet.forEach(({ name, value, options }) => cookieStore.set(name, value, options)); } catch {} },\n          },\n        });\n        const { data: { session } } = await supabase.auth.getSession();\n        if (!session?.user.id) {\n          throw new Error('No session – login required');\n        }\n\n        const ld = await tx.leads.create({\n          data: {\n            properties_id: prop.id,\n            lead_type: extracted.lead_type,\n            first_name: extracted.first_name,\n            last_name: extracted.last_name,\n            phone: extracted.phone,\n            source: 'propstream',\n            metadata: extracted.metadata,\n            assigned_to: session.user.id,\n            points_earned: 1, // Logic: Per-lead base (gamify: bonus for batch size later)\n          },\n        });\n\n        await tx.profiles.update({\n          where: { id: session.user.id },\n          data: { points: { increment: 1 } }, // Logic: Accumulate (tie to quests, e.g., if rows.length >50, extra badge)\n        });\n\n        return [prop, ld];\n      });\n\n      return { row: index + 1, leadId: lead.id, success: true };\n    } catch (error) {\n      console.error(`Import error for row ${index + 1}:`, error);\n      return { row: index + 1, success: false, error: (error as Error).message };\n    }\n  }));\n\n  return { results: results.map(r => r.status === 'fulfilled' ? r.value : { success: false, error: (r.reason as Error).message }) }; // Logic: Flatten for client (e.g., success count)\n}\n\n// Action: Dial lead (logic: Twilio outbound call – from your Twilio number to lead phone; logs to calls table)\nexport async function dialLeadAction(leadId: number) {\n  try {\n    const lead = await prisma.leads.findUnique({ where: { id: leadId }, include: { properties: true } });\n    if (!lead?.phone) {\n      throw new Error('No phone for lead');\n    }\n\n    const cookieStore = cookies();\n    const supabase = createServerClient<Database>(supabaseUrl, supabaseAnonKey, {\n      cookies: {\n        getAll: () => cookieStore.getAll(),\n        setAll: (cookiesToSet) => { try { cookiesToSet.forEach(({ name, value, options }) => cookieStore.set(name, value, options)); } catch {} },\n      },\n    });\n    const { data: { session } } = await supabase.auth.getSession();\n    if (!session?.user.id || lead.assigned_to !== session.user.id) {\n      throw new Error('Unauthorized or mismatched assignment');\n    }\n\n    // Twilio outbound (phone-to-phone; expand to browser via Voice SDK if web calls needed)\n    const call = await twilioClient.calls.create({\n      to: lead.phone, // Lead's number\n      from: process.env.TWILIO_PHONE_NUMBER!, // Your Twilio number\n      url: 'http://your-domain.com/api/twiml', // Logic: TwiML endpoint (create /api/twiml route for voice response – e.g., <Say>Hello, connecting to lead</Say>)\n      statusCallback: 'http://your-domain.com/api/call-status', // Logic: Webhook for metrics (update calls table on complete)\n      statusCallbackEvent: ['initiated', 'ringing', 'answered', 'completed'], // Track status\n    });\n\n    // Log call (for metrics/quests – expand with webhook for duration/points)\n    await prisma.calls.create({\n      data: {\n        leads_id: lead.id,\n        caller_id: session.user.id,\n        call_sid: call.sid, // Twilio ID for tracking\n        status: 'initiated',\n        metadata: { address: lead.properties.address },\n      },\n    });\n\n    return { success: true, callId: call.sid };\n  } catch (error) {\n    console.error('Dial error:', error);\n    return { success: false, error: (error as Error).message };\n  }\n}\n\n// Helper: Stubbed extractFromLink (removed for pivot – mock for non-CSV if needed)\n// async function extractFromLink(...) { return { /* mock data */ }; } // Comment out Zillow logic"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 441, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/lib/prisma.ts"],"sourcesContent":["// src/lib/prisma.ts – Prisma singleton (best practice: Avoids new instances per request – reduces latency/overhead for quest updates; push back: Raw imports risk exhaustion on Supabase as reps grow)\nimport { PrismaClient } from '@prisma/client';\n\nlet prisma: PrismaClient;\n\nif (process.env.NODE_ENV === 'production') {\n  prisma = new PrismaClient();  // Prod: Single instance (efficient scale for leaderboards/queries)\n} else {\n  if (!globalThis.prisma) {\n    globalThis.prisma = new PrismaClient();  // Dev: Global persists across HMR (hot reload – no reconnections on code changes)\n  }\n  prisma = globalThis.prisma;\n}\n\nexport default prisma;  // Logic: Export for server use (type-safe, e.g., prisma.profile.findUnique autocompletes points/role)"],"names":[],"mappings":"AAAA,uMAAuM;;;;;AACvM;;AAEA,IAAI;AAEJ;;KAEO;IACL,IAAI,CAAC,WAAW,MAAM,EAAE;QACtB,WAAW,MAAM,GAAG,IAAI,6IAAY,IAAK,kFAAkF;IAC7H;IACA,SAAS,WAAW,MAAM;AAC5B;uCAEe;CAAS,sGAAsG","debugId":null}},
    {"offset": {"line": 463, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/app/layout.tsx"],"sourcesContent":["// src/app/layout.tsx – Root layout (SSR for session fetch; gamified header with role/XP)\nimport { createServerClient } from '@supabase/ssr'; // Logic: Server client for session\nimport { cookies } from 'next/headers'; // Dynamic cookies\nimport Link from 'next/link';\nimport { Progress } from '@/components/ui/progress'; // Assuming Shadcn\nimport { signOutAction } from '@/lib/actions'; // Import server action (bound for form)\nimport prisma from '@/lib/prisma'; // Shared singleton (fixes multiple instances)\nimport type { Database } from '@/types/database.types';\n\nexport default async function RootLayout({ children }: { children: React.ReactNode }) {\n  const cookieStore = cookies();\n  const supabase = createServerClient<Database>(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!, {\n    cookies: {\n      getAll: () => cookieStore.getAll(),\n      setAll: (cookiesToSet) => { try { cookiesToSet.forEach(({ name, value, options }) => cookieStore.set(name, value, options)); } catch {} },\n    },\n  });\n\n  const { data: { session } } = await supabase.auth.getSession(); // Logic: Fetch session (SSR – available to children via props if needed)\n\n  // Fetch profile for gamification (role/points – plain data only)\n  let role = 'guest';\n  let xp = 0;\n  if (session?.user.id) {\n    const profile = await prisma.profiles.findUnique({ where: { id: session.user.id } });  // Logic: Fixed 'profile' → 'profiles' (match schema.prisma model name)\n    role = profile?.role || 'rep';\n    xp = profile?.points || 0;\n  }\n\n  return (\n    <html lang=\"en\">\n      <body>\n        <header>\n          <nav>\n            <div>\n              <span>Role: {role}</span>\n              <Progress value={(xp / 1000) * 100} className=\"w-32\" /> {/* Logic: XP bar (gamified progress – tie to levels) */}\n              {session ? (\n                <form action={signOutAction}> {/* Logic: Bind server action (no inline async – avoids serialization) */}\n                  <button type=\"submit\">Logout</button>\n                </form>\n              ) : (\n                <Link href=\"/auth/signin\">Login</Link>\n              )}\n            </div>\n          </nav>\n        </header>\n        {children}\n      </body>\n    </html>\n  );\n}"],"names":[],"mappings":"AAAA,yFAAyF;;;;;;AACzF,0dAAoD,mCAAmC;AAAvF;AACA,2jBAAwC,kBAAkB;AAC1D;AACA,uOAAqD,kBAAkB;AACvE,4MAA+C,wCAAwC;AACvF,0MAAmC,8CAA8C;;;;;;;;AAGlE,eAAe,WAAW,EAAE,QAAQ,EAAiC;IAClF,MAAM,cAAc,IAAA,yVAAO;IAC3B,MAAM,WAAW,IAAA,4SAAkB,sUAA8F;QAC/H,SAAS;YACP,QAAQ,IAAM,YAAY,MAAM;YAChC,QAAQ,CAAC;gBAAmB,IAAI;oBAAE,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAAK,YAAY,GAAG,CAAC,MAAM,OAAO;gBAAW,EAAE,OAAM,CAAC;YAAE;QAC1I;IACF;IAEA,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,UAAU,IAAI,yEAAyE;IAEzI,iEAAiE;IACjE,IAAI,OAAO;IACX,IAAI,KAAK;IACT,IAAI,SAAS,KAAK,IAAI;QACpB,MAAM,UAAU,MAAM,+HAAM,CAAC,QAAQ,CAAC,UAAU,CAAC;YAAE,OAAO;gBAAE,IAAI,QAAQ,IAAI,CAAC,EAAE;YAAC;QAAE,IAAK,uEAAuE;QAC9J,OAAO,SAAS,QAAQ;QACxB,KAAK,SAAS,UAAU;IAC1B;IAEA,qBACE,6bAAC;QAAK,MAAK;kBACT,cAAA,6bAAC;;8BACC,6bAAC;8BACC,cAAA,6bAAC;kCACC,cAAA,6bAAC;;8CACC,6bAAC;;wCAAK;wCAAO;;;;;;;8CACb,6bAAC,gJAAQ;oCAAC,OAAO,AAAC,KAAK,OAAQ;oCAAK,WAAU;;;;;;gCAAS;gCACtD,wBACC,6bAAC;oCAAK,QAAQ,sIAAa;;wCAAE;sDAC3B,6bAAC;4CAAO,MAAK;sDAAS;;;;;;;;;;;yDAGxB,6bAAC,sXAAI;oCAAC,MAAK;8CAAe;;;;;;;;;;;;;;;;;;;;;;gBAKjC;;;;;;;;;;;;AAIT","debugId":null}}]
}