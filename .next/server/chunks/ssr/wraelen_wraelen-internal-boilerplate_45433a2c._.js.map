{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/lib/actions.ts"],"sourcesContent":["// src/lib/actions.ts – Server actions for auth (best practice: Centralize mutations – efficient, type-safe; push back: Avoid client auth for cookie sync in Next.js; scales for quests/leaderboards with RLS)\n'use server';  // Logic: Marks as server-only (no client bundle bloat – optimizes for internal app with leads/calls)\n\nimport { createServerClient } from '@supabase/ssr';  // SSR package (cookie-aware – fixes session propagation)\nimport { cookies } from 'next/headers';  // Next utility (reads/sets cookies server-side – no manual JWT handling)\nimport { redirect } from 'next/navigation';  // Server redirect (reliable – no client hacks; best for post-auth flow to dashboard quests)\nimport type { Database } from '@/types/supabase';  // Types (autocompletes e.g., session.user.id for Prisma sync – regenerate on schema changes)\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;  // Logic: Required env (fail-fast if missing – matches middleware guard)\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\n\n// Action: Server-side login (logic: FormData input for easy <form> binding; validates, mutates, redirects – handles cookies auto for middleware)\nexport async function signInAction(formData: FormData) {\n  const email = formData.get('email')?.toString() ?? '';  // Logic: Safe extraction (push back: Add zod validation here for prod – prevents invalid emails in rep onboarding)\n  const password = formData.get('password')?.toString() ?? '';\n\n  if (!email || !password) {\n    redirect('/auth/signin?error=Email and password are required');  // Logic: Early validation redirect (UX-friendly – appends query param for error display; no-brainer for form feedback)\n  }\n  if (password.length < 6) {\n    redirect('/auth/signin?error=Password must be at least 6 characters');  // Logic: Basic check (expand for strength in gamified app – e.g., tie to \"security quest\" badge)\n  }\n\n  const cookieStore = cookies();  // Logic: Next headers (dynamic – reads current request cookies for session check)\n  const supabase = createServerClient<Database>(supabaseUrl, supabaseAnonKey, {\n    cookies: {\n      getAll: () => cookieStore.getAll(),  // Logic: Pass current cookies (enables session read – fixes undefined in middleware)\n      setAll: (cookiesToSet) => {\n        cookiesToSet.forEach(({ name, value, options }) => cookieStore.set(name, value, options));  // Logic: Sets response cookies (auto-sync after auth – key to bug fix)\n      },\n    },\n  });\n\n  const { error } = await supabase.auth.signInWithPassword({ email, password });  // Logic: Server mutation (hashes/JWT auto – no custom logic; ties to Supabase users table for RLS on quests)\n\n  if (error) {\n    redirect(`/auth/signin?error=${encodeURIComponent(error.message)}`);  // Logic: Error redirect (preserves message – e.g., \"Invalid credentials\"; best for debugging without console spam)\n  }\n\n  redirect('/dashboard');  // Logic: Success redirect (middleware now sees session – seamless to game HQ; change to '/hq' or dynamic based on rep level if needed)\n}"],"names":[],"mappings":";;;;;;;IAYsB,eAAA,WAAA,GAAA,IAAA,+eAAA,EAAA,8CAAA,oeAAA,EAAA,KAAA,GAAA,0eAAA,EAAA","debugId":null}},
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/app/auth/signin/page.tsx"],"sourcesContent":["// src/app/auth/signin/page.tsx – Login form (client-side for state/UX; binds server action for mutation – best hybrid for Next.js, fixes cookie bug without full server component)\n'use client';  // Logic: Client (enables hooks like useState/useRouter – interactive errors without reload; push back: If no complex state, could go full server for perf)\n\nimport { useRouter, useSearchParams } from 'next/navigation';  // Logic: Router for client push (smooth transition – e.g., to leaderboard; searchParams for error query)\nimport { useState } from 'react';\nimport { signInAction } from '@/lib/actions';  // Imported server action (executes server-side – handles cookies/redirect; scalable for more forms)\n\nexport default function SignIn() {\n  const router = useRouter();  // Logic: Client router (push after action if needed – but action redirects server-side on success)\n  const searchParams = useSearchParams();  // Logic: Read query params (e.g., ?error from redirect – displays without state loss)\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState<string | null>(searchParams.get('error'));  // Logic: Init from params (persists errors post-redirect – better UX than local state alone)\n\n  const handleSignIn = async (e: React.FormEvent<HTMLFormElement>) => {  // Logic: Async handler (waits for action – sets local error if fails)\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);  // Logic: Native FormData (binds inputs – no manual state sync; efficient)\n    const result = await signInAction(formData);  // Logic: Call server action (runs server-side – if success, it redirects; if error, returns here? Wait, no—action uses redirect on error too, but for client handling, adjust if needed)\n\n    // Note: Since action redirects on both success/error, this won't run post-action. If you want client-only error (no reload), remove error redirects in action and return {error} instead, then: if (result?.error) setError(result.error); else router.push('/dashboard');\n    // But for simplicity/bug fix, keep server redirects—minimal reload is fine for internal login.\n  };\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-black text-green-400 font-mono\">\n      <form onSubmit={handleSignIn} className=\"p-8 border-2 border-green-500 rounded-lg shadow-[0_0_15px_rgba(0,255,0,0.7)] bg-black/80\">\n        <h2 className=\"text-2xl mb-6 text-center\">Enter Wraelen HQ</h2>\n        {error && <p className=\"text-red-500 mb-4\">{error}</p>}  // Logic: Displays from params/state (clear feedback – ties to game theme, e.g., \"Access Denied: Retry Quest\")\n        <input\n          name=\"email\"  // Logic: Name attrs (for FormData – no onChange sync needed if going full server, but kept for familiarity)\n          type=\"email\"\n          placeholder=\"Email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          className=\"w-full mb-4 p-2 bg-black border border-green-500 text-green-400 focus:outline-none focus:border-green-300\"\n        />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          className=\"w-full mb-6 p-2 bg-black border border-green-500 text-green-400 focus:outline-none focus:border-green-300\"\n        />\n        <button type=\"submit\" className=\"w-full p-2 bg-green-500 text-black hover:bg-green-600\">Login</button>\n      </form>\n    </div>\n  );\n}"],"names":[],"mappings":"AAAA,mLAAmL;;;;;;AAGnL,upBAA+D,yGAAyG;AACxK;AACA,kVAA+C,oGAAoG;AAJnJ,cAAe,2JAA2J;;;;;AAM3J,SAAS;IACtB,MAAM,SAAS,IAAA,+YAAS,KAAK,mGAAmG;IAChI,MAAM,eAAe,IAAA,qZAAe,KAAK,sFAAsF;IAC/H,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,idAAQ,EAAC;IACnC,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,idAAQ,EAAC;IACzC,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,idAAQ,EAAgB,aAAa,GAAG,CAAC,WAAY,6FAA6F;IAE5K,MAAM,eAAe,OAAO;QAC1B,EAAE,cAAc;QAChB,MAAM,WAAW,IAAI,SAAS,EAAE,aAAa,GAAI,0EAA0E;QAC3H,MAAM,SAAS,MAAM,IAAA,mNAAY,EAAC,WAAY,yLAAyL;IAEvO,2QAA2Q;IAC3Q,+FAA+F;IACjG;IAEA,qBACE,8eAAC;QAAI,WAAU;kBACb,cAAA,8eAAC;YAAK,UAAU;YAAc,WAAU;;8BACtC,8eAAC;oBAAG,WAAU;8BAA4B;;;;;;gBACzC,uBAAS,8eAAC;oBAAE,WAAU;8BAAqB;;;;;;gBAAW;8BACvD,8eAAC;oBACC,MAAK;oBACL,MAAK;oBACL,aAAY;oBACZ,OAAO;oBACP,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;oBACxC,WAAU;;;;;;8BAEZ,8eAAC;oBACC,MAAK;oBACL,MAAK;oBACL,aAAY;oBACZ,OAAO;oBACP,UAAU,CAAC,IAAM,YAAY,EAAE,MAAM,CAAC,KAAK;oBAC3C,WAAU;;;;;;8BAEZ,8eAAC;oBAAO,MAAK;oBAAS,WAAU;8BAAwD;;;;;;;;;;;;;;;;;AAIhG","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/next%4015.5.4_%40babel%2Bcore%407.27.1_%40opentelemetry%2Bapi%401.7.0_%40playwright%2Btest%401.52.0_babel-p_68e8c185df7d969f063bfb2ef00a51ed/node_modules/next/navigation.js"],"sourcesContent":["module.exports = require('./dist/client/components/navigation')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/node_modules/.pnpm/next%4015.5.4_%40babel%2Bcore%407.27.1_%40opentelemetry%2Bapi%401.7.0_%40playwright%2Btest%401.52.0_babel-p_68e8c185df7d969f063bfb2ef00a51ed/node_modules/next/src/build/webpack/loaders/next-flight-loader/action-client-wrapper.ts"],"sourcesContent":["// This file must be bundled in the app's client layer, it shouldn't be directly\n// imported by the server.\n\nexport { callServer } from 'next/dist/client/app-call-server'\nexport { findSourceMapURL } from 'next/dist/client/app-find-source-map-url'\n\n// A noop wrapper to let the Flight client create the server reference.\n// See also: https://github.com/facebook/react/pull/26632\n// eslint-disable-next-line import/no-extraneous-dependencies\nexport { createServerReference } from 'react-server-dom-webpack/client'\n"],"names":["callServer","createServerReference","findSourceMapURL"],"mappings":"AAAA,gFAAgF;AAChF,0BAA0B;;;;;;;;;;;;;;;;IAEjBA,UAAU,EAAA;eAAVA,eAAAA,UAAU;;IAMVC,qBAAqB,EAAA;eAArBA,QAAAA,qBAAqB;;IALrBC,gBAAgB,EAAA;eAAhBA,qBAAAA,gBAAgB;;;+BADE;qCACM;wBAKK","ignoreList":[0],"debugId":null}}]
}