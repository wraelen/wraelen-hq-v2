{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/.next-internal/server/app/dashboard/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {signOutAction as '00315b03f56c36afe12dfeb5c652abd33bef4e3415'} from 'ACTIONS_MODULE0'\nexport {pollImportStatus as '40466bc412b189907900eb342e636f8842c72e0114'} from 'ACTIONS_MODULE0'\nexport {importDataAction as '406fe66154764a470bd2e6892cbf6564e8ba792062'} from 'ACTIONS_MODULE0'\nexport {dialLeadAction as '4079d682f668d9e609513a443751f3f25df63679e8'} from 'ACTIONS_MODULE0'\nexport {signInAction as '40c51dafa413642fae5ba42f7a583d85c55e72290c'} from 'ACTIONS_MODULE0'\nexport {enrichLeadRealtor as '40de287e4a19bf59e275536cc07c5d930ec2748f64'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/components/ui/Leaderboard.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/ui/Leaderboard.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/Leaderboard.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,udAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAqS,GAClU,mEACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/components/ui/Leaderboard.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/ui/Leaderboard.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/ui/Leaderboard.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,udAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAiR,GAC9S,+CACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/app/dashboard/page.tsx"],"sourcesContent":["// src/app/dashboard/page.tsx – Server-rendered dashboard (efficient, secure data fetch – best for loading gamification data like role/points/badges on initial load; push back: If real-time updates needed for leaderboards, add client component with Supabase Realtime subscribe)\nimport { createServerClient } from '@supabase/ssr'; // Updated: ssr client (async-safe for Next.js 15+ – fixes old helpers deprecation; best for server fetches without cookies await issues)\nimport { cookies } from 'next/headers'; // For cookie store (secure for sessions – server-only)\nimport { redirect } from 'next/navigation'; // For unauth redirect (best practice: Server-side guard – fast, no client flash)\nimport Leaderboard from '@/components/ui/Leaderboard'; // Logic: New client component for real-time (import below)\nimport prisma from '@/lib/prisma'; // Prisma singleton (logic: Relational fetch for profile – efficient, avoids multiple connections per request; best for scale as reps view dashboards concurrently)\n\nexport default async function Dashboard() {\n  const cookieStore = await cookies(); // Logic: Awaitable in 15+ (best for dynamic APIs – secure cookie access)\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    { cookies: {\n      getAll: () => cookieStore.getAll(),\n      setAll: (cookiesToSet) => {\n        try {\n          cookiesToSet.forEach(({ name, value, options }) => cookieStore.set(name, value, options)); // Logic: Attempts set (succeeds in components; ignored in actions via catch – middleware refreshes on redirect)\n        } catch {\n          // The `set` method was called from a Server Action. Ignore – middleware will refresh session on next request.\n        }\n      },\n    } }\n  ); // Logic: ssr client (async-safe sessions – replaces old helpers; best for SSR without deprecation warnings)\n  const { data: { user } } = await supabase.auth.getUser(); // Logic: Switch to getUser() (secure server-verified fetch – fixes \"insecure getSession\" warning; use for auth guards/user.id; push back: For full session tokens, keep getSession() if needed elsewhere, but this suffices for most checks)\n  if (!user) redirect('/auth/signin'); // Logic: Guard unauth (server-side – best for security, prevents data leaks before client render)\n  const profile = await prisma.profile.findUnique({ where: { id: user.id } }); // Logic: Fix - Use 'profile' singular (matches updated schema model name); Fetch gamification data (relational – efficient query; push back: If no profile, create on-the-fly or handle error for robustness)\n\n  // Initial leaderboard data (SSR for SEO/fast load; real-time sub updates client-side)\n  const initialLeaders = await prisma.profile.findMany({\n    orderBy: { points: 'desc' },\n    take: 10, // Top 10 for leaderboard\n    select: { id: true, role: true, points: true, badges: true }, // Slim projection (performance)\n  });\n\n  return (\n    <div className=\"p-4 bg-black text-green-500 font-mono\">\n      <h1>Welcome to HQ, {user.email}! Role: {profile?.role || 'Novice'}</h1> // Logic: Use user.email (from getUser() – secure; personalized – motivates reps; fallback for no profile)\n      <p>Points: {profile?.points || 0} | Badges: {profile?.badges.join(', ') || 'None'}</p> // Logic: Gamification stats (stub – expand with progress bar/component for visual \"level up\" feel)\n      <Leaderboard initialLeaders={initialLeaders} /> // Logic: Pass initial data (hydrates client sub)\n      {/* Quest board here – e.g., <QuestBoard userId={user.id} /> or realtime sub for live updates (push back: Use Supabase Realtime for peer challenges – feels \"game-like\" without polling) */}\n    </div>\n  );\n}"],"names":[],"mappings":"AAAA,qRAAqR;;;;;;AACrR,0dAAoD,yIAAyI;AAA7L;AACA,2jBAAwC,uDAAuD;AAC/F,kpBAA4C,iFAAiF;AAA7H;AACA,6OAAuD,2DAA2D;AAClH,0MAAmC,mKAAmK;;;;;;;AAEvL,eAAe;IAC5B,MAAM,cAAc,MAAM,IAAA,yVAAO,KAAI,yEAAyE;IAC9G,MAAM,WAAW,IAAA,4SAAkB,sUAGjC;QAAE,SAAS;YACT,QAAQ,IAAM,YAAY,MAAM;YAChC,QAAQ,CAAC;gBACP,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAAK,YAAY,GAAG,CAAC,MAAM,OAAO,WAAW,gHAAgH;gBAC7M,EAAE,OAAM;gBACN,8GAA8G;gBAChH;YACF;QACF;IAAE,IACD,4GAA4G;IAC/G,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO,IAAI,6OAA6O;IACvS,IAAI,CAAC,MAAM,IAAA,gZAAQ,EAAC,iBAAiB,kGAAkG;IACvI,MAAM,UAAU,MAAM,+HAAM,CAAC,OAAO,CAAC,UAAU,CAAC;QAAE,OAAO;YAAE,IAAI,KAAK,EAAE;QAAC;IAAE,IAAI,8MAA8M;IAE3R,sFAAsF;IACtF,MAAM,iBAAiB,MAAM,+HAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;QACnD,SAAS;YAAE,QAAQ;QAAO;QAC1B,MAAM;QACN,QAAQ;YAAE,IAAI;YAAM,MAAM;YAAM,QAAQ;YAAM,QAAQ;QAAK;IAC7D;IAEA,qBACE,6bAAC;QAAI,WAAU;;0BACb,6bAAC;;oBAAG;oBAAgB,KAAK,KAAK;oBAAC;oBAAS,SAAS,QAAQ;;;;;;;YAAc;0BACvE,6bAAC;;oBAAE;oBAAS,SAAS,UAAU;oBAAE;oBAAY,SAAS,OAAO,KAAK,SAAS;;;;;;;YAAW;0BACtF,6bAAC,kJAAW;gBAAC,gBAAgB;;;;;;YAAkB;;;;;;;AAIrD","debugId":null}}]
}