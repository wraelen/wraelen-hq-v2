module.exports = [
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/brandRegistration/brandRegistrationOtp.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BrandRegistrationOtpInstance = void 0;
exports.BrandRegistrationOtpListInstance = BrandRegistrationOtpListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
function BrandRegistrationOtpListInstance(version, brandRegistrationSid) {
    if (!(0, utility_1.isValidPathParam)(brandRegistrationSid)) {
        throw new Error("Parameter 'brandRegistrationSid' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        brandRegistrationSid
    };
    instance._uri = `/a2p/BrandRegistrations/${brandRegistrationSid}/SmsOtp`;
    instance.create = function create(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BrandRegistrationOtpInstance(operationVersion, payload, instance._solution.brandRegistrationSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class BrandRegistrationOtpInstance {
    constructor(_version, payload, brandRegistrationSid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.brandRegistrationSid = payload.brand_registration_sid;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            brandRegistrationSid: this.brandRegistrationSid
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BrandRegistrationOtpInstance = BrandRegistrationOtpInstance;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/brandRegistration/brandVetting.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BrandVettingPage = exports.BrandVettingInstance = exports.BrandVettingContextImpl = void 0;
exports.BrandVettingListInstance = BrandVettingListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class BrandVettingContextImpl {
    constructor(_version, brandSid, brandVettingSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(brandSid)) {
            throw new Error("Parameter 'brandSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(brandVettingSid)) {
            throw new Error("Parameter 'brandVettingSid' is not valid.");
        }
        this._solution = {
            brandSid,
            brandVettingSid
        };
        this._uri = `/a2p/BrandRegistrations/${brandSid}/Vettings/${brandVettingSid}`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BrandVettingInstance(operationVersion, payload, instance._solution.brandSid, instance._solution.brandVettingSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BrandVettingContextImpl = BrandVettingContextImpl;
class BrandVettingInstance {
    constructor(_version, payload, brandSid, brandVettingSid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.brandSid = payload.brand_sid;
        this.brandVettingSid = payload.brand_vetting_sid;
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.vettingId = payload.vetting_id;
        this.vettingClass = payload.vetting_class;
        this.vettingStatus = payload.vetting_status;
        this.vettingProvider = payload.vetting_provider;
        this.url = payload.url;
        this._solution = {
            brandSid,
            brandVettingSid: brandVettingSid || this.brandVettingSid
        };
    }
    get _proxy() {
        this._context = this._context || new BrandVettingContextImpl(this._version, this._solution.brandSid, this._solution.brandVettingSid);
        return this._context;
    }
    /**
     * Fetch a BrandVettingInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed BrandVettingInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            brandSid: this.brandSid,
            brandVettingSid: this.brandVettingSid,
            dateUpdated: this.dateUpdated,
            dateCreated: this.dateCreated,
            vettingId: this.vettingId,
            vettingClass: this.vettingClass,
            vettingStatus: this.vettingStatus,
            vettingProvider: this.vettingProvider,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BrandVettingInstance = BrandVettingInstance;
function BrandVettingListInstance(version, brandSid) {
    if (!(0, utility_1.isValidPathParam)(brandSid)) {
        throw new Error("Parameter 'brandSid' is not valid.");
    }
    const instance = (brandVettingSid)=>instance.get(brandVettingSid);
    instance.get = function get(brandVettingSid) {
        return new BrandVettingContextImpl(version, brandSid, brandVettingSid);
    };
    instance._version = version;
    instance._solution = {
        brandSid
    };
    instance._uri = `/a2p/BrandRegistrations/${brandSid}/Vettings`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["vettingProvider"] === null || params["vettingProvider"] === undefined) {
            throw new Error("Required parameter \"params['vettingProvider']\" missing.");
        }
        let data = {};
        data["VettingProvider"] = params["vettingProvider"];
        if (params["vettingId"] !== undefined) data["VettingId"] = params["vettingId"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BrandVettingInstance(operationVersion, payload, instance._solution.brandSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["vettingProvider"] !== undefined) data["VettingProvider"] = params["vettingProvider"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BrandVettingPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new BrandVettingPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class BrandVettingPage extends Page_1.default {
    /**
     * Initialize the BrandVettingPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of BrandVettingInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new BrandVettingInstance(this._version, payload, this._solution.brandSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BrandVettingPage = BrandVettingPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/brandRegistration.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BrandRegistrationPage = exports.BrandRegistrationInstance = exports.BrandRegistrationContextImpl = void 0;
exports.BrandRegistrationListInstance = BrandRegistrationListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const brandRegistrationOtp_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/brandRegistration/brandRegistrationOtp.js [app-rsc] (ecmascript)");
const brandVetting_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/brandRegistration/brandVetting.js [app-rsc] (ecmascript)");
class BrandRegistrationContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/a2p/BrandRegistrations/${sid}`;
    }
    get brandRegistrationOtps() {
        this._brandRegistrationOtps = this._brandRegistrationOtps || (0, brandRegistrationOtp_1.BrandRegistrationOtpListInstance)(this._version, this._solution.sid);
        return this._brandRegistrationOtps;
    }
    get brandVettings() {
        this._brandVettings = this._brandVettings || (0, brandVetting_1.BrandVettingListInstance)(this._version, this._solution.sid);
        return this._brandVettings;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BrandRegistrationInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BrandRegistrationInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BrandRegistrationContextImpl = BrandRegistrationContextImpl;
class BrandRegistrationInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.customerProfileBundleSid = payload.customer_profile_bundle_sid;
        this.a2pProfileBundleSid = payload.a2p_profile_bundle_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.brandType = payload.brand_type;
        this.status = payload.status;
        this.tcrId = payload.tcr_id;
        this.failureReason = payload.failure_reason;
        this.errors = payload.errors;
        this.url = payload.url;
        this.brandScore = deserialize.integer(payload.brand_score);
        this.brandFeedback = payload.brand_feedback;
        this.identityStatus = payload.identity_status;
        this.russell3000 = payload.russell_3000;
        this.governmentEntity = payload.government_entity;
        this.taxExemptStatus = payload.tax_exempt_status;
        this.skipAutomaticSecVet = payload.skip_automatic_sec_vet;
        this.mock = payload.mock;
        this.links = payload.links;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new BrandRegistrationContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Fetch a BrandRegistrationInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed BrandRegistrationInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Update a BrandRegistrationInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed BrandRegistrationInstance
     */ update(callback) {
        return this._proxy.update(callback);
    }
    /**
     * Access the brandRegistrationOtps.
     */ brandRegistrationOtps() {
        return this._proxy.brandRegistrationOtps;
    }
    /**
     * Access the brandVettings.
     */ brandVettings() {
        return this._proxy.brandVettings;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            customerProfileBundleSid: this.customerProfileBundleSid,
            a2pProfileBundleSid: this.a2pProfileBundleSid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            brandType: this.brandType,
            status: this.status,
            tcrId: this.tcrId,
            failureReason: this.failureReason,
            errors: this.errors,
            url: this.url,
            brandScore: this.brandScore,
            brandFeedback: this.brandFeedback,
            identityStatus: this.identityStatus,
            russell3000: this.russell3000,
            governmentEntity: this.governmentEntity,
            taxExemptStatus: this.taxExemptStatus,
            skipAutomaticSecVet: this.skipAutomaticSecVet,
            mock: this.mock,
            links: this.links
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BrandRegistrationInstance = BrandRegistrationInstance;
function BrandRegistrationListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new BrandRegistrationContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/a2p/BrandRegistrations`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["customerProfileBundleSid"] === null || params["customerProfileBundleSid"] === undefined) {
            throw new Error("Required parameter \"params['customerProfileBundleSid']\" missing.");
        }
        if (params["a2PProfileBundleSid"] === null || params["a2PProfileBundleSid"] === undefined) {
            throw new Error("Required parameter \"params['a2PProfileBundleSid']\" missing.");
        }
        let data = {};
        data["CustomerProfileBundleSid"] = params["customerProfileBundleSid"];
        data["A2PProfileBundleSid"] = params["a2PProfileBundleSid"];
        if (params["brandType"] !== undefined) data["BrandType"] = params["brandType"];
        if (params["mock"] !== undefined) data["Mock"] = serialize.bool(params["mock"]);
        if (params["skipAutomaticSecVet"] !== undefined) data["SkipAutomaticSecVet"] = serialize.bool(params["skipAutomaticSecVet"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BrandRegistrationInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new BrandRegistrationPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new BrandRegistrationPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class BrandRegistrationPage extends Page_1.default {
    /**
     * Initialize the BrandRegistrationPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of BrandRegistrationInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new BrandRegistrationInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.BrandRegistrationPage = BrandRegistrationPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/deactivations.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DeactivationsInstance = exports.DeactivationsContextImpl = void 0;
exports.DeactivationsListInstance = DeactivationsListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
class DeactivationsContextImpl {
    constructor(_version){
        this._version = _version;
        this._solution = {};
        this._uri = `/Deactivations`;
    }
    fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["date"] !== undefined) data["Date"] = serialize.iso8601Date(params["date"]);
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new DeactivationsInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DeactivationsContextImpl = DeactivationsContextImpl;
class DeactivationsInstance {
    constructor(_version, payload){
        this._version = _version;
        this.redirectTo = payload.redirect_to;
        this._solution = {};
    }
    get _proxy() {
        this._context = this._context || new DeactivationsContextImpl(this._version);
        return this._context;
    }
    fetch(params, callback) {
        return this._proxy.fetch(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            redirectTo: this.redirectTo
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DeactivationsInstance = DeactivationsInstance;
function DeactivationsListInstance(version) {
    const instance = ()=>instance.get();
    instance.get = function get() {
        return new DeactivationsContextImpl(version);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/domainCerts.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DomainCertsInstance = exports.DomainCertsContextImpl = void 0;
exports.DomainCertsListInstance = DomainCertsListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class DomainCertsContextImpl {
    constructor(_version, domainSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(domainSid)) {
            throw new Error("Parameter 'domainSid' is not valid.");
        }
        this._solution = {
            domainSid
        };
        this._uri = `/LinkShortening/Domains/${domainSid}/Certificate`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new DomainCertsInstance(operationVersion, payload, instance._solution.domainSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["tlsCert"] === null || params["tlsCert"] === undefined) {
            throw new Error("Required parameter \"params['tlsCert']\" missing.");
        }
        let data = {};
        data["TlsCert"] = params["tlsCert"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new DomainCertsInstance(operationVersion, payload, instance._solution.domainSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DomainCertsContextImpl = DomainCertsContextImpl;
class DomainCertsInstance {
    constructor(_version, payload, domainSid){
        this._version = _version;
        this.domainSid = payload.domain_sid;
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.dateExpires = deserialize.iso8601DateTime(payload.date_expires);
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.domainName = payload.domain_name;
        this.certificateSid = payload.certificate_sid;
        this.url = payload.url;
        this.certInValidation = payload.cert_in_validation;
        this._solution = {
            domainSid: domainSid || this.domainSid
        };
    }
    get _proxy() {
        this._context = this._context || new DomainCertsContextImpl(this._version, this._solution.domainSid);
        return this._context;
    }
    /**
     * Remove a DomainCertsInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a DomainCertsInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed DomainCertsInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            domainSid: this.domainSid,
            dateUpdated: this.dateUpdated,
            dateExpires: this.dateExpires,
            dateCreated: this.dateCreated,
            domainName: this.domainName,
            certificateSid: this.certificateSid,
            url: this.url,
            certInValidation: this.certInValidation
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DomainCertsInstance = DomainCertsInstance;
function DomainCertsListInstance(version) {
    const instance = (domainSid)=>instance.get(domainSid);
    instance.get = function get(domainSid) {
        return new DomainCertsContextImpl(version, domainSid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/domainConfig.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DomainConfigInstance = exports.DomainConfigContextImpl = void 0;
exports.DomainConfigListInstance = DomainConfigListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class DomainConfigContextImpl {
    constructor(_version, domainSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(domainSid)) {
            throw new Error("Parameter 'domainSid' is not valid.");
        }
        this._solution = {
            domainSid
        };
        this._uri = `/LinkShortening/Domains/${domainSid}/Config`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new DomainConfigInstance(operationVersion, payload, instance._solution.domainSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["fallbackUrl"] !== undefined) data["FallbackUrl"] = params["fallbackUrl"];
        if (params["callbackUrl"] !== undefined) data["CallbackUrl"] = params["callbackUrl"];
        if (params["continueOnFailure"] !== undefined) data["ContinueOnFailure"] = serialize.bool(params["continueOnFailure"]);
        if (params["disableHttps"] !== undefined) data["DisableHttps"] = serialize.bool(params["disableHttps"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new DomainConfigInstance(operationVersion, payload, instance._solution.domainSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DomainConfigContextImpl = DomainConfigContextImpl;
class DomainConfigInstance {
    constructor(_version, payload, domainSid){
        this._version = _version;
        this.domainSid = payload.domain_sid;
        this.configSid = payload.config_sid;
        this.fallbackUrl = payload.fallback_url;
        this.callbackUrl = payload.callback_url;
        this.continueOnFailure = payload.continue_on_failure;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.disableHttps = payload.disable_https;
        this._solution = {
            domainSid: domainSid || this.domainSid
        };
    }
    get _proxy() {
        this._context = this._context || new DomainConfigContextImpl(this._version, this._solution.domainSid);
        return this._context;
    }
    /**
     * Fetch a DomainConfigInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed DomainConfigInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            domainSid: this.domainSid,
            configSid: this.configSid,
            fallbackUrl: this.fallbackUrl,
            callbackUrl: this.callbackUrl,
            continueOnFailure: this.continueOnFailure,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            disableHttps: this.disableHttps
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DomainConfigInstance = DomainConfigInstance;
function DomainConfigListInstance(version) {
    const instance = (domainSid)=>instance.get(domainSid);
    instance.get = function get(domainSid) {
        return new DomainConfigContextImpl(version, domainSid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/domainConfigMessagingService.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DomainConfigMessagingServiceInstance = exports.DomainConfigMessagingServiceContextImpl = void 0;
exports.DomainConfigMessagingServiceListInstance = DomainConfigMessagingServiceListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class DomainConfigMessagingServiceContextImpl {
    constructor(_version, messagingServiceSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(messagingServiceSid)) {
            throw new Error("Parameter 'messagingServiceSid' is not valid.");
        }
        this._solution = {
            messagingServiceSid
        };
        this._uri = `/LinkShortening/MessagingService/${messagingServiceSid}/DomainConfig`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new DomainConfigMessagingServiceInstance(operationVersion, payload, instance._solution.messagingServiceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DomainConfigMessagingServiceContextImpl = DomainConfigMessagingServiceContextImpl;
class DomainConfigMessagingServiceInstance {
    constructor(_version, payload, messagingServiceSid){
        this._version = _version;
        this.domainSid = payload.domain_sid;
        this.configSid = payload.config_sid;
        this.messagingServiceSid = payload.messaging_service_sid;
        this.fallbackUrl = payload.fallback_url;
        this.callbackUrl = payload.callback_url;
        this.continueOnFailure = payload.continue_on_failure;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            messagingServiceSid: messagingServiceSid || this.messagingServiceSid
        };
    }
    get _proxy() {
        this._context = this._context || new DomainConfigMessagingServiceContextImpl(this._version, this._solution.messagingServiceSid);
        return this._context;
    }
    /**
     * Fetch a DomainConfigMessagingServiceInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed DomainConfigMessagingServiceInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            domainSid: this.domainSid,
            configSid: this.configSid,
            messagingServiceSid: this.messagingServiceSid,
            fallbackUrl: this.fallbackUrl,
            callbackUrl: this.callbackUrl,
            continueOnFailure: this.continueOnFailure,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DomainConfigMessagingServiceInstance = DomainConfigMessagingServiceInstance;
function DomainConfigMessagingServiceListInstance(version) {
    const instance = (messagingServiceSid)=>instance.get(messagingServiceSid);
    instance.get = function get(messagingServiceSid) {
        return new DomainConfigMessagingServiceContextImpl(version, messagingServiceSid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/externalCampaign.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ExternalCampaignInstance = void 0;
exports.ExternalCampaignListInstance = ExternalCampaignListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function ExternalCampaignListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Services/PreregisteredUsa2p`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["campaignId"] === null || params["campaignId"] === undefined) {
            throw new Error("Required parameter \"params['campaignId']\" missing.");
        }
        if (params["messagingServiceSid"] === null || params["messagingServiceSid"] === undefined) {
            throw new Error("Required parameter \"params['messagingServiceSid']\" missing.");
        }
        let data = {};
        data["CampaignId"] = params["campaignId"];
        data["MessagingServiceSid"] = params["messagingServiceSid"];
        if (params["cnpMigration"] !== undefined) data["CnpMigration"] = serialize.bool(params["cnpMigration"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ExternalCampaignInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ExternalCampaignInstance {
    constructor(_version, payload){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.campaignId = payload.campaign_id;
        this.messagingServiceSid = payload.messaging_service_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            campaignId: this.campaignId,
            messagingServiceSid: this.messagingServiceSid,
            dateCreated: this.dateCreated
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ExternalCampaignInstance = ExternalCampaignInstance;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/linkshorteningMessagingService.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LinkshorteningMessagingServiceInstance = exports.LinkshorteningMessagingServiceContextImpl = void 0;
exports.LinkshorteningMessagingServiceListInstance = LinkshorteningMessagingServiceListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class LinkshorteningMessagingServiceContextImpl {
    constructor(_version, domainSid, messagingServiceSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(domainSid)) {
            throw new Error("Parameter 'domainSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(messagingServiceSid)) {
            throw new Error("Parameter 'messagingServiceSid' is not valid.");
        }
        this._solution = {
            domainSid,
            messagingServiceSid
        };
        this._uri = `/LinkShortening/Domains/${domainSid}/MessagingServices/${messagingServiceSid}`;
    }
    create(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new LinkshorteningMessagingServiceInstance(operationVersion, payload, instance._solution.domainSid, instance._solution.messagingServiceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.LinkshorteningMessagingServiceContextImpl = LinkshorteningMessagingServiceContextImpl;
class LinkshorteningMessagingServiceInstance {
    constructor(_version, payload, domainSid, messagingServiceSid){
        this._version = _version;
        this.domainSid = payload.domain_sid;
        this.messagingServiceSid = payload.messaging_service_sid;
        this.url = payload.url;
        this._solution = {
            domainSid: domainSid || this.domainSid,
            messagingServiceSid: messagingServiceSid || this.messagingServiceSid
        };
    }
    get _proxy() {
        this._context = this._context || new LinkshorteningMessagingServiceContextImpl(this._version, this._solution.domainSid, this._solution.messagingServiceSid);
        return this._context;
    }
    /**
     * Create a LinkshorteningMessagingServiceInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed LinkshorteningMessagingServiceInstance
     */ create(callback) {
        return this._proxy.create(callback);
    }
    /**
     * Remove a LinkshorteningMessagingServiceInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            domainSid: this.domainSid,
            messagingServiceSid: this.messagingServiceSid,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.LinkshorteningMessagingServiceInstance = LinkshorteningMessagingServiceInstance;
function LinkshorteningMessagingServiceListInstance(version) {
    const instance = (domainSid, messagingServiceSid)=>instance.get(domainSid, messagingServiceSid);
    instance.get = function get(domainSid, messagingServiceSid) {
        return new LinkshorteningMessagingServiceContextImpl(version, domainSid, messagingServiceSid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/linkshorteningMessagingServiceDomainAssociation.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LinkshorteningMessagingServiceDomainAssociationInstance = exports.LinkshorteningMessagingServiceDomainAssociationContextImpl = void 0;
exports.LinkshorteningMessagingServiceDomainAssociationListInstance = LinkshorteningMessagingServiceDomainAssociationListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class LinkshorteningMessagingServiceDomainAssociationContextImpl {
    constructor(_version, messagingServiceSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(messagingServiceSid)) {
            throw new Error("Parameter 'messagingServiceSid' is not valid.");
        }
        this._solution = {
            messagingServiceSid
        };
        this._uri = `/LinkShortening/MessagingServices/${messagingServiceSid}/Domain`;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new LinkshorteningMessagingServiceDomainAssociationInstance(operationVersion, payload, instance._solution.messagingServiceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.LinkshorteningMessagingServiceDomainAssociationContextImpl = LinkshorteningMessagingServiceDomainAssociationContextImpl;
class LinkshorteningMessagingServiceDomainAssociationInstance {
    constructor(_version, payload, messagingServiceSid){
        this._version = _version;
        this.domainSid = payload.domain_sid;
        this.messagingServiceSid = payload.messaging_service_sid;
        this.url = payload.url;
        this._solution = {
            messagingServiceSid: messagingServiceSid || this.messagingServiceSid
        };
    }
    get _proxy() {
        this._context = this._context || new LinkshorteningMessagingServiceDomainAssociationContextImpl(this._version, this._solution.messagingServiceSid);
        return this._context;
    }
    /**
     * Fetch a LinkshorteningMessagingServiceDomainAssociationInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed LinkshorteningMessagingServiceDomainAssociationInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            domainSid: this.domainSid,
            messagingServiceSid: this.messagingServiceSid,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.LinkshorteningMessagingServiceDomainAssociationInstance = LinkshorteningMessagingServiceDomainAssociationInstance;
function LinkshorteningMessagingServiceDomainAssociationListInstance(version) {
    const instance = (messagingServiceSid)=>instance.get(messagingServiceSid);
    instance.get = function get(messagingServiceSid) {
        return new LinkshorteningMessagingServiceDomainAssociationContextImpl(version, messagingServiceSid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/requestManagedCert.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RequestManagedCertInstance = exports.RequestManagedCertContextImpl = void 0;
exports.RequestManagedCertListInstance = RequestManagedCertListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class RequestManagedCertContextImpl {
    constructor(_version, domainSid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(domainSid)) {
            throw new Error("Parameter 'domainSid' is not valid.");
        }
        this._solution = {
            domainSid
        };
        this._uri = `/LinkShortening/Domains/${domainSid}/RequestManagedCert`;
    }
    update(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new RequestManagedCertInstance(operationVersion, payload, instance._solution.domainSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.RequestManagedCertContextImpl = RequestManagedCertContextImpl;
class RequestManagedCertInstance {
    constructor(_version, payload, domainSid){
        this._version = _version;
        this.domainSid = payload.domain_sid;
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateExpires = deserialize.iso8601DateTime(payload.date_expires);
        this.domainName = payload.domain_name;
        this.certificateSid = payload.certificate_sid;
        this.url = payload.url;
        this.managed = payload.managed;
        this.requesting = payload.requesting;
        this._solution = {
            domainSid: domainSid || this.domainSid
        };
    }
    get _proxy() {
        this._context = this._context || new RequestManagedCertContextImpl(this._version, this._solution.domainSid);
        return this._context;
    }
    /**
     * Update a RequestManagedCertInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed RequestManagedCertInstance
     */ update(callback) {
        return this._proxy.update(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            domainSid: this.domainSid,
            dateUpdated: this.dateUpdated,
            dateCreated: this.dateCreated,
            dateExpires: this.dateExpires,
            domainName: this.domainName,
            certificateSid: this.certificateSid,
            url: this.url,
            managed: this.managed,
            requesting: this.requesting
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.RequestManagedCertInstance = RequestManagedCertInstance;
function RequestManagedCertListInstance(version) {
    const instance = (domainSid)=>instance.get(domainSid);
    instance.get = function get(domainSid) {
        return new RequestManagedCertContextImpl(version, domainSid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/service/alphaSender.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AlphaSenderPage = exports.AlphaSenderInstance = exports.AlphaSenderContextImpl = void 0;
exports.AlphaSenderListInstance = AlphaSenderListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class AlphaSenderContextImpl {
    constructor(_version, serviceSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/AlphaSenders/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AlphaSenderInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AlphaSenderContextImpl = AlphaSenderContextImpl;
class AlphaSenderInstance {
    constructor(_version, payload, serviceSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.alphaSender = payload.alpha_sender;
        this.capabilities = payload.capabilities;
        this.url = payload.url;
        this._solution = {
            serviceSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new AlphaSenderContextImpl(this._version, this._solution.serviceSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a AlphaSenderInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a AlphaSenderInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed AlphaSenderInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            alphaSender: this.alphaSender,
            capabilities: this.capabilities,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AlphaSenderInstance = AlphaSenderInstance;
function AlphaSenderListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new AlphaSenderContextImpl(version, serviceSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/AlphaSenders`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["alphaSender"] === null || params["alphaSender"] === undefined) {
            throw new Error("Required parameter \"params['alphaSender']\" missing.");
        }
        let data = {};
        data["AlphaSender"] = params["alphaSender"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AlphaSenderInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new AlphaSenderPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new AlphaSenderPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class AlphaSenderPage extends Page_1.default {
    /**
     * Initialize the AlphaSenderPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of AlphaSenderInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new AlphaSenderInstance(this._version, payload, this._solution.serviceSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.AlphaSenderPage = AlphaSenderPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/service/channelSender.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ChannelSenderPage = exports.ChannelSenderInstance = exports.ChannelSenderContextImpl = void 0;
exports.ChannelSenderListInstance = ChannelSenderListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class ChannelSenderContextImpl {
    constructor(_version, messagingServiceSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(messagingServiceSid)) {
            throw new Error("Parameter 'messagingServiceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            messagingServiceSid,
            sid
        };
        this._uri = `/Services/${messagingServiceSid}/ChannelSenders/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ChannelSenderInstance(operationVersion, payload, instance._solution.messagingServiceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ChannelSenderContextImpl = ChannelSenderContextImpl;
class ChannelSenderInstance {
    constructor(_version, payload, messagingServiceSid, sid){
        this._version = _version;
        this.accountSid = payload.account_sid;
        this.messagingServiceSid = payload.messaging_service_sid;
        this.sid = payload.sid;
        this.sender = payload.sender;
        this.senderType = payload.sender_type;
        this.countryCode = payload.country_code;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this._solution = {
            messagingServiceSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new ChannelSenderContextImpl(this._version, this._solution.messagingServiceSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a ChannelSenderInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a ChannelSenderInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ChannelSenderInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            accountSid: this.accountSid,
            messagingServiceSid: this.messagingServiceSid,
            sid: this.sid,
            sender: this.sender,
            senderType: this.senderType,
            countryCode: this.countryCode,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ChannelSenderInstance = ChannelSenderInstance;
function ChannelSenderListInstance(version, messagingServiceSid) {
    if (!(0, utility_1.isValidPathParam)(messagingServiceSid)) {
        throw new Error("Parameter 'messagingServiceSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new ChannelSenderContextImpl(version, messagingServiceSid, sid);
    };
    instance._version = version;
    instance._solution = {
        messagingServiceSid
    };
    instance._uri = `/Services/${messagingServiceSid}/ChannelSenders`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["sid"] === null || params["sid"] === undefined) {
            throw new Error("Required parameter \"params['sid']\" missing.");
        }
        let data = {};
        data["Sid"] = params["sid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ChannelSenderInstance(operationVersion, payload, instance._solution.messagingServiceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ChannelSenderPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ChannelSenderPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ChannelSenderPage extends Page_1.default {
    /**
     * Initialize the ChannelSenderPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ChannelSenderInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ChannelSenderInstance(this._version, payload, this._solution.messagingServiceSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ChannelSenderPage = ChannelSenderPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/service/destinationAlphaSender.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DestinationAlphaSenderPage = exports.DestinationAlphaSenderInstance = exports.DestinationAlphaSenderContextImpl = void 0;
exports.DestinationAlphaSenderListInstance = DestinationAlphaSenderListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class DestinationAlphaSenderContextImpl {
    constructor(_version, serviceSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/DestinationAlphaSenders/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new DestinationAlphaSenderInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DestinationAlphaSenderContextImpl = DestinationAlphaSenderContextImpl;
class DestinationAlphaSenderInstance {
    constructor(_version, payload, serviceSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.alphaSender = payload.alpha_sender;
        this.capabilities = payload.capabilities;
        this.url = payload.url;
        this.isoCountryCode = payload.iso_country_code;
        this._solution = {
            serviceSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new DestinationAlphaSenderContextImpl(this._version, this._solution.serviceSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a DestinationAlphaSenderInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a DestinationAlphaSenderInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed DestinationAlphaSenderInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            alphaSender: this.alphaSender,
            capabilities: this.capabilities,
            url: this.url,
            isoCountryCode: this.isoCountryCode
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DestinationAlphaSenderInstance = DestinationAlphaSenderInstance;
function DestinationAlphaSenderListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new DestinationAlphaSenderContextImpl(version, serviceSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/DestinationAlphaSenders`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["alphaSender"] === null || params["alphaSender"] === undefined) {
            throw new Error("Required parameter \"params['alphaSender']\" missing.");
        }
        let data = {};
        data["AlphaSender"] = params["alphaSender"];
        if (params["isoCountryCode"] !== undefined) data["IsoCountryCode"] = params["isoCountryCode"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new DestinationAlphaSenderInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["isoCountryCode"] !== undefined) data["IsoCountryCode"] = params["isoCountryCode"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new DestinationAlphaSenderPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new DestinationAlphaSenderPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class DestinationAlphaSenderPage extends Page_1.default {
    /**
     * Initialize the DestinationAlphaSenderPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of DestinationAlphaSenderInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new DestinationAlphaSenderInstance(this._version, payload, this._solution.serviceSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.DestinationAlphaSenderPage = DestinationAlphaSenderPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/service/phoneNumber.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PhoneNumberPage = exports.PhoneNumberInstance = exports.PhoneNumberContextImpl = void 0;
exports.PhoneNumberListInstance = PhoneNumberListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class PhoneNumberContextImpl {
    constructor(_version, serviceSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/PhoneNumbers/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PhoneNumberInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PhoneNumberContextImpl = PhoneNumberContextImpl;
class PhoneNumberInstance {
    constructor(_version, payload, serviceSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.phoneNumber = payload.phone_number;
        this.countryCode = payload.country_code;
        this.capabilities = payload.capabilities;
        this.url = payload.url;
        this._solution = {
            serviceSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new PhoneNumberContextImpl(this._version, this._solution.serviceSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a PhoneNumberInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a PhoneNumberInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed PhoneNumberInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            phoneNumber: this.phoneNumber,
            countryCode: this.countryCode,
            capabilities: this.capabilities,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PhoneNumberInstance = PhoneNumberInstance;
function PhoneNumberListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new PhoneNumberContextImpl(version, serviceSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/PhoneNumbers`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["phoneNumberSid"] === null || params["phoneNumberSid"] === undefined) {
            throw new Error("Required parameter \"params['phoneNumberSid']\" missing.");
        }
        let data = {};
        data["PhoneNumberSid"] = params["phoneNumberSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PhoneNumberInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new PhoneNumberPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new PhoneNumberPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class PhoneNumberPage extends Page_1.default {
    /**
     * Initialize the PhoneNumberPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of PhoneNumberInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new PhoneNumberInstance(this._version, payload, this._solution.serviceSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.PhoneNumberPage = PhoneNumberPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/service/shortCode.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ShortCodePage = exports.ShortCodeInstance = exports.ShortCodeContextImpl = void 0;
exports.ShortCodeListInstance = ShortCodeListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class ShortCodeContextImpl {
    constructor(_version, serviceSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(serviceSid)) {
            throw new Error("Parameter 'serviceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            serviceSid,
            sid
        };
        this._uri = `/Services/${serviceSid}/ShortCodes/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ShortCodeInstance(operationVersion, payload, instance._solution.serviceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ShortCodeContextImpl = ShortCodeContextImpl;
class ShortCodeInstance {
    constructor(_version, payload, serviceSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.serviceSid = payload.service_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.shortCode = payload.short_code;
        this.countryCode = payload.country_code;
        this.capabilities = payload.capabilities;
        this.url = payload.url;
        this._solution = {
            serviceSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new ShortCodeContextImpl(this._version, this._solution.serviceSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a ShortCodeInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a ShortCodeInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ShortCodeInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            serviceSid: this.serviceSid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            shortCode: this.shortCode,
            countryCode: this.countryCode,
            capabilities: this.capabilities,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ShortCodeInstance = ShortCodeInstance;
function ShortCodeListInstance(version, serviceSid) {
    if (!(0, utility_1.isValidPathParam)(serviceSid)) {
        throw new Error("Parameter 'serviceSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new ShortCodeContextImpl(version, serviceSid, sid);
    };
    instance._version = version;
    instance._solution = {
        serviceSid
    };
    instance._uri = `/Services/${serviceSid}/ShortCodes`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["shortCodeSid"] === null || params["shortCodeSid"] === undefined) {
            throw new Error("Required parameter \"params['shortCodeSid']\" missing.");
        }
        let data = {};
        data["ShortCodeSid"] = params["shortCodeSid"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ShortCodeInstance(operationVersion, payload, instance._solution.serviceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ShortCodePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ShortCodePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ShortCodePage extends Page_1.default {
    /**
     * Initialize the ShortCodePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ShortCodeInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ShortCodeInstance(this._version, payload, this._solution.serviceSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ShortCodePage = ShortCodePage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/service/usAppToPerson.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UsAppToPersonPage = exports.UsAppToPersonInstance = exports.UsAppToPersonContextImpl = void 0;
exports.UsAppToPersonListInstance = UsAppToPersonListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class UsAppToPersonContextImpl {
    constructor(_version, messagingServiceSid, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(messagingServiceSid)) {
            throw new Error("Parameter 'messagingServiceSid' is not valid.");
        }
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            messagingServiceSid,
            sid
        };
        this._uri = `/Services/${messagingServiceSid}/Compliance/Usa2p/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new UsAppToPersonInstance(operationVersion, payload, instance._solution.messagingServiceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["hasEmbeddedLinks"] === null || params["hasEmbeddedLinks"] === undefined) {
            throw new Error("Required parameter \"params['hasEmbeddedLinks']\" missing.");
        }
        if (params["hasEmbeddedPhone"] === null || params["hasEmbeddedPhone"] === undefined) {
            throw new Error("Required parameter \"params['hasEmbeddedPhone']\" missing.");
        }
        if (params["messageSamples"] === null || params["messageSamples"] === undefined) {
            throw new Error("Required parameter \"params['messageSamples']\" missing.");
        }
        if (params["messageFlow"] === null || params["messageFlow"] === undefined) {
            throw new Error("Required parameter \"params['messageFlow']\" missing.");
        }
        if (params["description"] === null || params["description"] === undefined) {
            throw new Error("Required parameter \"params['description']\" missing.");
        }
        if (params["ageGated"] === null || params["ageGated"] === undefined) {
            throw new Error("Required parameter \"params['ageGated']\" missing.");
        }
        if (params["directLending"] === null || params["directLending"] === undefined) {
            throw new Error("Required parameter \"params['directLending']\" missing.");
        }
        let data = {};
        data["HasEmbeddedLinks"] = serialize.bool(params["hasEmbeddedLinks"]);
        data["HasEmbeddedPhone"] = serialize.bool(params["hasEmbeddedPhone"]);
        data["MessageSamples"] = serialize.map(params["messageSamples"], (e)=>e);
        data["MessageFlow"] = params["messageFlow"];
        data["Description"] = params["description"];
        data["AgeGated"] = serialize.bool(params["ageGated"]);
        data["DirectLending"] = serialize.bool(params["directLending"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new UsAppToPersonInstance(operationVersion, payload, instance._solution.messagingServiceSid, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.UsAppToPersonContextImpl = UsAppToPersonContextImpl;
class UsAppToPersonInstance {
    constructor(_version, payload, messagingServiceSid, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.brandRegistrationSid = payload.brand_registration_sid;
        this.messagingServiceSid = payload.messaging_service_sid;
        this.description = payload.description;
        this.messageSamples = payload.message_samples;
        this.usAppToPersonUsecase = payload.us_app_to_person_usecase;
        this.hasEmbeddedLinks = payload.has_embedded_links;
        this.hasEmbeddedPhone = payload.has_embedded_phone;
        this.subscriberOptIn = payload.subscriber_opt_in;
        this.ageGated = payload.age_gated;
        this.directLending = payload.direct_lending;
        this.campaignStatus = payload.campaign_status;
        this.campaignId = payload.campaign_id;
        this.isExternallyRegistered = payload.is_externally_registered;
        this.rateLimits = payload.rate_limits;
        this.messageFlow = payload.message_flow;
        this.optInMessage = payload.opt_in_message;
        this.optOutMessage = payload.opt_out_message;
        this.helpMessage = payload.help_message;
        this.optInKeywords = payload.opt_in_keywords;
        this.optOutKeywords = payload.opt_out_keywords;
        this.helpKeywords = payload.help_keywords;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.url = payload.url;
        this.mock = payload.mock;
        this.errors = payload.errors;
        this._solution = {
            messagingServiceSid,
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new UsAppToPersonContextImpl(this._version, this._solution.messagingServiceSid, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a UsAppToPersonInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a UsAppToPersonInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed UsAppToPersonInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            brandRegistrationSid: this.brandRegistrationSid,
            messagingServiceSid: this.messagingServiceSid,
            description: this.description,
            messageSamples: this.messageSamples,
            usAppToPersonUsecase: this.usAppToPersonUsecase,
            hasEmbeddedLinks: this.hasEmbeddedLinks,
            hasEmbeddedPhone: this.hasEmbeddedPhone,
            subscriberOptIn: this.subscriberOptIn,
            ageGated: this.ageGated,
            directLending: this.directLending,
            campaignStatus: this.campaignStatus,
            campaignId: this.campaignId,
            isExternallyRegistered: this.isExternallyRegistered,
            rateLimits: this.rateLimits,
            messageFlow: this.messageFlow,
            optInMessage: this.optInMessage,
            optOutMessage: this.optOutMessage,
            helpMessage: this.helpMessage,
            optInKeywords: this.optInKeywords,
            optOutKeywords: this.optOutKeywords,
            helpKeywords: this.helpKeywords,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            url: this.url,
            mock: this.mock,
            errors: this.errors
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.UsAppToPersonInstance = UsAppToPersonInstance;
function UsAppToPersonListInstance(version, messagingServiceSid) {
    if (!(0, utility_1.isValidPathParam)(messagingServiceSid)) {
        throw new Error("Parameter 'messagingServiceSid' is not valid.");
    }
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new UsAppToPersonContextImpl(version, messagingServiceSid, sid);
    };
    instance._version = version;
    instance._solution = {
        messagingServiceSid
    };
    instance._uri = `/Services/${messagingServiceSid}/Compliance/Usa2p`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["brandRegistrationSid"] === null || params["brandRegistrationSid"] === undefined) {
            throw new Error("Required parameter \"params['brandRegistrationSid']\" missing.");
        }
        if (params["description"] === null || params["description"] === undefined) {
            throw new Error("Required parameter \"params['description']\" missing.");
        }
        if (params["messageFlow"] === null || params["messageFlow"] === undefined) {
            throw new Error("Required parameter \"params['messageFlow']\" missing.");
        }
        if (params["messageSamples"] === null || params["messageSamples"] === undefined) {
            throw new Error("Required parameter \"params['messageSamples']\" missing.");
        }
        if (params["usAppToPersonUsecase"] === null || params["usAppToPersonUsecase"] === undefined) {
            throw new Error("Required parameter \"params['usAppToPersonUsecase']\" missing.");
        }
        if (params["hasEmbeddedLinks"] === null || params["hasEmbeddedLinks"] === undefined) {
            throw new Error("Required parameter \"params['hasEmbeddedLinks']\" missing.");
        }
        if (params["hasEmbeddedPhone"] === null || params["hasEmbeddedPhone"] === undefined) {
            throw new Error("Required parameter \"params['hasEmbeddedPhone']\" missing.");
        }
        let data = {};
        data["BrandRegistrationSid"] = params["brandRegistrationSid"];
        data["Description"] = params["description"];
        data["MessageFlow"] = params["messageFlow"];
        data["MessageSamples"] = serialize.map(params["messageSamples"], (e)=>e);
        data["UsAppToPersonUsecase"] = params["usAppToPersonUsecase"];
        data["HasEmbeddedLinks"] = serialize.bool(params["hasEmbeddedLinks"]);
        data["HasEmbeddedPhone"] = serialize.bool(params["hasEmbeddedPhone"]);
        if (params["optInMessage"] !== undefined) data["OptInMessage"] = params["optInMessage"];
        if (params["optOutMessage"] !== undefined) data["OptOutMessage"] = params["optOutMessage"];
        if (params["helpMessage"] !== undefined) data["HelpMessage"] = params["helpMessage"];
        if (params["optInKeywords"] !== undefined) data["OptInKeywords"] = serialize.map(params["optInKeywords"], (e)=>e);
        if (params["optOutKeywords"] !== undefined) data["OptOutKeywords"] = serialize.map(params["optOutKeywords"], (e)=>e);
        if (params["helpKeywords"] !== undefined) data["HelpKeywords"] = serialize.map(params["helpKeywords"], (e)=>e);
        if (params["subscriberOptIn"] !== undefined) data["SubscriberOptIn"] = serialize.bool(params["subscriberOptIn"]);
        if (params["ageGated"] !== undefined) data["AgeGated"] = serialize.bool(params["ageGated"]);
        if (params["directLending"] !== undefined) data["DirectLending"] = serialize.bool(params["directLending"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new UsAppToPersonInstance(operationVersion, payload, instance._solution.messagingServiceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new UsAppToPersonPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new UsAppToPersonPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class UsAppToPersonPage extends Page_1.default {
    /**
     * Initialize the UsAppToPersonPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of UsAppToPersonInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new UsAppToPersonInstance(this._version, payload, this._solution.messagingServiceSid);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.UsAppToPersonPage = UsAppToPersonPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/service/usAppToPersonUsecase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UsAppToPersonUsecaseInstance = void 0;
exports.UsAppToPersonUsecaseListInstance = UsAppToPersonUsecaseListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
function UsAppToPersonUsecaseListInstance(version, messagingServiceSid) {
    if (!(0, utility_1.isValidPathParam)(messagingServiceSid)) {
        throw new Error("Parameter 'messagingServiceSid' is not valid.");
    }
    const instance = {};
    instance._version = version;
    instance._solution = {
        messagingServiceSid
    };
    instance._uri = `/Services/${messagingServiceSid}/Compliance/Usa2p/Usecases`;
    instance.fetch = function fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["brandRegistrationSid"] !== undefined) data["BrandRegistrationSid"] = params["brandRegistrationSid"];
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new UsAppToPersonUsecaseInstance(operationVersion, payload, instance._solution.messagingServiceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class UsAppToPersonUsecaseInstance {
    constructor(_version, payload, messagingServiceSid){
        this._version = _version;
        this.usAppToPersonUsecases = payload.us_app_to_person_usecases;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            usAppToPersonUsecases: this.usAppToPersonUsecases
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.UsAppToPersonUsecaseInstance = UsAppToPersonUsecaseInstance;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/service.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ServicePage = exports.ServiceInstance = exports.ServiceContextImpl = void 0;
exports.ServiceListInstance = ServiceListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
const alphaSender_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/service/alphaSender.js [app-rsc] (ecmascript)");
const channelSender_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/service/channelSender.js [app-rsc] (ecmascript)");
const destinationAlphaSender_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/service/destinationAlphaSender.js [app-rsc] (ecmascript)");
const phoneNumber_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/service/phoneNumber.js [app-rsc] (ecmascript)");
const shortCode_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/service/shortCode.js [app-rsc] (ecmascript)");
const usAppToPerson_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/service/usAppToPerson.js [app-rsc] (ecmascript)");
const usAppToPersonUsecase_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/service/usAppToPersonUsecase.js [app-rsc] (ecmascript)");
class ServiceContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Services/${sid}`;
    }
    get alphaSenders() {
        this._alphaSenders = this._alphaSenders || (0, alphaSender_1.AlphaSenderListInstance)(this._version, this._solution.sid);
        return this._alphaSenders;
    }
    get channelSenders() {
        this._channelSenders = this._channelSenders || (0, channelSender_1.ChannelSenderListInstance)(this._version, this._solution.sid);
        return this._channelSenders;
    }
    get destinationAlphaSenders() {
        this._destinationAlphaSenders = this._destinationAlphaSenders || (0, destinationAlphaSender_1.DestinationAlphaSenderListInstance)(this._version, this._solution.sid);
        return this._destinationAlphaSenders;
    }
    get phoneNumbers() {
        this._phoneNumbers = this._phoneNumbers || (0, phoneNumber_1.PhoneNumberListInstance)(this._version, this._solution.sid);
        return this._phoneNumbers;
    }
    get shortCodes() {
        this._shortCodes = this._shortCodes || (0, shortCode_1.ShortCodeListInstance)(this._version, this._solution.sid);
        return this._shortCodes;
    }
    get usAppToPerson() {
        this._usAppToPerson = this._usAppToPerson || (0, usAppToPerson_1.UsAppToPersonListInstance)(this._version, this._solution.sid);
        return this._usAppToPerson;
    }
    get usAppToPersonUsecases() {
        this._usAppToPersonUsecases = this._usAppToPersonUsecases || (0, usAppToPersonUsecase_1.UsAppToPersonUsecaseListInstance)(this._version, this._solution.sid);
        return this._usAppToPersonUsecases;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServiceInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["friendlyName"] !== undefined) data["FriendlyName"] = params["friendlyName"];
        if (params["inboundRequestUrl"] !== undefined) data["InboundRequestUrl"] = params["inboundRequestUrl"];
        if (params["inboundMethod"] !== undefined) data["InboundMethod"] = params["inboundMethod"];
        if (params["fallbackUrl"] !== undefined) data["FallbackUrl"] = params["fallbackUrl"];
        if (params["fallbackMethod"] !== undefined) data["FallbackMethod"] = params["fallbackMethod"];
        if (params["statusCallback"] !== undefined) data["StatusCallback"] = params["statusCallback"];
        if (params["stickySender"] !== undefined) data["StickySender"] = serialize.bool(params["stickySender"]);
        if (params["mmsConverter"] !== undefined) data["MmsConverter"] = serialize.bool(params["mmsConverter"]);
        if (params["smartEncoding"] !== undefined) data["SmartEncoding"] = serialize.bool(params["smartEncoding"]);
        if (params["scanMessageContent"] !== undefined) data["ScanMessageContent"] = params["scanMessageContent"];
        if (params["fallbackToLongCode"] !== undefined) data["FallbackToLongCode"] = serialize.bool(params["fallbackToLongCode"]);
        if (params["areaCodeGeomatch"] !== undefined) data["AreaCodeGeomatch"] = serialize.bool(params["areaCodeGeomatch"]);
        if (params["validityPeriod"] !== undefined) data["ValidityPeriod"] = params["validityPeriod"];
        if (params["synchronousValidation"] !== undefined) data["SynchronousValidation"] = serialize.bool(params["synchronousValidation"]);
        if (params["usecase"] !== undefined) data["Usecase"] = params["usecase"];
        if (params["useInboundWebhookOnNumber"] !== undefined) data["UseInboundWebhookOnNumber"] = serialize.bool(params["useInboundWebhookOnNumber"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServiceInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ServiceContextImpl = ServiceContextImpl;
class ServiceInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.friendlyName = payload.friendly_name;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.inboundRequestUrl = payload.inbound_request_url;
        this.inboundMethod = payload.inbound_method;
        this.fallbackUrl = payload.fallback_url;
        this.fallbackMethod = payload.fallback_method;
        this.statusCallback = payload.status_callback;
        this.stickySender = payload.sticky_sender;
        this.mmsConverter = payload.mms_converter;
        this.smartEncoding = payload.smart_encoding;
        this.scanMessageContent = payload.scan_message_content;
        this.fallbackToLongCode = payload.fallback_to_long_code;
        this.areaCodeGeomatch = payload.area_code_geomatch;
        this.synchronousValidation = payload.synchronous_validation;
        this.validityPeriod = deserialize.integer(payload.validity_period);
        this.url = payload.url;
        this.links = payload.links;
        this.usecase = payload.usecase;
        this.usAppToPersonRegistered = payload.us_app_to_person_registered;
        this.useInboundWebhookOnNumber = payload.use_inbound_webhook_on_number;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new ServiceContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a ServiceInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a ServiceInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ServiceInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Access the alphaSenders.
     */ alphaSenders() {
        return this._proxy.alphaSenders;
    }
    /**
     * Access the channelSenders.
     */ channelSenders() {
        return this._proxy.channelSenders;
    }
    /**
     * Access the destinationAlphaSenders.
     */ destinationAlphaSenders() {
        return this._proxy.destinationAlphaSenders;
    }
    /**
     * Access the phoneNumbers.
     */ phoneNumbers() {
        return this._proxy.phoneNumbers;
    }
    /**
     * Access the shortCodes.
     */ shortCodes() {
        return this._proxy.shortCodes;
    }
    /**
     * Access the usAppToPerson.
     */ usAppToPerson() {
        return this._proxy.usAppToPerson;
    }
    /**
     * Access the usAppToPersonUsecases.
     */ usAppToPersonUsecases() {
        return this._proxy.usAppToPersonUsecases;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            friendlyName: this.friendlyName,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            inboundRequestUrl: this.inboundRequestUrl,
            inboundMethod: this.inboundMethod,
            fallbackUrl: this.fallbackUrl,
            fallbackMethod: this.fallbackMethod,
            statusCallback: this.statusCallback,
            stickySender: this.stickySender,
            mmsConverter: this.mmsConverter,
            smartEncoding: this.smartEncoding,
            scanMessageContent: this.scanMessageContent,
            fallbackToLongCode: this.fallbackToLongCode,
            areaCodeGeomatch: this.areaCodeGeomatch,
            synchronousValidation: this.synchronousValidation,
            validityPeriod: this.validityPeriod,
            url: this.url,
            links: this.links,
            usecase: this.usecase,
            usAppToPersonRegistered: this.usAppToPersonRegistered,
            useInboundWebhookOnNumber: this.useInboundWebhookOnNumber
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ServiceInstance = ServiceInstance;
function ServiceListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new ServiceContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Services`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["friendlyName"] === null || params["friendlyName"] === undefined) {
            throw new Error("Required parameter \"params['friendlyName']\" missing.");
        }
        let data = {};
        data["FriendlyName"] = params["friendlyName"];
        if (params["inboundRequestUrl"] !== undefined) data["InboundRequestUrl"] = params["inboundRequestUrl"];
        if (params["inboundMethod"] !== undefined) data["InboundMethod"] = params["inboundMethod"];
        if (params["fallbackUrl"] !== undefined) data["FallbackUrl"] = params["fallbackUrl"];
        if (params["fallbackMethod"] !== undefined) data["FallbackMethod"] = params["fallbackMethod"];
        if (params["statusCallback"] !== undefined) data["StatusCallback"] = params["statusCallback"];
        if (params["stickySender"] !== undefined) data["StickySender"] = serialize.bool(params["stickySender"]);
        if (params["mmsConverter"] !== undefined) data["MmsConverter"] = serialize.bool(params["mmsConverter"]);
        if (params["smartEncoding"] !== undefined) data["SmartEncoding"] = serialize.bool(params["smartEncoding"]);
        if (params["scanMessageContent"] !== undefined) data["ScanMessageContent"] = params["scanMessageContent"];
        if (params["fallbackToLongCode"] !== undefined) data["FallbackToLongCode"] = serialize.bool(params["fallbackToLongCode"]);
        if (params["areaCodeGeomatch"] !== undefined) data["AreaCodeGeomatch"] = serialize.bool(params["areaCodeGeomatch"]);
        if (params["validityPeriod"] !== undefined) data["ValidityPeriod"] = params["validityPeriod"];
        if (params["synchronousValidation"] !== undefined) data["SynchronousValidation"] = serialize.bool(params["synchronousValidation"]);
        if (params["usecase"] !== undefined) data["Usecase"] = params["usecase"];
        if (params["useInboundWebhookOnNumber"] !== undefined) data["UseInboundWebhookOnNumber"] = serialize.bool(params["useInboundWebhookOnNumber"]);
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServiceInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ServicePage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ServicePage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ServicePage extends Page_1.default {
    /**
     * Initialize the ServicePage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ServiceInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ServiceInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ServicePage = ServicePage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/tollfreeVerification.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TollfreeVerificationPage = exports.TollfreeVerificationInstance = exports.TollfreeVerificationContextImpl = void 0;
exports.TollfreeVerificationListInstance = TollfreeVerificationListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
class TollfreeVerificationContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Tollfree/Verifications/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new TollfreeVerificationInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["businessName"] !== undefined) data["BusinessName"] = params["businessName"];
        if (params["businessWebsite"] !== undefined) data["BusinessWebsite"] = params["businessWebsite"];
        if (params["notificationEmail"] !== undefined) data["NotificationEmail"] = params["notificationEmail"];
        if (params["useCaseCategories"] !== undefined) data["UseCaseCategories"] = serialize.map(params["useCaseCategories"], (e)=>e);
        if (params["useCaseSummary"] !== undefined) data["UseCaseSummary"] = params["useCaseSummary"];
        if (params["productionMessageSample"] !== undefined) data["ProductionMessageSample"] = params["productionMessageSample"];
        if (params["optInImageUrls"] !== undefined) data["OptInImageUrls"] = serialize.map(params["optInImageUrls"], (e)=>e);
        if (params["optInType"] !== undefined) data["OptInType"] = params["optInType"];
        if (params["messageVolume"] !== undefined) data["MessageVolume"] = params["messageVolume"];
        if (params["businessStreetAddress"] !== undefined) data["BusinessStreetAddress"] = params["businessStreetAddress"];
        if (params["businessStreetAddress2"] !== undefined) data["BusinessStreetAddress2"] = params["businessStreetAddress2"];
        if (params["businessCity"] !== undefined) data["BusinessCity"] = params["businessCity"];
        if (params["businessStateProvinceRegion"] !== undefined) data["BusinessStateProvinceRegion"] = params["businessStateProvinceRegion"];
        if (params["businessPostalCode"] !== undefined) data["BusinessPostalCode"] = params["businessPostalCode"];
        if (params["businessCountry"] !== undefined) data["BusinessCountry"] = params["businessCountry"];
        if (params["additionalInformation"] !== undefined) data["AdditionalInformation"] = params["additionalInformation"];
        if (params["businessContactFirstName"] !== undefined) data["BusinessContactFirstName"] = params["businessContactFirstName"];
        if (params["businessContactLastName"] !== undefined) data["BusinessContactLastName"] = params["businessContactLastName"];
        if (params["businessContactEmail"] !== undefined) data["BusinessContactEmail"] = params["businessContactEmail"];
        if (params["businessContactPhone"] !== undefined) data["BusinessContactPhone"] = params["businessContactPhone"];
        if (params["editReason"] !== undefined) data["EditReason"] = params["editReason"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new TollfreeVerificationInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.TollfreeVerificationContextImpl = TollfreeVerificationContextImpl;
class TollfreeVerificationInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.accountSid = payload.account_sid;
        this.customerProfileSid = payload.customer_profile_sid;
        this.trustProductSid = payload.trust_product_sid;
        this.dateCreated = deserialize.iso8601DateTime(payload.date_created);
        this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated);
        this.regulatedItemSid = payload.regulated_item_sid;
        this.businessName = payload.business_name;
        this.businessStreetAddress = payload.business_street_address;
        this.businessStreetAddress2 = payload.business_street_address2;
        this.businessCity = payload.business_city;
        this.businessStateProvinceRegion = payload.business_state_province_region;
        this.businessPostalCode = payload.business_postal_code;
        this.businessCountry = payload.business_country;
        this.businessWebsite = payload.business_website;
        this.businessContactFirstName = payload.business_contact_first_name;
        this.businessContactLastName = payload.business_contact_last_name;
        this.businessContactEmail = payload.business_contact_email;
        this.businessContactPhone = payload.business_contact_phone;
        this.notificationEmail = payload.notification_email;
        this.useCaseCategories = payload.use_case_categories;
        this.useCaseSummary = payload.use_case_summary;
        this.productionMessageSample = payload.production_message_sample;
        this.optInImageUrls = payload.opt_in_image_urls;
        this.optInType = payload.opt_in_type;
        this.messageVolume = payload.message_volume;
        this.additionalInformation = payload.additional_information;
        this.tollfreePhoneNumberSid = payload.tollfree_phone_number_sid;
        this.tollfreePhoneNumber = payload.tollfree_phone_number;
        this.status = payload.status;
        this.url = payload.url;
        this.rejectionReason = payload.rejection_reason;
        this.errorCode = deserialize.integer(payload.error_code);
        this.editExpiration = deserialize.iso8601DateTime(payload.edit_expiration);
        this.editAllowed = payload.edit_allowed;
        this.businessRegistrationNumber = payload.business_registration_number;
        this.businessRegistrationAuthority = payload.business_registration_authority;
        this.businessRegistrationCountry = payload.business_registration_country;
        this.businessType = payload.business_type;
        this.businessRegistrationPhoneNumber = payload.business_registration_phone_number;
        this.doingBusinessAs = payload.doing_business_as;
        this.optInConfirmationMessage = payload.opt_in_confirmation_message;
        this.helpMessageSample = payload.help_message_sample;
        this.privacyPolicyUrl = payload.privacy_policy_url;
        this.termsAndConditionsUrl = payload.terms_and_conditions_url;
        this.ageGatedContent = payload.age_gated_content;
        this.optInKeywords = payload.opt_in_keywords;
        this.rejectionReasons = payload.rejection_reasons;
        this.resourceLinks = payload.resource_links;
        this.externalReferenceId = payload.external_reference_id;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new TollfreeVerificationContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a TollfreeVerificationInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a TollfreeVerificationInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed TollfreeVerificationInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            accountSid: this.accountSid,
            customerProfileSid: this.customerProfileSid,
            trustProductSid: this.trustProductSid,
            dateCreated: this.dateCreated,
            dateUpdated: this.dateUpdated,
            regulatedItemSid: this.regulatedItemSid,
            businessName: this.businessName,
            businessStreetAddress: this.businessStreetAddress,
            businessStreetAddress2: this.businessStreetAddress2,
            businessCity: this.businessCity,
            businessStateProvinceRegion: this.businessStateProvinceRegion,
            businessPostalCode: this.businessPostalCode,
            businessCountry: this.businessCountry,
            businessWebsite: this.businessWebsite,
            businessContactFirstName: this.businessContactFirstName,
            businessContactLastName: this.businessContactLastName,
            businessContactEmail: this.businessContactEmail,
            businessContactPhone: this.businessContactPhone,
            notificationEmail: this.notificationEmail,
            useCaseCategories: this.useCaseCategories,
            useCaseSummary: this.useCaseSummary,
            productionMessageSample: this.productionMessageSample,
            optInImageUrls: this.optInImageUrls,
            optInType: this.optInType,
            messageVolume: this.messageVolume,
            additionalInformation: this.additionalInformation,
            tollfreePhoneNumberSid: this.tollfreePhoneNumberSid,
            tollfreePhoneNumber: this.tollfreePhoneNumber,
            status: this.status,
            url: this.url,
            rejectionReason: this.rejectionReason,
            errorCode: this.errorCode,
            editExpiration: this.editExpiration,
            editAllowed: this.editAllowed,
            businessRegistrationNumber: this.businessRegistrationNumber,
            businessRegistrationAuthority: this.businessRegistrationAuthority,
            businessRegistrationCountry: this.businessRegistrationCountry,
            businessType: this.businessType,
            businessRegistrationPhoneNumber: this.businessRegistrationPhoneNumber,
            doingBusinessAs: this.doingBusinessAs,
            optInConfirmationMessage: this.optInConfirmationMessage,
            helpMessageSample: this.helpMessageSample,
            privacyPolicyUrl: this.privacyPolicyUrl,
            termsAndConditionsUrl: this.termsAndConditionsUrl,
            ageGatedContent: this.ageGatedContent,
            optInKeywords: this.optInKeywords,
            rejectionReasons: this.rejectionReasons,
            resourceLinks: this.resourceLinks,
            externalReferenceId: this.externalReferenceId
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.TollfreeVerificationInstance = TollfreeVerificationInstance;
function TollfreeVerificationListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new TollfreeVerificationContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Tollfree/Verifications`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["businessName"] === null || params["businessName"] === undefined) {
            throw new Error("Required parameter \"params['businessName']\" missing.");
        }
        if (params["businessWebsite"] === null || params["businessWebsite"] === undefined) {
            throw new Error("Required parameter \"params['businessWebsite']\" missing.");
        }
        if (params["notificationEmail"] === null || params["notificationEmail"] === undefined) {
            throw new Error("Required parameter \"params['notificationEmail']\" missing.");
        }
        if (params["useCaseCategories"] === null || params["useCaseCategories"] === undefined) {
            throw new Error("Required parameter \"params['useCaseCategories']\" missing.");
        }
        if (params["useCaseSummary"] === null || params["useCaseSummary"] === undefined) {
            throw new Error("Required parameter \"params['useCaseSummary']\" missing.");
        }
        if (params["productionMessageSample"] === null || params["productionMessageSample"] === undefined) {
            throw new Error("Required parameter \"params['productionMessageSample']\" missing.");
        }
        if (params["optInImageUrls"] === null || params["optInImageUrls"] === undefined) {
            throw new Error("Required parameter \"params['optInImageUrls']\" missing.");
        }
        if (params["optInType"] === null || params["optInType"] === undefined) {
            throw new Error("Required parameter \"params['optInType']\" missing.");
        }
        if (params["messageVolume"] === null || params["messageVolume"] === undefined) {
            throw new Error("Required parameter \"params['messageVolume']\" missing.");
        }
        if (params["tollfreePhoneNumberSid"] === null || params["tollfreePhoneNumberSid"] === undefined) {
            throw new Error("Required parameter \"params['tollfreePhoneNumberSid']\" missing.");
        }
        let data = {};
        data["BusinessName"] = params["businessName"];
        data["BusinessWebsite"] = params["businessWebsite"];
        data["NotificationEmail"] = params["notificationEmail"];
        data["UseCaseCategories"] = serialize.map(params["useCaseCategories"], (e)=>e);
        data["UseCaseSummary"] = params["useCaseSummary"];
        data["ProductionMessageSample"] = params["productionMessageSample"];
        data["OptInImageUrls"] = serialize.map(params["optInImageUrls"], (e)=>e);
        data["OptInType"] = params["optInType"];
        data["MessageVolume"] = params["messageVolume"];
        data["TollfreePhoneNumberSid"] = params["tollfreePhoneNumberSid"];
        if (params["customerProfileSid"] !== undefined) data["CustomerProfileSid"] = params["customerProfileSid"];
        if (params["businessStreetAddress"] !== undefined) data["BusinessStreetAddress"] = params["businessStreetAddress"];
        if (params["businessStreetAddress2"] !== undefined) data["BusinessStreetAddress2"] = params["businessStreetAddress2"];
        if (params["businessCity"] !== undefined) data["BusinessCity"] = params["businessCity"];
        if (params["businessStateProvinceRegion"] !== undefined) data["BusinessStateProvinceRegion"] = params["businessStateProvinceRegion"];
        if (params["businessPostalCode"] !== undefined) data["BusinessPostalCode"] = params["businessPostalCode"];
        if (params["businessCountry"] !== undefined) data["BusinessCountry"] = params["businessCountry"];
        if (params["additionalInformation"] !== undefined) data["AdditionalInformation"] = params["additionalInformation"];
        if (params["businessContactFirstName"] !== undefined) data["BusinessContactFirstName"] = params["businessContactFirstName"];
        if (params["businessContactLastName"] !== undefined) data["BusinessContactLastName"] = params["businessContactLastName"];
        if (params["businessContactEmail"] !== undefined) data["BusinessContactEmail"] = params["businessContactEmail"];
        if (params["businessContactPhone"] !== undefined) data["BusinessContactPhone"] = params["businessContactPhone"];
        if (params["externalReferenceId"] !== undefined) data["ExternalReferenceId"] = params["externalReferenceId"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new TollfreeVerificationInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        if (params["tollfreePhoneNumberSid"] !== undefined) data["TollfreePhoneNumberSid"] = params["tollfreePhoneNumberSid"];
        if (params["status"] !== undefined) data["Status"] = params["status"];
        if (params["externalReferenceId"] !== undefined) data["ExternalReferenceId"] = params["externalReferenceId"];
        if (params["includeSubAccounts"] !== undefined) data["IncludeSubAccounts"] = serialize.bool(params["includeSubAccounts"]);
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new TollfreeVerificationPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new TollfreeVerificationPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class TollfreeVerificationPage extends Page_1.default {
    /**
     * Initialize the TollfreeVerificationPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of TollfreeVerificationInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new TollfreeVerificationInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.TollfreeVerificationPage = TollfreeVerificationPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/usecase.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UsecaseInstance = void 0;
exports.UsecaseListInstance = UsecaseListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function UsecaseListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Services/Usecases`;
    instance.fetch = function fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new UsecaseInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class UsecaseInstance {
    constructor(_version, payload){
        this._version = _version;
        this.usecases = payload.usecases;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            usecases: this.usecases
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.UsecaseInstance = UsecaseInstance;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/V1.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const brandRegistration_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/brandRegistration.js [app-rsc] (ecmascript)");
const deactivations_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/deactivations.js [app-rsc] (ecmascript)");
const domainCerts_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/domainCerts.js [app-rsc] (ecmascript)");
const domainConfig_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/domainConfig.js [app-rsc] (ecmascript)");
const domainConfigMessagingService_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/domainConfigMessagingService.js [app-rsc] (ecmascript)");
const externalCampaign_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/externalCampaign.js [app-rsc] (ecmascript)");
const linkshorteningMessagingService_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/linkshorteningMessagingService.js [app-rsc] (ecmascript)");
const linkshorteningMessagingServiceDomainAssociation_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/linkshorteningMessagingServiceDomainAssociation.js [app-rsc] (ecmascript)");
const requestManagedCert_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/requestManagedCert.js [app-rsc] (ecmascript)");
const service_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/service.js [app-rsc] (ecmascript)");
const tollfreeVerification_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/tollfreeVerification.js [app-rsc] (ecmascript)");
const usecase_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v1/usecase.js [app-rsc] (ecmascript)");
class V1 extends Version_1.default {
    /**
     * Initialize the V1 version of Messaging
     *
     * @param domain - The Twilio (Twilio.Messaging) domain
     */ constructor(domain){
        super(domain, "v1");
    }
    /** Getter for brandRegistrations resource */ get brandRegistrations() {
        this._brandRegistrations = this._brandRegistrations || (0, brandRegistration_1.BrandRegistrationListInstance)(this);
        return this._brandRegistrations;
    }
    /** Getter for deactivations resource */ get deactivations() {
        this._deactivations = this._deactivations || (0, deactivations_1.DeactivationsListInstance)(this);
        return this._deactivations;
    }
    /** Getter for domainCerts resource */ get domainCerts() {
        this._domainCerts = this._domainCerts || (0, domainCerts_1.DomainCertsListInstance)(this);
        return this._domainCerts;
    }
    /** Getter for domainConfig resource */ get domainConfig() {
        this._domainConfig = this._domainConfig || (0, domainConfig_1.DomainConfigListInstance)(this);
        return this._domainConfig;
    }
    /** Getter for domainConfigMessagingService resource */ get domainConfigMessagingService() {
        this._domainConfigMessagingService = this._domainConfigMessagingService || (0, domainConfigMessagingService_1.DomainConfigMessagingServiceListInstance)(this);
        return this._domainConfigMessagingService;
    }
    /** Getter for externalCampaign resource */ get externalCampaign() {
        this._externalCampaign = this._externalCampaign || (0, externalCampaign_1.ExternalCampaignListInstance)(this);
        return this._externalCampaign;
    }
    /** Getter for linkshorteningMessagingService resource */ get linkshorteningMessagingService() {
        this._linkshorteningMessagingService = this._linkshorteningMessagingService || (0, linkshorteningMessagingService_1.LinkshorteningMessagingServiceListInstance)(this);
        return this._linkshorteningMessagingService;
    }
    /** Getter for linkshorteningMessagingServiceDomainAssociation resource */ get linkshorteningMessagingServiceDomainAssociation() {
        this._linkshorteningMessagingServiceDomainAssociation = this._linkshorteningMessagingServiceDomainAssociation || (0, linkshorteningMessagingServiceDomainAssociation_1.LinkshorteningMessagingServiceDomainAssociationListInstance)(this);
        return this._linkshorteningMessagingServiceDomainAssociation;
    }
    /** Getter for requestManagedCert resource */ get requestManagedCert() {
        this._requestManagedCert = this._requestManagedCert || (0, requestManagedCert_1.RequestManagedCertListInstance)(this);
        return this._requestManagedCert;
    }
    /** Getter for services resource */ get services() {
        this._services = this._services || (0, service_1.ServiceListInstance)(this);
        return this._services;
    }
    /** Getter for tollfreeVerifications resource */ get tollfreeVerifications() {
        this._tollfreeVerifications = this._tollfreeVerifications || (0, tollfreeVerification_1.TollfreeVerificationListInstance)(this);
        return this._tollfreeVerifications;
    }
    /** Getter for usecases resource */ get usecases() {
        this._usecases = this._usecases || (0, usecase_1.UsecaseListInstance)(this);
        return this._usecases;
    }
}
exports.default = V1;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v2/channelsSender.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ChannelsSenderPage = exports.ChannelsSenderInstance = exports.ChannelsSenderContextImpl = exports.MessagingV2RcsComplianceResponse = exports.MessagingV2RcsComplianceCountryResponse = exports.MessagingV2RcsCarrier = exports.MessagingV2ChannelsSenderWebhook = exports.MessagingV2ChannelsSenderRequestsUpdate = exports.MessagingV2ChannelsSenderRequestsCreate = exports.MessagingV2ChannelsSenderProperties = exports.MessagingV2ChannelsSenderProfileGenericResponseWebsites = exports.MessagingV2ChannelsSenderProfileGenericResponsePhoneNumbers = exports.MessagingV2ChannelsSenderProfileGenericResponseEmails = exports.MessagingV2ChannelsSenderProfileGenericResponse = exports.MessagingV2ChannelsSenderProfile = exports.MessagingV2ChannelsSenderOfflineReasonsItems = exports.MessagingV2ChannelsSenderConfiguration = void 0;
exports.ChannelsSenderListInstance = ChannelsSenderListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const Page_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Page.js [app-rsc] (ecmascript)"));
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
const utility_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/utility.js [app-rsc] (ecmascript)");
/**
 * The configuration settings for creating a sender.
 */ class MessagingV2ChannelsSenderConfiguration {
}
exports.MessagingV2ChannelsSenderConfiguration = MessagingV2ChannelsSenderConfiguration;
class MessagingV2ChannelsSenderOfflineReasonsItems {
}
exports.MessagingV2ChannelsSenderOfflineReasonsItems = MessagingV2ChannelsSenderOfflineReasonsItems;
/**
 * The profile information for the sender.
 */ class MessagingV2ChannelsSenderProfile {
}
exports.MessagingV2ChannelsSenderProfile = MessagingV2ChannelsSenderProfile;
/**
 * The profile information for the sender.
 */ class MessagingV2ChannelsSenderProfileGenericResponse {
}
exports.MessagingV2ChannelsSenderProfileGenericResponse = MessagingV2ChannelsSenderProfileGenericResponse;
class MessagingV2ChannelsSenderProfileGenericResponseEmails {
}
exports.MessagingV2ChannelsSenderProfileGenericResponseEmails = MessagingV2ChannelsSenderProfileGenericResponseEmails;
class MessagingV2ChannelsSenderProfileGenericResponsePhoneNumbers {
}
exports.MessagingV2ChannelsSenderProfileGenericResponsePhoneNumbers = MessagingV2ChannelsSenderProfileGenericResponsePhoneNumbers;
class MessagingV2ChannelsSenderProfileGenericResponseWebsites {
}
exports.MessagingV2ChannelsSenderProfileGenericResponseWebsites = MessagingV2ChannelsSenderProfileGenericResponseWebsites;
/**
 * The additional properties for the sender.
 */ class MessagingV2ChannelsSenderProperties {
}
exports.MessagingV2ChannelsSenderProperties = MessagingV2ChannelsSenderProperties;
class MessagingV2ChannelsSenderRequestsCreate {
}
exports.MessagingV2ChannelsSenderRequestsCreate = MessagingV2ChannelsSenderRequestsCreate;
class MessagingV2ChannelsSenderRequestsUpdate {
}
exports.MessagingV2ChannelsSenderRequestsUpdate = MessagingV2ChannelsSenderRequestsUpdate;
/**
 * The configuration settings for webhooks.
 */ class MessagingV2ChannelsSenderWebhook {
}
exports.MessagingV2ChannelsSenderWebhook = MessagingV2ChannelsSenderWebhook;
class MessagingV2RcsCarrier {
}
exports.MessagingV2RcsCarrier = MessagingV2RcsCarrier;
class MessagingV2RcsComplianceCountryResponse {
}
exports.MessagingV2RcsComplianceCountryResponse = MessagingV2RcsComplianceCountryResponse;
/**
 * The KYC compliance information. This section consists of response to the request launch.
 */ class MessagingV2RcsComplianceResponse {
}
exports.MessagingV2RcsComplianceResponse = MessagingV2RcsComplianceResponse;
class ChannelsSenderContextImpl {
    constructor(_version, sid){
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(sid)) {
            throw new Error("Parameter 'sid' is not valid.");
        }
        this._solution = {
            sid
        };
        this._uri = `/Channels/Senders/${sid}`;
    }
    remove(callback) {
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.remove({
            uri: instance._uri,
            method: "delete",
            headers
        });
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    fetch(callback) {
        const headers = {};
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ChannelsSenderInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    update(params, headers, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        } else {
            params = params || {};
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.update({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ChannelsSenderInstance(operationVersion, payload, instance._solution.sid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ChannelsSenderContextImpl = ChannelsSenderContextImpl;
class ChannelsSenderInstance {
    constructor(_version, payload, sid){
        this._version = _version;
        this.sid = payload.sid;
        this.status = payload.status;
        this.senderId = payload.sender_id;
        this.configuration = payload.configuration;
        this.webhook = payload.webhook;
        this.profile = payload.profile;
        this.properties = payload.properties;
        this.offlineReasons = payload.offline_reasons;
        this.compliance = payload.compliance;
        this.url = payload.url;
        this._solution = {
            sid: sid || this.sid
        };
    }
    get _proxy() {
        this._context = this._context || new ChannelsSenderContextImpl(this._version, this._solution.sid);
        return this._context;
    }
    /**
     * Remove a ChannelsSenderInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed boolean
     */ remove(callback) {
        return this._proxy.remove(callback);
    }
    /**
     * Fetch a ChannelsSenderInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed ChannelsSenderInstance
     */ fetch(callback) {
        return this._proxy.fetch(callback);
    }
    update(params, callback) {
        return this._proxy.update(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            sid: this.sid,
            status: this.status,
            senderId: this.senderId,
            configuration: this.configuration,
            webhook: this.webhook,
            profile: this.profile,
            properties: this.properties,
            offlineReasons: this.offlineReasons,
            compliance: this.compliance,
            url: this.url
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ChannelsSenderInstance = ChannelsSenderInstance;
function ChannelsSenderListInstance(version) {
    const instance = (sid)=>instance.get(sid);
    instance.get = function get(sid) {
        return new ChannelsSenderContextImpl(version, sid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Channels/Senders`;
    instance.create = function create(params, headers, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        let data = {};
        data = params;
        if (headers === null || headers === undefined) {
            headers = {};
        }
        headers["Content-Type"] = "application/json";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ChannelsSenderInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.page = function page(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["channel"] === null || params["channel"] === undefined) {
            throw new Error("Required parameter \"params['channel']\" missing.");
        }
        let data = {};
        data["Channel"] = params["channel"];
        if (params["pageSize"] !== undefined) data["PageSize"] = params["pageSize"];
        if (params.pageNumber !== undefined) data["Page"] = params.pageNumber;
        if (params.pageToken !== undefined) data["PageToken"] = params.pageToken;
        const headers = {};
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.page({
            uri: instance._uri,
            method: "get",
            params: data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new ChannelsSenderPage(operationVersion, payload, instance._solution));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.each = instance._version.each;
    instance.list = instance._version.list;
    instance.getPage = function getPage(targetUrl, callback) {
        const operationPromise = instance._version._domain.twilio.request({
            method: "get",
            uri: targetUrl
        });
        let pagePromise = operationPromise.then((payload)=>new ChannelsSenderPage(instance._version, payload, instance._solution));
        pagePromise = instance._version.setPromiseCallback(pagePromise, callback);
        return pagePromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class ChannelsSenderPage extends Page_1.default {
    /**
     * Initialize the ChannelsSenderPage
     *
     * @param version - Version of the resource
     * @param response - Response from the API
     * @param solution - Path solution
     */ constructor(version, response, solution){
        super(version, response, solution);
    }
    /**
     * Build an instance of ChannelsSenderInstance
     *
     * @param payload - Payload response from the API
     */ getInstance(payload) {
        return new ChannelsSenderInstance(this._version, payload);
    }
    [util_1.inspect.custom](depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.ChannelsSenderPage = ChannelsSenderPage;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v2/typingIndicator.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TypingIndicatorInstance = void 0;
exports.TypingIndicatorListInstance = TypingIndicatorListInstance;
const util_1 = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
const deserialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/deserialize.js [app-rsc] (ecmascript)");
const serialize = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/serialize.js [app-rsc] (ecmascript)");
function TypingIndicatorListInstance(version) {
    const instance = {};
    instance._version = version;
    instance._solution = {};
    instance._uri = `/Indicators/Typing.json`;
    instance.create = function create(params, callback) {
        if (params === null || params === undefined) {
            throw new Error('Required parameter "params" missing.');
        }
        if (params["channel"] === null || params["channel"] === undefined) {
            throw new Error("Required parameter \"params['channel']\" missing.");
        }
        if (params["messageId"] === null || params["messageId"] === undefined) {
            throw new Error("Required parameter \"params['messageId']\" missing.");
        }
        let data = {};
        data["channel"] = params["channel"];
        data["messageId"] = params["messageId"];
        const headers = {};
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        headers["Accept"] = "application/json";
        let operationVersion = version, operationPromise = operationVersion.create({
            uri: instance._uri,
            method: "post",
            data,
            headers
        });
        operationPromise = operationPromise.then((payload)=>new TypingIndicatorInstance(operationVersion, payload));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    };
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
class TypingIndicatorInstance {
    constructor(_version, payload){
        this._version = _version;
        this.success = payload.success;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */ toJSON() {
        return {
            success: this.success
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.TypingIndicatorInstance = TypingIndicatorInstance;
}),
"[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/V2.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Messaging
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */ var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const Version_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/base/Version.js [app-rsc] (ecmascript)"));
const channelsSender_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v2/channelsSender.js [app-rsc] (ecmascript)");
const typingIndicator_1 = __turbopack_context__.r("[project]/node_modules/.pnpm/twilio@5.10.2/node_modules/twilio/lib/rest/messaging/v2/typingIndicator.js [app-rsc] (ecmascript)");
class V2 extends Version_1.default {
    /**
     * Initialize the V2 version of Messaging
     *
     * @param domain - The Twilio (Twilio.Messaging) domain
     */ constructor(domain){
        super(domain, "v2");
    }
    /** Getter for channelsSenders resource */ get channelsSenders() {
        this._channelsSenders = this._channelsSenders || (0, channelsSender_1.ChannelsSenderListInstance)(this);
        return this._channelsSenders;
    }
    /** Getter for typingIndicator resource */ get typingIndicator() {
        this._typingIndicator = this._typingIndicator || (0, typingIndicator_1.TypingIndicatorListInstance)(this);
        return this._typingIndicator;
    }
}
exports.default = V2;
}),
];

//# sourceMappingURL=3ac84_twilio_lib_rest_messaging_d60a4f93._.js.map