{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/lib/actions.ts"],"sourcesContent":["// src/lib/actions.ts – Server actions for auth (best practice: Centralize mutations – efficient, type-safe; push back: Avoid client auth for cookie sync in Next.js; scales for quests/leaderboards with RLS)\n'use server'; // Logic: Marks as server-only (no client bundle bloat – optimizes for internal app with leads/calls)\nimport { PrismaClient } from '@prisma/client';  // Your DB client (async-safe in actions)\nimport { createServerClient } from '@supabase/ssr'; // SSR package (server-aware – auto-handles cookies via proxy; middleware refreshes post-redirect)\nimport axios from 'axios';  // API/fetch (lightweight – no fetch polyfill needed)\nimport * as cheerio from 'cheerio';  // HTML parse (fast/static – better than Puppeteer for Zillow; handles fallback)\nimport { cookies } from 'next/headers'; // Next utility (dynamic read for session check – set ignored in actions, as middleware handles)\nimport { redirect } from 'next/navigation'; // Server redirect (reliable – no client hacks; best for post-auth flow to dashboard quests)\nimport { z } from 'zod';  // Validation (type-safe inputs – prevents junk data in DB; no-brainer for prod)\nimport crypto from 'crypto';  // Built-in hash (no extra deps – for address_hash dedup)\nimport type { Database } from '../types/database.types'; // Types (autocompletes e.g., session.user.id for Prisma sync – now fixed via your gen)\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!; // Logic: Required env (fail-fast if missing – matches middleware guard)\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\n// Action: Server-side login (logic: FormData input for easy <form> binding; validates minimally, mutates, returns error or redirects – middleware syncs cookies on next request)\nexport async function signInAction(formData: FormData) {\n  const email = formData.get('email')?.toString() ?? ''; // Logic: Safe extraction (push back: Add zod here for prod validation – prevents invalid emails in rep onboarding; keeps it server-side for security)\n  const password = formData.get('password')?.toString() ?? '';\n  if (!email || !password) {\n    return { error: 'Email and password are required' }; // Logic: Early validation return (client will display – no redirect/reload; UX-friendly for form feedback)\n  }\n  if (password.length < 6) {\n    return { error: 'Password must be at least 6 characters' }; // Logic: Basic check (expand for strength in gamified app – e.g., tie to \"security quest\" badge)\n  }\n  const cookieStore = cookies(); // Logic: Next headers (dynamic – reads current request cookies for session check)\n  const supabase = createServerClient<Database>(supabaseUrl, supabaseAnonKey, {\n    cookies: {\n      getAll: () => cookieStore.getAll(), // Logic: Pass current cookies (enables session read – fixes undefined in middleware)\n      setAll: (cookiesToSet) => {\n        try {\n          cookiesToSet.forEach(({ name, value, options }) => cookieStore.set(name, value, options)); // Logic: Attempts set (succeeds in components; ignored in actions via catch – middleware refreshes on redirect)\n        } catch {\n          // The `set` method was called from a Server Action. Ignore – middleware will refresh session on next request.\n        }\n      },\n    },\n  });\n  const { error } = await supabase.auth.signInWithPassword({ email, password }); // Logic: Server mutation (hashes/JWT auto – no custom logic; ties to Supabase users table for RLS on quests)\n  if (error) {\n    return { error: error.message }; // Logic: Return error (client handles display – e.g., \"Invalid credentials\"; best for debugging without reload spam)\n  }\n  redirect('/dashboard'); // Logic: Success redirect (middleware now sees session – seamless to game HQ; change to '/hq' or dynamic based on rep level if needed)\n}\n\n// ... (Add the following at the end – new extraction action)\n\n// src/lib/actions.ts (continued) – Add extraction here – best practice: Centralize mutations for scalability; push back: API-first for compliance/TOS, scrape fallback with anti-bot headers – handles single/batch links, merges via Prisma upsert\nconst prisma = new PrismaClient();  // Global instance (efficient in Next.js actions – auto-closes)\n\nconst extractSchema = z.object({\n  links: z.string().min(1),\n  source: z.enum(['zillow', 'propstream', 'both']).default('zillow'),\n});  // Logic: Zod schema (validates formData – quick errors without DB hits)\n\n// Action: Extract and merge from links (logic: Parse batch → per-link extract → upsert properties (merge on hash) → create leads (link FK, award points) – returns results for UX feedback)\nexport async function extractDataAction(formData: FormData) {\n  const validated = extractSchema.safeParse({\n    links: formData.get('links')?.toString() ?? '',\n    source: formData.get('source')?.toString() ?? 'zillow',\n  });  // Logic: Safe parse (returns { success, data } or { error } – client displays errors)\n\n  if (!validated.success) {\n    return { error: validated.error.format() };  // Logic: Return zod errors (e.g., \"Links required\" – no redirect)\n  }\n\n  const { links, source } = validated.data;\n  const linkArray = links.split(',').map(l => l.trim()).filter(Boolean);  // Logic: Batch parse (handle \"url1, url2\" – scalable to 10-20 max for rates)\n  const results = [];  // Aggregate for response (e.g., [{ leadId, success: true }])\n\n  for (const link of linkArray) {  // Logic: Sequential for simplicity (push back: Promise.all for parallel if no rate limits; add try-catch per-link)\n    try {\n      const extracted = await extractFromLink(link, source);  // Helper below (API/scrape merge)\n      const address = extracted.address || '';  // Normalize (fallback to empty – validation later)\n      if (!address) throw new Error('No address extracted');\n\n      const addressHash = crypto.createHash('sha256').update(address.toLowerCase()).digest('hex');  // Logic: Dedup hash (case-insensitive – prevents \"123 Main\" vs \"123 main\" dups)\n\n      // Upsert properties (merge extracted data – no-brainer for updates from re-extracts)\n      const property = await prisma.properties.upsert({\n        where: { address_hash: addressHash },\n        update: {\n          // Logic: Selective merge (overwrite non-null extracted fields – preserves manual edits if needed)\n          city: extracted.city ?? undefined,\n          state: extracted.state ?? undefined,\n          zip_code: extracted.zip_code ?? undefined,\n          property_type: extracted.property_type ?? undefined,\n          bedrooms: extracted.bedrooms ?? undefined,\n          bathrooms: extracted.bathrooms ?? undefined,\n          square_feet: extracted.square_feet ?? undefined,\n          lot_size: extracted.lot_size ?? undefined,\n          year_built: extracted.year_built ?? undefined,\n          zestimate: extracted.zestimate ?? undefined,\n          avm: extracted.avm ?? undefined,\n          tax_assessed_value: extracted.tax_assessed_value ?? undefined,\n          distress_signals: extracted.distress_signals ?? undefined,\n          owner_occupied: extracted.owner_occupied ?? undefined,\n          metadata: extracted.metadata ?? undefined,  // Full raw (jsonb merge)\n        },\n        create: {\n          address,\n          city: extracted.city || '',\n          state: extracted.state || '',\n          zip_code: extracted.zip_code || '',\n          property_type: extracted.property_type || 'other',\n          bedrooms: extracted.bedrooms,\n          bathrooms: extracted.bathrooms,\n          square_feet: extracted.square_feet,\n          lot_size: extracted.lot_size,\n          year_built: extracted.year_built,\n          zestimate: extracted.zestimate,\n          avm: extracted.avm,\n          tax_assessed_value: extracted.tax_assessed_value,\n          distress_signals: extracted.distress_signals,\n          owner_occupied: extracted.owner_occupied,\n          metadata: extracted.metadata,  // e.g., { original_link: link, sources: [source] }\n          address_hash: addressHash,\n        },\n      });\n\n      // Create lead (link to property – assign to current user via session; award base points)\n      const cookieStore = cookies(); // Logic: Reuse your Supabase client setup for session fetch (consistent with signInAction)\n      const supabase = createServerClient<Database>(supabaseUrl, supabaseAnonKey, {\n        cookies: {\n          getAll: () => cookieStore.getAll(),\n          setAll: (cookiesToSet) => {\n            try {\n              cookiesToSet.forEach(({ name, value, options }) => cookieStore.set(name, value, options));\n            } catch {\n              // Ignore set in action\n            }\n          },\n        },\n      });\n      const { data: { session } } = await supabase.auth.getSession(); // Logic: Fetch session (async-safe – gets user ID for assigned_to)\n      if (!session?.user.id) {\n        return { error: 'No active session – login required for assignment' }; // Logic: Guard (push back: Or default to admin UUID for testing)\n      }\n\n      const lead = await prisma.leads.create({\n        data: {\n          properties_id: property.id,\n          lead_type: extracted.lead_type || 'owner',  // Infer from extract (e.g., seller lead)\n          first_name: extracted.first_name,\n          last_name: extracted.last_name,\n          phone: extracted.phone,\n          source: extracted.source || source,  // Track actual (e.g., 'zillow_api')\n          metadata: { original_link: link, extracted_data: extracted },  // Audit trail\n          assigned_to: session.user.id,  // From auth (ties to Profile)\n          points_earned: 10,  // Base for import (trigger more on status changes)\n        },\n      });\n\n      results.push({ leadId: lead.id, success: true });  // For client display (e.g., \"Imported lead X\")\n    } catch (error) {\n      results.push({ link, success: false, error: (error as Error).message });  // Per-link feedback\n    }\n  }\n\n  return { results };  // Logic: Return array (client loops to show success/errors – no full redirect for batch UX)\n}\n\n// Helper: Extract from single link (logic: Source switch → API or scrape → normalize output – expandable for Propstream)\nasync function extractFromLink(link: string, source: 'zillow' | 'propstream' | 'both') {\n  let data: Record<string, any> = { source, metadata: { link } };  // Base output (json-friendly)\n\n  if (source === 'zillow' || source === 'both') {\n    const zillowKey = process.env.ZILLOW_API_KEY;\n    if (zillowKey) {\n      // Logic: API preferred (compliance – e.g., Bridge API for records; adjust endpoint per your key/access)\n      try {\n        const response = await axios.get(`https://api.bridgeapi.io/v1/public-records/property?url=${encodeURIComponent(link)}`, {  // Example endpoint; check Zillow docs\n          headers: { 'X-RapidAPI-Key': zillowKey },  // Auth (rate-limit aware)\n        });\n        data = { ...data, ...response.data };  // Merge (e.g., { address, zestimate, bedrooms, ... })\n        data.source = 'zillow_api';  // Track for points (bonus for API vs scrape)\n      } catch {}  // Fallback to scrape on error\n    }\n\n    if (!data.address) {  // Scrape fallback (push back: Use proxies like BrightData if bans occur – not for prod volume)\n      const { data: html } = await axios.get(link, { headers: { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36' } });  // Anti-bot UA\n      const $ = cheerio.load(html);\n      // Parse selectors (customize per Zillow page – inspect element for stability; e.g., for homedetails page)\n      data.address = $('[data-testid=\"hdp-address\"]').text().trim() || '';\n      data.zestimate = $('.zestimate-value').text().replace(/[^0-9]/g, '') || null;  // Clean $ (parseInt later)\n      data.bedrooms = parseInt($('[data-testid=\"bed-bath-item\"]:first').text()) || null;\n      // ... Add more: bathrooms, square_feet, etc. (expand as needed – test with real links)\n      data.metadata.scrape_time = new Date().toISOString();  // Audit\n    }\n  }\n\n  if (source === 'propstream' || source === 'both') {\n    // Logic: No public API (stub for CSV upload – push back: Implement file input in form if needed; contact Propstream for integration)\n    // For now: Assume manual/link parse if possible (e.g., if link is Propstream export URL – rare)\n    data.avm = 0;  // Mock (replace with real if API unlocked)\n    data.distress_signals = { pre_foreclosure: false };  // Mock\n  }\n\n  return data;  // Normalized (e.g., { address: '123 Main', zestimate: 450000, ... })\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 438, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/.next-internal/server/app/auth/signin/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {$$RSC_SERVER_ACTION_0 as '40d92fdaace826a4b14baf5b30cd6ab04e268791d4'} from 'ACTIONS_MODULE0'\nexport {signInAction as '407a38d049055e57702bf7faa677f55debfed4039b'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 464, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/app/auth/signin/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/wraelen/wraelen-internal-boilerplate/src/app/auth/signin/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/wraelen/wraelen-internal-boilerplate/src/app/auth/signin/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wgBAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAqU,GAClW,mGACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 478, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/app/auth/signin/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/wraelen/wraelen-internal-boilerplate/src/app/auth/signin/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/wraelen/wraelen-internal-boilerplate/src/app/auth/signin/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wgBAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAiT,GAC9U,+EACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 492, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}