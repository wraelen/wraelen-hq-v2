{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/lib/actions.ts"],"sourcesContent":["// src/lib/actions.ts – Server actions for auth (best practice: Centralize mutations – efficient, type-safe; push back: Avoid client auth for cookie sync in Next.js; scales for quests/leaderboards with RLS)\n'use server';  // Logic: Marks as server-only (no client bundle bloat – optimizes for internal app with leads/calls)\n\nimport { createServerClient } from '@supabase/ssr';  // SSR package (server-aware – auto-handles cookies via proxy; middleware refreshes post-redirect)\nimport { cookies } from 'next/headers';  // Next utility (dynamic read for session check – set ignored in actions, as middleware handles)\nimport { redirect } from 'next/navigation';  // Server redirect (reliable – no client hacks; best for post-auth flow to dashboard quests)\nimport type { Database } from '../types/database.types';  // Types (autocompletes e.g., session.user.id for Prisma sync – now fixed via your gen)\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;  // Logic: Required env (fail-fast if missing – matches middleware guard)\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\n\n// Action: Server-side login (logic: FormData input for easy <form> binding; validates minimally, mutates, returns error or redirects – middleware syncs cookies on next request)\nexport async function signInAction(formData: FormData) {\n  const email = formData.get('email')?.toString() ?? '';  // Logic: Safe extraction (push back: Add zod here for prod validation – prevents invalid emails in rep onboarding; keeps it server-side for security)\n  const password = formData.get('password')?.toString() ?? '';\n\n  if (!email || !password) {\n    return { error: 'Email and password are required' };  // Logic: Early validation return (client will display – no redirect/reload; UX-friendly for form feedback)\n  }\n  if (password.length < 6) {\n    return { error: 'Password must be at least 6 characters' };  // Logic: Basic check (expand for strength in gamified app – e.g., tie to \"security quest\" badge)\n  }\n\n  const cookieStore = cookies();  // Logic: Next headers (dynamic – reads current request cookies for session check)\n  const supabase = createServerClient<Database>(supabaseUrl, supabaseAnonKey, {\n    cookies: {\n      getAll: () => cookieStore.getAll(),  // Logic: Pass current cookies (enables session read – fixes undefined in middleware)\n      setAll: (cookiesToSet) => {\n        try {\n          cookiesToSet.forEach(({ name, value, options }) => cookieStore.set(name, value, options));  // Logic: Attempts set (succeeds in components; ignored in actions via catch – middleware refreshes on redirect)\n        } catch {\n          // The `set` method was called from a Server Action. Ignore – middleware will refresh session on next request.\n        }\n      },\n    },\n  });\n\n  const { error } = await supabase.auth.signInWithPassword({ email, password });  // Logic: Server mutation (hashes/JWT auto – no custom logic; ties to Supabase users table for RLS on quests)\n\n  if (error) {\n    return { error: error.message };  // Logic: Return error (client handles display – e.g., \"Invalid credentials\"; best for debugging without reload spam)\n  }\n\n  redirect('/dashboard');  // Logic: Success redirect (middleware now sees session – seamless to game HQ; change to '/hq' or dynamic based on rep level if needed)\n}"],"names":[],"mappings":"AAAA,8MAA8M;;;;;;AAG9M,gjBAAqD,kGAAkG;AAAvJ;AACA,ipBAAyC,gGAAgG;AACzI,wuBAA6C,4FAA4F;AAAzI;;;;;;AAGA,MAAM,4FAAsD,wEAAwE;AACpI,MAAM;AAGC,eAAe,aAAa,QAAkB;IACnD,MAAM,QAAQ,SAAS,GAAG,CAAC,UAAU,cAAc,IAAK,sJAAsJ;IAC9M,MAAM,WAAW,SAAS,GAAG,CAAC,aAAa,cAAc;IAEzD,IAAI,CAAC,SAAS,CAAC,UAAU;QACvB,OAAO;YAAE,OAAO;QAAkC,GAAI,2GAA2G;IACnK;IACA,IAAI,SAAS,MAAM,GAAG,GAAG;QACvB,OAAO;YAAE,OAAO;QAAyC,GAAI,iGAAiG;IAChK;IAEA,MAAM,cAAc,IAAA,0YAAO,KAAK,kFAAkF;IAClH,MAAM,WAAW,IAAA,6VAAkB,EAAW,aAAa,iBAAiB;QAC1E,SAAS;YACP,QAAQ,IAAM,YAAY,MAAM;YAChC,QAAQ,CAAC;gBACP,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAAK,YAAY,GAAG,CAAC,MAAM,OAAO,WAAY,gHAAgH;gBAC9M,EAAE,OAAM;gBACN,8GAA8G;gBAChH;YACF;QACF;IACF;IAEA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,kBAAkB,CAAC;QAAE;QAAO;IAAS,IAAK,6GAA6G;IAE7L,IAAI,OAAO;QACT,OAAO;YAAE,OAAO,MAAM,OAAO;QAAC,GAAI,qHAAqH;IACzJ;IAEA,IAAA,icAAQ,EAAC,eAAgB,uIAAuI;AAClK;;;IAhCsB;;AAAA,+eAAA","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/.next-internal/server/app/auth/signin/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {$$RSC_SERVER_ACTION_0 as '40d92fdaace826a4b14baf5b30cd6ab04e268791d4'} from 'ACTIONS_MODULE0'\nexport {signInAction as '407a38d049055e57702bf7faa677f55debfed4039b'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/app/auth/signin/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/wraelen/wraelen-internal-boilerplate/src/app/auth/signin/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/wraelen/wraelen-internal-boilerplate/src/app/auth/signin/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wgBAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAqU,GAClW,mGACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///home/wraelen/wraelen/wraelen-internal-boilerplate/src/app/auth/signin/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/wraelen/wraelen-internal-boilerplate/src/app/auth/signin/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/wraelen/wraelen-internal-boilerplate/src/app/auth/signin/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wgBAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAiT,GAC9U,+EACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}