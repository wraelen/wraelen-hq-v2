{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/wraelen/wraelen-internal-boilerplate/src/lib/supabase/middleware.ts"],"sourcesContent":["// src/lib/supabase/middleware.ts – ssr middleware utility (best practice: Async-safe for cookies/headers in Next.js 15+ – fixes your error)\nimport { createServerClient } from '@supabase/ssr';\nimport { type NextRequest, NextResponse } from 'next/server';\n\nexport async function updateSession(request: NextRequest) {\n  let supabaseResponse = NextResponse.next({ request });  // Logic: Base response (mutable for cookies)\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() { return request.cookies.getAll(); },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value));  // Logic: Set on request (dev-safe)\n          supabaseResponse = NextResponse.next({ request });\n          cookiesToSet.forEach(({ name, value, options }) => supabaseResponse.cookies.set(name, value, options));  // Logic: Set on response (propagates to client)\n        },\n      },\n    }\n  );\n\n  const { data: { user } } = await supabase.auth.getUser();  // Logic: Await fetch (async-safe – fixes runtime)\n\n  // Redirect unauth (logic: Protect HQ – best for flow; expand with role check from Prisma)\n  if (!user && !request.nextUrl.pathname.startsWith('/auth')) {\n    const url = request.nextUrl.clone();\n    url.pathname = '/auth/signin';\n    return NextResponse.redirect(url);\n  }\n\n  return supabaseResponse;\n}"],"names":[],"mappings":"AAAA,4IAA4I;;;;;AAC5I;AAAA;AACA;AAAA;;;AAEO,eAAe,cAAc,OAAoB;IACtD,IAAI,mBAAmB,gcAAY,CAAC,IAAI,CAAC;QAAE;IAAQ,IAAK,6CAA6C;IACrG,MAAM,WAAW,IAAA,qWAAkB,sUAGjC;QACE,SAAS;YACP;gBAAW,OAAO,QAAQ,OAAO,CAAC,MAAM;YAAI;YAC5C,QAAO,YAAY;gBACjB,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAAK,QAAQ,OAAO,CAAC,GAAG,CAAC,MAAM,SAAU,mCAAmC;gBAC1H,mBAAmB,gcAAY,CAAC,IAAI,CAAC;oBAAE;gBAAQ;gBAC/C,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAAK,iBAAiB,OAAO,CAAC,GAAG,CAAC,MAAM,OAAO,WAAY,gDAAgD;YAC3J;QACF;IACF;IAGF,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO,IAAK,kDAAkD;IAE7G,0FAA0F;IAC1F,IAAI,CAAC,QAAQ,CAAC,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU;QAC1D,MAAM,MAAM,QAAQ,OAAO,CAAC,KAAK;QACjC,IAAI,QAAQ,GAAG;QACf,OAAO,gcAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,OAAO;AACT"}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/wraelen/wraelen-internal-boilerplate/src/middleware.ts"],"sourcesContent":["// middleware.ts – Auth middleware (edge-efficient; best practice: ssr updateSession for async-safe sessions in Next.js 15+)\nimport { type NextRequest } from 'next/server';\nimport { updateSession } from '@/lib/supabase/middleware';  // Added: Utility for ssr (see below – fixes cookies await)\n\nexport async function middleware(request: NextRequest) {\n  return await updateSession(request);  // Logic: Async update (handles session refresh/redirect – efficient for protected routes)\n}\n\nexport const config = {\n  matcher: [\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',  // Logic: Exclude static/auth (optimizes matcher)\n  ],\n};"],"names":[],"mappings":"AAAA,4HAA4H;;;;;;;AAE5H,6UAA4D,2DAA2D;;AAEhH,eAAe,WAAW,OAAoB;IACnD,OAAO,MAAM,IAAA,8MAAa,EAAC,UAAW,0FAA0F;AAClI;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;KACD;AACH"}}]
}