{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["// src/middleware.ts (new fileâ€”global auth guard for protected routes like /dashboard; redirects unauth to login; best practice for scale instead of per-page checks)\nimport { NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from './auth/[...nextauth]/route'; // Kept existing: Import auth config (stub if not set up yet; push back: Add Auth.js for secure roles/XP access)\n\nexport async function middleware(req) {\n  const session = await getServerSession(authOptions); // Fetch session in middleware (runs on all requests)\n  if (!session && req.nextUrl.pathname.startsWith('/dashboard')) { // Check for protected routes (e.g., /dashboard)\n    return NextResponse.redirect(new URL('/auth/signin', req.url)); // Redirect unauth to login\n  }\n  return NextResponse.next(); // Proceed if auth or not protected\n}\n\nexport const config = { matcher: ['/dashboard'] }; // Apply to /dashboard only"],"names":[],"mappings":"AAAA,qKAAqK;;;;;AACrK;AAAA;AACA;;;;;;;;;AAGO,eAAe,WAAW,GAAG;IAClC,MAAM,UAAU,MAAM,CAAA,GAAA,6IAAA,CAAA,mBAAgB,AAAD,EAAE,cAAc,qDAAqD;IAC1G,IAAI,CAAC,WAAW,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,eAAe;QAC7D,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,gBAAgB,IAAI,GAAG,IAAI,2BAA2B;IAC7F;IACA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI,IAAI,mCAAmC;AACjE;AAEO,MAAM,SAAS;IAAE,SAAS;QAAC;KAAa;AAAC,GAAG,2BAA2B"}}]
}